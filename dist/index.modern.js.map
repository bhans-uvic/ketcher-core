{"version":3,"file":"index.modern.js","sources":["../src/domain/constants/elementColor.ts","../src/domain/constants/elements.ts","../src/domain/constants/element.types.ts","../src/domain/constants/generics.ts","../src/domain/constants/image.ts","../src/domain/constants/multitailArrow.ts","../src/domain/entities/atomList.ts","../src/utilities/ifDef.ts","../src/utilities/tfx.ts","../src/utilities/KetcherLogger.ts","../src/utilities/runAsyncAction.ts","../src/utilities/b64toBlob.ts","../src/utilities/notifyRequestCompleted.ts","../src/utilities/SettingsManager.ts","../../../node_modules/w3c-keyname/index.js","../src/utilities/keynorm.ts","../src/utilities/shortcutsUtil.ts","../src/domain/services/struct/structService.types.ts","../src/utilities/clipboardUtils.ts","../src/utilities/getSvgFromDrawnStructures.tsx","../src/domain/entities/vec2.ts","../src/domain/entities/pile.ts","../src/domain/entities/BaseMicromoleculeEntity.ts","../src/domain/entities/bond.ts","../src/domain/entities/box2Abs.ts","../src/domain/helpers/scale.ts","../src/domain/helpers/stereoValidator.ts","../src/domain/helpers/functionalGroupsProvider.ts","../src/domain/helpers/saltsAndSolventsProvider.ts","../src/application/editor/shared/constants.ts","../src/domain/entities/sgroup.ts","../src/domain/entities/monomerMicromolecule.ts","../src/domain/entities/atom.ts","../src/domain/entities/fixedPrecision.ts","../src/domain/entities/fragment.ts","../src/domain/entities/functionalGroup.ts","../src/domain/entities/halfBond.ts","../src/domain/entities/loop.ts","../src/domain/entities/rgroup.ts","../src/domain/entities/rgroupAttachmentPoint.ts","../src/domain/entities/rxnArrow.ts","../src/domain/entities/rxnPlus.ts","../src/domain/entities/sgroupForest.ts","../src/domain/entities/simpleObject.ts","../src/domain/entities/pool.ts","../src/application/editor/actions/helpers.ts","../src/domain/entities/struct.ts","../src/domain/entities/text.ts","../src/domain/serializers/ket/helpers.ts","../src/domain/serializers/ket/toKet/rxnToKet.ts","../src/domain/serializers/ket/toKet/headerToKet.ts","../src/application/editor/editorSettings.ts","../src/application/editor/constants.ts","../src/application/render/notifyRenderComplete.ts","../src/application/editor/tools/Zoom.ts","../src/application/editor/shared/coordinates.ts","../src/domain/helpers/attachmentPointCalculations.ts","../src/domain/serializers/ket/toKet/moleculeToKet.ts","../src/domain/serializers/ket/fromKet/mergeFragmentsToStruct.ts","../src/domain/serializers/ket/fromKet/moleculeToStruct.ts","../src/domain/serializers/ket/toKet/prepare.ts","../src/domain/serializers/ket/toKet/rgroupToKet.ts","../src/domain/serializers/ket/fromKet/rgroupToStruct.ts","../src/domain/serializers/ket/fromKet/rxnToStruct.ts","../src/domain/serializers/ket/toKet/simpleObjectToKet.ts","../src/domain/serializers/ket/fromKet/simpleObjectToStruct.ts","../src/domain/serializers/ket/toKet/textToKet.ts","../src/domain/serializers/ket/fromKet/textToStruct.ts","../src/application/formatters/types/ket.ts","../src/domain/entities/Command.ts","../src/application/editor/editor.types.ts","../../../node_modules/subscription/index.js","../src/domain/entities/monomer-chains/types.ts","../src/application/editor/tools/types.ts","../src/application/editor/editorEvents.ts","../src/application/render/raphael-ext.ts","../src/application/render/restruct/visel.js","../src/application/render/restruct/reobject.ts","../src/application/render/restruct/generalEnumTypes.ts","../src/application/editor/shared/utils.ts","../src/application/render/options.ts","../src/application/render/render.types.ts","../src/application/render/util.ts","../src/application/render/pathBuilder.ts","../src/application/render/draw.ts","../src/domain/types/monomers.ts","../src/domain/types/entities.ts","../src/application/render/restruct/reatom.ts","../src/application/render/restruct/rebond.ts","../src/application/render/restruct/reenhancedFlag.ts","../src/application/render/restruct/refrag.js","../src/application/render/restruct/rergroup.js","../src/application/render/restruct/rerxnarrow.ts","../src/application/render/restruct/rerxnplus.js","../src/application/render/restruct/redatasgroupdata.js","../src/application/render/bracket-params.ts","../src/application/render/restruct/resgroup.ts","../src/application/render/restruct/resimpleObject.ts","../src/application/render/restruct/reloop.js","../src/application/render/restruct/retext.ts","../src/application/render/restruct/rergroupAttachmentPoint.ts","../src/application/render/restruct/reImage.ts","../src/domain/entities/multitailArrow.ts","../src/application/render/restruct/remultitailArrow.ts","../src/application/render/restruct/restruct.ts","../src/application/render/coordinateTransformation.ts","../src/application/render/scrollbar/scroll-offset.ts","../src/application/render/scrollbar/scrollbar.ts","../src/application/render/scrollbar/utils.ts","../src/application/render/scrollbar/scrollbar-vertical.ts","../src/application/render/scrollbar/scrollbar-horizontal.ts","../src/application/render/scrollbar/scrollbar-container.ts","../src/application/render/raphaelRender.ts","../src/application/editor/operations/base.ts","../src/application/editor/operations/OperationType.ts","../src/application/editor/operations/atom/AtomAttr.ts","../src/application/editor/operations/atom/AtomMove.ts","../src/application/editor/operations/atom/index.ts","../src/application/editor/operations/bond/BondAttr.ts","../src/application/editor/operations/bond/BondMove.ts","../src/application/editor/operations/bond/index.ts","../src/application/editor/operations/CanvasLoad.ts","../src/application/editor/operations/descriptors.ts","../src/application/editor/operations/EnhancedFlagMove.ts","../src/application/editor/operations/ifThen.ts","../src/application/editor/operations/fragment.ts","../src/application/editor/operations/fragmentStereoAtom.ts","../src/application/editor/operations/FragmentStereoFlag.ts","../src/application/editor/operations/calcimplicitH.ts","../src/application/editor/operations/LoopMove.ts","../src/application/editor/operations/image/imageMove.ts","../src/application/editor/operations/image/imageResize.ts","../src/application/editor/operations/image/imageUpsertDelete.ts","../src/application/editor/operations/multitailArrow/multitailArrowAddRemoveTail.ts","../src/application/editor/operations/multitailArrow/multitailArrowMove.ts","../src/application/editor/operations/multitailArrow/multitailArrowMoveHeadTail.ts","../src/application/editor/operations/multitailArrow/multitailArrowResizeTailHead.ts","../src/application/editor/operations/multitailArrow/multitailArrowUpsertDelete.ts","../src/application/editor/operations/rgroup/RGroupAttr.ts","../src/application/editor/operations/rgroup/RGroupFragment.ts","../src/application/editor/operations/rgroupAttachmentPoint/RGroupAttachmentPointAdd.ts","../src/application/editor/operations/rgroupAttachmentPoint/RGroupAttachmentPointRemove.ts","../src/application/editor/operations/rxn/RxnArrowMove.ts","../src/application/editor/operations/rxn/RxnArrowRotate.ts","../src/application/editor/operations/rxn/RxnArrowResize.ts","../src/application/editor/operations/rxn/plus/RxnPlusMove.ts","../src/application/editor/operations/rxn/plus/index.ts","../src/application/editor/operations/rxn/index.ts","../src/application/editor/operations/simpleObject.ts","../src/application/editor/operations/sgroup/sgroupAtom.ts","../src/application/editor/operations/sgroup/SGroupAttr.ts","../src/application/editor/operations/sgroup/SGroupDataMove.ts","../src/application/editor/operations/sgroup/sgroupHierarchy.ts","../src/application/editor/operations/sgroup/sgroupAttachmentPoints.ts","../src/application/editor/operations/sgroup/index.ts","../src/application/editor/operations/Text/TextCreateDelete.ts","../src/application/editor/operations/Text/TextUpdate.ts","../src/application/editor/operations/Text/TextMove.ts","../src/application/render/renderers/BaseRenderer.ts","../src/application/render/renderers/sequence/BaseSequenceRenderer.ts","../src/domain/entities/DrawingEntity.ts","../src/domain/entities/BaseBond.ts","../src/domain/entities/MonomerToAtomBond.ts","../src/domain/AttachmentPoint.ts","../src/application/render/renderers/BaseMonomerRenderer.ts","../src/application/formatters/supportedFormatProperties.ts","../src/application/formatters/formatProperties.ts","../src/application/formatters/structFormatter.types.ts","../src/application/formatters/ketFormatter.ts","../src/application/formatters/smilesFormatter.ts","../src/application/formatters/serverFormatter.ts","../src/application/formatters/molfileV2000Formatter.ts","../src/application/formatters/formatterFactory.ts","../src/application/formatters/identifyStructFormat.ts","../src/application/formatters/constants.ts","../src/application/render/renderers/constants.ts","../src/utilities/monomers.ts","../src/application/render/renderers/ChemRenderer.ts","../src/application/render/renderers/PeptideRenderer.ts","../src/domain/entities/HydrogenBond.ts","../src/domain/entities/BaseMonomer.ts","../src/domain/entities/monomer-chains/BaseSubChain.ts","../src/domain/entities/monomer-chains/ChemSubChain.ts","../src/domain/entities/monomer-chains/PhosphateSubChain.ts","../src/domain/entities/monomer-chains/RnaSubChain.ts","../src/domain/entities/Phosphate.ts","../src/domain/entities/Sugar.ts","../src/domain/entities/PolymerBond.ts","../src/domain/helpers/monomers.ts","../src/domain/entities/RNABase.ts","../src/domain/entities/monomer-chains/PeptideSubChain.ts","../src/domain/entities/Peptide.ts","../src/domain/entities/Chem.ts","../src/domain/entities/UnsplitNucleotide.ts","../src/domain/entities/UnresolvedMonomer.ts","../src/domain/constants/monomers.ts","../src/application/render/renderers/PhosphateRenderer.ts","../src/application/render/renderers/SugarRenderer.ts","../src/application/render/renderers/RNABaseRenderer.ts","../src/application/render/renderers/UnresolvedMonomerRenderer.ts","../src/application/render/renderers/UnsplitNucleotideRenderer.ts","../src/domain/entities/AmbiguousMonomer.ts","../src/domain/entities/monomer-chains/EmptySubChain.ts","../src/domain/entities/EmptyMonomer.ts","../src/domain/PreviewAttachmentPoint.ts","../src/application/render/renderers/AmbiguousMonomerRenderer.ts","../src/domain/entities/AmbiguousMonomerSequenceNode.ts","../src/domain/entities/monomer-chains/Chain.ts","../src/domain/entities/monomer-chains/ChainsCollection.ts","../src/domain/entities/EmptySequenceNode.ts","../src/application/render/renderers/sequence/BaseSequenceItemRenderer.ts","../src/application/render/renderers/sequence/AmbiguousSequenceItemRenderer.ts","../src/application/render/renderers/sequence/SequenceNodeRendererFactory.ts","../src/application/render/renderers/sequence/PolymerBondSequenceRenderer.ts","../src/domain/helpers/rna.ts","../src/domain/entities/Nucleoside.ts","../src/application/render/renderers/sequence/BackBoneBondSequenceRenderer.ts","../src/application/editor/operations/polymerBond/index.ts","../src/application/utils.ts","../src/application/editor/operations/monomer/index.ts","../src/application/editor/operations/drawingEntity/index.ts","../src/application/editor/tools/RnaPreset.ts","../src/domain/entities/Nucleotide.ts","../src/domain/entities/canvas-matrix/Matrix.ts","../src/domain/entities/canvas-matrix/Connection.ts","../src/domain/entities/canvas-matrix/Cell.ts","../src/domain/entities/canvas-matrix/CanvasMatrix.ts","../src/application/editor/operations/modes/snake.ts","../src/domain/entities/CoreAtom.ts","../src/domain/entities/CoreBond.ts","../src/application/editor/operations/coreAtom/atom.ts","../src/application/editor/operations/coreBond/bond.ts","../src/application/editor/operations/monomerToAtomBond/monomerToAtomBond.ts","../src/application/editor/tools/Bond.ts","../src/domain/entities/DrawingEntitiesManager.ts","../src/application/editor/modes/BaseMode.ts","../src/application/editor/modes/FlexMode.ts","../src/domain/entities/MonomerSequenceNode.ts","../src/application/render/renderers/sequence/ui-controls/NewSequenceButton.ts","../src/application/editor/modes/SequenceMode.ts","../src/application/render/renderers/PolymerBondRenderer/FlexModePolymerBondRenderer.ts","../src/application/render/renderers/PolymerBondRenderer/SnakeModePolymerBondRenderer.ts","../src/application/render/renderers/PolymerBondRenderer/PolymerBondRendererFactory.ts","../src/application/render/renderers/AtomRenderer.ts","../src/application/render/renderers/BondRenderer.ts","../src/application/render/renderers/MonomerToAtomBondRenderer.ts","../src/application/render/renderers/RenderersManager.ts","../src/application/editor/modes/SnakeMode.ts","../src/application/editor/modes/types.ts","../src/application/editor/modes/index.ts","../src/application/editor/operations/modes/index.ts","../src/application/render/renderers/sequence/MonomerToAtomBondSequenceRenderer.ts","../src/application/render/renderers/sequence/SequenceRenderer.ts","../src/application/render/renderers/sequence/ChemSequenceItemRenderer.ts","../src/application/render/renderers/sequence/EmptySequenceItemRenderer.ts","../src/application/render/renderers/sequence/RNASequenceItemRenderer.ts","../src/application/render/renderers/sequence/NucleotideSequenceItemRenderer.ts","../src/application/render/renderers/sequence/NucleosideSequenceItemRenderer.ts","../src/application/render/renderers/sequence/PeptideSequenceItemRenderer.ts","../src/application/render/renderers/sequence/PhosphateSequenceItemRenderer.ts","../src/application/render/renderers/sequence/UnresolvedMonomerSequenceItemRenderer.ts","../src/application/render/renderers/sequence/UnsplitNucleotideSequenceItemRenderer.ts","../src/application/editor/operations/monomer/monomerFactory.ts","../src/application/editor/actions/action.ts","../src/application/editor/actions/aromaticFusing.ts","../src/application/editor/shared/closest.js","../src/application/editor/actions/utils.ts","../src/application/editor/actions/rgroup.ts","../src/application/editor/actions/sgroup.ts","../src/application/editor/actions/bond.ts","../src/application/editor/actions/atom.ts","../src/application/editor/actions/basic.ts","../src/application/editor/actions/chain.ts","../src/application/editor/actions/closelyFusing.ts","../src/application/editor/actions/fragment.ts","../src/application/editor/actions/rgroupAttachmentPoint.ts","../src/application/editor/actions/erase.ts","../src/application/editor/actions/paste.ts","../src/application/editor/actions/image.ts","../src/application/editor/actions/multitailArrow.ts","../src/application/editor/actions/reaction.ts","../src/application/editor/actions/rotate.ts","../src/application/editor/actions/simpleobject.ts","../src/application/editor/actions/template.ts","../src/application/editor/actions/text.ts","../src/application/editor/operations/highlight.ts","../src/application/editor/actions/highlight.ts","../src/application/editor/EditorHistory.ts","../src/application/editor/tools/Monomer.ts","../src/application/editor/tools/Erase.ts","../src/application/editor/tools/SelectRectangle.ts","../src/application/editor/tools/Clear.ts","../src/application/editor/tools/Hand.ts","../src/application/editor/tools/Tool.ts","../src/application/editor/tools/index.ts","../src/application/editor/index.ts","../src/application/render/renderStruct.ts","../src/application/editor/MacromoleculesConverter.ts","../src/application/render/view-model/HalfEdge.ts","../src/application/render/view-model/Loop.ts","../src/application/render/view-model/ViewModel.ts","../src/application/editor/Editor.ts","../src/domain/serializers/ket/fromKet/monomerToDrawingEntity.ts","../src/domain/serializers/ket/fromKet/polymerBondToDrawingEntity.ts","../src/domain/serializers/ket/multitailArrowsValidator.ts","../src/domain/serializers/ket/validate.ts","../src/domain/serializers/ket/toKet/imageToKet.ts","../src/domain/serializers/ket/fromKet/imageToStruct.ts","../src/domain/serializers/ket/toKet/multitailArrowToKet.ts","../src/domain/serializers/ket/fromKet/multitailArrowToStruct.ts","../src/domain/serializers/ket/ketSerializer.ts","../src/domain/serializers/mol/utils.js","../src/domain/serializers/mol/parseSGroup.js","../src/domain/serializers/mol/v2000.js","../src/domain/serializers/mol/v3000.js","../src/domain/serializers/mol/common.js","../src/domain/serializers/mol/molfile.ts","../src/domain/serializers/mol/molSerializer.ts","../src/domain/serializers/smi/cis_trans.js","../src/domain/serializers/smi/dfs.js","../src/domain/serializers/smi/stereocenters.js","../src/domain/serializers/smi/smiles.js","../src/domain/serializers/smi/smiSerializer.ts","../src/domain/serializers/sdf/sdfSerializer.ts","../src/domain/entities/image.ts","../src/domain/entities/highlight.ts","../src/domain/entities/sGroupAttachmentPoint.ts","../src/domain/entities/Axis.ts","../src/domain/entities/LinkerSequenceNode.ts","../src/infrastructure/services/helpers.ts","../src/infrastructure/services/struct/remoteStructService.ts","../src/infrastructure/services/struct/remoteStructServiceProvider.ts","../src/application/indigo.ts","../../../node_modules/events/events.js","../src/application/ketcher.types.ts","../src/application/ketcher.ts","../src/application/ketcherBuilder.ts"],"sourcesContent":["/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport type { ElementLabel } from './element.types';\n\ntype ElementColorType = {\n  [key in ElementLabel]: string;\n};\n\nexport const ElementColor: ElementColorType = {\n  H: '#000000',\n  He: '#89a1a1',\n  Li: '#bd77ed',\n  Be: '#8fbc00',\n  B: '#c18989',\n  C: '#000000',\n  N: '#304ff7',\n  O: '#ff0d0d',\n  F: '#78bc42',\n  Ne: '#80a2af',\n  Na: '#ab5cf2',\n  Mg: '#6fcd00',\n  Al: '#a99393',\n  Si: '#b29478',\n  P: '#ff8000',\n  S: '#c99a19',\n  Cl: '#1fd01f',\n  Ar: '#69acba',\n  K: '#8f40d4',\n  Ca: '#38e900',\n  Sc: '#999999',\n  Ti: '#979a9e',\n  V: '#99999e',\n  Cr: '#8a99c7',\n  Mn: '#9c7ac7',\n  Fe: '#e06633',\n  Co: '#d37e8e',\n  Ni: '#4ece4e',\n  Cu: '#c78033',\n  Zn: '#7d80b0',\n  Ga: '#bc8b8b',\n  Ge: '#668f8f',\n  As: '#b87ddd',\n  Se: '#e59100',\n  Br: '#a62929',\n  Kr: '#59b1c9',\n  Rb: '#702eb0',\n  Sr: '#00ff00',\n  Y: '#66afaf',\n  Zr: '#71abab',\n  Nb: '#67aeb4',\n  Mo: '#54b5b5',\n  Tc: '#3b9e9e',\n  Ru: '#248f8f',\n  Rh: '#0a7d8c',\n  Pd: '#006985',\n  Ag: '#9a9a9a',\n  Cd: '#b29764',\n  In: '#a67573',\n  Sn: '#668080',\n  Sb: '#9e63b5',\n  Te: '#d47a00',\n  I: '#940094',\n  Xe: '#429eb0',\n  Cs: '#57178f',\n  Ba: '#00c900',\n  La: '#5caed1',\n  Ce: '#9d9d7b',\n  Pr: '#8ca581',\n  Nd: '#84a984',\n  Pm: '#71b18a',\n  Sm: '#66b68e',\n  Eu: '#4ac298',\n  Gd: '#37cb9e',\n  Tb: '#28d1a4',\n  Dy: '#1bd7a8',\n  Ho: '#00e98f',\n  Er: '#00e675',\n  Tm: '#00d452',\n  Yb: '#00bf38',\n  Lu: '#00ab24',\n  Hf: '#47b3ec',\n  Ta: '#4da6ff',\n  W: '#2194d6',\n  Re: '#267dab',\n  Os: '#266696',\n  Ir: '#175487',\n  Pt: '#9898a3',\n  Au: '#c19e1c',\n  Hg: '#9797ac',\n  Tl: '#a6544d',\n  Pb: '#575961',\n  Bi: '#9e4fb5',\n  Po: '#ab5c00',\n  At: '#754f45',\n  Rn: '#428296',\n  Fr: '#420066',\n  Ra: '#007d00',\n  Ac: '#6aa2ec',\n  Th: '#00baff',\n  Pa: '#00a1ff',\n  U: '#008fff',\n  Np: '#0080ff',\n  Pu: '#006bff',\n  Am: '#545cf2',\n  Cm: '#785ce3',\n  Bk: '#8a4fe3',\n  Cf: '#a136d4',\n  Es: '#b31fd4',\n  // Need to fix colors for the elements below (c)\n  Fm: '#000000',\n  Md: '#000000',\n  No: '#000000',\n  Lr: '#000000',\n  Rf: '#47b3ec',\n  Db: '#4da6ff',\n  Sg: '#2194d6',\n  Bh: '#267dab',\n  Hs: '#266696',\n  Mt: '#175487',\n  Ds: '#9898a3',\n  Rg: '#c19e1c',\n  Cn: '#9797ac',\n  Nh: '#000000',\n  Fl: '#000000',\n  Mc: '#000000',\n  Lv: '#000000',\n  Ts: '#000000',\n  Og: '#000000',\n} as const;\n\ntype Keys = keyof typeof ElementColor;\nexport type AtomColor = typeof ElementColor[Keys];\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport type { Element } from './element.types';\n\nconst elementsArray: Array<Element> = [\n  {\n    number: 1,\n    label: 'H',\n    period: 1,\n    group: 1,\n    title: 'Hydrogen',\n    state: 'gas',\n    origin: 'primordial',\n    type: 'other-nonmetal',\n    mass: 1.00794,\n  },\n  {\n    number: 2,\n    label: 'He',\n    period: 1,\n    group: 8,\n    title: 'Helium',\n    state: 'gas',\n    origin: 'primordial',\n    type: 'noble',\n    mass: 4.0026022,\n  },\n  {\n    number: 3,\n    label: 'Li',\n    period: 2,\n    group: 1,\n    title: 'Lithium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'alkali',\n    mass: 6.94,\n  },\n  {\n    number: 4,\n    label: 'Be',\n    period: 2,\n    group: 2,\n    title: 'Beryllium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'alkaline-earth',\n    mass: 9.01218315,\n  },\n  {\n    number: 5,\n    label: 'B',\n    period: 2,\n    group: 3,\n    title: 'Boron',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'metalloid',\n    mass: 10.81,\n  },\n  {\n    number: 6,\n    label: 'C',\n    period: 2,\n    group: 4,\n    title: 'Carbon',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'other-nonmetal',\n    mass: 12.011,\n  },\n  {\n    number: 7,\n    label: 'N',\n    period: 2,\n    group: 5,\n    title: 'Nitrogen',\n    state: 'gas',\n    origin: 'primordial',\n    type: 'other-nonmetal',\n    mass: 14.007,\n  },\n  {\n    number: 8,\n    label: 'O',\n    period: 2,\n    group: 6,\n    leftH: true,\n    title: 'Oxygen',\n    state: 'gas',\n    origin: 'primordial',\n    type: 'other-nonmetal',\n    mass: 15.999,\n  },\n  {\n    number: 9,\n    label: 'F',\n    period: 2,\n    group: 7,\n    leftH: true,\n    title: 'Fluorine',\n    state: 'gas',\n    origin: 'primordial',\n    type: 'halogen',\n    mass: 18.9984031636,\n  },\n  {\n    number: 10,\n    label: 'Ne',\n    period: 2,\n    group: 8,\n    title: 'Neon',\n    state: 'gas',\n    origin: 'primordial',\n    type: 'noble',\n    mass: 20.17976,\n  },\n  {\n    number: 11,\n    label: 'Na',\n    period: 3,\n    group: 1,\n    title: 'Sodium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'alkali',\n    mass: 22.989769282,\n  },\n  {\n    number: 12,\n    label: 'Mg',\n    period: 3,\n    group: 2,\n    title: 'Magnesium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'alkaline-earth',\n    mass: 24.305,\n  },\n  {\n    number: 13,\n    label: 'Al',\n    period: 3,\n    group: 3,\n    title: 'Aluminium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'post-transition',\n    mass: 26.98153857,\n  },\n  {\n    number: 14,\n    label: 'Si',\n    period: 3,\n    group: 4,\n    title: 'Silicon',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'metalloid',\n    mass: 28.085,\n  },\n  {\n    number: 15,\n    label: 'P',\n    period: 3,\n    group: 5,\n    title: 'Phosphorus',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'other-nonmetal',\n    mass: 30.9737619985,\n  },\n  {\n    number: 16,\n    label: 'S',\n    period: 3,\n    group: 6,\n    leftH: true,\n    title: 'Sulfur',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'other-nonmetal',\n    mass: 32.06,\n  },\n  {\n    number: 17,\n    label: 'Cl',\n    period: 3,\n    group: 7,\n    leftH: true,\n    title: 'Chlorine',\n    state: 'gas',\n    origin: 'primordial',\n    type: 'halogen',\n    mass: 35.45,\n  },\n  {\n    number: 18,\n    label: 'Ar',\n    period: 3,\n    group: 8,\n    title: 'Argon',\n    state: 'gas',\n    origin: 'primordial',\n    type: 'noble',\n    mass: 39.9481,\n  },\n  {\n    number: 19,\n    label: 'K',\n    period: 4,\n    group: 1,\n    title: 'Potassium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'alkali',\n    mass: 39.09831,\n  },\n  {\n    number: 20,\n    label: 'Ca',\n    period: 4,\n    group: 2,\n    title: 'Calcium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'alkaline-earth',\n    mass: 40.0784,\n  },\n  {\n    number: 21,\n    label: 'Sc',\n    period: 4,\n    group: 3,\n    title: 'Scandium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 44.9559085,\n  },\n  {\n    number: 22,\n    label: 'Ti',\n    period: 4,\n    group: 4,\n    title: 'Titanium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 47.8671,\n  },\n  {\n    number: 23,\n    label: 'V',\n    period: 4,\n    group: 5,\n    title: 'Vanadium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 50.94151,\n  },\n  {\n    number: 24,\n    label: 'Cr',\n    period: 4,\n    group: 6,\n    title: 'Chromium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 51.99616,\n  },\n  {\n    number: 25,\n    label: 'Mn',\n    period: 4,\n    group: 7,\n    title: 'Manganese',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 54.9380443,\n  },\n  {\n    number: 26,\n    label: 'Fe',\n    period: 4,\n    group: 8,\n    title: 'Iron',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 55.8452,\n  },\n  {\n    number: 27,\n    label: 'Co',\n    period: 4,\n    group: 8,\n    title: 'Cobalt',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 58.9331944,\n  },\n  {\n    number: 28,\n    label: 'Ni',\n    period: 4,\n    group: 8,\n    title: 'Nickel',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 58.69344,\n  },\n  {\n    number: 29,\n    label: 'Cu',\n    period: 4,\n    group: 1,\n    title: 'Copper',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 63.5463,\n  },\n  {\n    number: 30,\n    label: 'Zn',\n    period: 4,\n    group: 2,\n    title: 'Zinc',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 65.382,\n  },\n  {\n    number: 31,\n    label: 'Ga',\n    period: 4,\n    group: 3,\n    title: 'Gallium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'post-transition',\n    mass: 69.7231,\n  },\n  {\n    number: 32,\n    label: 'Ge',\n    period: 4,\n    group: 4,\n    title: 'Germanium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'metalloid',\n    mass: 72.6308,\n  },\n  {\n    number: 33,\n    label: 'As',\n    period: 4,\n    group: 5,\n    title: 'Arsenic',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'metalloid',\n    mass: 74.9215956,\n  },\n  {\n    number: 34,\n    label: 'Se',\n    period: 4,\n    group: 6,\n    leftH: true,\n    title: 'Selenium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'other-nonmetal',\n    mass: 78.9718,\n  },\n  {\n    number: 35,\n    label: 'Br',\n    period: 4,\n    group: 7,\n    leftH: true,\n    title: 'Bromine',\n    state: 'liquid',\n    origin: 'primordial',\n    type: 'halogen',\n    mass: 79.904,\n  },\n  {\n    number: 36,\n    label: 'Kr',\n    period: 4,\n    group: 8,\n    title: 'Krypton',\n    state: 'gas',\n    origin: 'primordial',\n    type: 'noble',\n    mass: 83.7982,\n  },\n  {\n    number: 37,\n    label: 'Rb',\n    period: 5,\n    group: 1,\n    title: 'Rubidium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'alkali',\n    mass: 85.46783,\n  },\n  {\n    number: 38,\n    label: 'Sr',\n    period: 5,\n    group: 2,\n    title: 'Strontium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'alkaline-earth',\n    mass: 87.621,\n  },\n  {\n    number: 39,\n    label: 'Y',\n    period: 5,\n    group: 3,\n    title: 'Yttrium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 88.905842,\n  },\n  {\n    number: 40,\n    label: 'Zr',\n    period: 5,\n    group: 4,\n    title: 'Zirconium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 91.2242,\n  },\n  {\n    number: 41,\n    label: 'Nb',\n    period: 5,\n    group: 5,\n    title: 'Niobium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 92.906372,\n  },\n  {\n    number: 42,\n    label: 'Mo',\n    period: 5,\n    group: 6,\n    title: 'Molybdenum',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 95.951,\n  },\n  {\n    number: 43,\n    label: 'Tc',\n    period: 5,\n    group: 7,\n    title: 'Technetium',\n    state: 'solid',\n    origin: 'decay',\n    type: 'transition',\n    mass: 98,\n  },\n  {\n    number: 44,\n    label: 'Ru',\n    period: 5,\n    group: 8,\n    title: 'Ruthenium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 101.072,\n  },\n  {\n    number: 45,\n    label: 'Rh',\n    period: 5,\n    group: 8,\n    title: 'Rhodium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 102.905502,\n  },\n  {\n    number: 46,\n    label: 'Pd',\n    period: 5,\n    group: 8,\n    title: 'Palladium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 106.421,\n  },\n  {\n    number: 47,\n    label: 'Ag',\n    period: 5,\n    group: 1,\n    title: 'Silver',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 107.86822,\n  },\n  {\n    number: 48,\n    label: 'Cd',\n    period: 5,\n    group: 2,\n    title: 'Cadmium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 112.4144,\n  },\n  {\n    number: 49,\n    label: 'In', // 49\n    period: 5,\n    group: 3,\n    title: 'Indium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'post-transition',\n    mass: 114.8181,\n  },\n  {\n    number: 50,\n    label: 'Sn',\n    period: 5,\n    group: 4,\n    title: 'Tin',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'post-transition',\n    mass: 118.7107,\n  },\n  {\n    number: 51,\n    label: 'Sb',\n    period: 5,\n    group: 5,\n    title: 'Antimony',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'metalloid',\n    mass: 121.7601,\n  },\n  {\n    number: 52,\n    label: 'Te',\n    period: 5,\n    group: 6,\n    title: 'Tellurium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'metalloid',\n    mass: 127.603,\n  },\n  {\n    number: 53,\n    label: 'I',\n    period: 5,\n    group: 7,\n    leftH: true,\n    title: 'Iodine',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'halogen',\n    mass: 126.904473,\n  },\n  {\n    number: 54,\n    label: 'Xe',\n    period: 5,\n    group: 8,\n    title: 'Xenon',\n    state: 'gas',\n    origin: 'primordial',\n    type: 'noble',\n    mass: 131.2936,\n  },\n  {\n    number: 55,\n    label: 'Cs',\n    period: 6,\n    group: 1,\n    title: 'Caesium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'alkali',\n    mass: 132.905451966,\n  },\n  {\n    number: 56,\n    label: 'Ba',\n    period: 6,\n    group: 2,\n    title: 'Barium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'alkaline-earth',\n    mass: 137.3277,\n  },\n  {\n    number: 57,\n    label: 'La',\n    period: 6,\n    group: 3,\n    title: 'Lanthanum',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 138.905477,\n  },\n  {\n    number: 58,\n    label: 'Ce',\n    period: 6,\n    group: 3,\n    title: 'Cerium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 140.1161,\n  },\n  {\n    number: 59,\n    label: 'Pr',\n    period: 6,\n    group: 3,\n    title: 'Praseodymium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 140.907662,\n  },\n  {\n    number: 60,\n    label: 'Nd',\n    period: 6,\n    group: 3,\n    title: 'Neodymium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 144.2423,\n  },\n  {\n    number: 61,\n    label: 'Pm',\n    period: 6,\n    group: 3,\n    title: 'Promethium',\n    state: 'solid',\n    origin: 'decay',\n    type: 'lanthanide',\n    mass: 145,\n  },\n  {\n    number: 62,\n    label: 'Sm',\n    period: 6,\n    group: 3,\n    title: 'Samarium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 150.362,\n  },\n  {\n    number: 63,\n    label: 'Eu',\n    period: 6,\n    group: 3,\n    title: 'Europium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 151.9641,\n  },\n  {\n    number: 64,\n    label: 'Gd',\n    period: 6,\n    group: 3,\n    title: 'Gadolinium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 157.253,\n  },\n  {\n    number: 65,\n    label: 'Tb',\n    period: 6,\n    group: 3,\n    title: 'Terbium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 158.925352,\n  },\n  {\n    number: 66,\n    label: 'Dy',\n    period: 6,\n    group: 3,\n    title: 'Dysprosium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 162.5001,\n  },\n  {\n    number: 67,\n    label: 'Ho',\n    period: 6,\n    group: 3,\n    title: 'Holmium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 164.930332,\n  },\n  {\n    number: 68,\n    label: 'Er',\n    period: 6,\n    group: 3,\n    title: 'Erbium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 167.2593,\n  },\n  {\n    number: 69,\n    label: 'Tm',\n    period: 6,\n    group: 3,\n    title: 'Thulium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 168.934222,\n  },\n  {\n    number: 70,\n    label: 'Yb',\n    period: 6,\n    group: 3,\n    title: 'Ytterbium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 173.0451,\n  },\n  {\n    number: 71,\n    label: 'Lu',\n    period: 6,\n    group: 3,\n    title: 'Lutetium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'lanthanide',\n    mass: 174.96681,\n  },\n  {\n    number: 72,\n    label: 'Hf',\n    period: 6,\n    group: 4,\n    title: 'Hafnium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 178.492,\n  },\n  {\n    number: 73,\n    label: 'Ta',\n    period: 6,\n    group: 5,\n    title: 'Tantalum',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 180.947882,\n  },\n  {\n    number: 74,\n    label: 'W',\n    period: 6,\n    group: 6,\n    title: 'Tungsten',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 183.841,\n  },\n  {\n    number: 75,\n    label: 'Re',\n    period: 6,\n    group: 7,\n    title: 'Rhenium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 186.2071,\n  },\n  {\n    number: 76,\n    label: 'Os',\n    period: 6,\n    group: 8,\n    title: 'Osmium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 190.233,\n  },\n  {\n    number: 77,\n    label: 'Ir',\n    period: 6,\n    group: 8,\n    title: 'Iridium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 192.2173,\n  },\n  {\n    number: 78,\n    label: 'Pt',\n    period: 6,\n    group: 8,\n    title: 'Platinum',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 195.0849,\n  },\n  {\n    number: 79,\n    label: 'Au',\n    period: 6,\n    group: 1,\n    title: 'Gold',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 196.9665695,\n  },\n  {\n    number: 80,\n    label: 'Hg',\n    period: 6,\n    group: 2,\n    title: 'Mercury',\n    state: 'liquid',\n    origin: 'primordial',\n    type: 'transition',\n    mass: 200.5923,\n  },\n  {\n    number: 81,\n    label: 'Tl',\n    period: 6,\n    group: 3,\n    title: 'Thallium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'post-transition',\n    mass: 204.38,\n  },\n  {\n    number: 82,\n    label: 'Pb',\n    period: 6,\n    group: 4,\n    title: 'Lead',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'post-transition',\n    mass: 207.21,\n  },\n  {\n    number: 83,\n    label: 'Bi',\n    period: 6,\n    group: 5,\n    title: 'Bismuth',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'post-transition',\n    mass: 208.980401,\n  },\n  {\n    number: 84,\n    label: 'Po',\n    period: 6,\n    group: 6,\n    title: 'Polonium',\n    state: 'solid',\n    origin: 'decay',\n    type: 'metalloid',\n    mass: 209,\n  },\n  {\n    number: 85,\n    label: 'At',\n    period: 6,\n    group: 7,\n    title: 'Astatine',\n    state: 'solid',\n    origin: 'decay',\n    type: 'halogen',\n    mass: 210,\n  },\n  {\n    number: 86,\n    label: 'Rn',\n    period: 6,\n    group: 8,\n    title: 'Radon',\n    state: 'gas',\n    origin: 'decay',\n    type: 'noble',\n    mass: 222,\n  },\n  {\n    number: 87,\n    label: 'Fr',\n    period: 7,\n    group: 1,\n    title: 'Francium',\n    state: 'solid',\n    origin: 'decay',\n    type: 'alkali',\n    mass: 223,\n  },\n  {\n    number: 88,\n    label: 'Ra',\n    period: 7,\n    group: 2,\n    title: 'Radium',\n    state: 'solid',\n    origin: 'decay',\n    type: 'alkaline-earth',\n    mass: 226,\n  },\n  {\n    number: 89,\n    label: 'Ac',\n    period: 7,\n    group: 3,\n    title: 'Actinium',\n    state: 'solid',\n    origin: 'decay',\n    type: 'transition',\n    mass: 227,\n  },\n  {\n    number: 90,\n    label: 'Th',\n    period: 7,\n    group: 3,\n    title: 'Thorium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'actinide',\n    mass: 232.03774,\n  },\n  {\n    number: 91,\n    label: 'Pa',\n    period: 7,\n    group: 3,\n    title: 'Protactinium',\n    state: 'solid',\n    origin: 'decay',\n    type: 'actinide',\n    mass: 231.035882,\n  },\n  {\n    number: 92,\n    label: 'U',\n    period: 7,\n    group: 3,\n    title: 'Uranium',\n    state: 'solid',\n    origin: 'primordial',\n    type: 'actinide',\n    mass: 238.028913,\n  },\n  {\n    number: 93,\n    label: 'Np',\n    period: 7,\n    group: 3,\n    title: 'Neptunium',\n    state: 'solid',\n    origin: 'decay',\n    type: 'actinide',\n    mass: 237,\n  },\n  {\n    number: 94,\n    label: 'Pu',\n    period: 7,\n    group: 3,\n    title: 'Plutonium',\n    state: 'solid',\n    origin: 'decay',\n    type: 'actinide',\n    mass: 244,\n  },\n  {\n    number: 95,\n    label: 'Am',\n    period: 7,\n    group: 3,\n    title: 'Americium',\n    state: 'solid',\n    origin: 'synthetic',\n    type: 'actinide',\n    mass: 243,\n  },\n  {\n    number: 96,\n    label: 'Cm',\n    period: 7,\n    group: 3,\n    title: 'Curium',\n    state: 'solid',\n    origin: 'synthetic',\n    type: 'actinide',\n    mass: 247,\n  },\n  {\n    number: 97,\n    label: 'Bk',\n    period: 7,\n    group: 3,\n    title: 'Berkelium',\n    state: 'solid',\n    origin: 'synthetic',\n    type: 'actinide',\n    mass: 247,\n  },\n  {\n    number: 98,\n    label: 'Cf',\n    period: 7,\n    group: 3,\n    title: 'Californium',\n    state: 'solid',\n    origin: 'synthetic',\n    type: 'actinide',\n    mass: 251,\n  },\n  {\n    number: 99,\n    label: 'Es',\n    period: 7,\n    group: 3,\n    title: 'Einsteinium',\n    state: 'solid',\n    origin: 'synthetic',\n    type: 'actinide',\n    mass: 252,\n  },\n  {\n    number: 100,\n    label: 'Fm',\n    period: 7,\n    group: 3,\n    title: 'Fermium',\n    origin: 'synthetic',\n    type: 'actinide',\n    mass: 257,\n  },\n  {\n    number: 101,\n    label: 'Md',\n    period: 7,\n    group: 3,\n    title: 'Mendelevium',\n    origin: 'synthetic',\n    type: 'actinide',\n    mass: 258,\n  },\n  {\n    number: 102,\n    label: 'No',\n    period: 7,\n    group: 3,\n    title: 'Nobelium',\n    origin: 'synthetic',\n    type: 'actinide',\n    mass: 259,\n  },\n  {\n    number: 103,\n    label: 'Lr',\n    period: 7,\n    group: 3,\n    title: 'Lawrencium',\n    origin: 'synthetic',\n    type: 'actinide',\n    mass: 266,\n  },\n  {\n    number: 104,\n    label: 'Rf',\n    period: 7,\n    group: 4,\n    title: 'Rutherfordium',\n    origin: 'synthetic',\n    type: 'transition',\n    mass: 267,\n  },\n  {\n    number: 105,\n    label: 'Db',\n    period: 7,\n    group: 5,\n    title: 'Dubnium',\n    origin: 'synthetic',\n    type: 'transition',\n    mass: 268,\n  },\n  {\n    number: 106,\n    label: 'Sg',\n    period: 7,\n    group: 6,\n    title: 'Seaborgium',\n    origin: 'synthetic',\n    type: 'transition',\n    mass: 269,\n  },\n  {\n    number: 107,\n    label: 'Bh',\n    period: 7,\n    group: 7,\n    title: 'Bohrium',\n    origin: 'synthetic',\n    type: 'transition',\n    mass: 270,\n  },\n  {\n    number: 108,\n    label: 'Hs',\n    period: 7,\n    group: 8,\n    title: 'Hassium',\n    origin: 'synthetic',\n    type: 'transition',\n    mass: 269,\n  },\n  {\n    number: 109,\n    label: 'Mt',\n    period: 7,\n    group: 8,\n    title: 'Meitnerium',\n    origin: 'synthetic',\n    type: 'transition',\n    mass: 278,\n  },\n  {\n    number: 110,\n    label: 'Ds',\n    period: 7,\n    group: 8,\n    title: 'Darmstadtium',\n    origin: 'synthetic',\n    type: 'transition',\n    mass: 281,\n  },\n  {\n    number: 111,\n    label: 'Rg',\n    period: 7,\n    group: 1,\n    title: 'Roentgenium',\n    origin: 'synthetic',\n    type: 'transition',\n    mass: 282,\n  },\n  {\n    number: 112,\n    label: 'Cn',\n    period: 7,\n    group: 2,\n    title: 'Copernicium',\n    origin: 'synthetic',\n    type: 'transition',\n    mass: 285,\n  },\n  {\n    number: 113,\n    label: 'Nh',\n    period: 7,\n    group: 3,\n    title: 'Nihonium',\n    origin: 'synthetic',\n    type: 'post-transition',\n    mass: 286,\n  },\n  {\n    number: 114,\n    label: 'Fl',\n    period: 7,\n    group: 4,\n    title: 'Flerovium',\n    origin: 'synthetic',\n    type: 'post-transition',\n    mass: 289,\n  },\n  {\n    number: 115,\n    label: 'Mc',\n    period: 7,\n    group: 5,\n    title: 'Moscovium',\n    origin: 'synthetic',\n    type: 'post-transition',\n    mass: 289,\n  },\n  {\n    number: 116,\n    label: 'Lv',\n    period: 7,\n    group: 6,\n    title: 'Livermorium',\n    origin: 'synthetic',\n    type: 'post-transition',\n    mass: 293,\n  },\n  {\n    number: 117,\n    label: 'Ts',\n    period: 7,\n    group: 7,\n    title: 'Tennessine',\n    origin: 'synthetic',\n    type: 'halogen',\n    mass: 294,\n  },\n  {\n    number: 118,\n    label: 'Og',\n    period: 7,\n    group: 8,\n    title: 'Oganesson',\n    origin: 'synthetic',\n    type: 'noble',\n    mass: 294,\n  },\n];\n\nconst elementsMap = elementsArray.reduce((acc, element) => {\n  acc.set(element.label, element);\n  acc.set(element.number, element);\n  return acc;\n}, new Map<string | number, Element>());\n\nexport const Elements = {\n  get: (key: number | string): Element | undefined => elementsMap.get(key),\n  filter: (predicate: (element: Element) => boolean): Array<Element> => {\n    return elementsArray.filter(predicate);\n  },\n  getAll: () => [...elementsArray],\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nexport type ElementLabel =\n  | 'H'\n  | 'He'\n  | 'Li'\n  | 'Be'\n  | 'B'\n  | 'C'\n  | 'N'\n  | 'O'\n  | 'F'\n  | 'Ne'\n  | 'Na'\n  | 'Mg'\n  | 'Al'\n  | 'Si'\n  | 'P'\n  | 'S'\n  | 'Cl'\n  | 'Ar'\n  | 'K'\n  | 'Ca'\n  | 'Sc'\n  | 'Ti'\n  | 'V'\n  | 'Cr'\n  | 'Mn'\n  | 'Fe'\n  | 'Co'\n  | 'Ni'\n  | 'Cu'\n  | 'Zn'\n  | 'Ga'\n  | 'Ge'\n  | 'As'\n  | 'Se'\n  | 'Br'\n  | 'Kr'\n  | 'Rb'\n  | 'Sr'\n  | 'Y'\n  | 'Zr'\n  | 'Nb'\n  | 'Mo'\n  | 'Tc'\n  | 'Ru'\n  | 'Rh'\n  | 'Pd'\n  | 'Ag'\n  | 'Cd'\n  | 'In'\n  | 'Sn'\n  | 'Sb'\n  | 'Te'\n  | 'I'\n  | 'Xe'\n  | 'Cs'\n  | 'Ba'\n  | 'La'\n  | 'Ce'\n  | 'Pr'\n  | 'Nd'\n  | 'Pm'\n  | 'Sm'\n  | 'Eu'\n  | 'Gd'\n  | 'Tb'\n  | 'Dy'\n  | 'Ho'\n  | 'Er'\n  | 'Tm'\n  | 'Yb'\n  | 'Lu'\n  | 'Hf'\n  | 'Ta'\n  | 'W'\n  | 'Re'\n  | 'Os'\n  | 'Ir'\n  | 'Pt'\n  | 'Au'\n  | 'Hg'\n  | 'Tl'\n  | 'Pb'\n  | 'Bi'\n  | 'Po'\n  | 'At'\n  | 'Rn'\n  | 'Fr'\n  | 'Ra'\n  | 'Ac'\n  | 'Th'\n  | 'Pa'\n  | 'U'\n  | 'Np'\n  | 'Pu'\n  | 'Am'\n  | 'Cm'\n  | 'Bk'\n  | 'Cf'\n  | 'Es'\n  | 'Fm'\n  | 'Md'\n  | 'No'\n  | 'Lr'\n  | 'Rf'\n  | 'Db'\n  | 'Sg'\n  | 'Bh'\n  | 'Hs'\n  | 'Mt'\n  | 'Ds'\n  | 'Rg'\n  | 'Cn'\n  | 'Nh'\n  | 'Fl'\n  | 'Mc'\n  | 'Lv'\n  | 'Ts'\n  | 'Og';\n\nexport type Period = 1 | 2 | 3 | 4 | 5 | 6 | 7;\nexport type Group = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n\nexport interface Element {\n  number: number;\n  label: ElementLabel;\n  period: Period;\n  group: Group;\n  title: string;\n  state?: string;\n  origin: string;\n  type?: string;\n  mass: number;\n  leftH?: boolean;\n}\n\nexport enum AtomLabel {\n  Ac = 'Ac',\n  Ag = 'Ag',\n  Al = 'Al',\n  Am = 'Am',\n  Ar = 'Ar',\n  As = 'As',\n  At = 'At',\n  Au = 'Au',\n  B = 'B',\n  Ba = 'Ba',\n  Be = 'Be',\n  Bh = 'Bh',\n  Bi = 'Bi',\n  Bk = 'Bk',\n  Br = 'Br',\n  C = 'C',\n  Ca = 'Ca',\n  Cd = 'Cd',\n  Ce = 'Ce',\n  Cf = 'Cf',\n  Cl = 'Cl',\n  Cm = 'Cm',\n  Cn = 'Cn',\n  Co = 'Co',\n  Cr = 'Cr',\n  Cs = 'Cs',\n  Cu = 'Cu',\n  Db = 'Db',\n  Ds = 'Ds',\n  Dy = 'Dy',\n  Er = 'Er',\n  Es = 'Es',\n  Eu = 'Eu',\n  F = 'F',\n  Fe = 'Fe',\n  Fl = 'Fl',\n  Fm = 'Fm',\n  Fr = 'Fr',\n  Ga = 'Ga',\n  Gd = 'Gd',\n  Ge = 'Ge',\n  H = 'H',\n  He = 'He',\n  Hf = 'Hf',\n  Hg = 'Hg',\n  Ho = 'Ho',\n  Hs = 'Hs',\n  I = 'I',\n  In = 'In',\n  Ir = 'Ir',\n  K = 'K',\n  Kr = 'Kr',\n  La = 'La',\n  Li = 'Li',\n  Lr = 'Lr',\n  Lu = 'Lu',\n  Lv = 'Lv',\n  Mc = 'Mc',\n  Md = 'Md',\n  Mg = 'Mg',\n  Mn = 'Mn',\n  Mo = 'Mo',\n  Mt = 'Mt',\n  N = 'N',\n  Na = 'Na',\n  Nb = 'Nb',\n  Nd = 'Nd',\n  Ne = 'Ne',\n  Nh = 'Nh',\n  Ni = 'Ni',\n  No = 'No',\n  Np = 'Np',\n  O = 'O',\n  Og = 'Og',\n  Os = 'Os',\n  P = 'P',\n  Pa = 'Pa',\n  Pb = 'Pb',\n  Pd = 'Pd',\n  Pm = 'Pm',\n  Po = 'Po',\n  Pr = 'Pr',\n  Pt = 'Pt',\n  Pu = 'Pu',\n  Ra = 'Ra',\n  Rb = 'Rb',\n  Re = 'Re',\n  Rf = 'Rf',\n  Rg = 'Rg',\n  Rh = 'Rh',\n  Rn = 'Rn',\n  Ru = 'Ru',\n  S = 'S',\n  Sb = 'Sb',\n  Sc = 'Sc',\n  Se = 'Se',\n  Sg = 'Sg',\n  Si = 'Si',\n  Sm = 'Sm',\n  Sn = 'Sn',\n  Sr = 'Sr',\n  Ta = 'Ta',\n  Tb = 'Tb',\n  Tc = 'Tc',\n  Te = 'Te',\n  Th = 'Th',\n  Ti = 'Ti',\n  Tl = 'Tl',\n  Tm = 'Tm',\n  Ts = 'Ts',\n  U = 'U',\n  V = 'V',\n  W = 'W',\n  Xe = 'Xe',\n  Y = 'Y',\n  Yb = 'Yb',\n  Zn = 'Zn',\n  Zr = 'Zr',\n  // Query atoms\n  D = 'D',\n  T = 'T',\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nexport type GenItem = {\n  label: string;\n  description?: string;\n};\n\nexport type GenItemSet = {\n  items: GenItem[];\n  displayName?: string;\n};\n\nexport type GenGroup = {\n  itemSets: GenItemSet[];\n  title: string;\n};\n\nexport type GenericsType = {\n  [index: string]: GenGroup & { subGroups?: GenericsType };\n};\n\nexport const Generics: GenericsType = {\n  'atoms-gen': {\n    title: 'Atom Generics',\n    itemSets: [\n      {\n        displayName: 'any atom',\n        items: [\n          { label: 'A', description: 'Any atom except hydrogen' },\n          { label: 'AH', description: 'Any atom, including hydrogen' },\n        ],\n      },\n      {\n        displayName: 'except C or H',\n        items: [\n          {\n            label: 'Q',\n            description: 'Any heteroatom (any atom except C or H)',\n          },\n          { label: 'QH', description: 'Any atom except C' },\n        ],\n      },\n      {\n        displayName: 'any metal',\n        items: [\n          { label: 'M', description: 'Any metal' },\n          { label: 'MH', description: 'Any metal or hydrogen' },\n        ],\n      },\n      {\n        displayName: 'any halogen',\n        items: [\n          { label: 'X', description: 'Any halogen' },\n          { label: 'XH', description: 'Any halogen or hydrogen' },\n        ],\n      },\n    ],\n  },\n  'special-nodes': {\n    title: 'Special Nodes',\n    itemSets: [\n      {\n        items: [\n          { label: 'H+', description: 'Proton' },\n          { label: 'D', description: 'Deuterium' },\n          { label: 'T', description: 'Tritium' },\n          { label: 'R', description: 'Pseudoatom' },\n          { label: 'Pol', description: 'Polymer Bead' },\n        ],\n      },\n    ],\n  },\n\n  'group-gen': {\n    title: 'Group Generics',\n    itemSets: [\n      {\n        items: [\n          {\n            label: 'G',\n            description: 'Any group',\n          },\n          {\n            label: 'GH',\n            description: 'Any group or hydrogen',\n          },\n        ],\n      },\n      {\n        items: [\n          {\n            label: 'G*',\n            description: 'Any group with a ring closure',\n          },\n          {\n            label: 'GH*',\n            description: 'Any group with a ring closure or hydrogen',\n          },\n        ],\n      },\n    ],\n    subGroups: {\n      'group-acyclic': {\n        title: 'Acyclic',\n        itemSets: [\n          {\n            items: [\n              { label: 'ACY', description: 'Acyclic group' },\n              { label: 'ACH', description: 'Acyclic group or hydrogen' },\n            ],\n          },\n        ],\n        subGroups: {\n          'acyclic-carbo': {\n            title: 'Acyclic Carbo',\n            itemSets: [\n              {\n                items: [\n                  { label: 'ABC', description: 'Carbocyclic' },\n                  { label: 'ABH', description: 'Carbocyclic of hydrogen' },\n                ],\n              },\n              {\n                displayName: 'alkynyl',\n                items: [\n                  { label: 'AYL', description: 'Alkynyl' },\n                  { label: 'AYH', description: 'Alkynyl or hydrogen' },\n                ],\n              },\n              {\n                displayName: 'alkyl',\n                items: [\n                  { label: 'ALK', description: 'Alkyl' },\n                  { label: 'ALH', description: 'Alkyl or hydrogen' },\n                ],\n              },\n              {\n                displayName: 'alkenyl',\n                items: [\n                  { label: 'AEL', description: 'Alkenyl' },\n                  { label: 'AEH', description: 'Alkenyl or hydrogen' },\n                ],\n              },\n            ],\n          },\n          'acyclic-hetero': {\n            title: 'Acyclic Hetero',\n            itemSets: [\n              {\n                items: [\n                  { label: 'AHC', description: 'Heteroacyclic' },\n                  { label: 'AHH', description: 'Heterocyclic or hydrogen' },\n                ],\n              },\n              {\n                items: [\n                  { label: 'AOX', description: 'Alkoxy' },\n                  { label: 'AOH', description: 'Alkoxy or hydrogen' },\n                ],\n              },\n            ],\n          },\n        },\n      },\n      'group-cyclic': {\n        title: 'Cyclic',\n        itemSets: [\n          {\n            items: [\n              { label: 'CYC', description: 'Cyclic group' },\n              { label: 'CYH', description: 'Cyclic group or hydrogen' },\n            ],\n          },\n          {\n            displayName: 'no carbon',\n            items: [\n              {\n                label: 'CXX',\n                description: 'Cyclic group with no Carbon atoms',\n              },\n              {\n                label: 'CXH',\n                description: 'Cyclic group with no Carbon atoms or hydrogen',\n              },\n            ],\n          },\n        ],\n        subGroups: {\n          'cyclic-carbo': {\n            title: 'Cyclic Carbo',\n            itemSets: [\n              {\n                items: [\n                  { label: 'CBC', description: 'Carbocyclic derivatives' },\n                  {\n                    label: 'CBH',\n                    description: 'Carbocyclic derivatives or hydrogen',\n                  },\n                ],\n              },\n              {\n                displayName: 'aryl',\n                items: [\n                  { label: 'ARY', description: 'Any aryl group' },\n                  { label: 'ARH', description: 'Any aryl group or hydrogen' },\n                ],\n              },\n              {\n                displayName: 'cycloalkyl',\n                items: [\n                  { label: 'CAL', description: 'Any cycloalkyl group' },\n                  {\n                    label: 'CAH',\n                    description: 'Any cycloalkyl group or hydrogen',\n                  },\n                ],\n              },\n              {\n                displayName: 'cycloalkenyl',\n                items: [\n                  { label: 'CEL', description: 'Any cyloalkenyl group' },\n                  {\n                    label: 'CEH',\n                    description: 'Any cyloalkenyl group or hydrogen',\n                  },\n                ],\n              },\n            ],\n          },\n          'cyclic-hetero': {\n            title: 'Cyclic Hetero',\n            itemSets: [\n              {\n                items: [\n                  { label: 'CHC', description: 'Heterocyclic group' },\n                  {\n                    label: 'CHH',\n                    description: 'Heterocyclic group or hydrogen',\n                  },\n                ],\n              },\n              {\n                displayName: 'hetero aryl',\n                items: [\n                  { label: 'HAR', description: 'Heteroaryl group' },\n                  { label: 'HAH', description: 'Heteroaryl group or hydrogen' },\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n};\n\nfunction getGenericsList(generics: GenericsType | GenGroup) {\n  if (Array.isArray(generics) && !generics[0]?.items) {\n    return generics.map((item) => item.label);\n  } else {\n    let result: string[] = [];\n    for (const subGroup of Object.values(generics)) {\n      if (typeof generics === 'string') continue;\n      result = [...result, ...getGenericsList(subGroup)];\n    }\n    return result;\n  }\n}\n\nexport const genericsList = getGenericsList(Generics);\n","import type { ImageReferenceName } from 'domain/entities';\n\nexport const IMAGE_KEY = 'images';\nexport const IMAGE_SERIALIZE_KEY = 'image';\n\nconst CURSOR_DIAGONAL_NWSE = 'nwse-resize';\nconst CURSOR_DIAGONAL_NESW = 'nesw-resize';\nconst CURSOR_VERTICAL = 'ns-resize';\nconst CURSOR_HORIZONTAL = 'ew-resize';\n\nexport const imageReferencePositionToCursor: Record<\n  ImageReferenceName,\n  string\n> = {\n  topLeftPosition: CURSOR_DIAGONAL_NWSE,\n  topMiddlePosition: CURSOR_VERTICAL,\n  topRightPosition: CURSOR_DIAGONAL_NESW,\n  rightMiddlePosition: CURSOR_HORIZONTAL,\n  bottomRightPosition: CURSOR_DIAGONAL_NWSE,\n  bottomMiddlePosition: CURSOR_VERTICAL,\n  bottomLeftPosition: CURSOR_DIAGONAL_NESW,\n  leftMiddlePosition: CURSOR_HORIZONTAL,\n};\n","import {\n  MultitailArrowReferenceLinesNames,\n  MultitailArrowReferencePositionsNames,\n} from 'domain/entities';\n\nexport const MULTITAIL_ARROW_KEY = 'multitailArrows';\n\nexport const MULTITAIL_ARROW_TOOL_NAME = 'reaction-arrow-multitail';\n\nexport const MULTITAIL_ARROW_SERIALIZE_KEY = 'multi-tailed-arrow';\n\nconst MOVE = 'move';\nconst CURSOR_RESIZE_VERTICAL = 'ns-resize';\nconst CURSOR_RESIZE_HORIZONTAL = 'ew-resize';\n\nexport const multitailReferencePositionToCursor: Record<\n  MultitailArrowReferencePositionsNames,\n  string\n> = {\n  topTail: CURSOR_RESIZE_HORIZONTAL,\n  tails: CURSOR_RESIZE_HORIZONTAL,\n  bottomTail: CURSOR_RESIZE_HORIZONTAL,\n  topSpine: MOVE,\n  bottomSpine: MOVE,\n  head: CURSOR_RESIZE_HORIZONTAL,\n};\n\nexport const multitailArrowReferenceLinesToCursor: Record<\n  MultitailArrowReferenceLinesNames,\n  string\n> = {\n  topTail: CURSOR_RESIZE_VERTICAL,\n  bottomTail: CURSOR_RESIZE_VERTICAL,\n  tails: CURSOR_RESIZE_VERTICAL,\n  head: CURSOR_RESIZE_VERTICAL,\n  spine: MOVE,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { ElementLabel, Elements } from 'domain/constants';\n\nexport interface AtomListParams {\n  readonly notList: boolean;\n  readonly ids: Array<number>;\n}\n\nexport class AtomList {\n  notList: boolean;\n  ids: Array<number>;\n\n  constructor(params: AtomListParams) {\n    this.notList = params.notList;\n    this.ids = params.ids;\n  }\n\n  labelList() {\n    const labels: Array<ElementLabel> = [];\n    for (const id of this.ids) {\n      const currenElement = Elements.get(id);\n      currenElement && labels.push(currenElement!.label);\n    }\n\n    return labels;\n  }\n\n  label() {\n    let label = '[' + this.labelList().join(',') + ']';\n    if (this.notList) {\n      label = '!' + label;\n    }\n    return label;\n  }\n\n  equals(atomList: AtomList) {\n    return (\n      this.notList === atomList.notList &&\n      (this.ids || []).sort().toString() ===\n        (atomList.ids || []).sort().toString()\n    );\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nexport function ifDef<TValue = any>(\n  target: any,\n  key: string,\n  value: TValue,\n  defaultValue?: TValue,\n) {\n  if (\n    value !== undefined &&\n    value !== null &&\n    value !== defaultValue &&\n    !(Array.isArray(value) && value.length === 0)\n  ) {\n    target[key] = value;\n  }\n}\n","// TODO add tests and rename to toFixed\n// https://github.com/epam/ketcher/issues/2675\nexport function tfx<TValue extends number | string>(value: TValue): string {\n  let parsedValue: number;\n  if (typeof value === 'number') {\n    parsedValue = value;\n  } else {\n    parsedValue = parseFloat(value);\n  }\n  return parsedValue.toFixed(8);\n}\n","export enum LogLevel {\n  ERROR = 0,\n  WARN = 1,\n  INFO = 2,\n  LOG = 3,\n}\n\nexport interface LogSettings {\n  enabled?: boolean;\n  showTrace?: boolean;\n  level?: LogLevel;\n}\n\nexport class KetcherLogger {\n  static get settings(): LogSettings {\n    if (typeof window === 'undefined') {\n      return {};\n    }\n\n    if (!window?.ketcher) {\n      throw new Error(\n        'Ketcher needs to be initialized before KetcherLogger is used',\n      );\n    }\n\n    return window.ketcher?.logging ?? {};\n  }\n\n  static set settings(newSettings: LogSettings) {\n    for (const [settingName, settingValue] of Object.entries(newSettings)) {\n      this.settings[settingName] = settingValue;\n    }\n  }\n\n  static log(...messages: unknown[]): void {\n    if (!this.isMinimumLogLevel(LogLevel.LOG)) {\n      return;\n    }\n\n    const { showTrace } = this.settings;\n\n    if (showTrace) {\n      window.console.trace(messages);\n    } else {\n      window.console.log(messages);\n    }\n  }\n\n  static info(...messages: unknown[]): void {\n    if (!this.isMinimumLogLevel(LogLevel.INFO)) {\n      return;\n    }\n\n    const { showTrace } = this.settings;\n\n    if (showTrace) {\n      window.console.trace(messages);\n    } else {\n      window.console.info(messages);\n    }\n  }\n\n  static warn(...warnings: unknown[]): void {\n    if (!this.isMinimumLogLevel(LogLevel.WARN)) {\n      return;\n    }\n\n    window.console.warn(warnings);\n  }\n\n  static error(...errors: unknown[]): void {\n    if (!this.isMinimumLogLevel(LogLevel.ERROR)) {\n      return;\n    }\n\n    window.console.error(errors);\n  }\n\n  private static isMinimumLogLevel(minimumLevel: LogLevel): boolean {\n    const { enabled, level } = this.settings;\n\n    if (!enabled || level == null) {\n      return false;\n    }\n\n    return level >= minimumLevel;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport EventEmitter from 'events';\nimport { KetcherLogger } from './KetcherLogger';\n\nexport enum KetcherAsyncEvents {\n  LOADING = 'LOADING',\n  SUCCESS = 'SUCCESS',\n  FAILURE = 'FAILURE',\n}\n\nexport const runAsyncAction = async <T = any>(\n  action: () => Promise<T>,\n  eventEmitter: EventEmitter,\n): Promise<T | undefined> => {\n  eventEmitter.emit(KetcherAsyncEvents.LOADING);\n  try {\n    const res = await action();\n    eventEmitter.emit(KetcherAsyncEvents.SUCCESS);\n    return res;\n  } catch (e) {\n    KetcherLogger.error('runAsyncAction.ts::runAsyncAction', e);\n    eventEmitter.emit(KetcherAsyncEvents.FAILURE);\n    return undefined;\n  }\n};\n","export function b64toBlob(\n  b64Data: string,\n  contentType = '',\n  sliceSize = 512,\n): Blob {\n  const byteCharacters: string = window.atob(b64Data);\n  const byteArrays: Array<Uint8Array> = [];\n\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n    const slice: string = byteCharacters.slice(offset, offset + sliceSize);\n    const byteNumbers: Array<number> = new Array(slice.length);\n\n    for (let i = 0; i < slice.length; i++) {\n      byteNumbers[i] = slice.charCodeAt(i);\n    }\n\n    const byteArray: Uint8Array = new Uint8Array(byteNumbers);\n    byteArrays.push(byteArray);\n  }\n\n  const blob: Blob = new Blob(byteArrays, { type: contentType });\n  return blob;\n}\n","/**\n * Dispatch event when request is completed\n * Used only for QAs to prevent long delays in test cases\n * Triggers on Add to canvas / Aromatize / Dearomatize\n * Clean Up / Calculate CIP / Paste from clipboard\n * maybe somewhere else\n */\nexport function notifyRequestCompleted(): void {\n  const event = new Event('requestCompleted');\n  window.dispatchEvent(event);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { KetcherLogger } from './KetcherLogger';\n\nexport const KETCHER_SAVED_SETTINGS_KEY = 'ketcher_editor_saved_settings';\nexport const KETCHER_SAVED_OPTIONS_KEY = 'ketcher-opts';\n\ninterface SavedSettings {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  selectionTool?: any;\n  disableCustomQuery?: boolean;\n}\n\ninterface SavedOptions {\n  ignoreChiralFlag?: boolean;\n  disableQueryElements?: string[] | null;\n}\n\nexport class SettingsManager {\n  static _disableCustomQuery?: boolean;\n\n  static getSettings(): SavedSettings {\n    try {\n      return JSON.parse(\n        localStorage.getItem(KETCHER_SAVED_SETTINGS_KEY) || '{}',\n      );\n    } catch (e) {\n      KetcherLogger.error(\n        'settingsManager.ts::SettingsManager::getSettings',\n        e,\n      );\n      return {} as SavedSettings;\n    }\n  }\n\n  static saveSettings(settings: SavedSettings) {\n    if (!settings) {\n      return;\n    }\n    localStorage.setItem(KETCHER_SAVED_SETTINGS_KEY, JSON.stringify(settings));\n  }\n\n  static getOptions(): SavedOptions {\n    try {\n      const optionsFromLocalStorage = JSON.parse(\n        localStorage.getItem(KETCHER_SAVED_OPTIONS_KEY) || '{}',\n      );\n\n      // In 2.25 default bondLength was set to 2.1 by mistake.\n      // Current code reset it to 40px\n      // Can be removed in future versions\n      if (\n        optionsFromLocalStorage.bondLength === 2.1 &&\n        optionsFromLocalStorage.bondLengthUnit === 'px'\n      ) {\n        optionsFromLocalStorage.bondLength = 40;\n      }\n\n      return optionsFromLocalStorage;\n    } catch (e) {\n      KetcherLogger.error('SettingsManager.ts::SettingsManager::getOptions', e);\n      return {} as SavedOptions;\n    }\n  }\n\n  static saveOptions(options: SavedOptions) {\n    if (!options) {\n      return;\n    }\n    localStorage.setItem(KETCHER_SAVED_OPTIONS_KEY, JSON.stringify(options));\n  }\n\n  static get selectionTool() {\n    const { selectionTool } = this.getSettings();\n    return selectionTool;\n  }\n\n  static set selectionTool(selectionTool) {\n    const settings = this.getSettings();\n\n    this.saveSettings({\n      ...settings,\n      selectionTool,\n    });\n  }\n\n  static get disableCustomQuery() {\n    return this._disableCustomQuery;\n  }\n\n  static set disableCustomQuery(disableCustomQuery: boolean | undefined) {\n    this._disableCustomQuery = disableCustomQuery;\n  }\n\n  static get ignoreChiralFlag() {\n    const { ignoreChiralFlag } = this.getOptions();\n    return ignoreChiralFlag;\n  }\n\n  static set ignoreChiralFlag(ignoreChiralFlag: boolean | undefined) {\n    const options = this.getOptions();\n\n    this.saveOptions({\n      ...options,\n      ignoreChiralFlag,\n    });\n  }\n}\n","export var base = {\n  8: \"Backspace\",\n  9: \"Tab\",\n  10: \"Enter\",\n  12: \"NumLock\",\n  13: \"Enter\",\n  16: \"Shift\",\n  17: \"Control\",\n  18: \"Alt\",\n  20: \"CapsLock\",\n  27: \"Escape\",\n  32: \" \",\n  33: \"PageUp\",\n  34: \"PageDown\",\n  35: \"End\",\n  36: \"Home\",\n  37: \"ArrowLeft\",\n  38: \"ArrowUp\",\n  39: \"ArrowRight\",\n  40: \"ArrowDown\",\n  44: \"PrintScreen\",\n  45: \"Insert\",\n  46: \"Delete\",\n  59: \";\",\n  61: \"=\",\n  91: \"Meta\",\n  92: \"Meta\",\n  106: \"*\",\n  107: \"+\",\n  108: \",\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  144: \"NumLock\",\n  145: \"ScrollLock\",\n  160: \"Shift\",\n  161: \"Shift\",\n  162: \"Control\",\n  163: \"Control\",\n  164: \"Alt\",\n  165: \"Alt\",\n  173: \"-\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\"\n}\n\nexport var shift = {\n  48: \")\",\n  49: \"!\",\n  50: \"@\",\n  51: \"#\",\n  52: \"$\",\n  53: \"%\",\n  54: \"^\",\n  55: \"&\",\n  56: \"*\",\n  57: \"(\",\n  59: \":\",\n  61: \"+\",\n  173: \"_\",\n  186: \":\",\n  187: \"+\",\n  188: \"<\",\n  189: \"_\",\n  190: \">\",\n  191: \"?\",\n  192: \"~\",\n  219: \"{\",\n  220: \"|\",\n  221: \"}\",\n  222: \"\\\"\"\n}\n\nvar mac = typeof navigator != \"undefined\" && /Mac/.test(navigator.platform)\nvar ie = typeof navigator != \"undefined\" && /MSIE \\d|Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\n\n// Fill in the digit keys\nfor (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i)\n\n// The function keys\nfor (var i = 1; i <= 24; i++) base[i + 111] = \"F\" + i\n\n// And the alphabetic keys\nfor (var i = 65; i <= 90; i++) {\n  base[i] = String.fromCharCode(i + 32)\n  shift[i] = String.fromCharCode(i)\n}\n\n// For each code that doesn't have a shift-equivalent, copy the base name\nfor (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code]\n\nexport function keyName(event) {\n  // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.\n  // On IE, shift effect is never included in `.key`.\n  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||\n      ie && event.shiftKey && event.key && event.key.length == 1 ||\n      event.key == \"Unidentified\"\n  var name = (!ignoreKey && event.key) ||\n    (event.shiftKey ? shift : base)[event.keyCode] ||\n    event.key || \"Unidentified\"\n  // Edge sometimes produces wrong names (Issue #3)\n  if (name == \"Esc\") name = \"Escape\"\n  if (name == \"Del\") name = \"Delete\"\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n  if (name == \"Left\") name = \"ArrowLeft\"\n  if (name == \"Up\") name = \"ArrowUp\"\n  if (name == \"Right\") name = \"ArrowRight\"\n  if (name == \"Down\") name = \"ArrowDown\"\n  return name\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport * as KN from 'w3c-keyname';\n\nconst mac =\n  typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false; // eslint-disable-line no-undef\n\nfunction normalizeKeyName(name) {\n  const parts = name.split(/\\+(?!$)/);\n  let result = parts[parts.length - 1];\n  if (result === 'Space') result = ' ';\n  let alt;\n  let ctrl;\n  let shift;\n  let meta;\n\n  for (let i = 0; i < parts.length - 1; i++) {\n    const mod = parts[i];\n    if (/^(cmd|meta|m)$/i.test(mod)) meta = true;\n    else if (/^a(lt)?$/i.test(mod)) alt = true;\n    else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;\n    else if (/^s(hift)?$/i.test(mod)) shift = true;\n    else if (/^mod$/i.test(mod))\n      if (mac) meta = true;\n      else ctrl = true;\n    else throw new Error('Unrecognized modifier name: ' + mod);\n  }\n\n  if (alt) result = 'Alt+' + result;\n  if (ctrl) result = 'Ctrl+' + result;\n  if (meta) result = 'Meta+' + result;\n  if (shift) result = 'Shift+' + result;\n\n  return result;\n}\n\nfunction normalizeKeyMap(map) {\n  const copy = Object.create(null);\n\n  Object.keys(map).forEach((prop) => {\n    copy[normalizeKeyName(prop)] = map[prop];\n  });\n\n  return copy;\n}\n\nfunction modifiers(name, event, shift) {\n  if (event.altKey) name = 'Alt+' + name;\n  if (event.ctrlKey) name = 'Ctrl+' + name;\n  if (event.metaKey) name = 'Meta+' + name;\n  if (shift !== false && event.shiftKey) name = 'Shift+' + name;\n\n  return name;\n}\n\nfunction symbolByEvent(event) {\n  return event.shiftKey ? KN.shift[event.keyCode] : KN.base[event.keyCode];\n}\n\nfunction normalizeKeyEvent(event, base = false) {\n  const name = symbolByEvent(event);\n  const isChar = name.length === 1 && name !== ' ';\n\n  return isChar && !base\n    ? modifiers(name, event, !isChar)\n    : modifiers(KN.base[event.keyCode], event, true);\n}\n\nexport function isControlKey(event) {\n  return mac ? event.metaKey : event.ctrlKey;\n}\n\n// TODO rename and unify after moving all hotkeys to core editor\n//  to handle all events in same way and to have same structure for all hotkey configs\nfunction keyNorm(obj) {\n  if (obj instanceof KeyboardEvent) {\n    return normalizeKeyEvent(obj);\n  }\n\n  return typeof obj === 'object' ? normalizeKeyMap(obj) : normalizeKeyName(obj);\n}\n\nfunction setHotKey(key, actName, hotKeys) {\n  if (Array.isArray(hotKeys[key])) hotKeys[key].push(actName);\n  else hotKeys[key] = [actName];\n}\n\nexport function initHotKeys(actions) {\n  const hotKeys = {};\n  let act;\n\n  Object.keys(actions).forEach((actName) => {\n    act = actions[actName];\n    if (!act.shortcut) return;\n\n    if (Array.isArray(act.shortcut)) {\n      act.shortcut.forEach((key) => {\n        setHotKey(key, actName, hotKeys);\n      });\n    } else {\n      setHotKey(act.shortcut, actName, hotKeys);\n    }\n  });\n\n  return keyNorm(hotKeys);\n}\n\nfunction lookup(map, event) {\n  let name = symbolByEvent(event);\n  if (name === 'Add') name = '+'; // numpad '+' and '-'\n  if (name === 'Subtract') name = '-';\n  const isChar = name.length === 1 && name !== ' ';\n\n  let res = map[modifiers(name, event, !isChar)];\n  let baseName;\n\n  if (event.shiftKey && isChar && (baseName = KN.base[event.keyCode])) {\n    res = map[modifiers(baseName, event, true)] || res;\n  }\n\n  return res;\n}\n\nkeyNorm.lookup = lookup;\n\nexport { keyNorm };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { isMacOs } from 'react-device-detect';\n\nconst shortcutAliasMap = {\n  Escape: 'Esc',\n  Delete: 'Del',\n  Mod: isMacOs ? '⌘' : 'Ctrl',\n};\n\nexport function shortcutStr(shortcut?: string | string[]) {\n  if (!shortcut) {\n    return '';\n  }\n\n  const shortcutKey = Array.isArray(shortcut) ? shortcut[0] : shortcut;\n  return shortcutKey.replace(\n    /(\\b[a-z]\\b$|Mod|Escape|Delete)/g,\n    (key) => shortcutAliasMap[key] || key.toUpperCase(),\n  );\n}\n\nexport const generateMenuShortcuts = <T>(obj) =>\n  Object.keys(obj).reduce((acc, key) => {\n    if (obj[key]?.shortcut) {\n      const shortcut = obj[key].shortcut;\n      const processedShortcut = shortcutStr(shortcut);\n      acc[key] = processedShortcut;\n    }\n    return acc;\n  }, {}) as { [key in keyof T]: string };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nexport enum ChemicalMimeType {\n  Mol = 'chemical/x-mdl-molfile',\n  Rxn = 'chemical/x-mdl-rxnfile',\n  DaylightSmiles = 'chemical/x-daylight-smiles',\n  ExtendedSmiles = 'chemical/x-chemaxon-cxsmiles',\n  DaylightSmarts = 'chemical/x-daylight-smarts',\n  InChI = 'chemical/x-inchi',\n  InChIAuxInfo = 'chemical/x-inchi-aux',\n  InChIKey = 'chemical/x-inchi-key',\n  CDX = 'chemical/x-cdx',\n  CDXML = 'chemical/x-cdxml',\n  CML = 'chemical/x-cml',\n  KET = 'chemical/x-indigo-ket',\n  UNKNOWN = 'chemical/x-unknown',\n  SDF = 'chemical/x-sdf',\n  FASTA = 'chemical/x-fasta',\n  SEQUENCE = 'chemical/x-sequence',\n  PeptideSequenceThreeLetter = 'chemical/x-peptide-sequence-3-letter',\n  RNA = 'chemical/x-rna-sequence',\n  DNA = 'chemical/x-dna-sequence',\n  PEPTIDE = 'chemical/x-peptide-sequence',\n  IDT = 'chemical/x-idt',\n  HELM = 'chemical/x-helm',\n  RDF = 'chemical/x-rdf',\n}\n\nexport interface WithStruct {\n  struct: string;\n}\n\nexport interface WithFormat {\n  format: ChemicalMimeType;\n}\n\nexport interface WithOutputFormat {\n  output_format: ChemicalMimeType;\n}\nexport interface WithInputFormat {\n  input_format?: ChemicalMimeType;\n}\n\nexport interface WithSelection {\n  selected?: Array<number>;\n}\n\nexport type CheckTypes =\n  | 'radicals'\n  | 'pseudoatoms'\n  | 'stereo'\n  | 'query'\n  | 'overlapping_atoms'\n  | 'overlapping_bonds'\n  | 'rgroups'\n  | 'chiral'\n  | '3d'\n  | 'chiral_flag'\n  | 'valence';\n\nexport interface CheckData extends WithStruct {\n  types: Array<CheckTypes>;\n}\n\nexport interface CheckResult {\n  [key: string]: string;\n}\n\nexport interface ConvertData\n  extends WithStruct,\n    WithOutputFormat,\n    WithInputFormat {}\n\nexport interface ConvertResult extends WithStruct, WithFormat {}\n\nexport interface LayoutData extends WithStruct, WithOutputFormat {}\n\nexport interface LayoutResult extends WithStruct, WithFormat {}\n\nexport interface CleanData\n  extends WithStruct,\n    WithSelection,\n    WithOutputFormat {}\n\nexport interface CleanResult extends WithStruct, WithFormat {}\n\nexport interface AromatizeData extends WithStruct, WithOutputFormat {}\n\nexport interface AromatizeResult extends WithStruct, WithFormat {}\n\nexport interface DearomatizeData extends WithStruct, WithOutputFormat {}\n\nexport interface DearomatizeResult extends WithStruct, WithFormat {}\n\nexport interface CalculateCipData extends WithStruct, WithOutputFormat {}\n\nexport interface CalculateCipResult extends WithStruct, WithFormat {}\n\nexport interface ExplicitHydrogensData extends WithStruct, WithOutputFormat {\n  mode?: 'auto' | 'fold' | 'unfold';\n}\n\nexport interface ExplicitHydrogensResult extends WithStruct, WithFormat {}\n\nexport type CalculateProps =\n  | 'molecular-weight'\n  | 'most-abundant-mass'\n  | 'monoisotopic-mass'\n  | 'gross'\n  | 'mass-composition';\n\nexport interface CalculateData extends WithStruct, WithSelection {\n  properties: Array<CalculateProps>;\n}\n\nexport type CalculateResult = Record<CalculateProps, string | number | boolean>;\n\nexport type AutomapMode = 'discard' | 'keep' | 'alter' | 'clear';\n\nexport type AutoMapOptions = 'Discard' | 'Keep' | 'Alter' | 'Clear';\n\nexport interface AutomapData extends WithStruct, WithOutputFormat {\n  mode: AutomapMode;\n}\n\nexport interface AutomapResult extends WithStruct, WithFormat {}\n\nexport interface InfoResult {\n  indigoVersion: string;\n  imagoVersions: Array<string>;\n  isAvailable: boolean;\n}\n\nexport interface RecognizeResult extends WithStruct, WithOutputFormat {}\n\nexport interface StructServiceOptions {\n  [key: string]: string | number | boolean | undefined;\n}\n\nexport type OutputFormatType = 'png' | 'svg';\nexport interface GenerateImageOptions extends StructServiceOptions {\n  outputFormat: OutputFormatType;\n  backgroundColor?: string;\n}\n\nexport interface StructService {\n  info: () => Promise<InfoResult>;\n  convert: (\n    data: ConvertData,\n    options?: StructServiceOptions,\n  ) => Promise<ConvertResult>;\n  layout: (\n    data: LayoutData,\n    options?: StructServiceOptions,\n  ) => Promise<LayoutResult>;\n  clean: (\n    data: CleanData,\n    options?: StructServiceOptions,\n  ) => Promise<CleanResult>;\n  aromatize: (\n    data: AromatizeData,\n    options?: StructServiceOptions,\n  ) => Promise<AromatizeResult>;\n  dearomatize: (\n    data: DearomatizeData,\n    options?: StructServiceOptions,\n  ) => Promise<DearomatizeResult>;\n  calculateCip: (\n    data: CalculateCipData,\n    options?: StructServiceOptions,\n  ) => Promise<CalculateCipResult>;\n  automap: (\n    data: AutomapData,\n    options?: StructServiceOptions,\n  ) => Promise<AutomapResult>;\n  check: (\n    data: CheckData,\n    options?: StructServiceOptions,\n  ) => Promise<CheckResult>;\n  calculate: (\n    data: CalculateData,\n    options?: StructServiceOptions,\n  ) => Promise<CalculateResult>;\n  recognize: (blob: Blob, version: string) => Promise<RecognizeResult>;\n  getInChIKey: (struct: string) => Promise<string>;\n  generateImageAsBase64: (\n    data: string,\n    options?: GenerateImageOptions,\n  ) => Promise<string>;\n  toggleExplicitHydrogens: (\n    data: ExplicitHydrogensData,\n    options?: StructServiceOptions,\n  ) => Promise<ExplicitHydrogensResult>;\n  destroy?: () => void;\n}\n","import { ChemicalMimeType } from 'domain/services';\n\n/**\n *\n * Legacy browser API doesn't support async operations, so it is not possible\n * to call indigo, when copy/cut/paste\n */\nexport function isClipboardAPIAvailable() {\n  return (\n    typeof navigator?.clipboard?.writeText === 'function' &&\n    typeof navigator?.clipboard?.read === 'function'\n  );\n}\n\nexport function legacyCopy(clipboardData, data) {\n  let curFmt;\n  clipboardData.setData('text/plain', data['text/plain']);\n  try {\n    Object.keys(data).forEach((fmt) => {\n      curFmt = fmt;\n      clipboardData.setData(fmt, data[fmt]);\n    });\n  } catch (e) {\n    console.error('clipboardUtils.ts::legacyCopy', e);\n    console.info(`Could not write exact type ${curFmt}`);\n  }\n}\n\nexport function legacyPaste(cb, formats) {\n  let data = {};\n  data['text/plain'] = cb.getData('text/plain');\n  data = formats.reduce((res, fmt) => {\n    const d = cb.getData(fmt);\n    if (d) res[fmt] = d;\n    return res;\n  }, data);\n  return data;\n}\n\nexport function notifyCopyCut() {\n  const event = new Event('copyOrCutComplete');\n  window.dispatchEvent(event);\n}\n\nexport async function getStructStringFromClipboardData(\n  data: ClipboardItem[],\n): Promise<string> {\n  const clipboardItem = data[0];\n\n  if (clipboardItem && clipboardItem instanceof ClipboardItem) {\n    const structStr =\n      (await safelyGetMimeType(clipboardItem, `web ${ChemicalMimeType.KET}`)) ||\n      (await safelyGetMimeType(clipboardItem, `web ${ChemicalMimeType.Mol}`)) ||\n      (await safelyGetMimeType(clipboardItem, `web ${ChemicalMimeType.Rxn}`)) ||\n      (await safelyGetMimeType(clipboardItem, 'text/plain'));\n    return structStr === '' ? '' : structStr.text();\n  } else {\n    return (\n      data[ChemicalMimeType.KET] ||\n      data[ChemicalMimeType.Mol] ||\n      data[ChemicalMimeType.Rxn] ||\n      data['text/plain']\n    );\n  }\n}\n\nexport async function safelyGetMimeType(\n  clipboardItem: ClipboardItem,\n  mimeType: string,\n) {\n  try {\n    const result = await clipboardItem.getType(mimeType);\n    return result;\n  } catch {\n    return '';\n  }\n}\n","import { KetcherLogger } from 'utilities';\n\nconst SVG_NAMESPACE_URI = 'http://www.w3.org/2000/svg';\nconst ADDITIONAL_TOP_MARGIN = 54;\nconst ADDITIONAL_LEFT_MARGIN = 50;\nconst DEFAULT_MARGIN = 10;\n\nexport const getSvgFromDrawnStructures = (\n  canvas: SVGSVGElement,\n  type: 'preview' | 'file',\n  margin = DEFAULT_MARGIN,\n) => {\n  // Copy and clean up svg structures before previewing or saving\n  let svgInnerHTML = canvas?.innerHTML || '';\n  const wrapper = document.createElementNS(SVG_NAMESPACE_URI, 'svg');\n  wrapper.innerHTML = svgInnerHTML;\n  // remove #rectangle-selection-area\n  wrapper.querySelector('#rectangle-selection-area')?.remove();\n  // remove dynamic elements (scrolls, highlighters, attachment points...)\n  wrapper.querySelectorAll('.dynamic-element')?.forEach((el) => el.remove());\n  // set default cursor, mostly for sequence mode\n  wrapper\n    .querySelectorAll('text')\n    ?.forEach((el) => el.setAttribute('cursor', 'default'));\n  wrapper.querySelectorAll('rect')?.forEach((el) => {\n    if (el.getAttribute('cursor') === 'text') el.removeAttribute('cursor');\n  });\n  // remove opacity of structures, mostly for sequence \"edit in RNA builder\" mode\n  wrapper.querySelectorAll('g')?.forEach((el) => {\n    if (el.hasAttribute('opacity')) el.removeAttribute('opacity');\n  });\n  svgInnerHTML = wrapper.innerHTML;\n  // remove \"cursor: pointer\" style\n  svgInnerHTML = svgInnerHTML?.replaceAll('cursor: pointer;', '');\n\n  const drawStructureClientRect = canvas\n    ?.getElementsByClassName('drawn-structures')[0]\n    .getBoundingClientRect();\n\n  if (!drawStructureClientRect || !svgInnerHTML) {\n    const errorMessage = 'Cannot get drawn structures!';\n    KetcherLogger.error(errorMessage);\n    return;\n  }\n\n  const viewBoxX = drawStructureClientRect.x - ADDITIONAL_LEFT_MARGIN - margin;\n  const viewBoxY = drawStructureClientRect.y - ADDITIONAL_TOP_MARGIN - margin;\n  const viewBoxWidth = drawStructureClientRect.width + margin * 2;\n  const viewBoxHeight = drawStructureClientRect.height + margin * 2;\n  const viewBox = `${viewBoxX} ${viewBoxY} ${viewBoxWidth} ${viewBoxHeight}`;\n\n  if (type === 'preview')\n    return `<svg width='100%' height='100%' style='position: absolute' viewBox='${viewBox}'>${svgInnerHTML}</svg>`;\n  else if (type === 'file')\n    return `<svg width='${viewBoxWidth}' height='${viewBoxHeight}' viewBox='${viewBox}' xmlns='${SVG_NAMESPACE_URI}'>${svgInnerHTML}</svg>`;\n  else return `<svg xmlns='${SVG_NAMESPACE_URI}' />`;\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport assert from 'assert';\nimport { tfx } from 'utilities';\n\nexport interface Point {\n  x?: number;\n  y?: number;\n  z?: number;\n}\nexport class Vec2 {\n  static ZERO = new Vec2(0, 0);\n  static UNIT = new Vec2(1, 1);\n\n  x: number;\n  y: number;\n  z: number;\n\n  constructor(point: Point);\n  constructor(x?: number, y?: number, z?: number);\n  constructor(...args: Array<any>) {\n    if (args.length === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    } else if (arguments.length === 1) {\n      this.x = parseFloat(args[0].x || 0);\n      this.y = parseFloat(args[0].y || 0);\n      this.z = parseFloat(args[0].z || 0);\n    } else if (arguments.length === 2) {\n      this.x = parseFloat(args[0] || 0);\n      this.y = parseFloat(args[1] || 0);\n      this.z = 0;\n    } else if (arguments.length === 3) {\n      this.x = parseFloat(args[0]);\n      this.y = parseFloat(args[1]);\n      this.z = parseFloat(args[2]);\n    } else {\n      throw new Error('Vec2(): invalid arguments');\n    }\n  }\n\n  static dist(a: Vec2, b: Vec2): number {\n    return Vec2.diff(a, b).length();\n  }\n\n  static max(v1: Vec2, v2: Vec2): Vec2 {\n    return new Vec2(\n      Math.max(v1.x, v2.x),\n      Math.max(v1.y, v2.y),\n      Math.max(v1.z, v2.z),\n    );\n  }\n\n  static min(v1: Vec2, v2: Vec2): Vec2 {\n    return new Vec2(\n      Math.min(v1.x, v2.x),\n      Math.min(v1.y, v2.y),\n      Math.min(v1.z, v2.z),\n    );\n  }\n\n  static sum(v1: Vec2, v2: Vec2): Vec2 {\n    return new Vec2(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);\n  }\n\n  static dot(v1: Vec2, v2: Vec2): number {\n    return v1.x * v2.x + v1.y * v2.y;\n  }\n\n  static cross(v1: Vec2, v2: Vec2): number {\n    return v1.x * v2.y - v1.y * v2.x;\n  }\n\n  static angle(v1: Vec2, v2: Vec2): number {\n    return Math.atan2(Vec2.cross(v1, v2), Vec2.dot(v1, v2));\n  }\n\n  static diff(v1: Vec2, v2: Vec2): Vec2 {\n    return new Vec2(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);\n  }\n\n  // assume arguments v1, f1, v2, f2, v3, f3, etc.\n  // where v[i] are vectors and f[i] are corresponding coefficients\n  static lc(...args: Array<Vec2 | number>): Vec2 {\n    let v = new Vec2();\n    for (let i = 0; i < arguments.length / 2; ++i) {\n      v = v.addScaled(args[2 * i] as Vec2, args[2 * i + 1] as number);\n    }\n    return v;\n  }\n\n  static lc2(v1: Vec2, f1: number, v2: Vec2, f2: number): Vec2 {\n    return new Vec2(\n      v1.x * f1 + v2.x * f2,\n      v1.y * f1 + v2.y * f2,\n      v1.z * f1 + v2.z * f2,\n    );\n  }\n\n  static centre(v1: Vec2, v2: Vec2) {\n    return Vec2.lc2(v1, 0.5, v2, 0.5);\n  }\n\n  static getLinePoint(lineStart: Vec2, lineEnd: Vec2, length) {\n    const difference = lineStart.sub(lineEnd);\n    const distance = difference.length();\n    const ratio = length / distance;\n    return new Vec2(\n      lineStart.x + difference.x * ratio,\n      lineStart.y + difference.y * ratio,\n    );\n  }\n\n  static crossProduct(v1: Vec2, v2: Vec2): number {\n    return v1.x * v2.y - v1.y * v2.x;\n  }\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  equals(v: Vec2): boolean {\n    return this.x === v.x && this.y === v.y && this.z === v.z;\n  }\n\n  add(v: Vec2): Vec2 {\n    return new Vec2(this.x + v.x, this.y + v.y, this.z + v.z);\n  }\n\n  add_(v: Vec2): void {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n  }\n\n  get_xy0(): Vec2 {\n    return new Vec2(this.x, this.y);\n  }\n\n  sub(v: Vec2): Vec2 {\n    return new Vec2(this.x - v.x, this.y - v.y, this.z - v.z);\n  }\n\n  scaled(sInitial: number): Vec2 {\n    const s = isFinite(sInitial) ? sInitial : 1;\n    return new Vec2(this.x * s, this.y * s, this.z * s);\n  }\n\n  negated(): Vec2 {\n    return new Vec2(-this.x, -this.y, -this.z);\n  }\n\n  yComplement(y1: number): Vec2 {\n    y1 = y1 || 0;\n    return new Vec2(this.x, y1 - this.y, this.z);\n  }\n\n  addScaled(v: Vec2, f: number): Vec2 {\n    return new Vec2(this.x + v.x * f, this.y + v.y * f, this.z + v.z * f);\n  }\n\n  normalized(): Vec2 {\n    return this.scaled(1 / this.length());\n  }\n\n  normalize(): boolean {\n    const l = this.length();\n\n    if (l < 0.000001) return false;\n\n    this.x /= l;\n    this.y /= l;\n\n    return true;\n  }\n\n  turnLeft(): Vec2 {\n    return new Vec2(-this.y, this.x, this.z);\n  }\n\n  coordStr(): string {\n    return this.x.toString() + ' , ' + this.y.toString();\n  }\n\n  toString(): string {\n    return '(' + this.x.toFixed(2) + ',' + this.y.toFixed(2) + ')';\n  }\n\n  max(v: Vec2): Vec2 {\n    assert(v != null);\n\n    return Vec2.max(this, v);\n  }\n\n  min(v: Vec2): Vec2 {\n    return Vec2.min(this, v);\n  }\n\n  ceil(): Vec2 {\n    return new Vec2(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.z));\n  }\n\n  floor(): Vec2 {\n    return new Vec2(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\n  }\n\n  rotate(angle: number) {\n    const sin = Math.sin(angle);\n    const cos = Math.cos(angle);\n\n    return this.rotateSC(sin, cos);\n  }\n\n  rotateSC(sin: number, cos: number): Vec2 {\n    assert(sin === 0 || !!sin);\n    assert(cos === 0 || !!cos);\n\n    return new Vec2(\n      this.x * cos - this.y * sin,\n      this.x * sin + this.y * cos,\n      this.z,\n    );\n  }\n\n  rotateAroundOrigin(angleInDegrees: number, origin: Vec2) {\n    const angleInRadians = (angleInDegrees * Math.PI) / 180;\n    const offsetX = this.x - origin.x;\n    const offsetY = this.y - origin.y;\n\n    const rotatedX =\n      Math.cos(angleInRadians) * offsetX - Math.sin(angleInRadians) * offsetY;\n    const rotatedY =\n      Math.sin(angleInRadians) * offsetX + Math.cos(angleInRadians) * offsetY;\n\n    const x = rotatedX + origin.x;\n    const y = rotatedY + origin.y;\n\n    return new Vec2(Number(tfx(x)), Number(tfx(y)), this.z || 0);\n  }\n\n  isInsidePolygon(points: Vec2[]) {\n    // ray-casting algorithm based on\n    // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\n    const { x, y } = this;\n    let inside = false;\n\n    for (let i = 0, j = points.length - 1; i < points.length; j = i++) {\n      const xi = points[i].x || 0;\n      const yi = points[i].y || 0;\n      const xj = points[j].x || 0;\n      const yj = points[j].y || 0;\n\n      const intersect =\n        yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n      if (intersect) inside = !inside;\n    }\n\n    return inside;\n  }\n\n  calculateDistanceToLine(line: [Vec2, Vec2]): number {\n    if (\n      (this.x <= Math.min(line[0].x, line[1].x) ||\n        this.x >= Math.max(line[0].x, line[1].x)) &&\n      (this.y <= Math.min(line[0].y, line[1].y) ||\n        this.y >= Math.max(line[0].y, line[1].y))\n    ) {\n      return Math.min(Vec2.dist(line[0], this), Vec2.dist(line[1], this));\n    } else {\n      const a = Vec2.dist(line[0], line[1]);\n      const b = Vec2.dist(line[0], this);\n      const c = Vec2.dist(line[1], this);\n      const per = (a + b + c) / 2;\n      return (2 / a) * Math.sqrt(per * (per - a) * (per - b) * (per - c));\n    }\n  }\n\n  oxAngle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  static radiansToDegrees(radians: number) {\n    return radians * (180 / Math.PI);\n  }\n\n  static degrees_to_radians(degrees: number) {\n    return (degrees * Math.PI) / 180;\n  }\n\n  static oxAngleForVector(v1: Vec2, v2: Vec2): number {\n    return Math.atan2(v2.y - v1.y, v2.x - v1.x);\n  }\n\n  static findSecondPoint(\n    startPoint: { x: number; y: number },\n    lineLength: number,\n    lineAngleRadians: number,\n  ) {\n    const cos = Math.cos(lineAngleRadians);\n    const sin = Math.sin(lineAngleRadians);\n\n    const deltaX = lineLength * cos;\n    const deltaY = lineLength * sin;\n\n    const endPoint = {\n      x: startPoint.x + deltaX,\n      y: startPoint.y + deltaY,\n    };\n    return endPoint;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nexport class Pile<TValue = any> extends Set<TValue> {\n  // TODO: it's used only in dfs.js in one place in some strange way.\n  // Should be removed after dfs.js refactoring\n  find(predicate: (item: TValue) => boolean) {\n    for (const item of this) {\n      if (predicate(item)) return item;\n    }\n\n    return null;\n  }\n\n  equals(setB: Pile): boolean {\n    return this.isSuperset(setB) && setB.isSuperset(this);\n  }\n\n  isSuperset(subset: Pile): boolean {\n    for (const item of subset) {\n      if (!this.has(item)) return false;\n    }\n\n    return true;\n  }\n\n  filter(expression: (arg: TValue) => boolean): Pile<TValue> {\n    return new Pile(Array.from(this).filter(expression));\n  }\n\n  union(setB: Pile): Pile<TValue> {\n    const union = new Pile(this);\n\n    for (const item of setB) union.add(item);\n\n    return union;\n  }\n\n  intersection(setB: Pile): Pile<TValue> {\n    const thisSet = new Pile(this);\n    return new Pile([...thisSet].filter((item) => setB.has(item)));\n  }\n\n  /**\n   * Union multiple sets which have intersections\n   * @example ```\n   * const setA = new Pile([0, 1])\n   * const setB = new Pile([1, 2])\n   * const setC = new Pile([2, 3])\n   * const setD = new Pile([4, 5])\n   * console.log(Pile.unionMultiple([setA, setB, setC, setD]))\n   * // [{0, 1, 2, 3}, {4, 5}]\n   * ```\n   */\n  static unionIntersections<T>(sets: Array<Pile<T>>): Array<Pile<T>> {\n    let unionized = false;\n\n    // Union two of sets\n    const setsToReturn = sets.reduce((prevSets, curSet) => {\n      let isCurSetMerged = false;\n\n      const newSets = prevSets.map((set) => {\n        const intersec = set.intersection(curSet);\n        if (intersec.size > 0) {\n          unionized = true;\n          isCurSetMerged = true;\n          return set.union(curSet);\n        }\n        return set;\n      });\n\n      if (!isCurSetMerged) newSets.push(curSet);\n      return newSets;\n    }, new Array<Pile<T>>());\n\n    // Recursively union two of sets === union all sets\n    return unionized ? Pile.unionIntersections(setsToReturn) : setsToReturn;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nexport const INVALID = 'invalid';\nexport type initiallySelectedType = boolean | 'invalid';\nexport abstract class BaseMicromoleculeEntity {\n  initiallySelected?: initiallySelectedType;\n\n  protected constructor(initiallySelected?: initiallySelectedType) {\n    this.initiallySelected = initiallySelected;\n  }\n\n  getInitiallySelected(): boolean | undefined {\n    if (this.initiallySelected === INVALID) {\n      throw new Error(\n        'this field is used only for serialization/deserialization',\n      );\n    }\n    return this.initiallySelected;\n  }\n\n  setInitiallySelected(value?: boolean): void {\n    if (this.initiallySelected === INVALID) {\n      throw new Error(\n        'this field is used only for serialization/deserialization',\n      );\n    }\n    this.initiallySelected = value;\n  }\n\n  resetInitiallySelected(invalidate?: boolean): void {\n    this.initiallySelected = invalidate ? INVALID : undefined;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Atom } from './atom';\nimport { Pile } from './pile';\nimport { Struct } from './struct';\nimport { Vec2 } from './vec2';\nimport {\n  BaseMicromoleculeEntity,\n  initiallySelectedType,\n} from 'domain/entities/BaseMicromoleculeEntity';\nimport { SGroup } from 'domain/entities/sgroup';\nimport { MonomerMicromolecule } from 'domain/entities/monomerMicromolecule';\n\nenum CIP {\n  E = 'E',\n  Z = 'Z',\n  M = 'M',\n  P = 'P',\n}\n\nexport interface BondAttributes {\n  reactingCenterStatus?: number | null;\n  topology?: number | null;\n  customQuery?: string | null;\n  stereo?: number;\n  xxx?: string;\n  type: number;\n  end: number;\n  begin: number;\n  cip?: CIP | null;\n  isPreview?: boolean;\n  initiallySelected?: initiallySelectedType;\n  beginSuperatomAttachmentPointNumber?: number;\n  endSuperatomAttachmentPointNumber?: number;\n  beginSgroup?: SGroup;\n  endSgroup?: SGroup;\n}\n\nexport class Bond extends BaseMicromoleculeEntity {\n  static PATTERN = {\n    TYPE: {\n      SINGLE: 1,\n      DOUBLE: 2,\n      TRIPLE: 3,\n      AROMATIC: 4,\n      SINGLE_OR_DOUBLE: 5,\n      SINGLE_OR_AROMATIC: 6,\n      DOUBLE_OR_AROMATIC: 7,\n      ANY: 8,\n      DATIVE: 9,\n      HYDROGEN: 10,\n    },\n\n    STEREO: {\n      NONE: 0,\n      UP: 1,\n      EITHER: 4,\n      DOWN: 6,\n      CIS_TRANS: 3,\n    },\n\n    TOPOLOGY: {\n      EITHER: 0,\n      RING: 1,\n      CHAIN: 2,\n    },\n\n    REACTING_CENTER: {\n      NOT_CENTER: -1,\n      UNMARKED: 0,\n      CENTER: 1,\n      UNCHANGED: 2,\n      MADE_OR_BROKEN: 4,\n      ORDER_CHANGED: 8,\n      MADE_OR_BROKEN_AND_CHANGED: 12,\n    },\n  };\n\n  static attrlist = {\n    type: Bond.PATTERN.TYPE.SINGLE,\n    stereo: Bond.PATTERN.STEREO.NONE,\n    topology: Bond.PATTERN.TOPOLOGY.EITHER,\n    reactingCenterStatus: Bond.PATTERN.REACTING_CENTER.UNMARKED,\n    cip: null,\n    customQuery: null,\n  };\n\n  begin: number;\n  end: number;\n  readonly type: number;\n  readonly xxx: string;\n  stereo: number;\n  readonly topology: number | null;\n  readonly reactingCenterStatus: number | null;\n  customQuery: string | null;\n  len: number;\n  sb: number;\n  sa: number;\n  cip?: CIP | null;\n  hb1?: number;\n  hb2?: number;\n  angle: number;\n  center: Vec2;\n  isPreview: boolean;\n  beginSuperatomAttachmentPointNumber?: number;\n  endSuperatomAttachmentPointNumber?: number;\n  beginSgroup?: SGroup;\n  endSgroup?: SGroup;\n\n  constructor(attributes: BondAttributes) {\n    super(attributes.initiallySelected);\n    this.begin = attributes.begin;\n    this.end = attributes.end;\n    this.type = attributes.type;\n    this.xxx = attributes.xxx || '';\n    this.stereo = Bond.PATTERN.STEREO.NONE;\n    this.topology = Bond.PATTERN.TOPOLOGY.EITHER;\n    this.customQuery = null;\n    this.reactingCenterStatus = 0;\n    this.cip = attributes.cip ?? null;\n    this.len = 0;\n    this.sb = 0;\n    this.sa = 0;\n    this.angle = 0;\n    this.isPreview = false;\n    this.beginSuperatomAttachmentPointNumber =\n      attributes.beginSuperatomAttachmentPointNumber;\n    this.endSuperatomAttachmentPointNumber =\n      attributes.endSuperatomAttachmentPointNumber;\n\n    if (attributes.stereo) this.stereo = attributes.stereo;\n    if (attributes.topology) this.topology = attributes.topology;\n    if (attributes.customQuery) {\n      this.customQuery = attributes.customQuery;\n      this.type = Bond.PATTERN.TYPE.ANY;\n      this.reactingCenterStatus = null;\n      this.topology = null;\n    }\n\n    if (attributes.reactingCenterStatus) {\n      this.reactingCenterStatus = attributes.reactingCenterStatus;\n    }\n\n    this.center = new Vec2();\n  }\n\n  static getAttrHash(bond: Bond) {\n    const attrs = {};\n    for (const attr in Bond.attrlist) {\n      if (bond[attr] || attr === 'stereo') {\n        attrs[attr] = bond[attr];\n      }\n    }\n    return attrs;\n  }\n\n  static getBondNeighbourIds(struct: Struct, bondId: number) {\n    const bond = struct.bonds.get(bondId)!;\n    const { begin, end } = bond;\n    const beginBondIds = Atom.getConnectedBondIds(struct, begin).filter(\n      (id) => id !== bondId,\n    );\n    const endBondIds = Atom.getConnectedBondIds(struct, end).filter(\n      (id) => id !== bondId,\n    );\n    return { beginBondIds, endBondIds };\n  }\n\n  static getFusingConditions(bond: Bond, bondBegin: Bond, bondEnd: Bond) {\n    const { DOUBLE, SINGLE } = this.PATTERN.TYPE;\n    const isFusingToDoubleBond =\n      bondBegin.type === SINGLE &&\n      bond.type === DOUBLE &&\n      bondEnd.type === SINGLE;\n    const isFusingToSingleBond =\n      bondBegin.type === DOUBLE &&\n      bond.type === SINGLE &&\n      bondEnd.type === DOUBLE;\n    const isFusingDoubleSingleSingle =\n      bondBegin.type === DOUBLE &&\n      bond.type === SINGLE &&\n      bondEnd.type === SINGLE;\n    const isFusingSingleSingleDouble =\n      bondBegin.type === SINGLE &&\n      bond.type === SINGLE &&\n      bondEnd.type === DOUBLE;\n    const isAllSingle =\n      bondBegin.type === SINGLE &&\n      bond.type === SINGLE &&\n      bondEnd.type === SINGLE;\n    return {\n      isFusingToSingleBond,\n      isFusingToDoubleBond,\n      isFusingDoubleSingleSingle,\n      isFusingSingleSingleDouble,\n      isAllSingle,\n    };\n  }\n\n  static getBenzeneConnectingBondType(\n    bond: Bond,\n    bondBegin: Bond,\n    bondEnd: Bond,\n  ): number | null {\n    const { DOUBLE, SINGLE } = this.PATTERN.TYPE;\n    const { isFusingToSingleBond, isFusingToDoubleBond } =\n      Bond.getFusingConditions(bond, bondBegin, bondEnd);\n\n    if (isFusingToDoubleBond) {\n      return DOUBLE;\n    } else if (isFusingToSingleBond) {\n      return SINGLE;\n    }\n    return null;\n  }\n\n  static getCyclopentadieneFusingBondType(\n    bond: Bond,\n    bondBegin: Bond,\n    bondEnd: Bond,\n  ): number | null {\n    const { DOUBLE, SINGLE } = this.PATTERN.TYPE;\n    const {\n      isFusingToSingleBond,\n      isFusingToDoubleBond,\n      isFusingDoubleSingleSingle,\n      isAllSingle,\n    } = Bond.getFusingConditions(bond, bondBegin, bondEnd);\n\n    if (isFusingToDoubleBond) {\n      return DOUBLE;\n    } else if (\n      isFusingToSingleBond ||\n      isAllSingle ||\n      isFusingDoubleSingleSingle\n    ) {\n      return SINGLE;\n    }\n    return null;\n  }\n\n  static getCyclopentadieneDoubleBondIndexes(\n    bond: Bond,\n    bondBegin: Bond,\n    bondEnd: Bond,\n  ) {\n    const {\n      isFusingToSingleBond,\n      isFusingToDoubleBond,\n      isFusingDoubleSingleSingle,\n    } = Bond.getFusingConditions(bond, bondBegin, bondEnd);\n\n    if (isFusingToSingleBond || isFusingToDoubleBond) {\n      return [3];\n    }\n\n    if (isFusingDoubleSingleSingle) {\n      return [2, 4];\n    }\n\n    return [1, 3];\n  }\n\n  static attrGetDefault(attr: string) {\n    if (attr in Bond.attrlist) {\n      return Bond.attrlist[attr];\n    }\n  }\n\n  isQuery(): boolean {\n    const TYPES = Bond.PATTERN.TYPE;\n    const QUERY_BOND_TYPES = [\n      TYPES.ANY,\n      TYPES.SINGLE_OR_DOUBLE,\n      TYPES.SINGLE_OR_AROMATIC,\n      TYPES.DOUBLE_OR_AROMATIC,\n      TYPES.AROMATIC,\n    ];\n    return (\n      this.customQuery !== null ||\n      QUERY_BOND_TYPES.includes(this.type) ||\n      (TYPES.SINGLE === this.type && this.stereo === Bond.PATTERN.STEREO.EITHER)\n    );\n  }\n\n  hasRxnProps(): boolean {\n    return !!this.reactingCenterStatus;\n  }\n\n  getCenter(struct: any): Vec2 {\n    const p1 = struct.atoms.get(this.begin).pp;\n    const p2 = struct.atoms.get(this.end).pp;\n    return Vec2.lc2(p1, 0.5, p2, 0.5);\n  }\n\n  getDir(struct: any): Vec2 {\n    const p1 = struct.atoms.get(this.begin)!.pp;\n    const p2 = struct.atoms.get(this.end)!.pp;\n    return p2.sub(p1).normalized();\n  }\n\n  clone(aidMap?: Map<number, number> | null): Bond {\n    const cp = new Bond(this);\n    if (aidMap) {\n      cp.begin = aidMap.get(cp.begin)!;\n      cp.end = aidMap.get(cp.end)!;\n    }\n    return cp;\n  }\n\n  getAttachedSGroups(struct: Struct) {\n    const sGroupsWithBeginAtom =\n      struct.atoms.get(this.begin)?.sgs || new Pile();\n    const sGroupsWithEndAtom = struct.atoms.get(this.end)?.sgs || new Pile();\n    return sGroupsWithBeginAtom?.intersection(sGroupsWithEndAtom);\n  }\n\n  isExternalBondBetweenMonomers(struct: Struct) {\n    if (!struct.isBondFromMacromolecule(this)) {\n      return false;\n    }\n\n    const sGroup1 = struct.getGroupFromAtomId(this.begin);\n    const sGroup2 = struct.getGroupFromAtomId(this.end);\n\n    if (!sGroup1 || !sGroup2) {\n      return false;\n    }\n\n    return sGroup1 !== sGroup2;\n  }\n\n  public static isBondToHiddenLeavingGroup(struct: Struct, bond: Bond) {\n    const beginSuperatomAttachmentPoint =\n      Atom.getSuperAtomAttachmentPointByLeavingGroup(struct, bond.begin);\n    const endSuperatomAttachmentPoint =\n      Atom.getSuperAtomAttachmentPointByLeavingGroup(struct, bond.end);\n\n    return (\n      (beginSuperatomAttachmentPoint &&\n        Atom.isHiddenLeavingGroupAtom(struct, bond.begin) &&\n        bond.end === beginSuperatomAttachmentPoint.atomId) ||\n      (endSuperatomAttachmentPoint &&\n        Atom.isHiddenLeavingGroupAtom(struct, bond.end) &&\n        bond.begin === endSuperatomAttachmentPoint.atomId)\n    );\n  }\n\n  public static isBondToExpandedMonomer(struct: Struct, bond: Bond) {\n    return [...struct.sgroups.values()].some((sgroup) => {\n      return (\n        ((sgroup.atoms.includes(bond.begin) &&\n          !sgroup.atoms.includes(bond.end)) ||\n          (sgroup.atoms.includes(bond.end) &&\n            !sgroup.atoms.includes(bond.begin))) &&\n        sgroup.isExpanded() &&\n        sgroup instanceof MonomerMicromolecule\n      );\n    });\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Vec2 } from './vec2';\nimport assert from 'assert';\n\nexport class Box2Abs {\n  readonly p0: Vec2;\n  readonly p1: Vec2;\n\n  constructor();\n  constructor(p: Vec2);\n  constructor(p0: Vec2, p1: Vec2);\n  constructor(x0: number, y0: number, x1: number, y1: number);\n  constructor(...args: Array<any>) {\n    if (args.length === 1 && 'min' in args[0] && 'max' in args[0]) {\n      this.p0 = args[0].min;\n      this.p1 = args[0].max;\n    }\n\n    if (args.length === 2) {\n      this.p0 = args[0];\n      this.p1 = args[1];\n    } else if (args.length === 4) {\n      this.p0 = new Vec2(args[0], args[1]);\n      this.p1 = new Vec2(args[2], args[3]);\n    } else if (args.length === 0) {\n      this.p0 = new Vec2();\n      this.p1 = new Vec2();\n    } else {\n      throw new Error(\n        'Box2Abs constructor only accepts 4 numbers or 2 vectors or no args!',\n      );\n    }\n  }\n\n  toString(): string {\n    return this.p0.toString() + ' ' + this.p1.toString();\n  }\n\n  clone(): Box2Abs {\n    return new Box2Abs(this.p0, this.p1);\n  }\n\n  extend(lp: Vec2, rb: Vec2): Box2Abs {\n    rb = rb || lp;\n    return new Box2Abs(this.p0.sub(lp), this.p1.add(rb));\n  }\n\n  include(p: Vec2): Box2Abs {\n    assert(p != null);\n\n    return new Box2Abs(this.p0.min(p), this.p1.max(p));\n  }\n\n  contains(p: Vec2, ext = 0.0): boolean {\n    assert(p != null);\n\n    return (\n      p.x >= this.p0.x - ext &&\n      p.x <= this.p1.x + ext &&\n      p.y >= this.p0.y - ext &&\n      p.y <= this.p1.y + ext\n    );\n  }\n\n  translate(d: Vec2): Box2Abs {\n    return new Box2Abs(this.p0.add(d), this.p1.add(d));\n  }\n\n  transform(f: (p: Vec2, options: any) => Vec2, options: any): Box2Abs {\n    assert(typeof f === 'function');\n\n    return new Box2Abs(f(this.p0, options), f(this.p1, options));\n  }\n\n  sz(): Vec2 {\n    return this.p1.sub(this.p0);\n  }\n\n  centre(): Vec2 {\n    return Vec2.centre(this.p0, this.p1);\n  }\n\n  pos() {\n    return this.p0;\n  }\n\n  hasZeroArea() {\n    const size = this.sz();\n    return size.x === 0 && size.y === 0;\n  }\n\n  static fromRelBox(relBox: any): Box2Abs {\n    return new Box2Abs(\n      relBox.x,\n      relBox.y,\n      relBox.x + relBox.width,\n      relBox.y + relBox.height,\n    );\n  }\n\n  static union(b1: Box2Abs, b2: Box2Abs): Box2Abs {\n    return new Box2Abs(Vec2.min(b1.p0, b2.p0), Vec2.max(b1.p1, b2.p1));\n  }\n\n  static segmentIntersection(a: Vec2, b: Vec2, c: Vec2, d: Vec2): boolean {\n    const dc = (a.x - c.x) * (b.y - c.y) - (a.y - c.y) * (b.x - c.x);\n    const dd = (a.x - d.x) * (b.y - d.y) - (a.y - d.y) * (b.x - d.x);\n    const da = (c.x - a.x) * (d.y - a.y) - (c.y - a.y) * (d.x - a.x);\n    const db = (c.x - b.x) * (d.y - b.y) - (c.y - b.y) * (d.x - b.x);\n\n    if (dc === 0 && dd === 0 && da === 0 && db === 0) {\n      // Check for collinearity and overlapping cases\n      return (\n        Box2Abs.#isPointOnSegment(a, b, c) ||\n        Box2Abs.#isPointOnSegment(a, b, d) ||\n        Box2Abs.#isPointOnSegment(c, d, a) ||\n        Box2Abs.#isPointOnSegment(c, d, b)\n      );\n    } else return dc * dd < 0 && da * db < 0;\n  }\n\n  // Helper function to check if a point is on a line segment\n  static #isPointOnSegment(\n    segPointA: Vec2,\n    segPointB: Vec2,\n    point: Vec2,\n  ): boolean {\n    const minX = Math.min(segPointA.x, segPointB.x);\n    const maxX = Math.max(segPointA.x, segPointB.x);\n    const minY = Math.min(segPointA.y, segPointB.y);\n    const maxY = Math.max(segPointA.y, segPointB.y);\n\n    return (\n      point.x >= minX && point.x <= maxX && point.y >= minY && point.y <= maxY\n    );\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Vec2 } from 'domain/entities';\n\nexport interface ScaleOptions {\n  microModeScale: number;\n  macroModeScale: number;\n}\n\nfunction canvasToModel(point: Vec2, options: ScaleOptions): Vec2 {\n  return point.scaled(1 / options.microModeScale);\n}\n\nfunction modelToCanvas(vector: Vec2, options: ScaleOptions): Vec2 {\n  return vector.scaled(options.microModeScale);\n}\n\nexport const Scale = {\n  canvasToModel,\n  modelToCanvas,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Bond, Neighbor, Struct } from 'domain/entities';\n\nfunction isCorrectStereoCenter(\n  bond: Bond,\n  beginNeighs: Array<Neighbor> | undefined,\n  endNeighs: Array<Neighbor> | undefined,\n  struct: Struct,\n) {\n  const beginAtom = struct.atoms.get(bond.begin);\n\n  let EndAtomNeigh: number | undefined = NaN;\n\n  if (endNeighs?.length === 2) {\n    EndAtomNeigh =\n      endNeighs[0].aid === bond.begin ? endNeighs[1].aid : endNeighs[0].aid;\n  }\n\n  if (bond.stereo > 0) {\n    if (\n      endNeighs?.length === 1 &&\n      beginNeighs?.length === 2 &&\n      Number(beginAtom?.implicitH) % 2 === 0\n    ) {\n      return false;\n    }\n\n    if (\n      endNeighs?.length === 2 &&\n      beginNeighs?.length === 2 &&\n      Number(beginAtom?.implicitH) % 2 === 0 &&\n      struct.atomGetNeighbors(EndAtomNeigh)?.length === 1\n    ) {\n      return false;\n    }\n\n    if (beginNeighs?.length === 1) {\n      return false;\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport const StereoValidator = {\n  isCorrectStereoCenter,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { Struct } from '../entities';\n\nexport class FunctionalGroupsProvider {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: FunctionalGroupsProvider;\n  functionalGroupsList: Struct[];\n  constructor() {\n    this.functionalGroupsList = [];\n  }\n\n  public static getInstance(): FunctionalGroupsProvider {\n    if (!FunctionalGroupsProvider.instance) {\n      FunctionalGroupsProvider.instance = new FunctionalGroupsProvider();\n    }\n    return FunctionalGroupsProvider.instance;\n  }\n\n  public getFunctionalGroupsList() {\n    return this.functionalGroupsList;\n  }\n\n  public setFunctionalGroupsList(list: Struct[]): void {\n    this.functionalGroupsList = list;\n  }\n\n  public addToFunctionalGroupsList(list: Struct[]): void {\n    this.functionalGroupsList = [...this.functionalGroupsList, ...list];\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { Struct } from '../entities';\n\nexport class SaltsAndSolventsProvider {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: SaltsAndSolventsProvider;\n  saltsAndSolventsList: Struct[];\n  constructor() {\n    this.saltsAndSolventsList = [];\n  }\n\n  public static getInstance(): SaltsAndSolventsProvider {\n    if (!SaltsAndSolventsProvider.instance) {\n      SaltsAndSolventsProvider.instance = new SaltsAndSolventsProvider();\n    }\n    return SaltsAndSolventsProvider.instance;\n  }\n\n  public getSaltsAndSolventsList() {\n    return this.saltsAndSolventsList;\n  }\n\n  public setSaltsAndSolventsList(list: Struct[]): void {\n    this.saltsAndSolventsList = list;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { IMAGE_KEY, MULTITAIL_ARROW_KEY } from 'domain/constants';\n\nexport const SgContexts = {\n  Fragment: 'Fragment',\n  Multifragment: 'Multifragment',\n  Bond: 'Bond',\n  Atom: 'Atom',\n  Group: 'Group',\n};\n\nexport const selectionKeys = [\n  'atoms',\n  'bonds',\n  'frags',\n  'sgroups',\n  'rgroups',\n  'rgroupAttachmentPoints',\n  'rxnArrows',\n  'rxnPluses',\n  'simpleObjects',\n  'texts',\n  IMAGE_KEY,\n  MULTITAIL_ARROW_KEY,\n] as const;\n\nexport const defaultBondThickness = 2;\n\nexport enum MonomerGroups {\n  SUGARS = 'Sugars',\n  BASES = 'Bases',\n  PHOSPHATES = 'Phosphates',\n  PEPTIDES = 'Amino acids',\n  NUCLEOTIDES = 'Nucleotides',\n}\n\nexport enum MonomerGroupCodes {\n  R = 'R',\n  A = 'A',\n  C = 'C',\n  G = 'G',\n  T = 'T',\n  U = 'U',\n  X = 'X',\n  P = 'P',\n}\n\nexport const MonomerCodeToGroup: Record<MonomerGroupCodes, MonomerGroups> = {\n  R: MonomerGroups.SUGARS,\n  A: MonomerGroups.BASES,\n  C: MonomerGroups.BASES,\n  G: MonomerGroups.BASES,\n  T: MonomerGroups.BASES,\n  U: MonomerGroups.BASES,\n  X: MonomerGroups.BASES,\n  P: MonomerGroups.PHOSPHATES,\n} as const;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Atom } from './atom';\nimport { Bond } from './bond';\nimport { Box2Abs } from './box2Abs';\nimport { Pile } from './pile';\nimport { Struct } from './struct';\nimport { SaltsAndSolventsProvider } from '../helpers';\nimport { Vec2 } from './vec2';\nimport { ReStruct } from '../../application/render';\nimport { FunctionalGroup, Pool, SGroupAttachmentPoint } from 'domain/entities';\nimport { ReSGroup } from 'application/render';\nimport { SgContexts } from 'application/editor/shared/constants';\nimport assert from 'assert';\nimport { isNumber } from 'lodash';\n\nexport class SGroupBracketParams {\n  readonly c: Vec2;\n  readonly d: Vec2;\n  readonly n: Vec2;\n  readonly w: number;\n  readonly h: number;\n\n  constructor(c: Vec2, d: Vec2, w: number, h: number) {\n    this.c = c;\n    this.d = d;\n    this.n = d.rotateSC(1, 0);\n    this.w = w;\n    this.h = h;\n  }\n}\n\nexport class SGroup {\n  static TYPES = {\n    SUP: 'SUP',\n    MUL: 'MUL',\n    SRU: 'SRU',\n    MON: 'MON',\n    MER: 'MER',\n    COP: 'COP',\n    CRO: 'CRO',\n    MOD: 'MOD',\n    GRA: 'GRA',\n    COM: 'COM',\n    MIX: 'MIX',\n    FOR: 'FOR',\n    DAT: 'DAT',\n    ANY: 'ANY',\n    GEN: 'GEN',\n    queryComponent: 'queryComponent',\n  };\n\n  type: string;\n  id: number;\n  label: number;\n  bracketBox: any;\n  bracketDirection: Vec2;\n  areas: any;\n  hover: boolean;\n  hovering: any;\n  selected: boolean;\n  selectionPlate: any;\n  atoms: any;\n  atomSet: any;\n  parentAtomSet: any;\n  patoms?: any;\n  allAtoms: any;\n  bonds: any;\n  xBonds: any;\n  neiAtoms: any;\n  pp: Vec2 | null;\n  data: any;\n  dataArea: any;\n  functionalGroup: FunctionalGroup | undefined;\n  private readonly attachmentPoints: SGroupAttachmentPoint[];\n\n  constructor(type: string) {\n    this.type = type;\n    this.id = -1;\n    this.label = -1;\n    this.bracketBox = null;\n    this.bracketDirection = new Vec2(1, 0);\n    this.areas = [];\n\n    this.hover = false;\n    this.hovering = null;\n    this.selected = false;\n    this.selectionPlate = null;\n\n    this.atoms = [];\n    this.patoms = [];\n    this.bonds = [];\n    this.xBonds = [];\n    this.neiAtoms = [];\n    this.attachmentPoints = [];\n    this.pp = null;\n    this.data = {\n      mul: 1, // multiplication count for MUL group\n      connectivity: 'ht', // head-to-head, head-to-tail or either-unknown\n      name: '',\n      subscript: '',\n      expanded: undefined,\n      // data s-group fields\n      attached: false,\n      absolute: true,\n      showUnits: false,\n      nCharsToDisplay: -1,\n      tagChar: '',\n      daspPos: 1,\n      fieldType: 'F',\n      fieldName: '',\n      fieldValue: '',\n      units: '',\n      query: '',\n      queryOp: '',\n    };\n  }\n\n  // TODO: these methods should be overridden\n  //      and should only accept valid attributes for each S-group type.\n  //      The attributes should be accessed via these methods only and not directly through this.data.\n  // stub\n  getAttr(attr: string): any {\n    return this.data[attr];\n  }\n\n  setFunctionalGroup(functionalGroup: FunctionalGroup) {\n    this.functionalGroup = functionalGroup;\n  }\n\n  // TODO: should be group-specific\n  getAttrs(): any {\n    const attrs = {};\n    Object.keys(this.data).forEach((attr) => {\n      attrs[attr] = this.data[attr];\n    });\n    return attrs;\n  }\n\n  // stub\n  setAttr(attr: string, value: any): any {\n    const oldValue = this.data[attr];\n    this.data[attr] = value;\n    return oldValue;\n  }\n\n  // stub\n  checkAttr(attr: string, value: any): boolean {\n    return this.data[attr] === value;\n  }\n\n  updateOffset(offset: Vec2): void {\n    this.pp = Vec2.sum(this.bracketBox.p1, offset);\n  }\n\n  isExpanded(): boolean {\n    // flag \".data.expanded\" exists only for the SuperAtom\n    if (SGroup.isSuperAtom(this)) {\n      return Boolean(this.data.expanded);\n    } else {\n      return true;\n    }\n  }\n\n  isContracted(): boolean {\n    return !this.isExpanded();\n  }\n\n  calculatePP(struct: Struct): void {\n    let topLeftPoint;\n\n    const isAtomContext = this.data.context === SgContexts.Atom;\n    const isBondContent = this.data.context === SgContexts.Bond;\n    if (isAtomContext || isBondContent) {\n      const contentBoxes: Array<any> = [];\n      let contentBB: Box2Abs | null = null;\n\n      this.atoms.forEach((aid) => {\n        const atom = struct.atoms.get(aid);\n        const pos = new Vec2(atom!.pp);\n\n        const ext = new Vec2(0.05 * 3, 0.05 * 3);\n        const bba = new Box2Abs(pos, pos).extend(ext, ext);\n        contentBoxes.push(bba);\n      });\n\n      contentBoxes.forEach((bba) => {\n        let bbb: Box2Abs | null = null;\n        [bba.p0.x, bba.p1.x].forEach((x) => {\n          [bba.p0.y, bba.p1.y].forEach((y) => {\n            const v = new Vec2(x, y);\n            bbb = !bbb ? new Box2Abs(v, v) : bbb!.include(v);\n          });\n        });\n        contentBB = !contentBB ? bbb : Box2Abs.union(contentBB, bbb!);\n      });\n\n      topLeftPoint = isBondContent ? contentBB!.centre() : contentBB!.p0;\n    } else {\n      topLeftPoint = this.bracketBox.p1.add(new Vec2(0.5, 0.5));\n    }\n\n    const sgroups = Array.from(struct.sgroups.values());\n    for (let i = 0; i < struct.sgroups.size; ++i) {\n      if (!descriptorIntersects(sgroups as [], topLeftPoint)) break;\n\n      topLeftPoint = topLeftPoint.add(new Vec2(0, 0.5));\n    }\n\n    // TODO: the code below is a temporary solution that will be removed after the implementation of the internal format\n    // TODO: in schema.json required fields [\"context\", \"FieldValue\"] in sgroups type DAT must be returned\n    if (this.data.fieldName === 'INDIGO_CIP_DESC') {\n      if (this.atoms.length === 1) {\n        const sAtom = this.atoms[0];\n        const sAtomPP = struct.atoms.get(sAtom)?.pp;\n\n        if (sAtomPP) {\n          topLeftPoint = sAtomPP;\n        }\n      } else {\n        topLeftPoint = SGroup.getMassCentre(struct, this.atoms);\n      }\n    }\n\n    this.pp = topLeftPoint;\n  }\n\n  isGroupAttached(struct: Struct): boolean {\n    return this.getConnectionPointsCount(struct) >= 1;\n  }\n\n  addAttachmentPoint(\n    attachmentPoint: SGroupAttachmentPoint,\n    validateUniqueness = true,\n  ): void {\n    const isAttachmentPointAlreadyExist = this.attachmentPoints.some(\n      ({ atomId, leaveAtomId }) =>\n        attachmentPoint.atomId === atomId &&\n        attachmentPoint.leaveAtomId === leaveAtomId,\n    );\n\n    if (isAttachmentPointAlreadyExist && validateUniqueness) {\n      throw new Error(\n        'The same attachment point cannot be added to an S-group more than once',\n      );\n    }\n\n    this.attachmentPoints.push(attachmentPoint);\n  }\n\n  addAttachmentPoints(\n    attachmentPoints:\n      | ReadonlyArray<SGroupAttachmentPoint>\n      | SGroupAttachmentPoint[],\n    validateUniqueness = true,\n  ): void {\n    for (const attachmentPoint of attachmentPoints) {\n      this.addAttachmentPoint(attachmentPoint, validateUniqueness);\n    }\n  }\n\n  removeAttachmentPoint(attachmentPoint: SGroupAttachmentPoint): boolean {\n    const index = this.attachmentPoints.indexOf(attachmentPoint);\n    if (index !== -1) {\n      this.attachmentPoints.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  getAttachmentPoints(): ReadonlyArray<SGroupAttachmentPoint> {\n    return this.attachmentPoints;\n  }\n\n  /**\n   * Connection point - is not! the same as Attachment point.\n   * Connection point is a fact for the sgroup - is the atom that has connected bond to an external atom.\n   * So it doesn't matter how it happens (connection atom).\n   * When we talk about \"Attachment point\" it is a hypothetical, suitable place to connect to sgroup.\n   * But there are cases when sgroup doesn't have attachment points but have connection (read from external file)\n   */\n  private getConnectionPointsCount(struct: Struct): number {\n    const connectionAtoms = new Set<number>();\n    for (const atomId of this.atoms) {\n      const neighbors = struct.atomGetNeighbors(atomId) ?? [];\n      for (const { aid } of neighbors) {\n        if (!this.atoms.includes(aid)) {\n          connectionAtoms.add(atomId);\n          break;\n        }\n      }\n    }\n    return connectionAtoms.size;\n  }\n\n  isNotContractible(struct: Struct): boolean {\n    return this.getConnectionPointsCount(struct) > 1;\n  }\n\n  /**\n   * Why only one?\n   * Currently other parts of application don't support several attachment points for sgroup.\n   * So to support it - it's required to refactor almost every peace of code with sgroups.\n   *\n   *\n   * Why return 'undefined' without fallback?\n   * If sgroup doesn't have attachment points it can't be attached, (salt and solvents for example).\n   */\n  getAttachmentAtomId(): number | undefined {\n    return this.attachmentPoints[0]?.atomId;\n  }\n\n  /**\n   * WHY? When group is contracted we need to understand the represent atom to calculate position.\n   * It is not always the attachmentPoint!! if no attachment point - use the first atom\n   */\n  getContractedPosition(struct: Struct): {\n    atomId: number;\n    position: Vec2;\n  } {\n    let atomId = this.attachmentPoints[0]?.atomId;\n    let representAtom = struct.atoms.get(atomId);\n    // if there is no attachment points in sgroup - use first externally connected atom if exist or just first atom\n    if (!representAtom) {\n      let externalConnectionAtom;\n      struct.bonds.forEach((bond) => {\n        const isBeginAtomInCurrentSgroup =\n          this.atoms.indexOf(bond.begin) !== -1;\n        const isEndAtomInCurrentSgroup = this.atoms.indexOf(bond.end) !== -1;\n\n        if (isBeginAtomInCurrentSgroup && !isEndAtomInCurrentSgroup) {\n          externalConnectionAtom = bond.begin;\n        } else if (isEndAtomInCurrentSgroup && !isBeginAtomInCurrentSgroup) {\n          externalConnectionAtom = bond.end;\n        }\n      });\n\n      atomId = isNumber(externalConnectionAtom)\n        ? externalConnectionAtom\n        : this.atoms[0];\n      representAtom = struct.atoms.get(atomId);\n    }\n    assert(representAtom != null);\n    return { atomId, position: representAtom.pp };\n  }\n\n  cloneAttachmentPoints(\n    atomIdMap: Map<number, number>,\n  ): ReadonlyArray<SGroupAttachmentPoint> {\n    return this.attachmentPoints.map((point) => point.clone(atomIdMap));\n  }\n\n  public get isSuperatomWithoutLabel() {\n    return this.type === SGroup.TYPES.SUP && !this.data.name;\n  }\n\n  public get isMonomer() {\n    return false;\n  }\n\n  static getOffset(sgroup: SGroup): null | Vec2 {\n    if (!sgroup?.pp || !sgroup.bracketBox) return null;\n    return Vec2.diff(sgroup.pp, sgroup.bracketBox.p1);\n  }\n\n  static isSaltOrSolvent(moleculeName: string): boolean {\n    const saltsAndSolventsProvider = SaltsAndSolventsProvider.getInstance();\n    const saltsAndSolvents = saltsAndSolventsProvider.getSaltsAndSolventsList();\n    return saltsAndSolvents.some(\n      ({ name, abbreviation }) =>\n        name === moleculeName || moleculeName === abbreviation,\n    );\n  }\n\n  static isAtomInSaltOrSolvent(\n    atomId: number,\n    sgroupsOnCanvas: SGroup[],\n  ): boolean {\n    const onlySaltsOrSolvents = sgroupsOnCanvas.filter((sgroup) =>\n      this.isSaltOrSolvent(sgroup.data.name),\n    );\n    return onlySaltsOrSolvents.some(({ atoms }) =>\n      atoms.some((atomIdInSaltOrSolvent) => atomIdInSaltOrSolvent === atomId),\n    );\n  }\n\n  static isBondInSaltOrSolvent(\n    bondId: number,\n    sgroupsOnCanvas: SGroup[],\n  ): boolean {\n    const onlySaltsOrSolvents = sgroupsOnCanvas.filter((sgroup) =>\n      this.isSaltOrSolvent(sgroup.data.name),\n    );\n    return onlySaltsOrSolvents.some(({ bonds }) =>\n      bonds.some((bondIdInSaltOrSolvent) => bondIdInSaltOrSolvent === bondId),\n    );\n  }\n\n  static filterAtoms(atoms: any, map: any) {\n    const newAtoms: Array<any> = [];\n    for (let i = 0; i < atoms.length; ++i) {\n      const aid = atoms[i];\n      if (typeof map[aid] !== 'number') newAtoms.push(aid);\n      else if (map[aid] >= 0) newAtoms.push(map[aid]);\n      else newAtoms.push(-1);\n    }\n    return newAtoms;\n  }\n\n  static removeNegative(atoms: any) {\n    const newAtoms: Array<any> = [];\n    for (let j = 0; j < atoms.length; ++j) {\n      if (atoms[j] >= 0) newAtoms.push(atoms[j]);\n    }\n    return newAtoms;\n  }\n\n  static filter(_mol, sg, atomMap) {\n    sg.atoms = SGroup.removeNegative(SGroup.filterAtoms(sg.atoms, atomMap));\n  }\n\n  static clone(sgroup: SGroup, aidMap: Map<number, number>): SGroup {\n    const cp = new SGroup(sgroup.type);\n\n    Object.keys(sgroup.data).forEach((field) => {\n      cp.data[field] = sgroup.data[field];\n    });\n\n    cp.atoms = sgroup.atoms.map((elem) => aidMap.get(elem));\n    cp.pp = sgroup.pp;\n    cp.bracketBox = sgroup.bracketBox;\n    cp.patoms = null;\n    cp.bonds = null;\n    cp.allAtoms = sgroup.allAtoms;\n    cp.data.expanded = sgroup.data.expanded;\n    cp.addAttachmentPoints(sgroup.cloneAttachmentPoints(aidMap));\n    return cp;\n  }\n\n  static addAtom(sgroup: SGroup, aid: number, struct: Struct): void {\n    sgroup.atoms.push(aid);\n    if (sgroup.isNotContractible(struct)) {\n      sgroup.setAttr('expanded', true);\n    }\n  }\n\n  static removeAtom(sgroup: SGroup, aid: number): void {\n    if (!sgroup) {\n      return;\n    }\n\n    for (let i = 0; i < sgroup.atoms.length; ++i) {\n      if (sgroup.atoms[i] === aid) {\n        sgroup.atoms.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  static getCrossBonds(\n    mol: any,\n    parentAtomSet: Pile<number>,\n  ): { [key: number]: Array<number> } {\n    const crossBonds: { [key: number]: Array<number> } = {};\n    mol.bonds.forEach((bond, bid: number) => {\n      if (parentAtomSet.has(bond.begin) && !parentAtomSet.has(bond.end)) {\n        if (!crossBonds[bond.begin]) {\n          crossBonds[bond.begin] = [];\n        }\n        crossBonds[bond.begin].push(bid);\n      } else if (\n        parentAtomSet.has(bond.end) &&\n        !parentAtomSet.has(bond.begin)\n      ) {\n        if (!crossBonds[bond.end]) {\n          crossBonds[bond.end] = [];\n        }\n        crossBonds[bond.end].push(bid);\n      }\n    });\n    return crossBonds;\n  }\n\n  static bracketPos(\n    sGroup,\n    mol,\n    crossBondsPerAtom?: { [key: number]: Array<number> },\n    remol?: ReStruct,\n    render?,\n  ): void {\n    const BORDER_EXT = new Vec2(0.05 * 3, 0.05 * 3);\n    const PADDING_VECTOR = new Vec2(0.2, 0.4);\n    const atoms = sGroup.atoms;\n    const crossBonds = crossBondsPerAtom\n      ? Object.values(crossBondsPerAtom).flat()\n      : null;\n    // TODO: Overall cross bonds logic seems unclear and not-correct for s groups in general leading to tilted hover plate\n    if (sGroup.isMonomer || !crossBonds || crossBonds.length !== 2) {\n      sGroup.bracketDirection = new Vec2(1, 0);\n    } else {\n      const p1 = mol.bonds.get(crossBonds[0]).getCenter(mol);\n      const p2 = mol.bonds.get(crossBonds[1]).getCenter(mol);\n      sGroup.bracketDirection = Vec2.diff(p2, p1).normalized();\n    }\n    const d = sGroup.bracketDirection;\n\n    let braketBox: Box2Abs | null = null;\n    const contentBoxes: Array<any> = [];\n    const getAtom = (aid) => {\n      if (remol && render) {\n        return remol.atoms.get(aid);\n      }\n      return mol.atoms.get(aid);\n    };\n    atoms.forEach((aid) => {\n      const atom = getAtom(aid);\n      let position;\n      let structBoundingBox;\n      if ('getVBoxObj' in atom && render) {\n        structBoundingBox = atom.getVBoxObj(render);\n      } else {\n        position = new Vec2(atom.pp);\n        structBoundingBox = new Box2Abs(position, position);\n      }\n      contentBoxes.push(structBoundingBox.extend(BORDER_EXT, BORDER_EXT));\n    });\n    contentBoxes.forEach((bba) => {\n      let bbb: Box2Abs | null = null;\n      [bba.p0.x, bba.p1.x].forEach((x) => {\n        [bba.p0.y, bba.p1.y].forEach((y) => {\n          const v = new Vec2(x, y);\n          const p = new Vec2(Vec2.dot(v, d), Vec2.dot(v, d.rotateSC(1, 0)));\n          bbb = !bbb ? new Box2Abs(p, p) : bbb!.include(p);\n        });\n      });\n      braketBox = !braketBox ? bbb : Box2Abs.union(braketBox, bbb!);\n    });\n    if (!render) render = window.ketcher!.editor.render;\n    let attachmentPointsVBox =\n      render.ctab.getRGroupAttachmentPointsVBoxByAtomIds(atoms);\n    attachmentPointsVBox = attachmentPointsVBox\n      ? attachmentPointsVBox.extend(BORDER_EXT, BORDER_EXT)\n      : attachmentPointsVBox;\n    braketBox =\n      attachmentPointsVBox && braketBox\n        ? Box2Abs.union(braketBox, attachmentPointsVBox)\n        : braketBox;\n    if (braketBox)\n      braketBox = (braketBox as Box2Abs).extend(PADDING_VECTOR, PADDING_VECTOR);\n    sGroup.bracketBox = braketBox;\n  }\n\n  static getBracketParameters(\n    mol,\n    crossBondsPerAtom: { [key: number]: Array<Bond> },\n    atomSet: Pile<number>,\n    bb,\n    d,\n    n,\n  ): Array<any> {\n    const brackets: Array<any> = [];\n    const crossBondsPerAtomValues = Object.values(crossBondsPerAtom);\n    const crossBonds = crossBondsPerAtomValues.flat();\n    if (crossBonds.length < 2) {\n      (function () {\n        d = d || new Vec2(1, 0);\n        n = n || d.rotateSC(1, 0);\n        const bracketWidth = Math.min(0.25, bb.sz().x * 0.3);\n        const cl = Vec2.lc2(d, bb.p0.x, n, 0.5 * (bb.p0.y + bb.p1.y));\n        const cr = Vec2.lc2(d, bb.p1.x, n, 0.5 * (bb.p0.y + bb.p1.y));\n        const bracketHeight = bb.sz().y;\n\n        brackets.push(\n          new SGroupBracketParams(cl, d.negated(), bracketWidth, bracketHeight),\n          new SGroupBracketParams(cr, d, bracketWidth, bracketHeight),\n        );\n      })();\n    } else if (\n      crossBonds.length === 2 &&\n      crossBondsPerAtomValues.length === 2\n    ) {\n      (function () {\n        const b1 = mol.bonds.get(crossBonds[0]);\n        const b2 = mol.bonds.get(crossBonds[1]);\n        const cl0 = b1.getCenter(mol);\n        const cr0 = b2.getCenter(mol);\n        const dr = Vec2.diff(cr0, cl0).normalized();\n        const dl = dr.negated();\n\n        const bracketWidth = 0.25;\n        const bracketHeight = 1.5;\n        brackets.push(\n          new SGroupBracketParams(\n            cl0.addScaled(dl, 0),\n            dl,\n            bracketWidth,\n            bracketHeight,\n          ),\n          new SGroupBracketParams(\n            cr0.addScaled(dr, 0),\n            dr,\n            bracketWidth,\n            bracketHeight,\n          ),\n        );\n      })();\n    } else {\n      (function () {\n        for (let i = 0; i < crossBonds.length; ++i) {\n          const b = mol.bonds.get(crossBonds[i]);\n          const c = b.getCenter(mol);\n          const d = atomSet.has(b.begin)\n            ? b.getDir(mol)\n            : b.getDir(mol).negated();\n          brackets.push(new SGroupBracketParams(c, d, 0.2, 1.0));\n        }\n      })();\n    }\n    return brackets;\n  }\n\n  static getObjBBox(atoms, mol): Box2Abs {\n    const a0 = mol.atoms.get(atoms[0]).pp;\n    let bb = new Box2Abs(a0, a0);\n    for (let i = 1; i < atoms.length; ++i) {\n      const aid = atoms[i];\n      const atom = mol.atoms.get(aid);\n      const p = atom.pp;\n      bb = bb.include(p);\n    }\n    return bb;\n  }\n\n  static getAtoms(mol, sg): Array<any> {\n    if (!sg.allAtoms) return sg.atoms;\n    const atoms: Array<any> = [];\n    mol.atoms.forEach((_atom, aid) => {\n      atoms.push(aid);\n    });\n    return atoms;\n  }\n\n  static getBonds(mol, sg): Array<any> {\n    const atoms = SGroup.getAtoms(mol, sg);\n    const bonds: Array<any> = [];\n    mol.bonds.forEach((bond, bid) => {\n      if (atoms.indexOf(bond.begin) >= 0 && atoms.indexOf(bond.end) >= 0) {\n        bonds.push(bid);\n      }\n    });\n    return bonds;\n  }\n\n  static prepareMulForSaving(sgroup, mol): void {\n    sgroup.atoms.sort((a, b) => a - b);\n    sgroup.atomSet = new Pile(sgroup.atoms);\n    sgroup.parentAtomSet = new Pile(sgroup.atomSet);\n    const inBonds: Array<any> = [];\n    const xBonds: Array<any> = [];\n\n    mol.bonds.forEach((bond, bid) => {\n      if (\n        sgroup.parentAtomSet.has(bond.begin) &&\n        sgroup.parentAtomSet.has(bond.end)\n      ) {\n        inBonds.push(bid);\n      } else if (\n        sgroup.parentAtomSet.has(bond.begin) ||\n        sgroup.parentAtomSet.has(bond.end)\n      ) {\n        xBonds.push(bid);\n      }\n    });\n\n    if (xBonds.length !== 0 && xBonds.length !== 2) {\n      throw Error('Unsupported cross-bonds number');\n    }\n\n    let xAtom1 = -1;\n    let xAtom2 = -1;\n    let crossBond = null;\n    if (xBonds.length === 2) {\n      const bond1 = mol.bonds.get(xBonds[0]);\n      xAtom1 = sgroup.parentAtomSet.has(bond1.begin) ? bond1.begin : bond1.end;\n\n      const bond2 = mol.bonds.get(xBonds[1]);\n      xAtom2 = sgroup.parentAtomSet.has(bond2.begin) ? bond2.begin : bond2.end;\n      crossBond = bond2;\n    }\n\n    let tailAtom = xAtom2;\n\n    const newAtoms: Array<any> = [];\n    for (let j = 0; j < sgroup.data.mul - 1; j++) {\n      const amap = {};\n      sgroup.atoms.forEach((aid) => {\n        const atom = mol.atoms.get(aid);\n        const aid2 = mol.atoms.add(new Atom(atom));\n        newAtoms.push(aid2);\n        sgroup.atomSet.add(aid2);\n        amap[aid] = aid2;\n      });\n      inBonds.forEach((bid) => {\n        const bond = mol.bonds.get(bid);\n        const newBond = new Bond(bond);\n        newBond.begin = amap[newBond.begin];\n        newBond.end = amap[newBond.end];\n        mol.bonds.add(newBond);\n      });\n      if (crossBond !== null) {\n        const newCrossBond = new Bond(crossBond);\n        newCrossBond.begin = tailAtom;\n        newCrossBond.end = amap[xAtom1];\n        mol.bonds.add(newCrossBond);\n        tailAtom = amap[xAtom2];\n      }\n    }\n    if (tailAtom >= 0) {\n      const xBond2 = mol.bonds.get(xBonds[1]);\n      if (xBond2.begin === xAtom2) xBond2.begin = tailAtom;\n      else xBond2.end = tailAtom;\n    }\n    sgroup.bonds = xBonds;\n\n    newAtoms.forEach((aid) => {\n      mol.sGroupForest\n        .getPathToRoot(sgroup.id)\n        .reverse()\n        .forEach((sgid) => {\n          mol.atomAddToSGroup(sgid, aid);\n        });\n    });\n  }\n\n  static getMassCentre(mol, atoms): Vec2 {\n    let c = new Vec2(); // mass centre\n    for (let i = 0; i < atoms.length; ++i) {\n      c = c.addScaled(mol.atoms.get(atoms[i]).pp, 1.0 / atoms.length);\n    }\n    return c;\n  }\n\n  static isAtomInContractedSGroup = (atom, sGroups) => {\n    const contractedSGroup: number[] = [];\n\n    sGroups.forEach((sGroupOrReSGroup) => {\n      const sGroup =\n        'item' in sGroupOrReSGroup ? sGroupOrReSGroup.item : sGroupOrReSGroup;\n      if (sGroup.isContracted()) {\n        contractedSGroup.push(sGroup.id);\n      }\n    });\n    return contractedSGroup.some((sg) => atom.sgs.has(sg));\n  };\n\n  static isBondInContractedSGroup(\n    bond: Bond,\n    sGroups: Map<number, ReSGroup> | Pool<SGroup>,\n  ) {\n    return [...sGroups.values()].some((sGroupOrReSGroup) => {\n      const sGroup: SGroup | undefined =\n        'item' in sGroupOrReSGroup ? sGroupOrReSGroup.item : sGroupOrReSGroup;\n      const atomsInSGroup = sGroup?.atoms;\n      return (\n        sGroup?.isContracted() &&\n        atomsInSGroup.includes(bond?.begin) &&\n        atomsInSGroup.includes(bond?.end)\n      );\n    });\n  }\n\n  static isSuperAtom(sGroup?: SGroup): boolean {\n    if (!sGroup) {\n      return false;\n    }\n    return sGroup?.type === SGroup.TYPES.SUP;\n  }\n\n  static isDataSGroup(sGroup: SGroup): boolean {\n    return sGroup.type === SGroup.TYPES.DAT;\n  }\n\n  static isQuerySGroup(sGroup: SGroup): boolean {\n    return sGroup.type === SGroup.TYPES.queryComponent;\n  }\n\n  static isSRUSGroup(sGroup: SGroup): boolean {\n    return sGroup.type === SGroup.TYPES.SRU;\n  }\n\n  static isMulSGroup(sGroup: SGroup): boolean {\n    return sGroup.type === SGroup.TYPES.MUL;\n  }\n}\n\nfunction descriptorIntersects(sgroups: SGroup[], topLeftPoint: Vec2): boolean {\n  return sgroups.some((sg: SGroup) => {\n    if (!sg.pp) return false;\n\n    const sgBottomRightPoint = sg.pp.add(new Vec2(0.5, 0.5));\n    const bottomRightPoint = topLeftPoint.add(new Vec2(0.5, 0.5));\n\n    return Box2Abs.segmentIntersection(\n      sg.pp,\n      sgBottomRightPoint,\n      topLeftPoint,\n      bottomRightPoint,\n    );\n  });\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { SGroup } from 'domain/entities/sgroup';\nimport { Struct } from 'domain/entities/struct';\nimport assert from 'assert';\n\nexport class MonomerMicromolecule extends SGroup {\n  constructor(type: string, public monomer) {\n    super(type);\n    this.data.absolute = false;\n    this.data.attached = false;\n  }\n\n  public get isMonomer() {\n    return true;\n  }\n\n  public override getContractedPosition(struct: Struct) {\n    assert(this.pp);\n    const sgroupContractedPosition = super.getContractedPosition(struct);\n    return { position: this.pp, atomId: sgroupContractedPosition.atomId };\n  }\n\n  public static clone(\n    monomerMicromolecule: MonomerMicromolecule,\n    atomIdMap?: Map<number, number>,\n  ) {\n    const monomerMicromoleculeClone = new MonomerMicromolecule(\n      monomerMicromolecule.type,\n      monomerMicromolecule.monomer,\n    );\n    monomerMicromoleculeClone.pp = monomerMicromolecule.pp;\n    monomerMicromoleculeClone.atoms = atomIdMap\n      ? monomerMicromolecule.atoms.map((elem) => atomIdMap.get(elem))\n      : monomerMicromolecule.atoms;\n\n    return monomerMicromoleculeClone;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { AtomList, AtomListParams } from './atomList';\nimport { Point, Vec2 } from './vec2';\n\nimport { Elements } from 'domain/constants';\nimport { Pile } from './pile';\nimport { Struct } from './struct';\nimport {\n  BaseMicromoleculeEntity,\n  initiallySelectedType,\n} from 'domain/entities/BaseMicromoleculeEntity';\nimport { isNumber } from 'lodash';\nimport { MonomerMicromolecule } from 'domain/entities/monomerMicromolecule';\n\n/**\n * Return unions of Pick.\n * Difference with <Partial<Pick<O,P>>>  that this type always require at least one property\n *\n * Example:\n * interface O {\n *   field1 : 1;\n *   field2: 2;\n *   field3: 3\n * }\n * SubsetOfFields<O, 'field1'| 'field2'>\n * @returns Pick<O, \"field1\"> | Pick<O, \"field2\">\n */\ntype SubsetOfFields<O, P extends keyof O> = P extends P ? Pick<O, P> : never;\n\nexport enum AttachmentPoints {\n  None = 0,\n  FirstSideOnly = 1,\n  SecondSideOnly = 2,\n  BothSides = 3,\n}\n\nexport enum StereoLabel {\n  Abs = 'abs',\n  And = '&',\n  Or = 'or',\n}\n\nenum CIP {\n  S = 'S',\n  R = 'R',\n  s = 's',\n  r = 'r',\n}\n\nexport type Aromaticity = 'aromatic' | 'aliphatic';\nexport type Chirality = 'clockwise' | 'anticlockwise';\n\nexport interface AtomQueryProperties {\n  aromaticity?: Aromaticity | null;\n  ringMembership?: number | null;\n  ringSize?: number | null;\n  connectivity?: number | null;\n  chirality?: Chirality | null;\n  customQuery?: string | null;\n}\n\nexport interface AtomAttributes {\n  stereoParity?: number;\n  stereoLabel?: string | null;\n  exactChangeFlag?: number;\n  rxnFragmentType?: number;\n  invRet?: number;\n  aam?: number;\n  hCount?: number;\n  isPreview?: boolean;\n  unsaturatedAtom?: number;\n  substitutionCount?: number;\n  ringBondCount?: number;\n  queryProperties?: AtomQueryProperties;\n  explicitValence?: number;\n  /**\n   * Rgroup member attachment points\n   * Its value is indigo-converted `ATTCHPT`\n   * Ref: https://discover.3ds.com/sites/default/files/2020-08/biovia_ctfileformats_2020.pdf P15\n   * Note: value `-1` has been converted to `3` by indigo.\n   */\n  attachmentPoints?: AttachmentPoints | null;\n  rglabel?: string | null;\n  charge?: number | null;\n  radical?: number;\n  cip?: CIP | null;\n  isotope?: number | null;\n  alias?: string | null;\n  pseudo?: string;\n  atomList?: AtomListParams | null;\n  label: string;\n  fragment?: number;\n  pp?: Point;\n  implicitH?: number;\n  implicitHCount?: number | null;\n  initiallySelected?: initiallySelectedType;\n}\n\nexport type AtomPropertiesInContextMenu = SubsetOfFields<\n  AtomAttributes,\n  | 'hCount'\n  | 'ringBondCount'\n  | 'substitutionCount'\n  | 'unsaturatedAtom'\n  | 'implicitHCount'\n>;\n\nexport class Atom extends BaseMicromoleculeEntity {\n  static PATTERN = {\n    RADICAL: {\n      NONE: 0,\n      SINGLET: 1,\n      DOUPLET: 2,\n      TRIPLET: 3,\n    },\n    STEREO_PARITY: {\n      NONE: 0,\n      ODD: 1,\n      EVEN: 2,\n      EITHER: 3,\n    },\n  };\n\n  // TODO: rename\n  static attrlist = {\n    alias: null,\n    label: 'C',\n    isotope: null,\n    radical: 0,\n    cip: null,\n    charge: null,\n    explicitValence: -1,\n    ringBondCount: 0,\n    substitutionCount: 0,\n    unsaturatedAtom: 0,\n    hCount: 0,\n    queryProperties: {\n      aromaticity: null,\n      ringMembership: null,\n      ringSize: null,\n      connectivity: null,\n      chirality: null,\n      customQuery: null,\n    },\n    atomList: null,\n    invRet: 0,\n    exactChangeFlag: 0,\n    rglabel: null,\n    attachmentPoints: null,\n    aam: 0,\n    isPreview: false,\n    // enhanced stereo\n    stereoLabel: null,\n    stereoParity: 0,\n    implicitHCount: null,\n  };\n\n  label: string;\n  fragment: number;\n  atomList: AtomList | null;\n  attachmentPoints: AttachmentPoints | null;\n  isotope: number | null;\n  isPreview: boolean;\n  hCount: number;\n  radical: number;\n  cip: CIP | null;\n  charge: number | null;\n  explicitValence: number;\n  ringBondCount: number;\n  queryProperties: AtomQueryProperties;\n  unsaturatedAtom: number;\n  substitutionCount: number;\n  valence: number;\n  implicitH: number;\n  implicitHCount: number | null;\n  pp: Vec2;\n  neighbors: Array<number>;\n  sgs: Pile<number>;\n  badConn: boolean;\n  alias: string | null;\n  rglabel: string | null;\n  aam: number;\n  invRet: number;\n  exactChangeFlag: number;\n  rxnFragmentType: number;\n  stereoLabel?: string | null;\n  stereoParity: number;\n  hasImplicitH?: boolean;\n  pseudo!: string;\n\n  /** @deprecated */\n  get attpnt() {\n    return this.attachmentPoints;\n  }\n\n  constructor(attributes: AtomAttributes) {\n    super(attributes?.initiallySelected);\n    this.label = attributes.label;\n    this.fragment = getValueOrDefault(attributes.fragment, -1);\n    this.alias = getValueOrDefault(attributes.alias, Atom.attrlist.alias);\n    this.isotope = getValueOrDefault(attributes.isotope, Atom.attrlist.isotope);\n    this.radical = getValueOrDefault(attributes.radical, Atom.attrlist.radical);\n    this.cip = getValueOrDefault(attributes.cip, Atom.attrlist.cip);\n    this.charge = getValueOrDefault(attributes.charge, Atom.attrlist.charge);\n    this.rglabel = getValueOrDefault(attributes.rglabel, Atom.attrlist.rglabel);\n    this.attachmentPoints = getValueOrDefault(\n      attributes.attachmentPoints,\n      Atom.attrlist.attachmentPoints,\n    );\n    this.implicitHCount = getValueOrDefault(attributes.implicitHCount, null);\n    this.explicitValence = getValueOrDefault(\n      attributes.explicitValence,\n      Atom.attrlist.explicitValence,\n    );\n    this.isPreview = getValueOrDefault(\n      attributes.isPreview,\n      Atom.attrlist.isPreview,\n    );\n\n    this.valence = 0;\n    this.implicitH = attributes.implicitHCount || attributes.implicitH || 0; // implicitH is not an attribute\n    this.pp = attributes.pp ? new Vec2(attributes.pp) : new Vec2();\n\n    // sgs should only be set when an atom is added to an s-group by an appropriate method,\n    //   or else a copied atom might think it belongs to a group, but the group be unaware of the atom\n    // TODO: make a consistency check on atom/s-group assignments\n    this.sgs = new Pile();\n\n    // query\n    this.ringBondCount = getValueOrDefault(\n      attributes.ringBondCount,\n      Atom.attrlist.ringBondCount,\n    );\n    this.substitutionCount = getValueOrDefault(\n      attributes.substitutionCount,\n      Atom.attrlist.substitutionCount,\n    );\n    this.unsaturatedAtom = getValueOrDefault(\n      attributes.unsaturatedAtom,\n      Atom.attrlist.unsaturatedAtom,\n    );\n    this.hCount = getValueOrDefault(attributes.hCount, Atom.attrlist.hCount);\n    this.queryProperties = {};\n    for (const property in Atom.attrlist.queryProperties) {\n      this.queryProperties[property] = getValueOrDefault(\n        attributes.queryProperties?.[property],\n        Atom.attrlist.queryProperties[property],\n      );\n    }\n\n    // reaction\n    this.aam = getValueOrDefault(attributes.aam, Atom.attrlist.aam);\n    this.invRet = getValueOrDefault(attributes.invRet, Atom.attrlist.invRet);\n    this.exactChangeFlag = getValueOrDefault(\n      attributes.exactChangeFlag,\n      Atom.attrlist.exactChangeFlag,\n    );\n    this.rxnFragmentType = getValueOrDefault(attributes.rxnFragmentType, -1);\n\n    // stereo\n    this.stereoLabel = getValueOrDefault(\n      attributes.stereoLabel,\n      Atom.attrlist.stereoLabel,\n    );\n    this.stereoParity = getValueOrDefault(\n      attributes.stereoParity,\n      Atom.attrlist.stereoParity,\n    );\n\n    this.atomList = attributes.atomList\n      ? new AtomList(attributes.atomList)\n      : null;\n    this.neighbors = []; // set of half-bonds having this atom as their origin\n    this.badConn = false;\n\n    Object.defineProperty(this, 'pseudo', {\n      enumerable: true,\n      get: function () {\n        return getPseudo(this.label);\n      },\n      set: function (value) {\n        if (isCorrectPseudo(value)) {\n          this.label = value;\n        }\n      },\n    });\n  }\n\n  get isRGroupAttachmentPointEditDisabled() {\n    return this.label === 'R#' && this.rglabel !== null;\n  }\n\n  /**\n   * Trick: used for cloned struct for tooltips, for preview, for templates\n   *\n   * Why?\n   * Currently, tooltips are implemented with removing sgroups (wrong implementation)\n   * That's why we need to mark atoms as sgroup attachment points.\n   *\n   * If we change preview approach to flagged (option for showing sgroups without abbreviation),\n   * then we will be able to remove this hack.\n   */\n  setRGAttachmentPointForDisplayPurpose() {\n    this.attachmentPoints = AttachmentPoints.FirstSideOnly;\n  }\n\n  static getConnectedBondIds(struct: Struct, atomId: number): number[] {\n    const result: number[] = [];\n    for (const [bondId, bond] of struct.bonds.entries()) {\n      if (bond.begin === atomId || bond.end === atomId) {\n        result.push(bondId);\n      }\n    }\n    return result;\n  }\n\n  static getAttrHash(atom: Atom) {\n    const attrs: any = {};\n    for (const attr in Atom.attrlist) {\n      if (typeof atom[attr] !== 'undefined') attrs[attr] = atom[attr];\n    }\n    return attrs;\n  }\n\n  static attrGetDefault(attr: string) {\n    if (attr in Atom.attrlist) {\n      return Atom.attrlist[attr];\n    }\n  }\n\n  static isHeteroAtom(label: string): boolean {\n    return label !== 'C' && label !== 'H';\n  }\n\n  static isInAromatizedRing(struct: Struct, atomId: number): boolean {\n    const atom = struct.atoms.get(atomId);\n    if (atom && Atom.isHeteroAtom(atom.label)) {\n      for (const [_, loop] of struct.loops) {\n        const halfBondIds = loop.hbs;\n        if (loop.aromatic) {\n          for (const halfBondId of halfBondIds) {\n            const halfBond = struct.halfBonds.get(halfBondId);\n            if (!halfBond) return false;\n            const { begin, end } = halfBond;\n            if (begin === atomId || end === atomId) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  clone(fidMap?: Map<number, number>): Atom {\n    const ret = new Atom(this);\n    if (fidMap && fidMap.has(this.fragment)) {\n      ret.fragment = fidMap.get(this.fragment)!;\n    }\n    return ret;\n  }\n\n  isQuery(): boolean {\n    const { queryProperties } = this;\n    const isAnyAtom = this.label === 'A';\n    const isAnyMetal = this.label === 'M' || this.label === 'MH';\n    const isAnyHalogen = this.label === 'X' || this.label === 'XH';\n    const isAnyGroup =\n      this.label === 'G' ||\n      this.label === 'G*' ||\n      this.label === 'GH' ||\n      this.label === 'GH*';\n    return Boolean(\n      this.substitutionCount !== 0 ||\n        this.unsaturatedAtom !== 0 ||\n        this.ringBondCount !== 0 ||\n        isAnyAtom ||\n        isAnyMetal ||\n        isAnyHalogen ||\n        isAnyGroup ||\n        this.hCount !== 0 ||\n        this.atomList !== null ||\n        Object.values(queryProperties).some((value) => value),\n    );\n  }\n\n  pureHydrogen(): boolean {\n    return this.label === 'H' && this.isotope === 0;\n  }\n\n  isPlainCarbon(): boolean {\n    return (\n      this.label === 'C' &&\n      this.isotope === null &&\n      this.radical === 0 &&\n      this.charge === null &&\n      this.explicitValence < 0 &&\n      this.ringBondCount === 0 &&\n      this.substitutionCount === 0 &&\n      this.unsaturatedAtom === 0 &&\n      this.hCount === 0 &&\n      !this.atomList\n    );\n  }\n\n  isPseudo(): boolean {\n    // TODO: handle reaxys generics separately\n    return !this.atomList && !this.rglabel && !Elements.get(this.label);\n  }\n\n  hasRxnProps(): boolean {\n    return !!(\n      this.invRet ||\n      this.exactChangeFlag ||\n      this.attachmentPoints !== null ||\n      this.aam\n    );\n  }\n\n  calcValence(connectionCount: number): boolean {\n    const label = this.label;\n    const charge = this.charge || 0;\n    if (this.isQuery() || this.attachmentPoints) {\n      this.implicitH = 0;\n      return true;\n    }\n    const element = Elements.get(label);\n\n    const groupno = element?.group;\n    const radicalCount = radicalElectrons(this.radical);\n    let valence = connectionCount;\n    let hydrogenCount: any = 0;\n    const absCharge = Math.abs(charge);\n\n    if (groupno === undefined) {\n      if (label === 'D' || label === 'T') {\n        valence = 1;\n        hydrogenCount = 1 - radicalCount - connectionCount - absCharge;\n      } else {\n        this.implicitH = 0;\n        return true;\n      }\n    } else if (groupno === 1) {\n      if (\n        label === 'H' ||\n        label === 'Li' ||\n        label === 'Na' ||\n        label === 'K' ||\n        label === 'Rb' ||\n        label === 'Cs' ||\n        label === 'Fr'\n      ) {\n        valence = 1;\n        hydrogenCount = 1 - radicalCount - connectionCount - absCharge;\n      }\n    } else if (groupno === 2) {\n      if (\n        connectionCount + radicalCount + absCharge === 2 ||\n        connectionCount + radicalCount + absCharge === 0\n      ) {\n        valence = 2;\n      } else hydrogenCount = -1;\n    } else if (groupno === 3) {\n      if (label === 'B' || label === 'Al' || label === 'Ga' || label === 'In') {\n        if (charge === -1) {\n          valence = 4;\n          hydrogenCount = 4 - radicalCount - connectionCount;\n        } else {\n          valence = 3;\n          hydrogenCount = 3 - radicalCount - connectionCount - absCharge;\n        }\n      } else if (label === 'Tl') {\n        if (charge === -1) {\n          if (radicalCount + connectionCount <= 2) {\n            valence = 2;\n            hydrogenCount = 2 - radicalCount - connectionCount;\n          } else {\n            valence = 4;\n            hydrogenCount = 4 - radicalCount - connectionCount;\n          }\n        } else if (charge === -2) {\n          if (radicalCount + connectionCount <= 3) {\n            valence = 3;\n            hydrogenCount = 3 - radicalCount - connectionCount;\n          } else {\n            valence = 5;\n            hydrogenCount = 5 - radicalCount - connectionCount;\n          }\n        } else if (radicalCount + connectionCount + absCharge <= 1) {\n          valence = 1;\n          hydrogenCount = 1 - radicalCount - connectionCount - absCharge;\n        } else {\n          valence = 3;\n          hydrogenCount = 3 - radicalCount - connectionCount - absCharge;\n        }\n      }\n    } else if (groupno === 4) {\n      if (label === 'C' || label === 'Si' || label === 'Ge') {\n        valence = 4;\n        hydrogenCount = 4 - radicalCount - connectionCount - absCharge;\n      } else if (label === 'Sn' || label === 'Pb') {\n        if (connectionCount + radicalCount + absCharge <= 2) {\n          valence = 2;\n          hydrogenCount = 2 - radicalCount - connectionCount - absCharge;\n        } else {\n          valence = 4;\n          hydrogenCount = 4 - radicalCount - connectionCount - absCharge;\n        }\n      }\n    } else if (groupno === 5) {\n      if (label === 'N' || label === 'P') {\n        if (charge === 1) {\n          valence = 4;\n          hydrogenCount = 4 - radicalCount - connectionCount;\n        } else if (charge === 2) {\n          valence = 3;\n          hydrogenCount = 3 - radicalCount - connectionCount;\n        } else if (\n          label === 'N' ||\n          radicalCount + connectionCount + absCharge <= 3\n        ) {\n          valence = 3;\n          hydrogenCount = 3 - radicalCount - connectionCount - absCharge;\n        } else {\n          // ELEM_P && rad + conn + absCharge > 3\n          valence = 5;\n          hydrogenCount = 5 - radicalCount - connectionCount - absCharge;\n        }\n      } else if (label === 'Bi' || label === 'Sb' || label === 'As') {\n        if (charge === 1) {\n          if (radicalCount + connectionCount <= 2 && label !== 'As') {\n            valence = 2;\n            hydrogenCount = 2 - radicalCount - connectionCount;\n          } else {\n            valence = 4;\n            hydrogenCount = 4 - radicalCount - connectionCount;\n          }\n        } else if (charge === 2) {\n          valence = 3;\n          hydrogenCount = 3 - radicalCount - connectionCount;\n        } else if (radicalCount + connectionCount <= 3) {\n          valence = 3;\n          hydrogenCount = 3 - radicalCount - connectionCount - absCharge;\n        } else {\n          valence = 5;\n          hydrogenCount = 5 - radicalCount - connectionCount - absCharge;\n        }\n      }\n    } else if (groupno === 6) {\n      if (label === 'O') {\n        if (charge >= 1) {\n          valence = 3;\n          hydrogenCount = 3 - radicalCount - connectionCount;\n        } else {\n          valence = 2;\n          hydrogenCount = 2 - radicalCount - connectionCount - absCharge;\n        }\n      } else if (label === 'S' || label === 'Se' || label === 'Po') {\n        if (charge === 1) {\n          if (connectionCount <= 3) {\n            valence = 3;\n            hydrogenCount = 3 - radicalCount - connectionCount;\n          } else {\n            valence = 5;\n            hydrogenCount = 5 - radicalCount - connectionCount;\n          }\n        } else if (connectionCount + radicalCount + absCharge <= 2) {\n          valence = 2;\n          hydrogenCount = 2 - radicalCount - connectionCount - absCharge;\n        } else if (connectionCount + radicalCount + absCharge <= 4) {\n          // See examples in PubChem\n          // [S] : CID 16684216\n          // [Se]: CID 5242252\n          // [Po]: no example, just following ISIS/Draw logic here\n          valence = 4;\n          hydrogenCount = 4 - radicalCount - connectionCount - absCharge;\n        } else {\n          // See examples in PubChem\n          // [S] : CID 46937044\n          // [Se]: CID 59786\n          // [Po]: no example, just following ISIS/Draw logic here\n          valence = 6;\n          hydrogenCount = 6 - radicalCount - connectionCount - absCharge;\n        }\n      } else if (label === 'Te') {\n        if (charge === -1) {\n          if (connectionCount <= 2) {\n            valence = 2;\n            hydrogenCount = 2 - radicalCount - connectionCount - absCharge;\n          }\n        } else if (charge === 0 || charge === 2) {\n          if (connectionCount <= 2) {\n            valence = 2;\n            hydrogenCount = 2 - radicalCount - connectionCount - absCharge;\n          } else if (connectionCount <= 4) {\n            valence = 4;\n            hydrogenCount = 4 - radicalCount - connectionCount - absCharge;\n          } else if (charge === 0 && connectionCount <= 6) {\n            valence = 6;\n            hydrogenCount = 6 - radicalCount - connectionCount - absCharge;\n          } else {\n            hydrogenCount = -1;\n          }\n        }\n      }\n    } else if (groupno === 7) {\n      if (label === 'F') {\n        valence = 1;\n        hydrogenCount = 1 - radicalCount - connectionCount - absCharge;\n      } else if (\n        label === 'Cl' ||\n        label === 'Br' ||\n        label === 'I' ||\n        label === 'At'\n      ) {\n        if (charge === 1) {\n          if (connectionCount <= 2) {\n            valence = 2;\n            hydrogenCount = 2 - radicalCount - connectionCount;\n          } else if (\n            connectionCount === 3 ||\n            connectionCount === 5 ||\n            connectionCount >= 7\n          ) {\n            hydrogenCount = -1;\n          }\n        } else if (charge === 0) {\n          if (connectionCount <= 1) {\n            valence = 1;\n            hydrogenCount = 1 - radicalCount - connectionCount;\n            // While the halogens can have valence 3, they can not have\n            // hydrogens in that case.\n          } else if (\n            connectionCount === 2 ||\n            connectionCount === 4 ||\n            connectionCount === 6\n          ) {\n            if (radicalCount === 1) {\n              valence = connectionCount;\n              hydrogenCount = 0;\n            } else {\n              hydrogenCount = -1; // will throw an error in the end\n            }\n          } else if (connectionCount > 7) {\n            hydrogenCount = -1; // will throw an error in the end\n          }\n        }\n      }\n    } else if (groupno === 8) {\n      if (connectionCount + radicalCount + absCharge === 0) valence = 1;\n      else hydrogenCount = -1;\n    }\n    if (Atom.isHeteroAtom(label) && this.implicitHCount !== null) {\n      hydrogenCount = this.implicitHCount;\n    }\n    this.valence = valence;\n    this.implicitH = hydrogenCount;\n    if (this.implicitH < 0) {\n      this.valence = connectionCount;\n      this.implicitH = 0;\n      this.badConn = true;\n      return false;\n    }\n    return true;\n  }\n\n  calcValenceMinusHyd(conn: number): number {\n    const charge = this.charge || 0;\n    const label = this.label;\n    const element = Elements.get(this.label);\n    if (!element) {\n      // query atom, skip\n      this.implicitH = 0;\n      return 0;\n    }\n\n    const groupno = element.group;\n    const rad = radicalElectrons(this.radical);\n\n    if (groupno === 3) {\n      if (label === 'B' || label === 'Al' || label === 'Ga' || label === 'In') {\n        if (charge === -1) {\n          if (rad + conn <= 4) return rad + conn;\n        }\n      }\n    } else if (groupno === 5) {\n      if (label === 'N' || label === 'P') {\n        if (charge === 1) return rad + conn;\n        if (charge === 2) return rad + conn;\n      } else if (label === 'Sb' || label === 'Bi' || label === 'As') {\n        if (charge === 1) return rad + conn;\n        else if (charge === 2) return rad + conn;\n      }\n    } else if (groupno === 6) {\n      if (label === 'O') {\n        if (charge >= 1) return rad + conn;\n      } else if (label === 'S' || label === 'Se' || label === 'Po') {\n        if (charge === 1) return rad + conn;\n      }\n    } else if (groupno === 7) {\n      if (label === 'Cl' || label === 'Br' || label === 'I' || label === 'At') {\n        if (charge === 1) return rad + conn;\n      }\n    }\n\n    return rad + conn + Math.abs(charge);\n  }\n\n  public static getSuperAtomAttachmentPointByAttachmentAtom(\n    struct: Struct,\n    atomId: number,\n  ) {\n    const sgroup = struct.getGroupFromAtomId(atomId);\n    return sgroup\n      ?.getAttachmentPoints()\n      .find((attachmentPoint) => attachmentPoint.atomId === atomId);\n  }\n\n  public static getSuperAtomAttachmentPointByLeavingGroup(\n    struct: Struct,\n    atomId: number,\n  ) {\n    const sgroup = struct.getGroupFromAtomId(atomId);\n    return sgroup\n      ?.getAttachmentPoints()\n      .find((attachmentPoint) => attachmentPoint.leaveAtomId === atomId);\n  }\n\n  public static isSuperatomLeavingGroupAtom(struct: Struct, atomId?: number) {\n    if (atomId === undefined) {\n      return false;\n    }\n\n    return Boolean(\n      Atom.getSuperAtomAttachmentPointByLeavingGroup(struct, atomId),\n    );\n  }\n\n  public static isSuperatomAttachmentAtom(struct: Struct, atomId?: number) {\n    if (atomId === undefined) {\n      return false;\n    }\n\n    return Boolean(\n      Atom.getSuperAtomAttachmentPointByAttachmentAtom(struct, atomId),\n    );\n  }\n\n  public static getAttachmentAtomExternalConnections(\n    struct: Struct,\n    attachmentAtomId?: number,\n    leavingGroupAtomid?: number,\n  ) {\n    const bonds = struct.bonds;\n    const atomId = isNumber(attachmentAtomId)\n      ? attachmentAtomId\n      : (leavingGroupAtomid as number);\n    const atom = struct.atoms.get(atomId);\n    const attachmentPoint = isNumber(attachmentAtomId)\n      ? Atom.getSuperAtomAttachmentPointByAttachmentAtom(struct, atomId)\n      : Atom.getSuperAtomAttachmentPointByLeavingGroup(struct, atomId);\n    const attachmentPointAtomBonds =\n      attachmentPoint &&\n      bonds.filter(\n        (_, bond) =>\n          (bond.begin === attachmentPoint.atomId &&\n            bond.end !== attachmentPoint.leaveAtomId) ||\n          (bond.end === attachmentPoint.atomId &&\n            bond.begin !== attachmentPoint.leaveAtomId),\n      );\n    const attachmentAtomExternalConnection =\n      attachmentPointAtomBonds &&\n      attachmentPointAtomBonds.filter((_, bond) => {\n        const beginAtom = struct.atoms.get(bond.begin);\n        const endAtom = struct.atoms.get(bond.end);\n        const isExternalBondBetweenMonomers =\n          bond.isExternalBondBetweenMonomers(struct);\n\n        return (\n          isExternalBondBetweenMonomers ||\n          beginAtom?.fragment !== atom?.fragment ||\n          endAtom?.fragment !== atom?.fragment\n        );\n      });\n\n    return attachmentAtomExternalConnection;\n  }\n\n  public static isHiddenLeavingGroupAtom(struct: Struct, atomId: number) {\n    const attachmentAtomExternalConnections =\n      Atom.getAttachmentAtomExternalConnections(struct, undefined, atomId);\n    const attachmentPoint = Atom.getSuperAtomAttachmentPointByLeavingGroup(\n      struct,\n      atomId,\n    );\n    const sGroup = struct.getGroupFromAtomId(atomId);\n    const isMonomer = sGroup instanceof MonomerMicromolecule;\n\n    if (!sGroup || (!isMonomer && !sGroup?.isSuperatomWithoutLabel)) {\n      return false;\n    }\n\n    return (\n      Atom.isSuperatomLeavingGroupAtom(struct, atomId) &&\n      attachmentAtomExternalConnections &&\n      attachmentAtomExternalConnections.find((_, bond) =>\n        bond.begin === attachmentPoint?.atomId\n          ? bond.beginSuperatomAttachmentPointNumber ===\n            attachmentPoint?.attachmentPointNumber\n          : bond.endSuperatomAttachmentPointNumber ===\n            attachmentPoint?.attachmentPointNumber,\n      )\n    );\n  }\n}\n\nexport function radicalElectrons(radical: any) {\n  radical -= 0;\n  if (radical === Atom.PATTERN.RADICAL.DOUPLET) return 1;\n  else if (\n    radical === Atom.PATTERN.RADICAL.SINGLET ||\n    radical === Atom.PATTERN.RADICAL.TRIPLET\n  ) {\n    return 2;\n  } else {\n    return 0;\n  }\n}\n\nfunction getValueOrDefault<T>(value: T | undefined, defaultValue: T): T {\n  return typeof value !== 'undefined' ? value : defaultValue;\n}\n\nfunction isCorrectPseudo(label) {\n  return (\n    !Elements.get(label) && label !== 'L' && label !== 'L#' && label !== 'R#'\n  );\n}\n\nfunction getPseudo(label: string) {\n  return isCorrectPseudo(label) ? label : '';\n}\n","export class FixedPrecisionCoordinates {\n  static MULTIPLIER = 10 ** 5;\n  public readonly value: number;\n\n  static fromFloatingPrecision(value: number) {\n    return new FixedPrecisionCoordinates(\n      Math.round(value * FixedPrecisionCoordinates.MULTIPLIER),\n    );\n  }\n\n  constructor(value: number | FixedPrecisionCoordinates) {\n    this.value =\n      value instanceof FixedPrecisionCoordinates ? value.value : value;\n  }\n\n  add(\n    fixedPrecisionValue: FixedPrecisionCoordinates,\n  ): FixedPrecisionCoordinates {\n    return new FixedPrecisionCoordinates(\n      this.value + fixedPrecisionValue.value,\n    );\n  }\n\n  sub(\n    fixedPrecisionValue: FixedPrecisionCoordinates,\n  ): FixedPrecisionCoordinates {\n    return new FixedPrecisionCoordinates(\n      this.value - fixedPrecisionValue.value,\n    );\n  }\n\n  multiply(\n    value: FixedPrecisionCoordinates | number,\n  ): FixedPrecisionCoordinates {\n    const isFixedPrecision = value instanceof FixedPrecisionCoordinates;\n    const multiplier = isFixedPrecision ? value.value : value;\n    const result = this.value * multiplier;\n    return new FixedPrecisionCoordinates(\n      Math.round(\n        isFixedPrecision\n          ? result / FixedPrecisionCoordinates.MULTIPLIER\n          : result,\n      ),\n    );\n  }\n\n  divide(value: FixedPrecisionCoordinates | number): FixedPrecisionCoordinates {\n    const isFixedPrecision = value instanceof FixedPrecisionCoordinates;\n    const delimiter = isFixedPrecision ? value.value : value;\n    const result = this.value / delimiter;\n    return new FixedPrecisionCoordinates(\n      Math.round(\n        isFixedPrecision\n          ? result * FixedPrecisionCoordinates.MULTIPLIER\n          : result,\n      ),\n    );\n  }\n\n  getFloatingPrecision(): number {\n    return this.value / FixedPrecisionCoordinates.MULTIPLIER;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Point, Vec2 } from './vec2';\n\nimport { Bond } from './bond';\nimport { StereoLabel } from './atom';\nimport { Struct, StructProperty } from './struct';\n\nexport enum StereoFlag {\n  Mixed = 'MIXED',\n  Abs = 'ABS',\n  And = 'AND',\n  Or = 'OR',\n}\n\nfunction calcStereoFlag(\n  struct: Struct,\n  stereoAids: Array<number>,\n): StereoFlag | undefined {\n  if (!stereoAids || stereoAids.length === 0) return undefined;\n  const filteredStereoAtoms = stereoAids\n    .map((aid) => struct.atoms.get(aid))\n    .filter((atom) => atom?.stereoLabel);\n  if (!filteredStereoAtoms.length) return undefined;\n\n  const atom = filteredStereoAtoms[0]!;\n  const stereoLabel = atom.stereoLabel!; // {string | null} \"<abs|and|or>-<group>\"\n\n  const hasAnotherLabel = filteredStereoAtoms.some(\n    (atom) => atom?.stereoLabel !== stereoLabel,\n  );\n\n  let stereoFlag: StereoFlag;\n  if (hasAnotherLabel) {\n    stereoFlag = StereoFlag.Mixed;\n  } else {\n    const label = stereoLabel.match(/\\D+/g)?.[0];\n    switch (label) {\n      case StereoLabel.Abs: {\n        stereoFlag = StereoFlag.Abs;\n        break;\n      }\n      case StereoLabel.And: {\n        stereoFlag = StereoFlag.And;\n        break;\n      }\n      case StereoLabel.Or: {\n        stereoFlag = StereoFlag.Or;\n        break;\n      }\n      default: {\n        throw new Error(`Unsupported stereo label: ${label}.`);\n      }\n    }\n  }\n  return stereoFlag;\n}\n\nexport class Fragment {\n  #enhancedStereoFlag?: StereoFlag;\n  stereoFlagPosition?: Vec2;\n  properties?: Array<StructProperty>;\n  #stereoAtoms: Array<number>;\n\n  get stereoAtoms(): Array<number> {\n    return [...this.#stereoAtoms];\n  }\n\n  get enhancedStereoFlag() {\n    return this.#enhancedStereoFlag;\n  }\n\n  constructor(\n    stereoAtoms: Array<number> = [],\n    stereoFlagPosition?: Point | null,\n    properties?: Array<StructProperty>,\n  ) {\n    if (stereoFlagPosition) {\n      this.stereoFlagPosition = new Vec2(stereoFlagPosition);\n    }\n    if (properties) {\n      this.properties = properties;\n    }\n    this.#stereoAtoms = stereoAtoms;\n  }\n\n  static getDefaultStereoFlagPosition(\n    struct: Struct,\n    fragmentId: number,\n  ): Vec2 | undefined {\n    const fragment = struct.getFragment(fragmentId);\n    if (!fragment) return undefined;\n    const bb = fragment.getCoordBoundingBox();\n    return new Vec2(bb.max.x, bb.min.y - 1);\n  }\n\n  clone(aidMap: Map<number, number>) {\n    const stereoAtoms = this.#stereoAtoms.map((aid) => aidMap.get(aid)!);\n    const fr = new Fragment(\n      stereoAtoms,\n      this.stereoFlagPosition,\n      this.properties,\n    );\n    fr.#enhancedStereoFlag = this.#enhancedStereoFlag;\n    return fr;\n  }\n\n  updateStereoFlag(struct: Struct) {\n    this.#enhancedStereoFlag = calcStereoFlag(struct, this.stereoAtoms);\n    return this.#enhancedStereoFlag;\n  }\n\n  // TODO: split to 'add' and 'remove methods\n  updateStereoAtom(struct: Struct, aid: number, frId: number, isAdd: boolean) {\n    if (isAdd && !this.#stereoAtoms.includes(aid)) this.#stereoAtoms.push(aid);\n    if (\n      !isAdd &&\n      (struct.atoms.get(aid)?.fragment !== frId ||\n        !Array.from(struct.bonds.values())\n          .filter(\n            (bond) => bond.stereo && bond.type !== Bond.PATTERN.TYPE.DOUBLE,\n          )\n          .some((bond) => bond.begin === aid))\n    ) {\n      this.#stereoAtoms = this.stereoAtoms.filter((item) => item !== aid);\n    }\n\n    this.#enhancedStereoFlag = calcStereoFlag(struct, this.stereoAtoms);\n  }\n\n  addStereoAtom(atomId: number): boolean {\n    if (!this.#stereoAtoms.includes(atomId)) {\n      this.stereoAtoms.push(atomId);\n      return true;\n    }\n    return false;\n  }\n\n  deleteStereoAtom(\n    struct: Struct,\n    fragmentId: number,\n    atomId: number,\n  ): boolean {\n    if (\n      struct.atoms.get(atomId)?.fragment !== fragmentId ||\n      !Array.from(struct.bonds.values())\n        .filter((bond) => bond.stereo && bond.type !== Bond.PATTERN.TYPE.DOUBLE)\n        .some((bond) => bond.begin === atomId)\n    ) {\n      this.#stereoAtoms = this.#stereoAtoms.filter((item) => item !== atomId);\n      return true;\n    }\n    return false;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { ReSGroup } from 'application/render';\nimport assert from 'assert';\nimport { FunctionalGroupsProvider } from '../helpers';\nimport { Atom } from './atom';\nimport { Bond } from './bond';\nimport { Pool } from './pool';\nimport { SGroup } from './sgroup';\nimport { Struct } from './struct';\nimport { HalfBond } from './halfBond';\n\nexport class FunctionalGroup {\n  #sgroup: SGroup;\n\n  constructor(sgroup: SGroup) {\n    assert(sgroup != null);\n\n    this.#sgroup = sgroup;\n    sgroup.setFunctionalGroup(this);\n  }\n\n  get name(): string {\n    return this.#sgroup.data.name;\n  }\n\n  get relatedSGroupId(): number {\n    return this.#sgroup.id;\n  }\n\n  get isExpanded(): boolean {\n    return this.#sgroup.data.expanded;\n  }\n\n  get relatedSGroup(): SGroup {\n    return this.#sgroup;\n  }\n\n  static isFunctionalGroup(sgroup): boolean {\n    const provider = FunctionalGroupsProvider.getInstance();\n    const functionalGroups = provider.getFunctionalGroupsList();\n    const {\n      data: { name },\n      type,\n    } = sgroup;\n    return (\n      type === 'SUP' &&\n      (functionalGroups.some((type) => type.name === name) ||\n        SGroup.isSaltOrSolvent(name))\n    );\n  }\n\n  static atomsInFunctionalGroup(\n    functionalGroups,\n    atom,\n    isNeedCheckForGroups = false,\n  ): number | null {\n    if (functionalGroups.size === 0) {\n      return null;\n    }\n    for (const fg of functionalGroups.values()) {\n      const isFunctionalGroup = isNeedCheckForGroups\n        ? this.isFunctionalGroup(fg.relatedSGroup)\n        : true;\n      if (isFunctionalGroup && fg.relatedSGroup.atoms.includes(atom))\n        return atom;\n    }\n    return null;\n  }\n\n  static bondsInFunctionalGroup(\n    molecule,\n    functionalGroups,\n    bond,\n  ): number | null {\n    if (functionalGroups.size === 0) {\n      return null;\n    }\n    for (const fg of functionalGroups.values()) {\n      const bonds = SGroup.getBonds(molecule, fg.relatedSGroup);\n      if (bonds.includes(bond)) return bond;\n    }\n    return null;\n  }\n\n  static isRGroupAttachmentPointInsideFunctionalGroup(\n    molecule: Struct,\n    id: number,\n  ) {\n    const rgroupAttachmentPoint = molecule.rgroupAttachmentPoints.get(id);\n    assert(rgroupAttachmentPoint != null);\n    const attachedAtom = rgroupAttachmentPoint.atomId;\n    return FunctionalGroup.atomsInFunctionalGroup(\n      molecule.functionalGroups,\n      attachedAtom,\n    );\n  }\n\n  static findFunctionalGroupByAtom(\n    functionalGroups: Pool<FunctionalGroup>,\n    atomId: number,\n  ): number | null;\n\n  static findFunctionalGroupByAtom(\n    functionalGroups: Pool<FunctionalGroup>,\n    atomId: number,\n    isFunctionalGroupReturned: true,\n  ): FunctionalGroup | null;\n\n  static findFunctionalGroupByAtom(\n    functionalGroups: Pool<FunctionalGroup>,\n    atomId: number,\n    isFunctionalGroupReturned?: boolean,\n  ): number | FunctionalGroup | null {\n    for (const fg of functionalGroups.values()) {\n      if (\n        !fg.relatedSGroup.isSuperatomWithoutLabel &&\n        fg.relatedSGroup.atoms.includes(atomId)\n      )\n        return isFunctionalGroupReturned ? fg : fg.relatedSGroupId;\n    }\n    return null;\n  }\n\n  static findFunctionalGroupByBond(\n    molecule: Struct,\n    functionalGroups: Pool<FunctionalGroup>,\n    bondId: number | null,\n  ): number | null;\n\n  static findFunctionalGroupByBond(\n    molecule: Struct,\n    functionalGroups: Pool<FunctionalGroup>,\n    bondId: number | null,\n    isFunctionalGroupReturned: true,\n  ): FunctionalGroup | null;\n\n  static findFunctionalGroupByBond(\n    molecule: Struct,\n    functionalGroups: Pool<FunctionalGroup>,\n    bondId: number | null,\n    isFunctionalGroupReturned?: boolean,\n  ): FunctionalGroup | number | null {\n    for (const fg of functionalGroups.values()) {\n      const bonds = SGroup.getBonds(molecule, fg.relatedSGroup);\n      if (!fg.relatedSGroup.isSuperatomWithoutLabel && bonds.includes(bondId)) {\n        return isFunctionalGroupReturned ? fg : fg.relatedSGroupId;\n      }\n    }\n    return null;\n  }\n\n  static findFunctionalGroupBySGroup(\n    functionalGroups: Pool<FunctionalGroup>,\n    sGroup?: SGroup,\n  ) {\n    const key = functionalGroups.find(\n      (_, functionalGroup) => functionalGroup.relatedSGroupId === sGroup?.id,\n    );\n    return key !== null ? functionalGroups.get(key) : undefined;\n  }\n\n  static clone(functionalGroup: FunctionalGroup): FunctionalGroup {\n    return new FunctionalGroup(functionalGroup.#sgroup);\n  }\n\n  static isAtomInContractedFunctionalGroup(\n    atom: Atom,\n    sgroups,\n    functionalGroups,\n    sgroupsFromReStruct: boolean,\n  ): boolean {\n    const contractedFunctionalGroups: number[] = [];\n    if (sgroupsFromReStruct) {\n      sgroups.forEach((sg) => {\n        if (\n          FunctionalGroup.isContractedFunctionalGroup(sg.item, functionalGroups)\n        ) {\n          contractedFunctionalGroups.push(sg.item.id);\n        }\n      });\n    } else {\n      sgroups.forEach((sg) => {\n        if (FunctionalGroup.isContractedFunctionalGroup(sg, functionalGroups)) {\n          contractedFunctionalGroups.push(sg.id);\n        }\n      });\n    }\n    return contractedFunctionalGroups.some((sg) => atom.sgs.has(sg));\n  }\n\n  static isBondInContractedFunctionalGroup(\n    bond: Bond,\n    sGroups: Map<number, ReSGroup> | Pool<SGroup>,\n    functionalGroups: Pool<FunctionalGroup>,\n  ) {\n    return [...sGroups.values()].some((_sGroup) => {\n      const sGroup = 'item' in _sGroup ? _sGroup?.item : _sGroup;\n      const atomsInSGroup = sGroup?.atoms;\n      const isContracted = FunctionalGroup.isContractedFunctionalGroup(\n        sGroup,\n        functionalGroups,\n      );\n      return (\n        isContracted &&\n        atomsInSGroup.includes(bond.begin) &&\n        atomsInSGroup.includes(bond.end)\n      );\n    });\n  }\n\n  static isHalfBondInContractedFunctionalGroup(\n    halfBond: HalfBond,\n    struct: Struct,\n  ) {\n    const bond = struct.bonds.get(halfBond.bid);\n    assert(bond != null);\n    return this.isBondInContractedFunctionalGroup(\n      bond,\n      struct.sgroups,\n      struct.functionalGroups,\n    );\n  }\n\n  static isContractedFunctionalGroup(sgroup, functionalGroups): boolean {\n    let isFunctionalGroup = false;\n    let expanded = false;\n\n    if (sgroup instanceof SGroup) {\n      if (sgroup.functionalGroup) {\n        isFunctionalGroup = true;\n        expanded = sgroup.functionalGroup.isExpanded;\n      }\n    } else {\n      functionalGroups.forEach((fg) => {\n        if (fg.relatedSGroupId === sgroup) {\n          isFunctionalGroup = true;\n          expanded = fg.isExpanded;\n        }\n      });\n    }\n    return !expanded && isFunctionalGroup;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Vec2 } from './vec2';\nimport assert from 'assert';\n\n/** @internal */\nexport class HalfBond {\n  begin: number;\n  end: number;\n  bid: number;\n  dir: Vec2;\n  norm: Vec2;\n  ang: number;\n  p: Vec2;\n  loop: number;\n  contra: number;\n  next: number;\n  leftSin: number;\n  leftCos: number;\n  leftNeighbor: number;\n  rightSin: number;\n  rightCos: number;\n  rightNeighbor: number;\n\n  constructor(begin: number, end: number, bid: number) {\n    assert(arguments.length === 3, 'Invalid parameter number.');\n\n    this.begin = begin;\n    this.end = end;\n    this.bid = bid;\n\n    // rendering properties\n    this.dir = new Vec2(); // direction\n    this.norm = new Vec2(); // left normal\n    this.ang = 0; // angle to (1,0), used for sorting the bonds\n    this.p = new Vec2(); // corrected origin position\n    this.loop = -1; // left loop id if the half-bond is in a loop, otherwise -1\n    this.contra = -1; // the half bond contrary to this one\n    this.next = -1; // the half-bond next ot this one in CCW order\n    this.leftSin = 0;\n    this.leftCos = 0;\n    this.leftNeighbor = 0;\n    this.rightSin = 0;\n    this.rightCos = 0;\n    this.rightNeighbor = 0;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Bond } from './bond';\nimport { Struct } from './struct';\n\nexport class Loop {\n  hbs: number[];\n  dblBonds: number;\n  aromatic: boolean;\n  convex: boolean;\n\n  constructor(hbs: Array<number>, struct: Struct, isConvex: boolean) {\n    this.hbs = hbs; // set of half-bonds involved\n    this.dblBonds = 0; // number of double bonds in the loop\n    this.aromatic = true;\n    this.convex = isConvex || false;\n\n    hbs.forEach((hb) => {\n      const bond: Bond = struct.bonds.get(struct.halfBonds.get(hb)!.bid)!;\n      if (bond.type !== Bond.PATTERN.TYPE.AROMATIC) this.aromatic = false;\n      if (bond.type === Bond.PATTERN.TYPE.DOUBLE) this.dblBonds++;\n    });\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Pile } from './pile';\nimport { Pool } from './pool';\n\nexport interface RGroupAttributes {\n  index?: number;\n  ifthen?: number;\n  resth?: boolean;\n  range?: string;\n}\nexport class RGroup {\n  frags: Pile<number>;\n  resth: boolean;\n  range: string;\n  ifthen: number;\n  index: number;\n\n  constructor(atrributes?: RGroupAttributes) {\n    this.frags = new Pile<number>();\n    this.resth = atrributes?.resth || false;\n    this.range = atrributes?.range || '';\n    this.ifthen = atrributes?.ifthen || 0;\n    this.index = atrributes?.index || -1;\n  }\n\n  static findRGroupByFragment(rgroups: Pool<RGroup>, frid: number) {\n    return rgroups.find((_rgid, rgroup) => rgroup.frags.has(frid));\n  }\n\n  getAttrs(): RGroupAttributes {\n    return {\n      resth: this.resth,\n      range: this.range,\n      ifthen: this.ifthen,\n      index: this.index,\n    };\n  }\n\n  clone(fidMap?: Map<number, number> | null): RGroup {\n    const ret = new RGroup(this);\n    this.frags.forEach((fid) => {\n      if (!fidMap || fidMap.has(fid)) {\n        ret.frags.add(fidMap ? fidMap.get(fid)! : fid);\n      }\n    });\n    return ret;\n  }\n}\n","import {\n  BaseMicromoleculeEntity,\n  initiallySelectedType,\n} from 'domain/entities/BaseMicromoleculeEntity';\n\nexport type RGroupAttachmentPointType = 'primary' | 'secondary';\n\nexport class RGroupAttachmentPoint extends BaseMicromoleculeEntity {\n  atomId: number;\n  type: RGroupAttachmentPointType;\n\n  constructor(\n    atomId: number,\n    type: RGroupAttachmentPointType,\n    initiallySelected?: initiallySelectedType,\n  ) {\n    super(initiallySelected);\n    this.atomId = atomId;\n    this.type = type;\n  }\n\n  clone(atomToNewAtom?: Map<number, number> | null) {\n    const newAtomId = atomToNewAtom?.get(this.atomId);\n    return new RGroupAttachmentPoint(\n      newAtomId ?? this.atomId,\n      this.type,\n      this.initiallySelected,\n    );\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Point, Vec2 } from './vec2';\nimport {\n  BaseMicromoleculeEntity,\n  initiallySelectedType,\n} from 'domain/entities/BaseMicromoleculeEntity';\n\nexport enum RxnArrowMode {\n  OpenAngle = 'open-angle',\n  FilledTriangle = 'filled-triangle',\n  FilledBow = 'filled-bow',\n  DashedOpenAngle = 'dashed-open-angle',\n  Failed = 'failed',\n  Retrosynthetic = 'retrosynthetic',\n  BothEndsFilledTriangle = 'both-ends-filled-triangle',\n  EquilibriumFilledTriangle = 'equilibrium-filled-triangle',\n  EquilibriumFilledHalfBow = 'equilibrium-filled-half-bow',\n  EquilibriumOpenAngle = 'equilibrium-open-angle',\n  UnbalancedEquilibriumFilledHalfBow = 'unbalanced-equilibrium-filled-half-bow',\n  UnbalancedEquilibriumOpenHalfAngle = 'unbalanced-equilibrium-open-half-angle',\n  UnbalancedEquilibriumLargeFilledHalfBow = 'unbalanced-equilibrium-large-filled-half-bow',\n  UnbalancedEquilibriumFilledHalfTriangle = 'unbalanced-equilibrium-filled-half-triangle',\n  EllipticalArcFilledBow = 'elliptical-arc-arrow-filled-bow',\n  EllipticalArcFilledTriangle = 'elliptical-arc-arrow-filled-triangle',\n  EllipticalArcOpenAngle = 'elliptical-arc-arrow-open-angle',\n  EllipticalArcOpenHalfAngle = 'elliptical-arc-arrow-open-half-angle',\n}\n\nexport interface RxnArrowAttributes {\n  mode: RxnArrowMode;\n  pos?: Array<Point>;\n  height?: number;\n  initiallySelected?: initiallySelectedType;\n}\n\nexport class RxnArrow extends BaseMicromoleculeEntity {\n  mode: RxnArrowMode;\n  pos: Array<Vec2>;\n  height?: number;\n\n  static isElliptical(arrow) {\n    return [\n      RxnArrowMode.EllipticalArcFilledBow,\n      RxnArrowMode.EllipticalArcFilledTriangle,\n      RxnArrowMode.EllipticalArcOpenHalfAngle,\n      RxnArrowMode.EllipticalArcOpenAngle,\n    ].includes(arrow.mode);\n  }\n\n  constructor(attributes: RxnArrowAttributes) {\n    super(attributes?.initiallySelected);\n    this.pos = [];\n\n    if (attributes.pos) {\n      for (let i = 0; i < attributes.pos.length; i++) {\n        const currentP = attributes.pos[i];\n        this.pos[i] = currentP ? new Vec2(attributes.pos[i]) : new Vec2();\n      }\n    }\n    this.mode = attributes.mode;\n    const defaultHeight = 1;\n\n    if (RxnArrow.isElliptical(this)) {\n      this.height = attributes.height ?? defaultHeight;\n    }\n  }\n\n  clone() {\n    return new RxnArrow(this);\n  }\n\n  center(): Vec2 {\n    return Vec2.centre(this.pos[0], this.pos[1]);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Point, Vec2 } from './vec2';\nimport {\n  BaseMicromoleculeEntity,\n  initiallySelectedType,\n} from 'domain/entities/BaseMicromoleculeEntity';\n\nexport interface RxnPlusAttributes {\n  pp?: Point;\n  initiallySelected?: initiallySelectedType;\n}\n\nexport class RxnPlus extends BaseMicromoleculeEntity {\n  pp: Vec2;\n\n  constructor(attributes?: RxnPlusAttributes) {\n    super(attributes?.initiallySelected);\n    this.pp = attributes?.pp ? new Vec2(attributes.pp) : new Vec2();\n  }\n\n  clone() {\n    return new RxnPlus(this);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Pile } from './pile';\nimport { SGroup } from './sgroup';\nimport assert from 'assert';\nimport { Struct } from './struct';\nimport { KetcherLogger } from 'utilities';\n\nexport class SGroupForest {\n  /** node id -> parent id */\n  parent: Map<number, number>;\n  /** node id -> list of child ids */\n  children: Map<number, number[]>;\n  atomSets: Map<number, any>;\n\n  constructor() {\n    this.parent = new Map();\n    this.children = new Map();\n\n    this.children.set(-1, []); // extra root node\n    this.atomSets = new Map();\n  }\n\n  /** returns an array or s-group ids in the order of breadth-first search */\n  getSGroupsBFS(): number[] {\n    const order: number[] = [];\n    const queue = Array.from(this.children.get(-1) as Array<number>);\n    while (queue.length > 0) {\n      const id = queue.shift();\n      if (typeof id !== 'number') {\n        break;\n      }\n      const children = this.children.get(id);\n      if (typeof children === 'undefined') {\n        break;\n      }\n\n      children.forEach((id) => {\n        queue.push(id);\n      });\n\n      order.push(id);\n    }\n\n    return order;\n  }\n\n  getAtomSetRelations(newId: any, atoms: any) {\n    // find the lowest superset in the hierarchy\n    const isStrictSuperset = new Map();\n    const isSubset = new Map();\n\n    this.atomSets.delete(newId);\n\n    this.atomSets.forEach((atomSet, id) => {\n      isSubset.set(id, atomSet.isSuperset(atoms));\n      isStrictSuperset.set(\n        id,\n        atoms.isSuperset(atomSet) && !atomSet.equals(atoms),\n      );\n    });\n\n    const parents = Array.from(this.atomSets.keys()).filter((sgid) => {\n      if (!isSubset.get(sgid)) {\n        return false;\n      }\n      const childs = this.children.get(sgid);\n      return childs && childs.findIndex((childId) => isSubset.get(childId)) < 0;\n    });\n\n    const children = Array.from(this.atomSets.keys()).filter(\n      (id) =>\n        isStrictSuperset.get(id) && !isStrictSuperset.get(this.parent.get(id)),\n    );\n\n    return {\n      children,\n      parent: parents.length === 0 ? -1 : parents[0],\n    };\n  }\n\n  getPathToRoot(sgid): number[] {\n    const path: number[] = [];\n    for (let id = sgid; id >= 0; id = this.parent.get(id)) {\n      path.push(id);\n    }\n    return path;\n  }\n\n  insert({ id, atoms }, parent?: number, children?: number[]) {\n    assert(!this.parent.has(id), 'sgid already present in the forest');\n    assert(!this.children.has(id), 'sgid already present in the forest');\n\n    if (!parent || !children) {\n      // if these are not provided, deduce automatically\n      const guess = this.getAtomSetRelations(id, new Pile(atoms));\n      parent = guess.parent;\n      children = guess.children;\n    }\n\n    // TODO: make children Map<int, Pile> instead of Map<int, []>?\n    children.forEach((childId) => {\n      this.resetParentLink(childId, id);\n    });\n    this.children.set(\n      id,\n      children.filter((id) => this.parent.get(id)),\n    );\n    this.parent.set(id, parent);\n    this.children.get(parent)?.push(id);\n    this.atomSets.set(id, new Pile(atoms));\n\n    return { parent, children };\n  }\n\n  private resetParentLink(childId, id) {\n    const parentId = this.parent.get(childId);\n    if (typeof parentId === 'undefined') {\n      return;\n    }\n\n    const childs = this.children.get(parentId);\n    if (!childs) {\n      return;\n    }\n\n    const childIndex = childs.indexOf(childId);\n    childs.splice(childIndex, 1);\n    this.parent.set(childId, id);\n  }\n\n  remove(id) {\n    try {\n      assert(this.parent.has(id), 'sgid is not in the forest');\n      assert(this.children.has(id), 'sgid is not in the forest');\n    } catch (e) {\n      KetcherLogger.error('sgroupForest.ts::SGroupForest::remove', e);\n      console.info('error: sgid is not in the forest');\n    }\n\n    const parentId = this.parent.get(id) as any;\n    const childs = this.children.get(parentId) as any;\n\n    if (!parentId || !childs) return;\n\n    this.children.get(id)?.forEach((childId) => {\n      this.parent.set(childId, parentId);\n      this.children.get(parentId)?.push(childId);\n    });\n\n    const i = childs.indexOf(id);\n    childs.splice(i, 1);\n\n    this.children.delete(id);\n    this.parent.delete(id);\n    this.atomSets.delete(id);\n  }\n}\n\nexport function checkOverlapping(\n  struct: Struct,\n  atoms: number[] = [],\n  sGroupType: 'queryComponent' | 'common',\n) {\n  const searchFunction = {\n    common: (sid: number) => {\n      const sg = struct.sgroups.get(sid);\n      if (sg?.type === 'DAT') return false;\n      const sgAtoms = SGroup.getAtoms(struct, sg);\n\n      return sgAtoms.length < atoms.length\n        ? sgAtoms.findIndex((aid) => atoms.indexOf(aid) === -1) >= 0\n        : atoms.findIndex((aid) => sgAtoms.indexOf(aid) === -1) >= 0;\n    },\n    queryComponent: (sid: number) => {\n      const sg = struct.sgroups.get(sid);\n      if (sg?.type !== 'queryComponent') return false;\n      const sgAtoms = SGroup.getAtoms(struct, sg);\n\n      return atoms.some((aid) => sgAtoms.includes(aid));\n    },\n  };\n  const sgroups = atoms.reduce((res, aid) => {\n    const atom = struct.atoms.get(aid);\n    return atom ? res.union(atom.sgs) : res;\n  }, new Pile());\n\n  return Array.from(sgroups).some(searchFunction[sGroupType]);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Point, Vec2 } from './vec2';\nimport {\n  BaseMicromoleculeEntity,\n  initiallySelectedType,\n} from 'domain/entities/BaseMicromoleculeEntity';\n\nexport enum SimpleObjectMode {\n  ellipse = 'ellipse',\n  rectangle = 'rectangle',\n  line = 'line',\n}\n\nexport interface SimpleObjectAttributes {\n  mode: SimpleObjectMode;\n  pos?: Array<Point>;\n  initiallySelected?: initiallySelectedType;\n}\n\nexport class SimpleObject extends BaseMicromoleculeEntity {\n  pos: Array<Vec2>;\n  mode: SimpleObjectMode;\n\n  constructor(attributes?: SimpleObjectAttributes) {\n    super(attributes?.initiallySelected);\n    this.pos = [];\n\n    if (attributes?.pos) {\n      for (let i = 0; i < attributes.pos.length; i++) {\n        const currentP = attributes.pos[i];\n        this.pos[i] = currentP ? new Vec2(attributes.pos[i]) : new Vec2();\n      }\n    }\n\n    this.mode = attributes?.mode || SimpleObjectMode.line;\n  }\n\n  clone(): SimpleObject {\n    return new SimpleObject(this);\n  }\n\n  center(): Vec2 {\n    switch (this.mode) {\n      case SimpleObjectMode.rectangle: {\n        return Vec2.centre(this.pos[0], this.pos[1]);\n      }\n      default:\n        return this.pos[0];\n    }\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nexport class Pool<TValue = any> extends Map<number, TValue> {\n  private nextId = 0;\n\n  add(item: TValue): number {\n    const id = this.nextId++;\n    super.set(id, item);\n    return id;\n  }\n\n  newId(): number {\n    return this.nextId++;\n  }\n\n  keyOf(item: TValue): number | null {\n    for (const [key, value] of this.entries()) {\n      if (value === item) return key;\n    }\n\n    return null;\n  }\n\n  find(predicate: (key: number, value: TValue) => boolean): number | null {\n    for (const [key, value] of this.entries()) {\n      if (predicate(key, value)) return key;\n    }\n\n    return null;\n  }\n\n  filter(predicate: (key: number, value: TValue) => boolean): Pool<TValue> {\n    return new Pool<TValue>(\n      Array.from(this).filter(([key, value]) => predicate(key, value)),\n    );\n  }\n\n  some(predicate: (value: TValue) => boolean): boolean {\n    for (const value of this.values()) {\n      if (predicate(value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  changeInitiallySelectedPropertiesForPool(invalidate?: boolean): void {\n    this.forEach((value, key) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      if (typeof value.resetInitiallySelected === 'function') {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        value.resetInitiallySelected(invalidate);\n        this.set(key, value);\n      }\n    });\n  }\n\n  clone(): Pool<TValue> {\n    const newPool = new Pool<TValue>(this);\n    newPool.nextId = this.nextId;\n    return newPool;\n  }\n}\n","import { Atom, Bond, Neighbor, StereoLabel, Struct } from 'domain/entities';\nimport { StereoValidator } from 'domain/helpers';\n\nexport function getStereoAtomsMap(\n  struct: Struct,\n  bonds: Array<Bond>,\n  bond?: Bond,\n) {\n  const stereoAtomsMap = new Map();\n  const correctAtomIds: Array<number> = [];\n\n  bonds.forEach((bond: Bond | undefined) => {\n    if (bond) {\n      const beginNeighs: Array<Neighbor> | undefined = struct.atomGetNeighbors(\n        bond.begin,\n      );\n      const endNeighs: Array<Neighbor> | undefined = struct.atomGetNeighbors(\n        bond.end,\n      );\n\n      if (\n        StereoValidator.isCorrectStereoCenter(\n          bond,\n          beginNeighs,\n          endNeighs,\n          struct,\n        )\n      ) {\n        const stereoLabel = struct.atoms.get(bond.begin)?.stereoLabel;\n        if (\n          stereoLabel == null ||\n          stereoAtomsMap.get(bond.begin)?.stereoLabel == null\n        ) {\n          stereoAtomsMap.set(bond.begin, {\n            stereoParity: getStereoParity(bond.stereo),\n            stereoLabel: stereoLabel || `${StereoLabel.Abs}`,\n          });\n        }\n        correctAtomIds.push(bond.begin);\n      } else {\n        if (!correctAtomIds.includes(bond.begin)) {\n          stereoAtomsMap.set(bond.begin, {\n            stereoParity: Atom.PATTERN.STEREO_PARITY.NONE,\n            stereoLabel: null,\n          });\n        }\n        if (!correctAtomIds.includes(bond.end)) {\n          stereoAtomsMap.set(bond.end, {\n            stereoParity: Atom.PATTERN.STEREO_PARITY.NONE,\n            stereoLabel: null,\n          });\n        }\n      }\n    }\n  });\n\n  // in case the stereo band is flipped, changed or removed\n  // TODO the duplication of the code below should be fixed, mayby by function\n  if (bond) {\n    if (!correctAtomIds.includes(bond.begin)) {\n      stereoAtomsMap.set(bond.begin, {\n        stereoParity: Atom.PATTERN.STEREO_PARITY.NONE,\n        stereoLabel: null,\n      });\n    }\n    if (!correctAtomIds.includes(bond.end)) {\n      stereoAtomsMap.set(bond.end, {\n        stereoParity: Atom.PATTERN.STEREO_PARITY.NONE,\n        stereoLabel: null,\n      });\n    }\n  }\n\n  return stereoAtomsMap;\n}\n\nfunction getStereoParity(stereo: number): number | null {\n  let newAtomParity: number | null = null;\n  switch (stereo) {\n    case Bond.PATTERN.STEREO.UP:\n      newAtomParity = Atom.PATTERN.STEREO_PARITY.ODD;\n      break;\n    case Bond.PATTERN.STEREO.EITHER:\n      newAtomParity = Atom.PATTERN.STEREO_PARITY.EITHER;\n      break;\n    case Bond.PATTERN.STEREO.DOWN:\n      newAtomParity = Atom.PATTERN.STEREO_PARITY.EVEN;\n      break;\n  }\n  return newAtomParity;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport assert from 'assert';\nimport { Atom, radicalElectrons } from './atom';\nimport { EditorSelection } from 'application/editor';\nimport { Bond } from './bond';\nimport { Box2Abs } from './box2Abs';\nimport { Elements } from 'domain/constants';\nimport { Fragment } from './fragment';\nimport { FunctionalGroup } from './functionalGroup';\nimport { HalfBond } from './halfBond';\nimport { Loop } from './loop';\nimport { Pile } from './pile';\nimport { Pool } from './pool';\nimport { RGroup } from './rgroup';\nimport { RxnArrow } from './rxnArrow';\nimport { RxnPlus } from './rxnPlus';\nimport { SGroup } from './sgroup';\nimport { SGroupForest } from './sgroupForest';\nimport { SimpleObject } from './simpleObject';\nimport { Text } from './text';\nimport { Vec2 } from './vec2';\nimport { Highlight } from './highlight';\nimport { RGroupAttachmentPoint } from './rgroupAttachmentPoint';\nimport { MonomerMicromolecule } from 'domain/entities/monomerMicromolecule';\nimport { isNumber } from 'lodash';\nimport { Image } from './image';\nimport { getStereoAtomsMap } from 'application/editor/actions/helpers';\nimport { MultitailArrow } from './multitailArrow';\n\nexport type Neighbor = {\n  aid: number;\n  bid: number;\n};\n\nexport type StructProperty = {\n  key: string;\n  value: string;\n};\n\nfunction arrayAddIfMissing(array, item) {\n  for (let i = 0; i < array.length; ++i) {\n    if (array[i] === item) return false;\n  }\n  array.push(item);\n  return true;\n}\n\nexport class Struct {\n  atoms: Pool<Atom>;\n  bonds: Pool<Bond>;\n  sgroups: Pool<SGroup>;\n  halfBonds: Pool<HalfBond>;\n  loops: Pool<Loop>;\n  isReaction: boolean;\n  rxnArrows: Pool<RxnArrow>;\n  rxnPluses: Pool<RxnPlus>;\n  frags: Pool<Fragment | null>;\n  rgroups: Pool<RGroup>;\n  rgroupAttachmentPoints: Pool<RGroupAttachmentPoint>;\n  name: string;\n  abbreviation?: string;\n  sGroupForest: SGroupForest;\n  simpleObjects: Pool<SimpleObject>;\n  texts: Pool<Text>;\n  functionalGroups: Pool<FunctionalGroup>;\n  highlights: Pool<Highlight>;\n  images = new Pool<Image>();\n  multitailArrows = new Pool<MultitailArrow>();\n\n  constructor() {\n    this.atoms = new Pool<Atom>();\n    this.bonds = new Pool<Bond>();\n    this.sgroups = new Pool<SGroup>();\n    this.halfBonds = new Pool<HalfBond>();\n    this.loops = new Pool<Loop>();\n    this.isReaction = false;\n    this.rxnArrows = new Pool<RxnArrow>();\n    this.rxnPluses = new Pool<RxnPlus>();\n    this.frags = new Pool<Fragment>();\n    this.rgroups = new Pool<RGroup>();\n    this.rgroupAttachmentPoints = new Pool<RGroupAttachmentPoint>();\n    this.name = '';\n    this.abbreviation = '';\n    this.sGroupForest = new SGroupForest();\n    this.simpleObjects = new Pool<SimpleObject>();\n    this.texts = new Pool<Text>();\n    this.functionalGroups = new Pool<FunctionalGroup>();\n    this.highlights = new Pool<Highlight>();\n  }\n\n  hasRxnProps(): boolean {\n    return !!(\n      this.atoms.find((_aid, atom) => atom.hasRxnProps()) ||\n      this.bonds.find((_bid, bond) => bond.hasRxnProps())\n    );\n  }\n\n  hasRxnArrow(): boolean {\n    return this.rxnArrows.size >= 1;\n  }\n\n  hasMultitailArrow(): boolean {\n    return this.multitailArrows.size >= 1;\n  }\n\n  hasRxnPluses(): boolean {\n    return this.rxnPluses.size > 0;\n  }\n\n  isRxn(): boolean {\n    return this.hasRxnArrow() || this.hasRxnPluses();\n  }\n\n  isBlank(): boolean {\n    return (\n      this.atoms.size === 0 &&\n      this.rxnArrows.size === 0 &&\n      this.rxnPluses.size === 0 &&\n      this.simpleObjects.size === 0 &&\n      this.texts.size === 0 &&\n      this.images.size === 0 &&\n      this.multitailArrows.size === 0\n    );\n  }\n\n  isSingleGroup(): boolean {\n    if (!this.sgroups.size || this.sgroups.size > 1) return false;\n    const sgroup = this.sgroups.values().next().value; // get sgroup from map\n    return this.atoms.size === sgroup.atoms.length;\n  }\n\n  clone(\n    atomSet?: Pile<number> | null,\n    bondSet?: Pile<number> | null,\n    dropRxnSymbols?: boolean,\n    aidMap?: Map<number, number> | null,\n    simpleObjectsSet?: Pile<number> | null,\n    textsSet?: Pile<number> | null,\n    rgroupAttachmentPointSet?: Pile<number> | null,\n    imagesSet?: Pile<number> | null,\n    multitailArrowsSet?: Pile<number> | null,\n    bidMap?: Map<number, number> | null,\n  ): Struct {\n    return this.mergeInto(\n      new Struct(),\n      atomSet,\n      bondSet,\n      dropRxnSymbols,\n      false,\n      aidMap,\n      simpleObjectsSet,\n      textsSet,\n      rgroupAttachmentPointSet,\n      imagesSet,\n      multitailArrowsSet,\n      bidMap,\n    );\n  }\n\n  getScaffold(): Struct {\n    const atomSet = new Pile<number>();\n    this.atoms.forEach((_atom, aid) => {\n      atomSet.add(aid);\n    });\n\n    this.rgroups.forEach((rg) => {\n      rg.frags.forEach((_fnum, fid) => {\n        this.atoms.forEach((atom, aid) => {\n          if (atom.fragment === fid) atomSet.delete(aid);\n        });\n      });\n    });\n\n    return this.clone(atomSet);\n  }\n\n  getFragmentIds(_fid: number | number[]): Pile<number> {\n    const atomSet = new Pile<number>();\n    const fid = Array.isArray(_fid) ? _fid : [_fid];\n    this.atoms.forEach((atom, aid) => {\n      if (fid.includes(atom.fragment)) atomSet.add(aid);\n    });\n\n    return atomSet;\n  }\n\n  getFragment(\n    fid: number | number[],\n    copyNonFragmentObjects = true,\n    aidMap?: Map<number, number>,\n  ): Struct {\n    return this.clone(\n      this.getFragmentIds(fid),\n      null,\n      true,\n      aidMap,\n      copyNonFragmentObjects ? undefined : new Pile(),\n      copyNonFragmentObjects ? undefined : new Pile(),\n      copyNonFragmentObjects ? undefined : new Pile(),\n      copyNonFragmentObjects ? undefined : new Pile(),\n      copyNonFragmentObjects ? undefined : new Pile(),\n    );\n  }\n\n  mergeInto(\n    cp: Struct,\n    atomSet?: Pile<number> | null,\n    bondSet?: Pile<number> | null,\n    dropRxnSymbols?: boolean,\n    keepAllRGroups?: boolean,\n    aidMap?: Map<number, number> | null,\n    simpleObjectsSet?: Pile<number> | null,\n    textsSet?: Pile<number> | null,\n    rgroupAttachmentPointSet?: Pile<number> | null,\n    imagesSet?: Pile<number> | null,\n    multitailArrowsSet?: Pile<number> | null,\n    bidMapEntity?: Map<number, number> | null,\n  ): Struct {\n    atomSet = atomSet || new Pile<number>(this.atoms.keys());\n    bondSet = bondSet || new Pile<number>(this.bonds.keys());\n    simpleObjectsSet =\n      simpleObjectsSet || new Pile<number>(this.simpleObjects.keys());\n    textsSet = textsSet || new Pile<number>(this.texts.keys());\n    imagesSet = imagesSet || new Pile<number>(this.images.keys());\n    multitailArrowsSet =\n      multitailArrowsSet || new Pile<number>(this.multitailArrows.keys());\n    rgroupAttachmentPointSet =\n      rgroupAttachmentPointSet ||\n      new Pile<number>(this.rgroupAttachmentPoints.keys());\n    aidMap = aidMap || new Map();\n    const bidMap = bidMapEntity || new Map();\n\n    bondSet = bondSet.filter((bid) => {\n      const bond = this.bonds.get(bid)!;\n      return atomSet!.has(bond.begin) && atomSet!.has(bond.end);\n    });\n\n    const fidMask = new Pile();\n    this.atoms.forEach((atom, aid) => {\n      if (atomSet!.has(aid)) fidMask.add(atom.fragment);\n    });\n\n    const fidMap = new Map();\n    this.frags.forEach((_frag, fid) => {\n      if (fidMask.has(fid)) fidMap.set(fid, cp.frags.add(null));\n    });\n\n    const rgroupsIds: Array<number> = [];\n    this.rgroups.forEach((rgroup, rgid) => {\n      let keepGroup = keepAllRGroups;\n      if (!keepGroup) {\n        rgroup.frags.forEach((_fnum, fid) => {\n          rgroupsIds.push(fid);\n          if (fidMask.has(fid)) keepGroup = true;\n        });\n\n        if (!keepGroup) return;\n      }\n\n      const rg = cp.rgroups.get(rgid);\n      if (rg) {\n        rgroup.frags.forEach((_fnum, fid) => {\n          rgroupsIds.push(fid);\n          if (fidMask.has(fid)) rg.frags.add(fidMap.get(fid));\n        });\n      } else {\n        cp.rgroups.set(rgid, rgroup.clone(fidMap));\n      }\n    });\n    // atoms in not RGroup\n    this.atoms.forEach((atom, aid) => {\n      if (atomSet!.has(aid) && rgroupsIds.indexOf(atom.fragment) === -1) {\n        aidMap!.set(aid, cp.atoms.add(atom.clone(fidMap)));\n      }\n    });\n    // atoms in RGroup\n    this.atoms.forEach((atom, aid) => {\n      if (atomSet!.has(aid) && rgroupsIds.indexOf(atom.fragment) !== -1) {\n        aidMap!.set(aid, cp.atoms.add(atom.clone(fidMap)));\n      }\n    });\n\n    fidMap.forEach((newfid, oldfid) => {\n      const fragment = this.frags.get(oldfid);\n\n      // TODO: delete type check\n      if (fragment && fragment instanceof Fragment) {\n        cp.frags.set(newfid, this.frags.get(oldfid)!.clone(aidMap!)); // clone Fragments\n      }\n    });\n\n    this.bonds.forEach((bond, bid) => {\n      if (bondSet!.has(bid)) bidMap.set(bid, cp.bonds.add(bond.clone(aidMap!)));\n    });\n\n    const sgroupIdMap = {};\n    this.sgroups.forEach((sg, sgroupId) => {\n      if (sg.atoms.some((aid) => !atomSet!.has(aid))) return;\n      const oldSgroup = sg;\n\n      sg =\n        oldSgroup instanceof MonomerMicromolecule\n          ? MonomerMicromolecule.clone(oldSgroup, aidMap!)\n          : SGroup.clone(sg, aidMap!);\n\n      const id = cp.sgroups.add(sg);\n      sg.id = id;\n\n      sgroupIdMap[sgroupId] = id;\n\n      sg.atoms.forEach((aid) => {\n        const atom = cp.atoms.get(aid);\n        if (atom) {\n          atom.sgs.add(id);\n        }\n      });\n\n      if (sg.type === 'DAT') cp.sGroupForest.insert(sg, -1, []);\n      else cp.sGroupForest.insert(sg);\n    });\n\n    this.functionalGroups.forEach((fg) => {\n      if (fg.relatedSGroup.atoms.some((aid) => !atomSet!.has(aid))) return;\n      const sgroup = cp.sgroups.get(sgroupIdMap[fg.relatedSGroupId]);\n      // It is possible that there is no sgroup in case of templates library rendering\n      // Sgroup is deleteing before render to show templates without brackets (see RenderStruct.prepareStruct method)\n      fg = sgroup ? new FunctionalGroup(sgroup) : FunctionalGroup.clone(fg);\n      cp.functionalGroups.add(fg);\n    });\n\n    simpleObjectsSet.forEach((soid) => {\n      cp.simpleObjects.add(this.simpleObjects.get(soid)!.clone());\n    });\n\n    textsSet.forEach((id) => {\n      cp.texts.add(this.texts.get(id)!.clone());\n    });\n\n    imagesSet.forEach((id) => {\n      cp.images.add(this.images.get(id)!.clone());\n    });\n\n    multitailArrowsSet.forEach((id) => {\n      cp.multitailArrows.add(this.multitailArrows.get(id)!.clone());\n    });\n\n    rgroupAttachmentPointSet.forEach((id) => {\n      const rgroupAttachmentPoint = this.rgroupAttachmentPoints.get(id);\n      assert(rgroupAttachmentPoint != null);\n      cp.rgroupAttachmentPoints.add(rgroupAttachmentPoint.clone(aidMap));\n    });\n\n    if (!dropRxnSymbols) {\n      cp.isReaction = this.isReaction;\n      this.rxnArrows.forEach((item) => {\n        cp.rxnArrows.add(item.clone());\n      });\n      this.rxnPluses.forEach((item) => {\n        cp.rxnPluses.add(item.clone());\n      });\n    }\n\n    cp.name = this.name;\n\n    return cp;\n  }\n\n  // NB: this updates the structure without modifying the corresponding ReStruct.\n  //  To be applied to standalone structures only.\n  prepareLoopStructure() {\n    this.initHalfBonds();\n    this.initNeighbors();\n    this.updateHalfBonds(Array.from(this.atoms.keys()));\n    this.sortNeighbors(Array.from(this.atoms.keys()));\n    this.findLoops();\n  }\n\n  atomAddToSGroup(sgid, aid) {\n    // TODO: [MK] make sure the addition does not break the hierarchy?\n    SGroup.addAtom(this.sgroups.get(sgid)!, aid, this);\n    this.atoms.get(aid)!.sgs.add(sgid);\n  }\n\n  calcConn(atom) {\n    let conn = 0;\n    for (let i = 0; i < atom.neighbors.length; ++i) {\n      const hb = this.halfBonds.get(atom.neighbors[i])!;\n      const bond = this.bonds.get(hb.bid)!;\n\n      if (Bond.isBondToHiddenLeavingGroup(this, bond)) {\n        continue;\n      }\n\n      switch (bond.type) {\n        case Bond.PATTERN.TYPE.SINGLE:\n          conn += 1;\n          break;\n        case Bond.PATTERN.TYPE.DOUBLE:\n          conn += 2;\n          break;\n        case Bond.PATTERN.TYPE.TRIPLE:\n          conn += 3;\n          break;\n        case Bond.PATTERN.TYPE.DATIVE:\n          break;\n        case Bond.PATTERN.TYPE.HYDROGEN:\n          break;\n        case Bond.PATTERN.TYPE.AROMATIC:\n          if (atom.neighbors.length === 1) return [-1, true];\n          return [atom.neighbors.length, true];\n        default:\n          return [-1, false];\n      }\n    }\n    return [conn, false];\n  }\n\n  findBondId(begin, end) {\n    return this.bonds.find(\n      (_bid, bond) =>\n        (bond.begin === begin && bond.end === end) ||\n        (bond.begin === end && bond.end === begin),\n    );\n  }\n\n  initNeighbors() {\n    this.atoms.forEach((atom) => {\n      atom.neighbors = [];\n    });\n\n    this.bonds.forEach((bond) => {\n      const a1 = this.atoms.get(bond.begin)!;\n      const a2 = this.atoms.get(bond.end)!;\n      a1.neighbors.push(bond.hb1!);\n      a2.neighbors.push(bond.hb2!);\n    });\n  }\n\n  bondInitHalfBonds(bid, bond?: Bond) {\n    bond = bond || this.bonds.get(bid)!;\n    bond.hb1 = 2 * bid;\n    bond.hb2 = 2 * bid + 1; // eslint-disable-line no-mixed-operators\n    this.halfBonds.set(bond.hb1, new HalfBond(bond.begin, bond.end, bid));\n    this.halfBonds.set(bond.hb2, new HalfBond(bond.end, bond.begin, bid));\n    const hb1 = this.halfBonds.get(bond.hb1)!;\n    const hb2 = this.halfBonds.get(bond.hb2)!;\n    hb1.contra = bond.hb2;\n    hb2.contra = bond.hb1;\n  }\n\n  halfBondUpdate(halfBondId: number) {\n    const halfBond = this.halfBonds.get(halfBondId)!;\n    const sgroup1 = this.getGroupFromAtomId(halfBond.begin);\n    const sgroup2 = this.getGroupFromAtomId(halfBond.end);\n\n    let startCoords: Vec2;\n    let endCoords: Vec2;\n\n    if (sgroup1 instanceof MonomerMicromolecule && sgroup1 !== sgroup2) {\n      startCoords = sgroup1.isContracted()\n        ? (sgroup1.pp as Vec2)\n        : this.atoms.get(halfBond.begin)!.pp;\n    } else {\n      startCoords = this.atoms.get(halfBond.begin)!.pp;\n    }\n\n    if (sgroup2 instanceof MonomerMicromolecule && sgroup1 !== sgroup2) {\n      endCoords = sgroup2.isContracted()\n        ? (sgroup2.pp as Vec2)\n        : this.atoms.get(halfBond.end)!.pp;\n    } else {\n      endCoords = this.atoms.get(halfBond.end)!.pp;\n    }\n\n    const coordsDifference = Vec2.diff(endCoords, startCoords).normalized();\n\n    halfBond.dir =\n      Vec2.dist(endCoords, startCoords) > 1e-4\n        ? coordsDifference\n        : new Vec2(1, 0);\n    halfBond.norm = halfBond.dir.turnLeft();\n    halfBond.ang = halfBond.dir.oxAngle();\n    if (halfBond.loop < 0) halfBond.loop = -1;\n  }\n\n  initHalfBonds() {\n    this.halfBonds.clear();\n    this.bonds.forEach((bond, bid) => {\n      this.bondInitHalfBonds(bid, bond);\n    });\n  }\n\n  setHbNext(hbid, next) {\n    this.halfBonds.get(this.halfBonds.get(hbid)!.contra)!.next = next;\n  }\n\n  halfBondSetAngle(hbid, left) {\n    const hb = this.halfBonds.get(hbid)!;\n    const hbl = this.halfBonds.get(left)!;\n\n    hbl.rightCos = Vec2.dot(hbl.dir, hb.dir);\n    hb.leftCos = Vec2.dot(hbl.dir, hb.dir);\n\n    hbl.rightSin = Vec2.cross(hbl.dir, hb.dir);\n    hb.leftSin = Vec2.cross(hbl.dir, hb.dir);\n\n    hb.leftNeighbor = left;\n    hbl.rightNeighbor = hbid;\n  }\n\n  atomAddNeighbor(hbid) {\n    const hb = this.halfBonds.get(hbid)!;\n    const atom = this.atoms.get(hb.begin)!;\n\n    let i;\n    for (i = 0; i < atom.neighbors.length; ++i) {\n      if (this.halfBonds.get(atom.neighbors[i])!.ang > hb.ang) break;\n    }\n    atom.neighbors.splice(i, 0, hbid);\n    const ir = atom.neighbors[(i + 1) % atom.neighbors.length];\n    const il =\n      atom.neighbors[(i + atom.neighbors.length - 1) % atom.neighbors.length];\n    this.setHbNext(il, hbid);\n    this.setHbNext(hbid, ir);\n    this.halfBondSetAngle(hbid, il);\n    this.halfBondSetAngle(ir, hbid);\n  }\n\n  atomSortNeighbors(aid) {\n    const atom = this.atoms.get(aid)!;\n    const halfBonds = this.halfBonds;\n\n    atom.neighbors\n      .sort((nei, nei2) => halfBonds.get(nei)!.ang - halfBonds.get(nei2)!.ang)\n      .forEach((nei, i) => {\n        const nextNei = atom.neighbors[(i + 1) % atom.neighbors.length];\n        this.halfBonds.get(this.halfBonds.get(nei)!.contra)!.next = nextNei;\n        this.halfBondSetAngle(nextNei, nei);\n      });\n  }\n\n  sortNeighbors(list) {\n    if (!list) {\n      this.atoms.forEach((_atom, aid) => {\n        this.atomSortNeighbors(aid);\n      });\n    } else {\n      list.forEach((aid) => {\n        this.atomSortNeighbors(aid);\n      });\n    }\n  }\n\n  atomUpdateHalfBonds(atomId: number) {\n    this.atoms.get(atomId)!.neighbors.forEach((hbid) => {\n      this.halfBondUpdate(hbid);\n      this.halfBondUpdate(this.halfBonds.get(hbid)!.contra);\n    });\n  }\n\n  updateHalfBonds(list) {\n    if (!list) {\n      this.atoms.forEach((_atom, atomId) => {\n        this.atomUpdateHalfBonds(atomId);\n      });\n    } else {\n      list.forEach((atomId) => {\n        this.atomUpdateHalfBonds(atomId);\n      });\n    }\n  }\n\n  sGroupsRecalcCrossBonds() {\n    this.sgroups.forEach((sg) => {\n      sg.xBonds = [];\n      sg.neiAtoms = [];\n    });\n\n    this.bonds.forEach((bond, bid) => {\n      const a1 = this.atoms.get(bond.begin)!;\n      const a2 = this.atoms.get(bond.end)!;\n\n      a1.sgs.forEach((sgid) => {\n        if (!a2.sgs.has(sgid)) {\n          const sg = this.sgroups.get(sgid)!;\n          sg.xBonds.push(bid);\n          arrayAddIfMissing(sg.neiAtoms, bond.end);\n        }\n      });\n\n      a2.sgs.forEach((sgid) => {\n        if (!a1.sgs.has(sgid)) {\n          const sg = this.sgroups.get(sgid)!;\n          sg.xBonds.push(bid);\n          arrayAddIfMissing(sg.neiAtoms, bond.begin);\n        }\n      });\n    });\n  }\n\n  sGroupDelete(sgid: number) {\n    this.sgroups.get(sgid)!.atoms.forEach((atom) => {\n      this.atoms.get(atom)!.sgs.delete(sgid);\n    });\n\n    this.sGroupForest.remove(sgid);\n    this.sgroups.delete(sgid);\n  }\n\n  atomSetPos(id: number, pp: Vec2): void {\n    const item = this.atoms.get(id)!;\n    item.pp = pp;\n  }\n\n  rxnPlusSetPos(id: number, pp: Vec2): void {\n    const item = this.rxnPluses.get(id)!;\n    item.pp = pp;\n  }\n\n  rxnArrowSetPos(id: number, pos: Array<Vec2>): void {\n    const item = this.rxnArrows.get(id);\n    if (item) {\n      item.pos = pos;\n    }\n  }\n\n  simpleObjectSetPos(id: number, pos: Array<Vec2>) {\n    const item = this.simpleObjects.get(id)!;\n    item.pos = pos;\n  }\n\n  textSetPosition(id: number, position: Vec2): void {\n    const item = this.texts.get(id);\n\n    if (item) {\n      item.position = position;\n    }\n  }\n\n  getCoordBoundingBox(atomSet?: Pile<number>) {\n    let bb: any = null;\n    function extend(pp) {\n      if (!bb) {\n        bb = {\n          min: pp,\n          max: pp,\n        };\n      } else {\n        if (pp instanceof Array) {\n          pp.forEach((vec) => {\n            bb.min = Vec2.min(bb.min, vec);\n            bb.max = Vec2.max(bb.max, vec);\n          });\n        } else {\n          bb.min = Vec2.min(bb.min, pp);\n          bb.max = Vec2.max(bb.max, pp);\n        }\n      }\n    }\n\n    const global = !atomSet || atomSet.size === 0;\n\n    this.atoms.forEach((atom, aid) => {\n      if (global || atomSet!.has(aid)) extend(atom.pp);\n    });\n    if (global) {\n      this.rxnPluses.forEach((item) => {\n        extend(item.pp);\n      });\n      this.rxnArrows.forEach((item) => {\n        extend(item.pos);\n      });\n      this.simpleObjects.forEach((item) => {\n        extend(item.pos);\n      });\n      this.texts.forEach((item) => {\n        extend(item.position);\n      });\n    }\n    if (!bb && global) {\n      bb = {\n        min: new Vec2(0, 0),\n        max: new Vec2(1, 1),\n      };\n    }\n    return bb;\n  }\n\n  getCoordBoundingBoxObj() {\n    let bb: any = null;\n    function extend(pp) {\n      if (!bb) {\n        bb = {\n          min: new Vec2(pp),\n          max: new Vec2(pp),\n        };\n      } else {\n        bb.min = Vec2.min(bb.min, pp);\n        bb.max = Vec2.max(bb.max, pp);\n      }\n    }\n\n    this.atoms.forEach((atom) => {\n      extend(atom.pp);\n    });\n    return bb;\n  }\n\n  getBondLengthData() {\n    let totalLength = 0;\n    let cnt = 0;\n    this.bonds.forEach((bond) => {\n      totalLength += Vec2.dist(\n        this.atoms.get(bond.begin)!.pp,\n        this.atoms.get(bond.end)!.pp,\n      );\n      cnt++;\n    });\n    return { cnt, totalLength };\n  }\n\n  getAvgBondLength(): number {\n    const bld = this.getBondLengthData();\n    return bld.cnt > 0 ? bld.totalLength / bld.cnt : -1;\n  }\n\n  getAvgClosestAtomDistance(): number {\n    let totalDist = 0;\n    let minDist;\n    let dist = 0;\n    const keys = Array.from(this.atoms.keys());\n    let k;\n    let j;\n    for (k = 0; k < keys.length; ++k) {\n      minDist = -1;\n      for (j = 0; j < keys.length; ++j) {\n        if (j === k) continue; // eslint-disable-line no-continue\n        dist = Vec2.dist(\n          this.atoms.get(keys[j])!.pp,\n          this.atoms.get(keys[k])!.pp,\n        );\n        if (minDist < 0 || minDist > dist) minDist = dist;\n      }\n      totalDist += minDist;\n    }\n\n    return keys.length > 0 ? totalDist / keys.length : -1;\n  }\n\n  checkBondExists(begin: number, end: number): boolean {\n    const key = this.bonds.find(\n      (_bid, bond) =>\n        (bond.begin === begin && bond.end === end) ||\n        (bond.end === begin && bond.begin === end),\n    );\n\n    return key !== undefined;\n  }\n\n  findConnectedComponent(firstaid: number): Pile<number> {\n    const list = [firstaid];\n    const ids = new Pile<number>();\n    while (list.length > 0) {\n      const aid = list.pop()!;\n      ids.add(aid);\n      const atom = this.atoms.get(aid)!;\n      atom.neighbors.forEach((nei) => {\n        const neiId = this.halfBonds.get(nei)!.end;\n        if (!ids.has(neiId)) list.push(neiId);\n      });\n    }\n\n    return ids;\n  }\n\n  findConnectedComponents(discardExistingFragments?: boolean) {\n    // NB: this is a hack\n    // TODO: need to maintain half-bond and neighbor structure permanently\n    if (!this.halfBonds.size) {\n      this.initHalfBonds();\n      this.initNeighbors();\n      this.updateHalfBonds(Array.from(this.atoms.keys()));\n      this.sortNeighbors(Array.from(this.atoms.keys()));\n    }\n\n    let addedAtoms = new Pile<number>();\n\n    const components: Array<any> = [];\n    this.atoms.forEach((atom, aid) => {\n      if (\n        (discardExistingFragments || atom.fragment < 0) &&\n        !addedAtoms.has(aid)\n      ) {\n        const component = this.findConnectedComponent(aid);\n        components.push(component);\n        addedAtoms = addedAtoms.union(component);\n      }\n    });\n\n    return components;\n  }\n\n  markFragment(idSet: Pile<number>, properties: [StructProperty]) {\n    const frag = new Fragment([], undefined, properties);\n    const fid = this.frags.add(frag);\n\n    idSet.forEach((aid) => {\n      const atom = this.atoms.get(aid)!;\n      if (atom.stereoLabel) frag.updateStereoAtom(this, aid, fid, true);\n      atom.fragment = fid;\n    });\n  }\n\n  markFragments(properties?) {\n    const components = this.findConnectedComponents();\n    components.forEach((comp) => {\n      const [firstAtom] = comp;\n      const sgroup = this.getGroupFromAtomId(firstAtom);\n      if (sgroup instanceof MonomerMicromolecule) {\n        return;\n      }\n      this.markFragment(comp, properties);\n    });\n  }\n\n  scale(scale: number) {\n    if (scale === 1) return;\n\n    this.atoms.forEach((atom) => {\n      atom.pp = atom.pp.scaled(scale);\n    });\n\n    this.rxnPluses.forEach((item) => {\n      item.pp = item.pp.scaled(scale);\n    });\n\n    this.rxnArrows.forEach((item) => {\n      item.pos = item.pos.map((p) => p.scaled(scale));\n    });\n\n    this.sgroups.forEach((item) => {\n      if (item instanceof MonomerMicromolecule) {\n        return;\n      }\n      item.pp = item.pp ? item.pp.scaled(scale) : null;\n    });\n\n    this.texts.forEach((item) => {\n      item.pos = item.pos.map((p) => p.scaled(scale));\n      item.position = item.position.scaled(scale);\n    });\n\n    this.simpleObjects.forEach((simpleObjects) => {\n      simpleObjects.pos = simpleObjects.pos.map((p) => p.scaled(scale));\n    });\n\n    this.images.forEach((image) => image.rescaleSize(scale));\n    this.multitailArrows.forEach((multitailArrow) =>\n      multitailArrow.rescaleSize(scale),\n    );\n  }\n\n  rescale() {\n    let avg = this.getAvgBondLength();\n    if (avg <= 0) {\n      return;\n    }\n    if (avg < 1e-3) avg = 1;\n\n    const scale = 1 / avg;\n    this.scale(scale);\n  }\n\n  loopHasSelfIntersections(hbs: Array<number>) {\n    for (let i = 0; i < hbs.length; ++i) {\n      const hbi = this.halfBonds.get(hbs[i])!;\n      const ai = this.atoms.get(hbi.begin)!.pp;\n      const bi = this.atoms.get(hbi.end)!.pp;\n      const set = new Pile([hbi.begin, hbi.end]);\n\n      for (let j = i + 2; j < hbs.length; ++j) {\n        const hbj = this.halfBonds.get(hbs[j])!;\n        if (set.has(hbj.begin) || set.has(hbj.end)) continue; // skip edges sharing an atom\n\n        const aj = this.atoms.get(hbj.begin)!.pp;\n        const bj = this.atoms.get(hbj.end)!.pp;\n\n        if (Box2Abs.segmentIntersection(ai, bi, aj, bj)) return true;\n      }\n    }\n\n    return false;\n  }\n\n  // partition a cycle into simple cycles\n  // TODO: [MK] rewrite the detection algorithm to only find simple ones right away?\n  partitionLoop(loop: any) {\n    // eslint-disable-line max-statements\n    const subloops: Array<any> = [];\n    let continueFlag = true;\n    while (continueFlag) {\n      const atomToHalfBond = {}; // map from every atom in the loop to the index of the first half-bond starting from that atom in the uniqHb array\n      continueFlag = false;\n\n      for (let l = 0; l < loop.length; ++l) {\n        const hbid = loop[l];\n        const aid1 = this.halfBonds.get(hbid)!.begin;\n        const aid2 = this.halfBonds.get(hbid)!.end;\n        if (aid2 in atomToHalfBond) {\n          // subloop found\n          const s = atomToHalfBond[aid2]; // where the subloop begins\n          const subloop = loop.slice(s, l + 1);\n          subloops.push(subloop);\n          if (l < loop.length) {\n            // remove half-bonds corresponding to the subloop\n            loop.splice(s, l - s + 1);\n          }\n          continueFlag = true;\n          break;\n        }\n        atomToHalfBond[aid1] = l;\n      }\n      if (!continueFlag) subloops.push(loop); // we're done, no more subloops found\n    }\n    return subloops;\n  }\n\n  halfBondAngle(hbid1: number, hbid2: number): number {\n    const hba = this.halfBonds.get(hbid1)!;\n    const hbb = this.halfBonds.get(hbid2)!;\n    return Math.atan2(Vec2.cross(hba.dir, hbb.dir), Vec2.dot(hba.dir, hbb.dir));\n  }\n\n  loopIsConvex(loop: Array<any>): boolean {\n    return loop.every((item, k, loopArr) => {\n      const angle = this.halfBondAngle(item, loopArr[(k + 1) % loopArr.length]);\n      return angle <= 0;\n    });\n  }\n\n  // check whether a loop is on the inner or outer side of the polygon\n  //  by measuring the total angle between bonds\n  loopIsInner(loop: Array<any>): boolean {\n    let totalAngle = 2 * Math.PI;\n    loop.forEach((hbida, k, loopArr) => {\n      const hbidb = loopArr[(k + 1) % loopArr.length];\n      const hbb = this.halfBonds.get(hbidb)!;\n      const angle = this.halfBondAngle(hbida, hbidb);\n      totalAngle += hbb.contra === hbida ? Math.PI : angle; // back and forth along the same edge\n    });\n    return Math.abs(totalAngle) < Math.PI;\n  }\n\n  findLoops() {\n    const newLoops: Array<any> = [];\n    const bondsToMark = new Pile<number>();\n\n    /*\n      Starting from each half-bond not known to be in a loop yet,\n      follow the 'next' links until the initial half-bond is reached or\n      the length of the sequence exceeds the number of half-bonds available.\n      In a planar graph, as long as every bond is a part of some \"loop\" -\n      either an outer or an inner one - every iteration either yields a loop\n      or doesn't start at all. Thus this has linear complexity in the number\n      of bonds for planar graphs.\n   */\n\n    let hbIdNext, c, loop;\n    this.halfBonds.forEach((hb, hbId) => {\n      if (hb.loop !== -1) return;\n\n      for (\n        hbIdNext = hbId, c = 0, loop = [];\n        c <= this.halfBonds.size;\n        hbIdNext = this.halfBonds.get(hbIdNext)!.next, ++c\n      ) {\n        if (!(c > 0 && hbIdNext === hbId)) {\n          loop.push(hbIdNext);\n          continue; // eslint-disable-line no-continue\n        }\n\n        // loop found\n        const subloops = this.partitionLoop(loop);\n        subloops.forEach((loop) => {\n          let loopId;\n          if (this.loopIsInner(loop) && !this.loopHasSelfIntersections(loop)) {\n            /*\n                        loop is internal\n                        use lowest half-bond id in the loop as the loop id\n                        this ensures that the loop gets the same id if it is discarded and then recreated,\n                        which in turn is required to enable redrawing while dragging, as actions store item id's\n                     */\n            loopId = Math.min(...loop);\n            this.loops.set(\n              loopId,\n              new Loop(loop, this, this.loopIsConvex(loop)),\n            );\n          } else {\n            loopId = -2;\n          }\n\n          loop.forEach((hbid) => {\n            this.halfBonds.get(hbid)!.loop = loopId;\n            bondsToMark.add(this.halfBonds.get(hbid)!.bid);\n          });\n\n          if (loopId >= 0) newLoops.push(loopId);\n        });\n        break;\n      }\n    });\n\n    return {\n      newLoops,\n      bondsToMark: Array.from(bondsToMark),\n    };\n  }\n\n  calcImplicitHydrogen(aid: number) {\n    if (Atom.isHiddenLeavingGroupAtom(this, aid)) {\n      return;\n    }\n\n    const atom = this.atoms.get(aid)!;\n    const charge = atom.charge || 0;\n    const [conn, isAromatic] = this.calcConn(atom);\n    let correctConn = conn;\n    atom.badConn = false;\n\n    if (isAromatic) {\n      if (atom.label === 'C' && charge === 0) {\n        if (conn === 3) {\n          atom.implicitH = -radicalElectrons(atom.radical);\n          return;\n        }\n        if (conn === 2) {\n          atom.implicitH = 1 - radicalElectrons(atom.radical);\n          return;\n        }\n      } else if (\n        (atom.label === 'O' && charge === 0) ||\n        (atom.label === 'N' && charge === 0 && conn === 3) ||\n        (atom.label === 'N' && charge === 1 && conn === 3) ||\n        (atom.label === 'S' && charge === 0 && conn === 3) ||\n        !atom.implicitH\n      ) {\n        atom.implicitH = 0;\n        return;\n      } else if (!atom.hasImplicitH) {\n        correctConn++;\n      }\n    }\n\n    if (correctConn < 0 || atom.isQuery() || atom.attachmentPoints) {\n      atom.implicitH = 0;\n      return;\n    }\n\n    if (atom.explicitValence >= 0) {\n      const elem = Elements.get(atom.label);\n      atom.implicitH = elem\n        ? atom.explicitValence - atom.calcValenceMinusHyd(correctConn)\n        : 0;\n      if (atom.implicitH < 0) {\n        atom.implicitH = 0;\n        atom.badConn = true;\n      }\n    } else {\n      atom.calcValence(correctConn);\n    }\n  }\n\n  setImplicitHydrogen(list?: Array<number>) {\n    this.sgroups.forEach((item) => {\n      if (item.data.fieldName === 'MRV_IMPLICIT_H') {\n        this.atoms.get(item.atoms[0])!.hasImplicitH = true;\n      }\n    });\n\n    if (!list) {\n      this.atoms.forEach((_atom, aid) => {\n        this.calcImplicitHydrogen(aid);\n      });\n    } else {\n      list.forEach((aid) => {\n        if (this.atoms.get(aid)) {\n          this.calcImplicitHydrogen(aid);\n        }\n      });\n    }\n  }\n\n  public setStereoLabelsToAtoms() {\n    const stereAtomsMap = getStereoAtomsMap(\n      this,\n      Array.from(this.bonds.values()),\n    );\n\n    this.atoms.forEach((atom, id) => {\n      if (this?.atomGetNeighbors(id)?.length === 0) {\n        atom.stereoLabel = null;\n        atom.stereoParity = 0;\n      } else {\n        const stereoProp = stereAtomsMap.get(id);\n        if (stereoProp) {\n          atom.stereoLabel = stereoProp.stereoLabel;\n          atom.stereoParity = stereoProp.stereoParity;\n        }\n      }\n    });\n  }\n\n  atomGetNeighbors(aid: number): Array<Neighbor> | undefined {\n    return this.atoms.get(aid)?.neighbors.map((nei) => {\n      const hb = this.halfBonds.get(nei)!;\n      return {\n        aid: hb.end,\n        bid: hb.bid,\n      };\n    });\n  }\n\n  getComponents() {\n    // eslint-disable-line max-statements\n    /* saver */\n    const connectedComponents = this.findConnectedComponents(true);\n    const barriers: Array<any> = [];\n    let arrowPos: number | null = null;\n\n    this.rxnArrows.forEach((item) => {\n      // there's just one arrow\n      arrowPos = item.center().x;\n    });\n\n    this.rxnPluses.forEach((item) => {\n      barriers.push(item.pp.x);\n    });\n\n    if (arrowPos !== null) barriers.push(arrowPos);\n\n    barriers.sort((a, b) => a - b);\n\n    const components: Array<any> = [];\n\n    connectedComponents.forEach((component) => {\n      const bb = this.getCoordBoundingBox(component);\n      const c = Vec2.lc2(bb.min, 0.5, bb.max, 0.5);\n      let j = 0;\n\n      while (c.x > barriers[j]) ++j;\n\n      components[j] = components[j] || new Pile();\n      components[j] = components[j].union(component);\n    });\n\n    const submolTexts: Array<string> = [];\n    const reactants: Array<any> = [];\n    const products: Array<any> = [];\n\n    components.forEach((component) => {\n      if (!component) {\n        submolTexts.push('');\n        return;\n      }\n\n      const rxnFragmentType = this.defineRxnFragmentTypeForAtomset(\n        component,\n        arrowPos || 0,\n      );\n\n      if (rxnFragmentType === 1) reactants.push(component);\n      else products.push(component);\n    });\n\n    return {\n      reactants,\n      products,\n    };\n  }\n\n  defineRxnFragmentTypeForAtomset(atomset: Pile<number>, arrowpos: number) {\n    const bb = this.getCoordBoundingBox(atomset);\n    const c = Vec2.lc2(bb.min, 0.5, bb.max, 0.5);\n    return c.x < arrowpos ? 1 : 2;\n  }\n\n  getBondFragment(bid: number) {\n    const aid = this.bonds.get(bid)?.begin;\n    return aid && this.atoms.get(aid)?.fragment;\n  }\n\n  bindSGroupsToFunctionalGroups() {\n    this.sgroups.forEach((sgroup) => {\n      if (\n        FunctionalGroup.isFunctionalGroup(sgroup) ||\n        SGroup.isSuperAtom(sgroup)\n      ) {\n        this.functionalGroups.add(new FunctionalGroup(sgroup));\n      }\n    });\n  }\n\n  getGroupIdFromAtomId(atomId: number): number | null {\n    for (const [groupId, sgroup] of Array.from(this.sgroups)) {\n      if (sgroup.atoms.includes(atomId)) return groupId;\n    }\n    return null;\n  }\n\n  getGroupFromAtomId(atomId: number | undefined): SGroup | undefined {\n    const sgroupId = this.getGroupIdFromAtomId(atomId as number);\n    return this.sgroups?.get(sgroupId as number);\n  }\n\n  // TODO: simplify if bonds ids ever appear in sgroup\n  // ! deprecate\n  getGroupIdFromBondId(bondId: number): number | null {\n    const bond = this.bonds.get(bondId);\n    if (!bond) return null;\n    for (const [groupId, sgroup] of Array.from(this.sgroups)) {\n      if (\n        sgroup.atoms.includes(bond.begin) ||\n        sgroup.atoms.includes(bond.end)\n      ) {\n        return groupId;\n      }\n    }\n    return null;\n  }\n\n  getGroupFromBondId(atomId: number): SGroup | undefined {\n    const sgroupId = this.getGroupIdFromBondId(atomId);\n\n    if (!isNumber(sgroupId)) {\n      return;\n    }\n\n    return this.sgroups?.get(sgroupId as number);\n  }\n\n  getGroupsIdsFromBondId(bondId: number): number[] {\n    const bond = this.bonds.get(bondId);\n    if (!bond) return [];\n\n    const groupsIds: number[] = [];\n\n    for (const [groupId, sgroup] of Array.from(this.sgroups)) {\n      if (\n        sgroup.atoms.includes(bond.begin) ||\n        sgroup.atoms.includes(bond.end)\n      ) {\n        groupsIds.push(groupId);\n      }\n    }\n    return groupsIds;\n  }\n\n  getBondIdByHalfBond(halfBondId: number) {\n    const halfBond = this.halfBonds.get(halfBondId);\n    if (halfBond) {\n      return halfBond.bid;\n    }\n    return undefined;\n  }\n\n  /**\n   * @returns visibleAtoms = selected atoms\n   *                       - atoms in contracted functional groups\n   *                       + functional groups's attachment atoms\n   */\n  getSelectedVisibleAtoms(selection: EditorSelection | null) {\n    return (\n      selection?.atoms?.filter((atomId) => {\n        const atom = this.atoms.get(atomId);\n        if (!atom) {\n          return false;\n        }\n        const isAtomNotInContractedGroup =\n          !FunctionalGroup.isAtomInContractedFunctionalGroup(\n            atom,\n            this.sgroups,\n            this.functionalGroups,\n            false,\n          );\n        if (isAtomNotInContractedGroup) {\n          return true;\n        }\n        const groupId = this.getGroupIdFromAtomId(atomId);\n        const sgroup = this.sgroups.get(groupId as number);\n        return sgroup?.getAttachmentAtomId() === atomId;\n      }) || []\n    );\n  }\n\n  getRGroupAttachmentPointsByAtomId(atomId: number) {\n    const rgroupAttachmentPoints = this.rgroupAttachmentPoints.filter(\n      (_id, attachmentPoint) => attachmentPoint.atomId === atomId,\n    );\n    return [...rgroupAttachmentPoints.keys()];\n  }\n\n  isAtomFromMacromolecule(atomId: number) {\n    const sgroup = this.getGroupFromAtomId(atomId);\n    return sgroup instanceof MonomerMicromolecule;\n  }\n\n  isBondFromMacromolecule(bondOrBondId: Bond | number) {\n    const bond =\n      bondOrBondId instanceof Bond\n        ? bondOrBondId\n        : this.bonds.get(bondOrBondId);\n\n    assert(bond);\n\n    return (\n      this.isAtomFromMacromolecule(bond.begin) ||\n      this.isAtomFromMacromolecule(bond.end)\n    );\n  }\n\n  isFunctionalGroupFromMacromolecule(functionalGroupId: number) {\n    const functionalGroup = this.functionalGroups.get(functionalGroupId);\n\n    return functionalGroup?.relatedSGroup instanceof MonomerMicromolecule;\n  }\n\n  isTargetFromMacromolecule(target?: { id: number; map: string } | null) {\n    return (\n      target &&\n      ((target.map === 'functionalGroups' &&\n        this.isFunctionalGroupFromMacromolecule(target.id)) ||\n        (target.map === 'atoms' && this.isAtomFromMacromolecule(target.id)) ||\n        (target.map === 'bonds' && this.isBondFromMacromolecule(target.id)))\n    );\n  }\n\n  disableInitiallySelected(): void {\n    // Those fields are used only in serialization/deserialization phase\n    // so we are disabling them to avoid confusion\n    this.atoms.changeInitiallySelectedPropertiesForPool(true);\n    this.bonds.changeInitiallySelectedPropertiesForPool(true);\n    this.rxnPluses.changeInitiallySelectedPropertiesForPool(true);\n    this.rxnArrows.changeInitiallySelectedPropertiesForPool(true);\n    this.texts.changeInitiallySelectedPropertiesForPool(true);\n  }\n\n  enableInitiallySelected(): void {\n    this.atoms.changeInitiallySelectedPropertiesForPool();\n    this.bonds.changeInitiallySelectedPropertiesForPool();\n    this.rxnPluses.changeInitiallySelectedPropertiesForPool();\n    this.rxnArrows.changeInitiallySelectedPropertiesForPool();\n    this.texts.changeInitiallySelectedPropertiesForPool();\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Vec2, Point } from './vec2';\nimport {\n  BaseMicromoleculeEntity,\n  initiallySelectedType,\n} from 'domain/entities/BaseMicromoleculeEntity';\n\n// TODO: move to infrastructure\nexport enum TextCommand {\n  Bold = 'BOLD',\n  Italic = 'ITALIC',\n  Subscript = 'SUBSCRIPT',\n  Superscript = 'SUPERSCRIPT',\n  FontSize = 'CUSTOM_FONT_SIZE',\n}\n\nexport interface TextAttributes {\n  // TODO: add Interface for content type\n  content: string;\n  position: Point;\n  pos: Array<Point>;\n  initiallySelected?: initiallySelectedType;\n}\n\nfunction preparePositions(positions?: Array<Point>) {\n  if (!positions || !positions.length) {\n    return [new Vec2(), new Vec2(), new Vec2(), new Vec2()];\n  }\n\n  return positions.map((position) => new Vec2(position));\n}\n\nexport class Text extends BaseMicromoleculeEntity {\n  content: string;\n  position: Vec2;\n  pos: Array<Vec2>;\n\n  constructor(attributes?: TextAttributes) {\n    super(attributes?.initiallySelected);\n    this.pos = preparePositions(attributes?.pos);\n    this.content = attributes?.content || '';\n    this.position = attributes?.position\n      ? new Vec2(attributes.position)\n      : new Vec2();\n  }\n\n  setPos(coords: Array<Vec2>): void {\n    this.pos = coords || [];\n  }\n\n  clone(): Text {\n    return new Text(this);\n  }\n}\n","/****************************************************************************\n * Copyright 2022 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Vec2, Axis, Axises, Struct } from 'domain/entities';\nimport { cloneDeepWith, cloneDeep } from 'lodash';\nimport { EditorSelection } from 'application/editor';\n\nconst customizer = (value: any) => {\n  if (typeof value === 'object' && value.y) {\n    const clonedValue = cloneDeep(value);\n    clonedValue.y = -clonedValue.y;\n    return clonedValue;\n  }\n};\n\nexport const getNodeWithInvertedYCoord = <T>(node: T): T =>\n  cloneDeepWith(node, customizer);\n\nexport const setMonomerTemplatePrefix = (templateName: string) =>\n  `monomerTemplate-${templateName}`;\nexport const setMonomerPrefix = (monomerId: number) => `monomer${monomerId}`;\n\nexport const setAmbiguousMonomerTemplatePrefix = (templateName: string) =>\n  `ambiguousMonomerTemplate-${templateName}`;\n\nexport const setAmbiguousMonomerPrefix = (monomerId: number) =>\n  `ambiguousMonomer${monomerId}`;\n\nexport const getKetRef = (entityId: string) => {\n  return { $ref: entityId };\n};\n\nconst rotateCoordAxisBy180Degrees = (position: Vec2, axis: Axises): Vec2 => {\n  const rotatedPosition = {\n    x: position.x,\n    y: position.y,\n    z: position.z,\n  };\n\n  rotatedPosition[axis] = -rotatedPosition[axis];\n\n  return new Vec2(rotatedPosition.x, rotatedPosition.y, rotatedPosition.z);\n};\n\n/**\n *\n * System coordinates for browser and for chemistry files format (mol, ket, etc.) area are different.\n * It needs to rotate them by 180 degrees in y-axis.\n *\n * @param position - coordinates of the structure\n *\n */\nexport const switchIntoChemistryCoordSystem = (position: Vec2) => {\n  return rotateCoordAxisBy180Degrees(position, Axis.y);\n};\n\nexport const populateStructWithSelection = (\n  populatedStruct: Struct,\n  selection?: EditorSelection,\n) => {\n  if (!selection) {\n    return populatedStruct;\n  }\n  Object.keys(selection).forEach((entity) => {\n    const selectedEntities = selection[entity];\n    populatedStruct[entity]?.forEach((value, key) => {\n      if (typeof value.setInitiallySelected === 'function') {\n        value.setInitiallySelected(selectedEntities.includes(key) || undefined);\n      }\n    });\n  });\n  return populatedStruct;\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { getNodeWithInvertedYCoord } from '../helpers';\n\nexport function arrowToKet(arrowNode) {\n  return {\n    type: 'arrow',\n    data: getNodeWithInvertedYCoord(arrowNode.data),\n    selected: arrowNode.selected,\n  };\n}\n\nexport function plusToKet(plusNode) {\n  const coord = plusNode.center;\n  return {\n    type: 'plus',\n    location: [coord.x, -coord.y, coord.z],\n    prop: plusNode.data,\n    selected: plusNode.selected,\n  };\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Struct } from 'domain/entities';\nimport { ifDef } from 'utilities';\n\nexport function headerToKet(struct: Struct): any {\n  const header = {};\n\n  ifDef(header, 'moleculeName', struct.name, '');\n  ifDef(header, 'creatorProgram', null, '');\n  ifDef(header, 'comment', null, '');\n\n  return Object.keys(header).length !== 0 ? header : null;\n}\n","const editorSettings = {\n  microModeScale: 40, // Angstroms To Pixels Factor\n  macroModeScale: 40, // Angstroms To Pixels Factor\n};\n\nexport function provideEditorSettings() {\n  return editorSettings;\n}\n","export const canvasSelector = '#polymer-editor-canvas';\nexport const drawnStructuresSelector = '.drawn-structures';\n","import _ from 'lodash';\n\nexport const notifyRenderComplete = _.debounce(() => {\n  const event = new Event('renderComplete');\n  window.dispatchEvent(event);\n}, 750);\n\nexport const notifyItemsToMergeInitializationComplete = () => {\n  const event = new Event('itemsToMergeInitializationComplete');\n  window.dispatchEvent(event);\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { zoom, select, ZoomTransform, ZoomBehavior, drag } from 'd3';\nimport { BaseTool } from 'application/editor/tools/Tool';\nimport { canvasSelector, drawnStructuresSelector } from '../constants';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport { clamp, isNumber } from 'lodash';\nimport { notifyRenderComplete } from 'application/render/internal';\nimport { StructureBbox } from 'application/render/renderers/types';\n\nexport enum SCROLL_POSITION {\n  CENTER = 'CENTER',\n  BOTTOM = 'BOTTOM',\n}\n\ninterface ScrollBar {\n  name: string;\n  offsetStart: number;\n  offsetEnd: number;\n  maxWidth: number;\n  maxHeight: number;\n  bar?: D3SvgElementSelection<SVGRectElement, void> | undefined;\n}\n\n// in percents\nconst AUTO_SCROLL_OFFSET_X = 10;\nconst AUTO_SCROLL_OFFSET_Y = 10;\n\nexport class ZoomTool implements BaseTool {\n  public canvas: D3SvgElementSelection<SVGSVGElement, void>;\n  public canvasWrapper: D3SvgElementSelection<SVGSVGElement, void>;\n  private zoom!: ZoomBehavior<SVGSVGElement, void> | null;\n  private zoomLevel: number;\n  private zoomTransform: ZoomTransform;\n  private resizeObserver: ResizeObserver | null = null;\n  drawingEntitiesManager: DrawingEntitiesManager;\n  private zoomEventHandlers: Array<(transform?) => void> = [];\n  private scrollBars!: {\n    horizontal: ScrollBar;\n    vertical: ScrollBar;\n  };\n\n  COLOR = '#a5afb9';\n  MIN_LENGTH = 40;\n  RADIUS = 2;\n  MARGIN = 5;\n  HORIZONTAL_DIST_TO_EDGE = 16;\n  VERTICAL_DIST_TO_EDGE = 4;\n  WIDTH = 4;\n  MINZOOMSCALE = 0.2;\n  MAXZOOMSCALE = 4;\n\n  // eslint-disable-next-line no-use-before-define\n  private static _instance: ZoomTool;\n  public static get instance() {\n    return ZoomTool._instance;\n  }\n\n  static initInstance(drawingEntitiesManager: DrawingEntitiesManager) {\n    ZoomTool._instance = new ZoomTool(drawingEntitiesManager);\n    return ZoomTool._instance;\n  }\n\n  private constructor(drawingEntitiesManager: DrawingEntitiesManager) {\n    this.canvasWrapper = select(canvasSelector);\n    this.canvas = select(drawnStructuresSelector);\n\n    this.zoomLevel = 1;\n    this.zoomTransform = new ZoomTransform(1, 0, 0);\n    this.drawingEntitiesManager = drawingEntitiesManager;\n\n    this.initActions();\n  }\n\n  initActions() {\n    this.zoom = zoom<SVGSVGElement, void>()\n      .scaleExtent([this.MINZOOMSCALE, this.MAXZOOMSCALE])\n      .wheelDelta(this.defaultWheelDelta)\n      .filter((e) => {\n        e.preventDefault();\n        if (e.ctrlKey && e.type === 'wheel') {\n          return true;\n        }\n        return false;\n      })\n      .on('zoom', this.zoomAction.bind(this))\n      .on('end', () => {\n        notifyRenderComplete();\n      });\n    this.canvasWrapper.call(this.zoom);\n\n    this.canvasWrapper.on('wheel', (event) => {\n      if (event.ctrlKey) {\n        event.preventDefault();\n      } else {\n        this.mouseWheeled(event);\n      }\n    });\n  }\n\n  setZoom(zoomLevel: number) {\n    this.zoomLevel = zoomLevel;\n  }\n\n  getZoomLevel() {\n    return this.zoomLevel;\n  }\n\n  setZoomTransform(transform: ZoomTransform) {\n    this.zoomTransform = transform;\n  }\n\n  zoomAction({ transform }) {\n    this.canvas.attr('transform', transform);\n    this.zoomLevel = transform.k;\n    this.zoomTransform = transform;\n    this.drawScrollBars();\n    requestAnimationFrame(() => {\n      this.dispatchZoomEventHandlers(transform);\n    });\n  }\n\n  subscribeOnZoomEvent(zoomEventHandler: (transform?) => void) {\n    this.zoomEventHandlers.push(zoomEventHandler);\n  }\n\n  dispatchZoomEventHandlers(transform) {\n    this.zoomEventHandlers.forEach((zoomEventHandler) => {\n      zoomEventHandler(transform);\n    });\n  }\n\n  drawScrollBars() {\n    if (this.canvas.node() && this.canvasWrapper.node()) {\n      this.initScrollBars();\n      this.renderScrollBar(this.scrollBars.horizontal);\n      this.renderScrollBar(this.scrollBars.vertical);\n    }\n  }\n\n  renderScrollBar(scrollBar: ScrollBar) {\n    const hasOffset = scrollBar.offsetStart < 0 || scrollBar.offsetEnd < 0;\n    if (hasOffset) {\n      if (scrollBar.bar) {\n        this.updateScrollBarAttrs(scrollBar);\n      } else {\n        this.drawScrollBar(scrollBar);\n      }\n    } else {\n      scrollBar.bar?.remove();\n      scrollBar.bar = undefined;\n    }\n  }\n\n  drawScrollBar(scrollBar: ScrollBar) {\n    scrollBar.bar = this.canvasWrapper.append('rect');\n    const dragged = drag().on(\n      'drag',\n      this.dragged(scrollBar.name).bind(this),\n    ) as never;\n    scrollBar.bar?.call(dragged);\n    this.updateScrollBarAttrs(scrollBar);\n  }\n\n  updateScrollBarAttrs(scrollBar: ScrollBar) {\n    const { start, length } = this.calculateDynamicAttr(scrollBar);\n\n    if (scrollBar.name === 'horizontal') {\n      scrollBar.bar\n        ?.attr('x', start)\n        .attr('y', scrollBar.maxHeight - this.HORIZONTAL_DIST_TO_EDGE)\n        .attr('width', length)\n        .attr('height', this.WIDTH);\n    } else {\n      scrollBar.bar\n        ?.attr('x', scrollBar.maxHeight - this.VERTICAL_DIST_TO_EDGE)\n        .attr('y', start)\n        .attr('width', this.WIDTH)\n        .attr('height', length);\n    }\n\n    scrollBar.bar\n      ?.attr('rx', this.RADIUS)\n      .attr('draggable', true)\n      .attr('cursor', 'pointer')\n      .attr('stroke', this.COLOR)\n      .attr('fill', this.COLOR)\n      .attr('data-testid', scrollBar.name + '-bar')\n      .attr('class', 'dynamic-element');\n  }\n\n  calculateDynamicAttr(scrollBar: ScrollBar) {\n    const start = clamp(\n      -scrollBar.offsetStart,\n      this.MARGIN,\n      scrollBar.maxWidth - this.MIN_LENGTH - this.MARGIN,\n    );\n    const end =\n      scrollBar.maxWidth -\n      clamp(-scrollBar.offsetEnd, this.MARGIN, scrollBar.maxWidth);\n    const length = Math.max(end - start, this.MIN_LENGTH);\n    return { start, length };\n  }\n\n  dragged = (name: string) => (event) => {\n    if (name === 'horizontal') {\n      this.zoom?.translateBy(this.canvasWrapper, -event.dx, 0);\n    } else {\n      this.zoom?.translateBy(this.canvasWrapper, 0, -event.dy);\n    }\n  };\n\n  public scrollTo(\n    position: Vec2,\n    stickToBottom = false,\n    xOffset?,\n    yOffset?,\n    isOffsetInPercents = true,\n  ) {\n    const canvasWrapperHeight =\n      this.canvasWrapper.node()?.height.baseVal.value || 0;\n\n    const canvasWrapperWidth =\n      this.canvasWrapper.node()?.width.baseVal.value || 0;\n\n    const offset = new Vec2(\n      canvasWrapperWidth / 2 -\n        (isNumber(xOffset) && !isOffsetInPercents\n          ? xOffset\n          : (canvasWrapperWidth * (xOffset || AUTO_SCROLL_OFFSET_X)) / 100),\n      canvasWrapperHeight / 2 -\n        (isNumber(yOffset) && !isOffsetInPercents\n          ? yOffset\n          : (canvasWrapperHeight * (yOffset || AUTO_SCROLL_OFFSET_Y)) / 100),\n    );\n\n    this.zoom?.translateTo(\n      this.canvasWrapper,\n      position.x + this.unzoomValue(offset.x),\n      position.y + this.unzoomValue(offset.y * (stickToBottom ? -1 : 1)),\n    );\n  }\n\n  public scrollBy(x: number, y: number) {\n    this.zoom?.translateBy(\n      this.canvasWrapper,\n      this.unzoomValue(x),\n      this.unzoomValue(y),\n    );\n  }\n\n  public scrollToVerticalCenter(structCenterY: number) {\n    const centerPointOfModel =\n      this.drawingEntitiesManager.getCurrentCenterPointOfCanvas();\n    const offsetY = centerPointOfModel.y - structCenterY;\n    this.zoom?.translateBy(this.canvasWrapper, 0, offsetY);\n  }\n\n  public scrollToVerticalBottom() {\n    this.drawScrollBars();\n    if (this.scrollBars.vertical.offsetEnd < 0) {\n      this.zoom?.translateBy(\n        this.canvasWrapper,\n        0,\n        this.scrollBars.vertical.offsetEnd / this.zoomLevel,\n      );\n    }\n  }\n\n  mouseWheeled(event) {\n    const isShiftKeydown = event.shiftKey;\n    const boxNode = this.canvasWrapper.node();\n    if (boxNode && (event.deltaX || event.deltaY)) {\n      const x = -event.deltaX / this.zoomLevel;\n      const y = -event.deltaY / this.zoomLevel;\n      if (isShiftKeydown) {\n        this.zoom?.translateBy(this.canvasWrapper, x - y, 0);\n      } else {\n        this.zoom?.translateBy(this.canvasWrapper, x, y);\n      }\n    }\n  }\n\n  initScrollBars() {\n    const boundingBox = this.canvas.node()?.getBoundingClientRect() as DOMRect;\n    const wrapperBoundingBox = this.canvasWrapper\n      .node()\n      ?.getBoundingClientRect() as DOMRect;\n    const canvasWrapperHeight =\n      this.canvasWrapper.node()?.height.baseVal.value || 0;\n\n    const canvasWrapperWidth =\n      this.canvasWrapper.node()?.width.baseVal.value || 0;\n    this.scrollBars = {\n      horizontal: {\n        name: 'horizontal',\n        offsetStart: boundingBox.left - wrapperBoundingBox.left,\n        offsetEnd: wrapperBoundingBox.width - boundingBox.right,\n        maxWidth: canvasWrapperWidth,\n        maxHeight: canvasWrapperHeight,\n        bar: this.scrollBars?.horizontal?.bar,\n      },\n      vertical: {\n        name: 'vertical',\n        offsetStart: boundingBox.top - wrapperBoundingBox.top,\n        offsetEnd: wrapperBoundingBox.height - boundingBox.bottom,\n        maxWidth: canvasWrapperHeight,\n        maxHeight: canvasWrapperWidth,\n        bar: this.scrollBars?.vertical?.bar,\n      },\n    };\n  }\n\n  private get zoomStep() {\n    return 0.1;\n  }\n\n  public zoomIn(zoomStep = this.zoomStep) {\n    this.zoomToLeftTopCorner(this.zoomLevel + zoomStep);\n  }\n\n  public zoomOut(zoomStep = this.zoomStep) {\n    this.zoomToLeftTopCorner(this.zoomLevel - zoomStep);\n  }\n\n  public zoomToLeftTopCorner(_newZoomLevel: number) {\n    let newZoomLevel = _newZoomLevel;\n\n    newZoomLevel = Math.min(newZoomLevel, this.MAXZOOMSCALE);\n    newZoomLevel = Math.max(newZoomLevel, this.MINZOOMSCALE);\n\n    const { x, y } = this.zoomTransform;\n    const scaleFactor = newZoomLevel / this.zoomLevel;\n\n    // Calculate the new translation to zoom to the top-left corner\n    const newX = x * scaleFactor;\n    const newY = y * scaleFactor;\n\n    this.zoom?.transform(\n      this.canvasWrapper,\n      new ZoomTransform(newZoomLevel, newX, newY),\n    );\n  }\n\n  public zoomTo(zoomLevel: number) {\n    this.zoomToLeftTopCorner(zoomLevel);\n  }\n\n  public resetZoom() {\n    this.zoom?.transform(this.canvasWrapper, new ZoomTransform(1, 0, 0));\n  }\n\n  observeCanvasResize = () => {\n    this.resizeObserver = new ResizeObserver(() => {\n      this.drawScrollBars();\n    });\n    this.resizeObserver.observe(this.canvasWrapper.node() as SVGSVGElement);\n  };\n\n  defaultWheelDelta(event) {\n    return (\n      -event.deltaY *\n      (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002)\n    );\n  }\n\n  scaleCoordinates(position: Vec2) {\n    const newX = this.zoomTransform.applyX(position.x);\n    const newY = this.zoomTransform.applyY(position.y);\n    return new Vec2(newX, newY);\n  }\n\n  invertZoom(position: Vec2) {\n    const newX = this.zoomTransform.invertX(position.x);\n    const newY = this.zoomTransform.invertY(position.y);\n    return new Vec2(newX, newY);\n  }\n\n  unzoomValue(value: number) {\n    return value / this.zoomLevel;\n  }\n\n  zoomValue(value: number) {\n    return value * this.zoomLevel;\n  }\n\n  destroy() {\n    this.scrollBars.horizontal?.bar?.remove();\n    this.scrollBars.vertical?.bar?.remove();\n    this.resizeObserver?.unobserve(this.canvasWrapper.node() as SVGSVGElement);\n    this.zoom = null;\n    this.zoomEventHandlers = [];\n  }\n\n  isFitToCanvasHeight(height) {\n    const canvasWrapperHeight = this.canvasWrapperHeight;\n\n    return (\n      height <\n      this.unzoomValue(\n        canvasWrapperHeight -\n          (canvasWrapperHeight * AUTO_SCROLL_OFFSET_Y) / 100,\n      )\n    );\n  }\n\n  public zoomStructureToFitHalfOfCanvas(structureBbox: StructureBbox) {\n    const MAX_AUTOSCALE = 2;\n    const OFFSET_FROM_CANVAS_BORDER = 2;\n    const canvasWrapperSize = this.canvasWrapperSize;\n\n    if (structureBbox.width < canvasWrapperSize.width / 2) {\n      const scale = canvasWrapperSize.width / 2 / structureBbox.width;\n      this.zoomTo(Math.min(scale, MAX_AUTOSCALE));\n      this.scrollTo(\n        new Vec2(structureBbox.left, structureBbox.top),\n        false,\n        OFFSET_FROM_CANVAS_BORDER,\n        OFFSET_FROM_CANVAS_BORDER,\n      );\n    }\n  }\n\n  private get canvasWrapperHeight() {\n    // TODO create class for Canvas and move this getter there\n    const canvasWrapperBbox = this.canvasWrapper\n      .node()\n      ?.getBoundingClientRect();\n    return canvasWrapperBbox?.height || 0;\n  }\n\n  private get canvasWrapperSize() {\n    const canvasWrapperBbox = this.canvasWrapper\n      .node()\n      ?.getBoundingClientRect();\n    return {\n      width: canvasWrapperBbox?.width || 0,\n      height: canvasWrapperBbox?.height || 0,\n    };\n  }\n}\n\nexport default ZoomTool;\n","import { Vec2 } from 'domain/entities';\nimport { provideEditorSettings } from '../editorSettings';\nimport ZoomTool from '../tools/Zoom';\n/**\n * `model` -- The original coordinates of entities, namely angstroms\n * `canvas` -- The real coordinates used to draw entities\n * `view` -- The zoomed canvas coordinates\n */\nexport class Coordinates {\n  static canvasToModel(position: Vec2) {\n    const settings = provideEditorSettings();\n    return position.scaled(1 / settings.macroModeScale);\n  }\n\n  static viewToModel(position: Vec2) {\n    const settings = provideEditorSettings();\n    const pos = ZoomTool.instance.invertZoom(position);\n    return pos.scaled(1 / settings.macroModeScale);\n  }\n\n  static modelToView(position: Vec2) {\n    const settings = provideEditorSettings();\n    return ZoomTool.instance.scaleCoordinates(\n      position.scaled(settings.macroModeScale),\n    );\n  }\n\n  static modelToCanvas(position: Vec2) {\n    const settings = provideEditorSettings();\n    return position.scaled(settings.macroModeScale);\n  }\n\n  // convert the original coordinates to transformed coordinates after the d3 transformation\n  static canvasToView(position: Vec2) {\n    return ZoomTool.instance.scaleCoordinates(position);\n  }\n\n  // convert the transformed coordinates to coordinates before the d3 transformation\n  static viewToCanvas(position: Vec2) {\n    return ZoomTool.instance.invertZoom(position);\n  }\n}\n","import { Coordinates as CoordinatesTool } from 'application/editor/shared/coordinates';\nimport { BaseMonomer } from 'domain/entities';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { AttachmentPointName } from 'domain/types';\n\nexport type Coordinates = { x: number; y: number };\n\n// eslint-disable-next-line camelcase\nexport function canvasToMonomerCoordinates(\n  coordinatesOnCanvas: Coordinates,\n  centerOFMonomer: Coordinates,\n  monomerWidth: number,\n  monomerHeight: number,\n) {\n  const zeroPointCoord = {\n    x: centerOFMonomer.x - monomerWidth / 2,\n    y: centerOFMonomer.y - monomerHeight / 2,\n  };\n\n  const monomerCoord = {\n    x: coordinatesOnCanvas.x - zeroPointCoord.x,\n    y: coordinatesOnCanvas.y - zeroPointCoord.y,\n  };\n\n  return monomerCoord;\n}\n\nexport function findLabelPoint(\n  pointOnBorder: Coordinates,\n  angle: number,\n  lineLength: number,\n  lineOffset: number,\n  labelSize: { x: number; y: number },\n  isUsed: boolean,\n) {\n  // based on https://ru.stackoverflow.com/a/1442905\n\n  const angleRadians = Vec2.degrees_to_radians(angle);\n\n  const pointOfAttachment = Vec2.findSecondPoint(\n    pointOnBorder,\n    lineLength,\n    angleRadians,\n  );\n\n  // find vector between pointOnBorder and pointOfAttachment\n\n  const attachmentVector = {\n    x: pointOfAttachment.x - pointOnBorder.x,\n    y: pointOfAttachment.y - pointOnBorder.y,\n  };\n\n  // rotate this vector at 90 degrees - change x and y, then make one negative\n  const rotatedVector = { x: -attachmentVector.y, y: attachmentVector.x };\n\n  // normalize vector\n  const normalizedVector = {\n    x: rotatedVector.x / lineLength,\n    y: rotatedVector.y / lineLength,\n  };\n\n  const normalizedAttachmentVector = {\n    x: attachmentVector.x / lineLength,\n    y: attachmentVector.y / lineLength,\n  };\n\n  // find vector for Label, using normalized vector and length\n\n  let addedOrtogonalOffset = 0;\n  const addedParallelOffset =\n    lineOffset + Math.max(labelSize.x, labelSize.y) + 1;\n  if (isUsed) {\n    if (angle >= -270 && angle <= 0) {\n      addedOrtogonalOffset = 5;\n    } else if (angle >= -360 && angle < -270) {\n      addedOrtogonalOffset = -5;\n    }\n  }\n\n  const ortogonalOffset = {\n    x: normalizedVector.x * addedOrtogonalOffset,\n    y: normalizedVector.y * addedOrtogonalOffset,\n  };\n\n  const parallelOffset = {\n    x: normalizedAttachmentVector.x * addedParallelOffset,\n    y: normalizedAttachmentVector.y * addedParallelOffset,\n  };\n\n  // add this vector to point of attachment\n  const labelCoordinates = {\n    x: pointOfAttachment.x + ortogonalOffset.x + parallelOffset.x - labelSize.x,\n    y: pointOfAttachment.y + ortogonalOffset.y + parallelOffset.y + labelSize.y,\n  };\n\n  return [labelCoordinates, pointOfAttachment];\n}\n\nexport function getSearchFunction(\n  initialAngle: number,\n  canvasOffset: Coordinates,\n  monomer: BaseMonomer,\n) {\n  return function findPointOnMonomerBorder(\n    coordStart: Coordinates,\n    length: number,\n    applyZoomForPositionCalculation: boolean,\n    angle = initialAngle,\n  ) {\n    const angleRadians = Vec2.degrees_to_radians(angle);\n\n    const secondPoint = Vec2.findSecondPoint(coordStart, length, angleRadians);\n\n    const diff = Vec2.diff(\n      new Vec2(coordStart.x, coordStart.y),\n      new Vec2(secondPoint.x, secondPoint.y),\n    );\n\n    // exit recursion\n    if (diff.length() < 1.01) {\n      return secondPoint;\n    }\n\n    const newLength = Math.round(diff.length() / 1.4);\n    const newCoordStart = { x: secondPoint.x, y: secondPoint.y };\n\n    const zoomedCoordinateOfSecondPoint = applyZoomForPositionCalculation\n      ? CoordinatesTool.canvasToView(new Vec2(secondPoint))\n      : new Vec2(secondPoint);\n\n    const newPointCoord = {\n      x: Math.round(zoomedCoordinateOfSecondPoint.x) + canvasOffset.x,\n      y: Math.round(zoomedCoordinateOfSecondPoint.y) + canvasOffset.y,\n    };\n\n    const elementsAtPoint = document.elementsFromPoint(\n      newPointCoord.x,\n      newPointCoord.y,\n    );\n\n    const isCurrentMonomerAtNewPoint = elementsAtPoint.some(\n      (element) => element === monomer.renderer?.bodyElement?.node(),\n    );\n\n    let newAngle: number;\n    if (isCurrentMonomerAtNewPoint) {\n      newAngle = initialAngle;\n    } else {\n      newAngle = initialAngle - 180;\n    }\n\n    return findPointOnMonomerBorder(\n      newCoordStart,\n      newLength,\n      applyZoomForPositionCalculation,\n      newAngle,\n    );\n  };\n}\n\nexport const anglesToSector = {\n  '45': {\n    min: 23,\n    max: 68,\n    center: 45,\n  },\n  '90': {\n    min: 68,\n    max: 113,\n    center: 90,\n  },\n  '135': {\n    min: 113,\n    max: 148,\n    center: 135,\n  },\n  '180': {\n    min: 148,\n    max: 203,\n    center: 180,\n  },\n  '225': {\n    min: 203,\n    max: 248,\n    center: 225,\n  },\n  '270': {\n    min: 248,\n    max: 293,\n    center: 270,\n  },\n  '315': {\n    min: 293,\n    max: 228,\n    center: 315,\n  },\n  '360': {\n    min: 338,\n    max: 360,\n    center: 360,\n  },\n  '0': {\n    min: 0,\n    max: 23,\n    center: 0,\n  },\n};\n\nexport enum attachmentPointNumberToAngle {\n  'R1' = 0,\n  'R2' = 180,\n  'R3' = 90,\n  'R4' = 270,\n  'R5' = 45,\n  'R6' = 135,\n  'R7' = 315,\n  'R8' = 225,\n}\n\nexport const sectorsList = [45, 90, 135, 180, 225, 270, 315, 0, 360];\n\nexport function checkFor0and360(sectorsList: number[]) {\n  if (!sectorsList.includes(0) && sectorsList.includes(360)) {\n    return sectorsList.filter((item) => item !== 360);\n  }\n  if (!sectorsList.includes(360) && sectorsList.includes(0)) {\n    return sectorsList.filter((item) => item !== 0);\n  }\n  return sectorsList;\n}\n\n/* attachmentPointName - R1, R2, ...\n * returns number of attachment point with left binary shift:\n * [attachmentPointNumber]: [binaryShiftedAttachmentPointNumber]\n * 1: 1\n * 2: 2\n * 3: 4\n * 4: 8\n * 5: 16\n * 6: 32\n * It needs for conversion of attachment points to rglabels (just for same view in monomer preview)\n * rglabel 3 means that atom has two r-group attachment points\n * */\nexport function getAttachmentPointLabelWithBinaryShift(\n  attachmentPointNumber: number,\n) {\n  let attachmentPointLabel = '';\n  for (let rgi = 0; rgi < 32; rgi++) {\n    if (attachmentPointNumber & (1 << rgi)) {\n      attachmentPointLabel += getAttachmentPointLabel(rgi + 1);\n    }\n  }\n  return attachmentPointLabel;\n}\n\nexport function getAttachmentPointLabel(attachmentPointNumber: number) {\n  return `R${attachmentPointNumber}` as AttachmentPointName;\n}\n\nexport function getAttachmentPointNumberFromLabel(\n  attachmentPointLabel: AttachmentPointName,\n) {\n  return Number(attachmentPointLabel.replace('R', ''));\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  SGroup,\n  Struct,\n  SGroupAttachmentPoint,\n  AtomQueryProperties,\n  BaseMonomer,\n  Vec2,\n} from 'domain/entities';\nimport { switchIntoChemistryCoordSystem } from 'domain/serializers/ket/helpers';\n\nimport { ifDef } from 'utilities';\nimport { getAttachmentPointLabelWithBinaryShift } from 'domain/helpers/attachmentPointCalculations';\nimport { isNumber } from 'lodash';\n\nfunction fromRlabel(rg) {\n  const res: Array<any> = [];\n  let rgi;\n  let val;\n  for (rgi = 0; rgi < 32; rgi++) {\n    if (rg & (1 << rgi)) {\n      val = rgi + 1;\n      res.push(val); // push the string\n    }\n  }\n  return res;\n}\n\nexport function moleculeToKet(struct: Struct, monomer?: BaseMonomer): any {\n  const body: any = {\n    atoms: Array.from(struct.atoms.values()).map((atom) => {\n      // For the monomers we need to serialize leaving groups as usual atom label like H, O, etc\n      if (atom.label === 'R#' && !monomer) return rglabelToKet(atom);\n      return atomToKet(atom, monomer);\n    }),\n  };\n\n  if (struct.bonds.size !== 0) {\n    body.bonds = Array.from(struct.bonds.values()).map(bondToKet);\n  }\n\n  if (struct.sgroups.size !== 0) {\n    body.sgroups = Array.from(struct.sgroups.values()).map((sGroup) =>\n      sgroupToKet(struct, sGroup),\n    );\n  }\n\n  const fragment = struct.frags.get(0);\n  if (fragment) {\n    ifDef(body, 'stereoFlagPosition', fragment.stereoFlagPosition, null);\n    if (fragment.properties) {\n      body.properties = fragment.properties;\n    }\n  }\n  return {\n    type: 'molecule',\n    ...body,\n  };\n}\n\nfunction atomToKet(source, monomer?: BaseMonomer) {\n  const result: { queryProperties?: AtomQueryProperties; type?: 'atom-list' } =\n    {};\n\n  if (source.label !== 'L#') {\n    ifDef(\n      result,\n      'label',\n      source.label === 'R#' && monomer\n        ? monomer.monomerItem.props.MonomerCaps?.[\n            getAttachmentPointLabelWithBinaryShift(source.rglabel)\n          ]\n        : source.label,\n    );\n    // reaction\n    ifDef(result, 'mapping', parseInt(source.aam), 0);\n  } else if (source.atomList) {\n    result.type = 'atom-list';\n    ifDef(result, 'elements', source.atomList.labelList());\n    ifDef(result, 'notList', source.atomList.notList, false);\n  }\n\n  ifDef(result, 'alias', source.alias);\n  const position: Vec2 = switchIntoChemistryCoordSystem(\n    new Vec2(source.pp.x, source.pp.y, source.pp.z),\n  );\n  ifDef(result, 'location', [position.x, position.y, position.z]);\n  ifDef(result, 'charge', source.charge);\n  ifDef(result, 'explicitValence', source.explicitValence, -1);\n  ifDef(result, 'isotope', source.isotope);\n  ifDef(result, 'radical', source.radical, 0);\n  ifDef(result, 'attachmentPoints', source.attachmentPoints, 0);\n  ifDef(result, 'cip', source.cip, '');\n  ifDef(result, 'selected', source.getInitiallySelected());\n  // stereo\n  ifDef(result, 'stereoLabel', source.stereoLabel, null);\n  ifDef(result, 'stereoParity', source.stereoCare, 0);\n  ifDef(result, 'weight', source.weight, 0);\n  // query\n  ifDef(result, 'ringBondCount', source.ringBondCount, 0);\n  ifDef(result, 'substitutionCount', source.substitutionCount, 0);\n  ifDef(result, 'unsaturatedAtom', !!source.unsaturatedAtom, false);\n  ifDef(result, 'hCount', source.hCount, 0);\n  // query properties\n  if (\n    Object.values(source.queryProperties).some((property) => property !== null)\n  ) {\n    result.queryProperties = {};\n    Object.keys(source.queryProperties).forEach((name) => {\n      ifDef(result.queryProperties, name, source.queryProperties[name]);\n    });\n  }\n  ifDef(result, 'invRet', source.invRet, 0);\n  ifDef(result, 'exactChangeFlag', !!source.exactChangeFlag, false);\n  ifDef(result, 'implicitHCount', source.implicitHCount);\n  return result;\n}\n\nfunction rglabelToKet(source) {\n  const result = {\n    type: 'rg-label',\n  };\n  const position: Vec2 = switchIntoChemistryCoordSystem(\n    new Vec2(source.pp.x, source.pp.y, source.pp.z),\n  );\n  ifDef(result, 'location', [position.x, position.y, position.z]);\n  ifDef(result, 'attachmentPoints', source.attachmentPoints, 0);\n\n  const refsToRGroups = fromRlabel(source.rglabel).map(\n    (rgnumber) => `rg-${rgnumber}`,\n  );\n  ifDef(result, '$refs', refsToRGroups);\n  ifDef(result, 'selected', source.getInitiallySelected());\n\n  return result;\n}\n\nfunction bondToKet(source) {\n  const result = {};\n  if (source.customQuery) {\n    ifDef(result, 'atoms', [source.begin, source.end]);\n    ifDef(result, 'customQuery', source.customQuery);\n  } else {\n    ifDef(result, 'type', source.type);\n    ifDef(result, 'atoms', [source.begin, source.end]);\n    ifDef(result, 'stereo', source.stereo, 0);\n    ifDef(result, 'topology', source.topology, 0);\n    ifDef(result, 'center', source.reactingCenterStatus, 0);\n    ifDef(result, 'cip', source.cip, '');\n  }\n  ifDef(result, 'selected', source.getInitiallySelected());\n  return result;\n}\n\nfunction sgroupToKet(struct: Struct, source: SGroup) {\n  const result = {};\n\n  ifDef(result, 'type', source.type);\n  ifDef(result, 'atoms', source.atoms);\n\n  switch (source.type) {\n    case 'GEN':\n      break;\n    case 'MUL': {\n      ifDef(result, 'mul', source.data.mul || 1);\n      break;\n    }\n    case 'queryComponent': {\n      break;\n    }\n    case 'SRU': {\n      ifDef(result, 'subscript', source.data.subscript || 'n');\n      ifDef(\n        result,\n        'connectivity',\n        source.data.connectivity.toUpperCase() || 'ht',\n      );\n      break;\n    }\n    case 'SUP': {\n      ifDef(result, 'name', source.data.name || '');\n      ifDef(result, 'expanded', source.data.expanded);\n      ifDef(result, 'id', source.id);\n      ifDef(\n        result,\n        'attachmentPoints',\n        source.getAttachmentPoints().map(sgroupAttachmentPointToKet),\n        [],\n      );\n      break;\n    }\n    case 'DAT': {\n      const data = source.data;\n      ifDef(result, 'placement', data.absolute, true);\n      ifDef(result, 'display', data.attached, false);\n      ifDef(result, 'context', data.context);\n      ifDef(result, 'fieldName', data.fieldName);\n      ifDef(result, 'fieldData', data.fieldValue);\n      ifDef(result, 'bonds', SGroup.getBonds(struct, source));\n      break;\n    }\n    default:\n      break;\n  }\n\n  return result;\n}\n\nfunction sgroupAttachmentPointToKet(source: SGroupAttachmentPoint) {\n  const result = {};\n\n  ifDef(result, 'attachmentAtom', source.atomId);\n  ifDef(result, 'leavingAtom', source.leaveAtomId);\n  ifDef(\n    result,\n    'attachmentId',\n    isNumber(source.attachmentPointNumber)\n      ? source.attachmentPointNumber.toString()\n      : source.attachmentId,\n  );\n\n  return result;\n}\n","import { Struct } from 'domain/entities';\nimport { atomToStruct, bondToStruct } from './moleculeToStruct';\nimport { KetItem } from './types';\n\nexport function mergeFragmentsToStruct(\n  ketItem: KetItem,\n  struct: Struct,\n): Struct {\n  let atomsOffset = 0;\n  if (ketItem.fragments) {\n    ketItem.fragments.forEach((fragment) => {\n      fragment.atoms?.forEach((atom) => struct.atoms.add(atomToStruct(atom)));\n      fragment.bonds?.forEach((bond) =>\n        struct.bonds.add(bondToStruct(bond, atomsOffset)),\n      );\n      atomsOffset += fragment.atoms?.length || 0;\n    });\n  }\n  return struct;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  Atom,\n  Bond,\n  SGroup,\n  Struct,\n  SGroupAttachmentPoint,\n  RGroupAttachmentPoint,\n  AttachmentPoints,\n  AtomQueryProperties,\n} from 'domain/entities';\n\nimport { Elements } from 'domain/constants';\nimport { ifDef } from 'utilities';\nimport { mergeFragmentsToStruct } from './mergeFragmentsToStruct';\nimport { initiallySelectedType } from 'domain/entities/BaseMicromoleculeEntity';\n\nexport function toRlabel(values) {\n  let res = 0;\n  values.forEach((val) => {\n    const rgi = val - 1;\n    res |= 1 << rgi;\n  });\n  return res;\n}\n\nexport function moleculeToStruct(ketItem: any): Struct {\n  const struct = mergeFragmentsToStruct(ketItem, new Struct());\n\n  if (ketItem.atoms) {\n    ketItem.atoms.forEach((atom) => {\n      let atomId: number | null = null;\n      if (atom.type === 'rg-label') {\n        atomId = struct.atoms.add(rglabelToStruct(atom));\n      }\n      if (!atom.type || atom.type === 'atom-list') {\n        atomId = struct.atoms.add(atomToStruct(atom));\n      }\n      if (atomId !== null) {\n        addRGroupAttachmentPointsToStruct(\n          struct,\n          atomId,\n          atom.attachmentPoints,\n          atom.selected,\n        );\n      }\n    });\n  }\n\n  if (ketItem.bonds) {\n    ketItem.bonds.forEach((bond) => struct.bonds.add(bondToStruct(bond)));\n  }\n\n  if (ketItem.sgroups) {\n    ketItem.sgroups.forEach((sgroupData) => {\n      const sgroup = sgroupToStruct(sgroupData);\n      const id = struct.sgroups.add(sgroup);\n      sgroup.id = id;\n    });\n  }\n\n  struct.initHalfBonds();\n  struct.initNeighbors();\n  struct.markFragments(ketItem.properties);\n  struct.bindSGroupsToFunctionalGroups();\n\n  return struct;\n}\n\nexport function atomToStruct(source) {\n  const params: any = {};\n\n  const queryAttribute: Array<keyof AtomQueryProperties> = [\n    'aromaticity',\n    'ringMembership',\n    'connectivity',\n    'ringSize',\n    'chirality',\n    'customQuery',\n  ];\n  if (source.type === 'atom-list') {\n    params.label = 'L#';\n    const ids = source.elements\n      .map((el) => Elements.get(el)?.number)\n      .filter((id) => id);\n    ifDef(params, 'atomList', {\n      ids,\n      notList: source.notList,\n    });\n  } else {\n    ifDef(params, 'label', source.label);\n    // reaction\n    ifDef(params, 'aam', source.mapping);\n  }\n  ifDef(params, 'alias', source.alias);\n  ifDef(params, 'pp', {\n    x: source.location[0],\n    y: -source.location[1],\n    z: source.location[2] || 0.0,\n  });\n  ifDef(params, 'charge', source.charge);\n  ifDef(params, 'explicitValence', source.explicitValence);\n  ifDef(params, 'isotope', source.isotope);\n  ifDef(params, 'radical', source.radical);\n  ifDef(params, 'cip', source.cip);\n  ifDef(params, 'attachmentPoints', source.attachmentPoints);\n  // stereo\n  ifDef(params, 'stereoLabel', source.stereoLabel);\n  ifDef(params, 'stereoParity', source.stereoParity);\n  ifDef(params, 'weight', source.weight);\n  // query\n  ifDef(params, 'ringBondCount', source.ringBondCount);\n  ifDef(params, 'substitutionCount', source.substitutionCount);\n  ifDef(params, 'unsaturatedAtom', Number(Boolean(source.unsaturatedAtom)));\n  ifDef(params, 'hCount', source.hCount);\n  if (\n    source.queryProperties &&\n    Object.values(source.queryProperties).some((property) => property !== null)\n  ) {\n    params.queryProperties = {};\n    queryAttribute.forEach((attributeName) => {\n      ifDef(\n        params.queryProperties,\n        attributeName,\n        source.queryProperties[attributeName],\n      );\n    });\n  }\n\n  // reaction\n  ifDef(params, 'invRet', source.invRet);\n  ifDef(params, 'exactChangeFlag', Number(Boolean(source.exactChangeFlag)));\n  // implicit hydrogens\n  ifDef(params, 'implicitHCount', source.implicitHCount);\n\n  const newAtom = new Atom(params);\n  newAtom.setInitiallySelected(source.selected);\n  return newAtom;\n}\n\nexport function rglabelToStruct(source) {\n  const params: any = {};\n  params.label = 'R#';\n  ifDef(params, 'pp', {\n    x: source.location[0],\n    y: -source.location[1],\n    z: source.location[2] || 0.0,\n  });\n  ifDef(params, 'attachmentPoints', source.attachmentPoints);\n  const rglabel = toRlabel(source.$refs.map((el) => parseInt(el.slice(3))));\n  ifDef(params, 'rglabel', rglabel);\n  const newAtom = new Atom(params);\n  newAtom.setInitiallySelected(source.selected);\n  return newAtom;\n}\n\nfunction addRGroupAttachmentPointsToStruct(\n  struct: Struct,\n  attachedAtomId: number,\n  attachmentPoints: AttachmentPoints | null,\n  initiallySelected?: initiallySelectedType,\n) {\n  const rgroupAttachmentPoints: RGroupAttachmentPoint[] = [];\n  if (attachmentPoints === AttachmentPoints.FirstSideOnly) {\n    rgroupAttachmentPoints.push(\n      new RGroupAttachmentPoint(attachedAtomId, 'primary', initiallySelected),\n    );\n  } else if (attachmentPoints === AttachmentPoints.SecondSideOnly) {\n    rgroupAttachmentPoints.push(\n      new RGroupAttachmentPoint(attachedAtomId, 'secondary', initiallySelected),\n    );\n  } else if (attachmentPoints === AttachmentPoints.BothSides) {\n    rgroupAttachmentPoints.push(\n      new RGroupAttachmentPoint(attachedAtomId, 'primary', initiallySelected),\n    );\n    rgroupAttachmentPoints.push(\n      new RGroupAttachmentPoint(attachedAtomId, 'secondary', initiallySelected),\n    );\n  }\n  rgroupAttachmentPoints.forEach((rgroupAttachmentPoint) => {\n    struct.rgroupAttachmentPoints.add(rgroupAttachmentPoint);\n  });\n}\n\n/**\n *\n * @param source\n * @param atomOffset – if bond is a part of a fragment, then we need to consider atoms from previous fragment.\n * source.atoms contains numbers related to fragment, but we need to count atoms related to struct. Example:\n * fragments: [{\n *   atoms: [...],\n *   bonds: [...], this bonds point to atoms in the first fragment\n * }, {\n *   atoms: [...],\n *   bonds: [...], this bonds point to atoms in the second fragment\n * }]\n * When we add bonds from second fragment we need to count atoms from fragments[0].atoms.length + 1, not from zero\n * @returns newly created Bond\n */\nexport function bondToStruct(source, atomOffset = 0) {\n  const params: any = {};\n\n  ifDef(params, 'type', source.type);\n  ifDef(params, 'topology', source.topology);\n  ifDef(params, 'reactingCenterStatus', source.center);\n  ifDef(params, 'stereo', source.stereo);\n  ifDef(params, 'cip', source.cip);\n  ifDef(params, 'customQuery', source.customQuery);\n  // if (params.stereo)\n  // \tparams.stereo = params.stereo > 1 ? params.stereo * 2 : params.stereo;\n  // params.xxx = 0;\n  ifDef(params, 'begin', source.atoms[0] + atomOffset);\n  ifDef(params, 'end', source.atoms[1] + atomOffset);\n  ifDef(params, 'initiallySelected', source.selected);\n\n  const newBond = new Bond(params);\n  newBond.setInitiallySelected(source.selected);\n  return newBond;\n}\n\ntype KetAttachmentPoint = {\n  attachmentAtom: number;\n  leavingAtom?: number;\n  attachmentId?: string;\n};\n\nexport function sgroupToStruct(source) {\n  const sgroup = new SGroup(source.type);\n  ifDef(sgroup, 'atoms', source.atoms);\n  switch (source.type) {\n    case 'GEN':\n      break;\n    case 'MUL': {\n      ifDef(sgroup.data, 'mul', source.mul);\n      break;\n    }\n    case 'SRU': {\n      ifDef(sgroup.data, 'subscript', source.subscript);\n      ifDef(sgroup.data, 'connectivity', source.connectivity.toLowerCase());\n      break;\n    }\n    case 'SUP': {\n      ifDef(sgroup.data, 'name', source.name);\n      ifDef(sgroup.data, 'expanded', source.expanded);\n      ifDef(sgroup, 'id', source.id);\n      source.attachmentPoints?.forEach(\n        (\n          sourceAttachmentPoint: KetAttachmentPoint,\n          sourceAttachmentPointIndex: number,\n        ) => {\n          sgroup.addAttachmentPoint(\n            sgroupAttachmentPointToStruct(\n              sourceAttachmentPoint,\n              sourceAttachmentPointIndex + 1,\n            ),\n          );\n        },\n      );\n      break;\n    }\n    case 'DAT': {\n      ifDef(sgroup.data, 'absolute', source.placement);\n      ifDef(sgroup.data, 'attached', source.display);\n      ifDef(sgroup.data, 'context', source.context);\n      ifDef(sgroup.data, 'fieldName', source.fieldName);\n      ifDef(sgroup.data, 'fieldValue', source.fieldData);\n      break;\n    }\n    default:\n      break;\n  }\n  return sgroup;\n}\n\nfunction sgroupAttachmentPointToStruct(\n  source: KetAttachmentPoint,\n  attachmentPointNumber?: number,\n): SGroupAttachmentPoint {\n  const atomId = source.attachmentAtom;\n  const leavingAtomId = source.leavingAtom;\n  const attachmentId = source.attachmentId;\n  return new SGroupAttachmentPoint(\n    atomId,\n    leavingAtomId,\n    attachmentId,\n    attachmentId ? Number(attachmentId) : attachmentPointNumber,\n  );\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { Pile, Pool, SGroup, Struct, Vec2 } from 'domain/entities';\nimport { KetFileNode } from '../../serializers.types';\n\nexport function prepareStructForKet(struct: Struct) {\n  const ketNodes: KetFileNode[] = [];\n\n  const rgFrags = new Set(); // skip this when writing molecules\n  for (const [rgnumber, rgroup] of struct.rgroups.entries()) {\n    // RGroups writing\n    rgroup.frags.forEach((frid) => rgFrags.add(frid));\n\n    const fragsAtoms = Array.from(rgroup.frags.values()).reduce(\n      (res, frid) => res.union(struct.getFragmentIds(frid)),\n      new Pile(),\n    );\n\n    ketNodes.push({\n      type: 'rgroup',\n      fragment: struct.clone(fragsAtoms),\n      center: getFragmentCenter(struct, fragsAtoms),\n      data: { rgnumber, rgroup },\n    });\n  }\n\n  const filteredFragmentIds = Array.from(struct.frags.keys()).filter(\n    (fid) => !rgFrags.has(fid),\n  );\n  addMolecules(ketNodes, filteredFragmentIds, struct);\n\n  struct.rxnArrows.forEach((item) => {\n    ketNodes.push({\n      type: 'arrow',\n      center: item.pos[0],\n      data: {\n        mode: item.mode,\n        pos: item.pos,\n        height: item.height,\n      },\n      selected: item.getInitiallySelected(),\n    });\n  });\n\n  struct.rxnPluses.forEach((item) => {\n    ketNodes.push({\n      type: 'plus',\n      center: item.pp,\n      data: {},\n      selected: item.getInitiallySelected(),\n    });\n  });\n\n  struct.simpleObjects.forEach((item) => {\n    ketNodes.push({\n      type: 'simpleObject',\n      center: item.pos[0],\n      data: {\n        mode: item.mode,\n        pos: item.pos,\n      },\n      selected: item.getInitiallySelected(),\n    });\n  });\n\n  struct.texts.forEach((item) => {\n    ketNodes.push({\n      type: 'text',\n      center: item.position,\n      data: {\n        content: item.content,\n        position: item.position,\n        pos: item.pos,\n      },\n      selected: item.getInitiallySelected(),\n    });\n  });\n\n  struct.images.forEach((image) => {\n    ketNodes.push(image.toKetNode());\n  });\n\n  struct.multitailArrows.forEach((multitailArrow) => {\n    ketNodes.push(multitailArrow.toKetNode());\n  });\n\n  ketNodes.forEach((ketNode) => {\n    if (ketNode.fragment) {\n      const sgroups: SGroup[] = Array.from(ketNode.fragment.sgroups.values());\n      const filteredSGroups = sgroups.filter((sg: SGroup) =>\n        sg.atoms.every((atom) => atom !== undefined),\n      );\n      const filteredSGroupsMap = new Pool<SGroup>();\n      filteredSGroups.forEach((sg, index) => {\n        filteredSGroupsMap.set(index, sg);\n      });\n      ketNode.fragment.sgroups = filteredSGroupsMap;\n    }\n  });\n\n  // TODO: check if this sorting operation is needed\n  // return ketNodes.sort((a, b) => a.center.x - b.center.x)\n  return ketNodes;\n}\n\nfunction getFragmentCenter(struct, atomSet) {\n  const bb = struct.getCoordBoundingBox(atomSet);\n  return Vec2.centre(bb.min, bb.max);\n}\n\n/**\n * Merge fragments which are in the same S-Groups to one fragment(molecule)\n * and add new fragments(molecules) to KetNodes\n * See: https://github.com/epam/ketcher/issues/2142\n */\nfunction addMolecules(\n  ketNodes: KetFileNode[],\n  fragmentIds: number[],\n  struct: Struct,\n) {\n  const sGroupFragmentsMap = generateSGroupFragmentsMap(\n    ketNodes,\n    fragmentIds,\n    struct,\n  );\n  const mergedFragments = Pile.unionIntersections(\n    Array.from(sGroupFragmentsMap.values()),\n  );\n\n  mergedFragments.forEach((fragments) => {\n    let atomSet = new Pile<number>();\n    fragments.forEach((fragmentId) => {\n      atomSet = atomSet.union(struct.getFragmentIds(fragmentId));\n    });\n    ketNodes.push({\n      type: 'molecule',\n      fragment: struct.clone(atomSet),\n      center: getFragmentCenter(struct, atomSet),\n    });\n  });\n}\n\n/**\n * @example Give `fragmentIds` is `[0, 1]`,\n * and S-Group0 includes fragment0 and fragment1,\n * and S-Group1 includes fragment1,\n * then return value should be\n * ```\n * {\n *   0: [0, 1],\n *   1: [1]\n * }\n * ```\n */\nfunction generateSGroupFragmentsMap(\n  ketNodes: KetFileNode[],\n  fragmentIds: number[],\n  struct: Struct,\n) {\n  const sGroupFragmentsMap = new Map<number, Pile<number>>();\n\n  fragmentIds.forEach((fragmentId) => {\n    const atomsInFragment = struct.getFragmentIds(fragmentId);\n\n    let hasAtomInSGroup = false;\n    atomsInFragment.forEach((atomId) => {\n      struct.atoms.get(atomId)?.sgs.forEach((sGroupId) => {\n        hasAtomInSGroup = true;\n        const fragmentSet = sGroupFragmentsMap.get(sGroupId);\n        if (fragmentSet) {\n          fragmentSet.add(fragmentId);\n        } else {\n          sGroupFragmentsMap.set(sGroupId, new Pile([fragmentId]));\n        }\n      });\n    });\n\n    if (!hasAtomInSGroup) {\n      ketNodes.push({\n        type: 'molecule',\n        fragment: struct.clone(atomsInFragment),\n        center: getFragmentCenter(struct, atomsInFragment),\n      });\n    }\n  });\n\n  return sGroupFragmentsMap;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Struct } from 'domain/entities';\nimport { ifDef } from 'utilities';\nimport { moleculeToKet } from './moleculeToKet';\n\nexport function rgroupToKet(struct: Struct, data) {\n  const body = {\n    rlogic: rgroupLogicToKet(data.rgnumber, data.rgroup),\n    ...moleculeToKet(struct),\n  };\n\n  return {\n    ...body,\n    type: 'rgroup',\n  };\n}\n\nfunction rgroupLogicToKet(rgnumber, rglogic) {\n  const result = {};\n\n  ifDef(result, 'number', rgnumber);\n  ifDef(result, 'range', rglogic.range, '');\n  ifDef(result, 'resth', rglogic.resth, false);\n  ifDef(result, 'ifthen', rglogic.ifthen, 0);\n\n  return result;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { RGroup, Struct } from 'domain/entities';\n\nimport { ifDef } from 'utilities';\nimport { moleculeToStruct } from './moleculeToStruct';\n\nexport function rgroupToStruct(ketItem): Struct {\n  const struct = moleculeToStruct(ketItem);\n  const rgroup = rgroupLogicToStruct(ketItem.rlogic);\n  struct.frags.forEach((_value: any, key) => {\n    rgroup.frags.add(key);\n  });\n  if (ketItem.rlogic) struct.rgroups.set(ketItem.rlogic.number, rgroup);\n  return struct;\n}\n\nexport function rgroupLogicToStruct(rglogic) {\n  const params = {};\n  ifDef(params, 'range', rglogic.range);\n  ifDef(params, 'resth', rglogic.resth);\n  ifDef(params, 'ifthen', rglogic.ifthen);\n\n  return new RGroup(params);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { RxnArrow, RxnPlus, Struct } from 'domain/entities';\nimport { getNodeWithInvertedYCoord } from '../helpers';\n\nexport function rxnToStruct(ketItem: any, struct: Struct): Struct {\n  if (ketItem.type === 'arrow') {\n    const arrow = new RxnArrow(getNodeWithInvertedYCoord(ketItem.data));\n    arrow.setInitiallySelected(ketItem.selected);\n    struct.rxnArrows.add(arrow);\n  } else {\n    const plus = new RxnPlus({\n      pp: {\n        x: ketItem.location[0],\n        y: -ketItem.location[1],\n        z: ketItem.location[2],\n      },\n    });\n    plus.setInitiallySelected(ketItem.selected);\n    struct.rxnPluses.add(plus);\n  }\n  return struct;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { getNodeWithInvertedYCoord } from '../helpers';\n\nexport function simpleObjectToKet(simpleObjectNode) {\n  return {\n    type: 'simpleObject',\n    data: getNodeWithInvertedYCoord(simpleObjectNode.data),\n    selected: simpleObjectNode.selected,\n  };\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { SimpleObject, SimpleObjectMode, Struct, Vec2 } from 'domain/entities';\nimport { getNodeWithInvertedYCoord } from '../helpers';\n\nexport function simpleObjectToStruct(ketItem: any, struct: Struct): Struct {\n  const object =\n    ketItem.data.mode === 'circle' ? circleToEllipse(ketItem) : ketItem.data;\n  const simpleObject = new SimpleObject(getNodeWithInvertedYCoord(object));\n  simpleObject.setInitiallySelected(ketItem.selected);\n  struct.simpleObjects.add(simpleObject);\n  return struct;\n}\n\n/**\n * @deprecated TODO to remove after release 2.3\n * As circle has been migrated to ellipses here is function for converting old files data with circles to ellipse type\n * @param ketItem\n */\nfunction circleToEllipse(ketItem) {\n  const radius = Vec2.dist(ketItem.data.pos[1], ketItem.data.pos[0]);\n  const pos0 = ketItem.data.pos[0];\n  return {\n    mode: SimpleObjectMode.ellipse,\n    pos: [\n      {\n        x: pos0.x - Math.abs(radius),\n        y: pos0.y - Math.abs(radius),\n        z: pos0.z - Math.abs(radius),\n      },\n      {\n        x: pos0.x + Math.abs(radius),\n        y: pos0.y + Math.abs(radius),\n        z: pos0.z + Math.abs(radius),\n      },\n    ],\n  };\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { getNodeWithInvertedYCoord } from '../helpers';\n\nexport function textToKet(textNode) {\n  return {\n    type: 'text',\n    data: getNodeWithInvertedYCoord(textNode.data),\n    selected: textNode.selected,\n  };\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Struct, Text } from 'domain/entities';\nimport { getNodeWithInvertedYCoord } from '../helpers';\n\nexport function textToStruct(ketItem: any, struct: Struct) {\n  const text = new Text(getNodeWithInvertedYCoord(ketItem.data));\n  text.setInitiallySelected(ketItem.selected);\n  struct.texts.add(text);\n  return struct;\n}\n","import { AttachmentPointName } from 'domain/types';\n\nexport enum KetNodeType {\n  MONOMER = 'monomer',\n  AMBIGUOUS_MONOMER = 'ambiguousMonomer',\n}\n\nexport interface IKetMonomerNode {\n  type: KetNodeType.MONOMER;\n  id: string;\n  seqid?: number;\n  position: {\n    x: number;\n    y: number;\n  };\n  alias: string;\n  templateId: string;\n}\n\nexport interface IKetAmbiguousMonomerNode {\n  type: KetNodeType.AMBIGUOUS_MONOMER;\n  id: string;\n  position: {\n    x: number;\n    y: number;\n  };\n  alias: string;\n  templateId: string;\n}\n\nexport type KetNode = IKetMonomerNode | IKetAmbiguousMonomerNode;\n\nexport interface IKetConnectionMonomerEndPoint {\n  monomerId: string;\n  attachmentPointId?: string;\n  groupId?: string;\n}\n\nexport interface IKetConnectionMoleculeEndPoint {\n  moleculeId: string;\n  atomId: string;\n}\n\nexport type IKetConnectionEndPoint = IKetConnectionMonomerEndPoint &\n  IKetConnectionMoleculeEndPoint;\n\nexport enum KetConnectionType {\n  SINGLE = 'single',\n  HYDROGEN = 'hydrogen',\n}\n\nexport interface IKetTemplateConnectionEndPoint {\n  monomerTemplateId: string;\n  attachmentPointId: AttachmentPointName;\n}\n\nexport interface IKetTemplateConnection {\n  connectionType: KetConnectionType;\n  endpoint1: IKetTemplateConnectionEndPoint;\n  endpoint2: IKetTemplateConnectionEndPoint;\n}\n\nexport interface IKetConnection {\n  connectionType: KetConnectionType;\n  label?: string;\n  endpoint1: IKetConnectionEndPoint;\n  endpoint2: IKetConnectionEndPoint;\n}\n\nexport type monomerClass =\n  | 'RNA'\n  | 'PEPTIDE'\n  | 'CHEM'\n  | 'UNKNOWN'\n  | 'DNA'\n  | 'MODDNA';\n\nexport enum KetMonomerClass {\n  AminoAcid = 'AminoAcid',\n  Sugar = 'Sugar',\n  Phosphate = 'Phosphate',\n  Base = 'Base',\n  Terminator = 'Terminator',\n  Linker = 'Linker',\n  Unknown = 'Unknown',\n  CHEM = 'CHEM',\n  RNA = 'RNA',\n  DNA = 'DNA',\n}\nexport type IKetAttachmentPointType = 'left' | 'right' | 'side';\n\nexport interface IKetAttachmentPoint {\n  attachmentAtom: number;\n  leavingGroup: {\n    atoms: number[];\n  };\n  type?: IKetAttachmentPointType;\n  label?: string;\n}\n\nexport interface IKetIdtAliases {\n  base: string;\n  modifications?: {\n    internal?: string;\n    endpoint3?: string;\n    endpoint5?: string;\n  };\n}\n\nexport enum KetTemplateType {\n  MONOMER_TEMPLATE = 'monomerTemplate',\n  MONOMER_GROUP_TEMPLATE = 'monomerGroupTemplate',\n  AMBIGUOUS_MONOMER_TEMPLATE = 'ambiguousMonomerTemplate',\n}\n\nexport enum KetAmbiguousMonomerTemplateSubType {\n  ALTERNATIVES = 'alternatives',\n  MIXTURE = 'mixture',\n}\n\nexport interface KetAmbiguousMonomerTemplateOption {\n  templateId: string;\n  ratio?: number;\n  probability?: number;\n}\n\nexport interface IKetMonomerTemplate {\n  type: KetTemplateType.MONOMER_TEMPLATE;\n  class?: KetMonomerClass;\n  monomerSubClass?:\n    | 'AminoAcid'\n    | 'Sugar'\n    | 'Phosphate'\n    | 'Base'\n    | 'Terminator'\n    | 'Linker'\n    | 'Unknown'\n    | 'CHEM';\n  naturalAnalogShort: string;\n  id: string;\n  fullName?: string;\n  alias: string;\n  naturalAnalog?: string;\n  attachmentPoints?: IKetAttachmentPoint[];\n  root: {\n    nodes;\n  };\n  classHELM?: string;\n  name?: string;\n  idtAliases?: IKetIdtAliases;\n  unresolved?: boolean;\n  atoms: [];\n  bonds: [];\n}\n\nexport interface IKetAmbiguousMonomerTemplate {\n  type: KetTemplateType.AMBIGUOUS_MONOMER_TEMPLATE;\n  id: string;\n  subtype: KetAmbiguousMonomerTemplateSubType;\n  options: KetAmbiguousMonomerTemplateOption[];\n  idtAliases?: IKetIdtAliases;\n  alias?: string;\n}\n\nexport interface IKetMonomerTemplateRef {\n  $ref: string;\n}\n\nexport enum KetMonomerGroupTemplateClass {\n  RNA = 'RNA',\n}\n\nexport interface IKetMonomerGroupTemplate {\n  id: string;\n  name: string;\n  type: KetTemplateType;\n  class?: KetMonomerGroupTemplateClass;\n  templates: IKetMonomerTemplateRef[];\n  connections: IKetTemplateConnection[];\n  idtAliases?: IKetIdtAliases;\n}\n\nexport interface IKetNodeRef {\n  $ref: string;\n}\n\nexport interface IKetMacromoleculesContentRootProperty {\n  root: {\n    nodes: IKetNodeRef[];\n    connections: IKetConnection[];\n    templates: IKetMonomerTemplateRef[];\n  };\n}\n\nexport interface IKetMacromoleculesContentOtherProperties {\n  [key: string]:\n    | KetNode\n    | IKetMonomerTemplate\n    | IKetMonomerGroupTemplate\n    | IKetAmbiguousMonomerTemplate;\n}\n\nexport type IKetMacromoleculesContent = IKetMacromoleculesContentRootProperty &\n  IKetMacromoleculesContentOtherProperties;\n","import { Operation } from 'domain/entities/Operation';\nimport { RenderersManager } from 'application/render/renderers/RenderersManager';\n\nexport class Command {\n  public operations: Operation[] = [];\n  private undoOperationReverse = false;\n  private setUndoOperationByPriority = false;\n\n  public addOperation(operation: Operation) {\n    this.operations.push(operation);\n  }\n\n  public merge(command: Command) {\n    this.operations = [...this.operations, ...command.operations];\n  }\n\n  public setUndoOperationReverse() {\n    // this method marks command that operations should be invoked in opposite sequence during invert()\n    this.undoOperationReverse = true;\n  }\n\n  public setUndoOperationsByPriority() {\n    this.setUndoOperationByPriority = true;\n  }\n\n  public invert(renderersManagers: RenderersManager) {\n    const operations = this.undoOperationReverse\n      ? this.operations.slice().reverse()\n      : [...this.operations];\n\n    if (this.setUndoOperationByPriority) {\n      operations.sort((a, b) => (a.priority || 0) - (b.priority || 0));\n    }\n\n    operations.forEach((operation) => operation.invert(renderersManagers));\n    renderersManagers.runPostRenderMethods();\n  }\n\n  public execute(renderersManagers: RenderersManager) {\n    this.operations.forEach((operation) =>\n      operation.execute(renderersManagers),\n    );\n    renderersManagers.runPostRenderMethods();\n  }\n\n  public executeAfterAllOperations(renderersManagers: RenderersManager) {\n    this.operations.forEach((operation) => {\n      if (operation.executeAfterAllOperations) {\n        operation.executeAfterAllOperations(renderersManagers);\n      }\n    });\n  }\n\n  public clear() {\n    this.operations = [];\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Action } from '../editor/actions';\nimport { Render } from 'application/render';\nimport { Struct } from 'domain/entities';\nimport { selectionKeys } from './shared/constants';\nimport { PipelineSubscription, Subscription } from 'subscription';\n\nexport type EditorSelection = {\n  [key in typeof selectionKeys[number]]?: number[];\n};\n\nexport type FloatingToolsParams = {\n  visible?: boolean;\n  rotateHandlePosition?: { x: number; y: number };\n};\n\nexport enum EditorType {\n  Micromolecules = 0,\n  Macromolecules = 1,\n}\n\nexport interface Editor {\n  isDitrty: () => boolean;\n  setOrigin: () => void;\n  struct: (struct?: Struct, needToCenterStruct?: boolean) => Struct;\n  structToAddFragment: (struct: Struct) => Struct;\n  subscribe: (eventName: string, handler: (data?: any) => any) => any;\n  unsubscribe: (eventName: string, subscriber: any) => void;\n  selection: (arg?: EditorSelection | 'all' | null) => EditorSelection | null;\n  undo: () => void;\n  redo: () => void;\n  clear: () => void;\n  options: (value?: any) => any;\n  setOptions: (opts: string) => any;\n  zoom: (value?: any) => any;\n  structSelected: () => Struct;\n  explicitSelected: () => EditorSelection;\n  centerStruct: () => void;\n  zoomAccordingContent: (struct: Struct) => void;\n  errorHandler: ((message: string) => void) | null;\n  event: {\n    message: Subscription;\n    elementEdit: PipelineSubscription;\n    bondEdit: PipelineSubscription;\n    zoomIn: PipelineSubscription;\n    zoomOut: PipelineSubscription;\n    rgroupEdit: PipelineSubscription;\n    sgroupEdit: PipelineSubscription;\n    sdataEdit: PipelineSubscription;\n    quickEdit: PipelineSubscription;\n    attachEdit: PipelineSubscription;\n    removeFG: PipelineSubscription;\n    change: Subscription;\n    selectionChange: PipelineSubscription;\n    aromatizeStruct: PipelineSubscription;\n    dearomatizeStruct: PipelineSubscription;\n    enhancedStereoEdit: PipelineSubscription;\n    confirm: PipelineSubscription;\n    showInfo: PipelineSubscription;\n    apiSettings: PipelineSubscription;\n    cursor: Subscription;\n    updateFloatingTools: Subscription<FloatingToolsParams>;\n  };\n  update: (\n    action: Action | true,\n    ignoreHistory?: boolean,\n    options?: { resizeCanvas: boolean },\n  ) => void;\n  render: Render;\n  // supposed to be RotateController from 'ketcher-react' package\n  rotateController: any;\n  macromoleculeConvertionError: string | null | undefined;\n  setMacromoleculeConvertionError: (errorMessage: string) => void;\n  clearMacromoleculeConvertionError: () => void;\n  serverSettings: object;\n}\n","function Handler(f, once, priority) {\n  this.f = f\n  this.once = once\n  this.priority = priority\n}\n\nfunction Subscription() {\n  this.handlers = []\n}\nexports.Subscription = Subscription\n\nfunction insert(s, handler) {\n  var pos = 0\n  for (; pos < s.handlers.length; pos++)\n    if (s.handlers[pos].priority < handler.priority) break\n  s.handlers = s.handlers.slice(0, pos).concat(handler).concat(s.handlers.slice(pos))\n}\n\nSubscription.prototype.handlersForDispatch = function() {\n  var handlers = this.handlers, updated = null\n  for (var i = handlers.length - 1; i >= 0; i--) if (handlers[i].once) {\n    if (!updated) updated = handlers.slice()\n    updated.splice(i, 1)\n  }\n  if (updated) this.handlers = updated\n  return handlers\n}\n\nSubscription.prototype.add = function(f, priority) {\n  insert(this, new Handler(f, false, priority || 0))\n}\n\nSubscription.prototype.addOnce = function(f, priority) {\n  insert(this, new Handler(f, true, priority || 0))\n}\n\nSubscription.prototype.remove = function(f) {\n  for (var i = 0; i < this.handlers.length; i++) if (this.handlers[i].f == f) {\n    this.handlers = this.handlers.slice(0, i).concat(this.handlers.slice(i + 1))\n    return\n  }\n}\n\nSubscription.prototype.hasHandler = function() {\n  return this.handlers.length > 0\n}\n\nSubscription.prototype.dispatch = function() {\n  var handlers = this.handlersForDispatch()\n  for (var i = 0; i < handlers.length; i++)\n    handlers[i].f.apply(null, arguments)\n}\n\nfunction PipelineSubscription() {\n  Subscription.call(this)\n}\nexports.PipelineSubscription = PipelineSubscription\n\nPipelineSubscription.prototype = new Subscription\n\nPipelineSubscription.prototype.dispatch = function(value) {\n  var handlers = this.handlersForDispatch()\n  for (var i = 0; i < handlers.length; i++)\n    value = handlers[i].f(value)\n  return value\n}\n\nfunction StoppableSubscription() {\n  Subscription.call(this)\n}\nexports.StoppableSubscription = StoppableSubscription\n\nStoppableSubscription.prototype = new Subscription\n\nStoppableSubscription.prototype.dispatch = function() {\n  var handlers = this.handlersForDispatch()\n  for (var i = 0; i < handlers.length; i++) {\n    var result = handlers[i].f.apply(null, arguments)\n    if (result) return result\n  }\n}\n\nfunction DOMSubscription() {\n  Subscription.call(this)\n}\nexports.DOMSubscription = DOMSubscription\n\nDOMSubscription.prototype = new Subscription\n\nDOMSubscription.prototype.dispatch = function(event) {\n  var handlers = this.handlersForDispatch()\n  for (var i = 0; i < handlers.length; i++)\n    if (handlers[i].f(event) || event.defaultPrevented) return true\n  return false\n}\n","import { Nucleoside } from 'domain/entities/Nucleoside';\nimport { Nucleotide } from 'domain/entities/Nucleotide';\nimport { MonomerSequenceNode } from 'domain/entities/MonomerSequenceNode';\nimport { EmptySequenceNode } from 'domain/entities/EmptySequenceNode';\n\nexport type SubChainNode =\n  | MonomerSequenceNode\n  | Nucleoside\n  | Nucleotide\n  | EmptySequenceNode;\n\nexport enum SequenceType {\n  RNA = 'RNA',\n  DNA = 'DNA',\n  PEPTIDE = 'PEPTIDE',\n}\n\nexport enum IsChainCycled {\n  NOT_CYCLED,\n  CYCLED,\n}\n","export enum ToolName {\n  monomer = 'monomer',\n  preset = 'preset',\n  selectRectangle = 'select-rectangle',\n  bondSingle = 'bond-single',\n  bondHydrogen = 'bond-hydrogen',\n  erase = 'erase',\n  clear = 'clear',\n  hand = 'hand',\n}\n","import { Subscription } from 'subscription';\nimport { ToolEventHandlerName } from 'application/editor/tools/Tool';\nimport { CoreEditor } from 'application/editor/Editor';\nimport ZoomTool from 'application/editor/tools/Zoom';\nimport { SequenceType } from 'domain/entities/monomer-chains/types';\nimport { ToolName } from 'application/editor/tools/types';\n\nexport let editorEvents;\n\nexport function resetEditorEvents() {\n  editorEvents = {\n    selectMonomer: new Subscription(),\n    selectPreset: new Subscription(),\n    selectTool: new Subscription(),\n    createBondViaModal: new Subscription(),\n    cancelBondCreationViaModal: new Subscription(),\n    selectMode: new Subscription(),\n    layoutModeChange: new Subscription(),\n    selectHistory: new Subscription(),\n    error: new Subscription(),\n    openErrorModal: new Subscription(),\n    openMonomerConnectionModal: new Subscription(),\n    mouseOverPolymerBond: new Subscription(),\n    mouseLeavePolymerBond: new Subscription(),\n    mouseOnMovePolymerBond: new Subscription(),\n    mouseOverMonomer: new Subscription(),\n    mouseOnMoveMonomer: new Subscription(),\n    mouseLeaveMonomer: new Subscription(),\n    mouseOverAttachmentPoint: new Subscription(),\n    mouseLeaveAttachmentPoint: new Subscription(),\n    mouseUpAttachmentPoint: new Subscription(),\n    mouseDownAttachmentPoint: new Subscription(),\n    mouseOverDrawingEntity: new Subscription(),\n    mouseLeaveDrawingEntity: new Subscription(),\n    mouseUpMonomer: new Subscription(),\n    rightClickSequence: new Subscription(),\n    rightClickCanvas: new Subscription(),\n    rightClickPolymerBond: new Subscription(),\n    editSequence: new Subscription(),\n    startNewSequence: new Subscription(),\n    turnOnSequenceEditInRNABuilderMode: new Subscription(),\n    turnOffSequenceEditInRNABuilderMode: new Subscription(),\n    modifySequenceInRnaBuilder: new Subscription(),\n    mouseOverSequenceItem: new Subscription(),\n    mouseOnMoveSequenceItem: new Subscription(),\n    mouseLeaveSequenceItem: new Subscription(),\n    changeSequenceTypeEnterMode: new Subscription(),\n    toggleSequenceEditMode: new Subscription(),\n    toggleSequenceEditInRNABuilderMode: new Subscription(),\n    clickOnSequenceItem: new Subscription(),\n    mousedownBetweenSequenceItems: new Subscription(),\n    mouseDownOnSequenceItem: new Subscription(),\n    doubleClickOnSequenceItem: new Subscription(),\n    openConfirmationDialog: new Subscription(),\n    mouseUpAtom: new Subscription(),\n  };\n}\nresetEditorEvents();\nexport const renderersEvents: ToolEventHandlerName[] = [\n  'mouseOverPolymerBond',\n  'mouseLeavePolymerBond',\n  'mouseOnMovePolymerBond',\n  'mouseOverMonomer',\n  'mouseOnMoveMonomer',\n  'mouseOverAttachmentPoint',\n  'mouseLeaveAttachmentPoint',\n  'mouseUpAttachmentPoint',\n  'mouseDownAttachmentPoint',\n  'mouseLeaveMonomer',\n  'mouseOverDrawingEntity',\n  'mouseLeaveDrawingEntity',\n  'mouseUpMonomer',\n  'rightClickSequence',\n  'rightClickCanvas',\n  'rightClickPolymerBond',\n  'editSequence',\n  'startNewSequence',\n  'turnOnSequenceEditInRNABuilderMode',\n  'turnOffSequenceEditInRNABuilderMode',\n  'modifySequenceInRnaBuilder',\n  'mouseOverSequenceItem',\n  'mouseOnMoveSequenceItem',\n  'mouseLeaveSequenceItem',\n  'changeSequenceTypeEnterMode',\n  'toggleSequenceEditMode',\n  'toggleSequenceEditInRNABuilderMode',\n  'clickOnSequenceItem',\n  'mousedownBetweenSequenceItems',\n  'mouseDownOnSequenceItem',\n  'doubleClickOnSequenceItem',\n  'mouseUpAtom',\n];\n\nexport const hotkeysConfiguration = {\n  RNASequenceType: {\n    shortcut: ['Control+Alt+r'],\n    handler: (editor: CoreEditor) => {\n      editor.events.changeSequenceTypeEnterMode.dispatch(SequenceType.RNA);\n    },\n  },\n  DNASequenceType: {\n    shortcut: ['Control+Alt+d'],\n    handler: (editor: CoreEditor) => {\n      editor.events.changeSequenceTypeEnterMode.dispatch(SequenceType.DNA);\n    },\n  },\n  PEPTIDESequenceTYpe: {\n    shortcut: ['Control+Alt+p'],\n    handler: (editor: CoreEditor) => {\n      editor.events.changeSequenceTypeEnterMode.dispatch(SequenceType.PEPTIDE);\n    },\n  },\n  exit: {\n    shortcut: ['Shift+Tab', 'Escape'],\n    handler: (editor: CoreEditor) => {\n      editor.events.selectTool.dispatch(ToolName.selectRectangle);\n    },\n  },\n  undo: {\n    shortcut: 'Mod+z',\n    handler: (editor: CoreEditor) => {\n      editor.onSelectHistory('undo');\n    },\n  },\n  redo: {\n    shortcut: ['Mod+Shift+z', 'Mod+y'],\n    handler: (editor: CoreEditor) => {\n      editor.onSelectHistory('redo');\n    },\n  },\n  erase: {\n    shortcut: ['Delete', 'Backspace'],\n    handler: (editor: CoreEditor) => {\n      // TODO create an ability to stop event propagation from mode event handlers to keyboard shortcuts handlers\n      if (editor.isSequenceEditMode) return;\n      editor.events.selectTool.dispatch(ToolName.erase);\n      editor.events.selectTool.dispatch(ToolName.selectRectangle);\n    },\n  },\n  clear: {\n    shortcut: ['Mod+Delete', 'Mod+Backspace'],\n    handler: (editor: CoreEditor) => {\n      editor.events.selectTool.dispatch(ToolName.clear);\n      editor.events.selectTool.dispatch(ToolName.selectRectangle);\n    },\n  },\n  'zoom-plus': {\n    shortcut: 'Mod+=',\n    handler: () => {\n      ZoomTool.instance.zoomIn();\n    },\n  },\n  'zoom-minus': {\n    shortcut: 'Mod+-',\n    handler: () => {\n      ZoomTool.instance.zoomOut();\n    },\n  },\n  'zoom-reset': {\n    shortcut: 'Mod+0',\n    handler: () => {\n      ZoomTool.instance.resetZoom();\n    },\n  },\n  'select-all': {\n    shortcut: 'Mod+a',\n    handler: (editor: CoreEditor) => {\n      const modelChanges =\n        editor.drawingEntitiesManager.selectAllDrawingEntities();\n      editor.renderersContainer.update(modelChanges);\n    },\n  },\n  hand: {\n    shortcut: 'Mod+Alt+h',\n    handler: (editor: CoreEditor) => {\n      editor.events.selectTool.dispatch(ToolName.hand);\n    },\n  },\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\n// Single entry point to Raphaël library\n\nimport { Vec2 } from 'domain/entities';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet Raphael: any;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet raphaelModule: any;\n\nif (typeof window !== 'undefined') {\n  raphaelModule = require('raphael');\n  // Some environments (vite, webpack etc) might resolve this import differently\n  // this is a workaround to make it work in all environments\n  Raphael =\n    typeof raphaelModule === 'function' ? raphaelModule : raphaelModule.default;\n\n  // TODO: refactor ugly prototype extensions to plain old functions\n  Raphael.el.translateAbs = function (x: number, y: number): void {\n    this.delta = this.delta || new Vec2();\n    // TODO check that only numbers might be passed to this function\n    this.delta.x += x - 0;\n    this.delta.y += y - 0;\n    this.transform(\n      't' + this.delta.x.toString() + ',' + this.delta.y.toString(),\n    );\n  };\n\n  Raphael.st.translateAbs = function (x: number, y: number): void {\n    this.forEach((el) => {\n      el.translateAbs(x, y);\n    });\n  };\n}\n\nexport default Raphael;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\n// Visel is a shorthand for VISual ELement\n// It corresponds to a visualization (i.e. set of paths) of an atom or a bond.\nimport { Box2Abs } from 'domain/entities/box2Abs';\nimport { Vec2 } from 'domain/entities/vec2';\n\nclass Visel {\n  constructor(type) {\n    this.type = type;\n    this.paths = [];\n    /** @type {Box2Abs[]} */\n    this.boxes = [];\n    /** @type {Box2Abs | null} */\n    this.boundingBox = null;\n    this.oldBoundingBox = null;\n    this.exts = [];\n  }\n\n  add(path, bb, ext) {\n    this.paths.push(path);\n    if (bb) {\n      this.boxes.push(bb);\n      this.boundingBox =\n        this.boundingBox == null ? bb : Box2Abs.union(this.boundingBox, bb);\n    }\n    if (ext) this.exts.push(ext);\n  }\n\n  clear() {\n    this.paths = [];\n    this.boxes = [];\n    this.exts = [];\n    if (this.boundingBox !== null) {\n      this.oldBoundingBox = this.boundingBox.clone();\n    }\n    this.boundingBox = null;\n  }\n\n  translate(...args) {\n    if (args.length > 2) {\n      // TODO: replace to debug time assert\n      throw new Error('One vector or two scalar arguments expected');\n    }\n    if (args.length === 1) {\n      const vector = args[0];\n      this.translate(vector.x, vector.y);\n    } else {\n      const x = args[0];\n      const y = args[1];\n      const delta = new Vec2(x, y);\n      for (let i = 0; i < this.paths.length; ++i) {\n        this.paths[i].translateAbs(x, y);\n      }\n      for (let j = 0; j < this.boxes.length; ++j) {\n        this.boxes[j] = this.boxes[j].translate(delta);\n      }\n      if (this.boundingBox !== null) {\n        this.boundingBox = this.boundingBox.translate(delta);\n      }\n    }\n  }\n\n  /**\n   * @param {number} degree\n   * @param {Vec2} center\n   */\n  rotate(degree, center) {\n    for (let i = 0; i < this.paths.length; ++i) {\n      this.paths[i].rotate(degree, center.x, center.y);\n    }\n\n    for (let j = 0; j < this.boxes.length; ++j) {\n      this.boxes[j] = this.boxes[j].transform((point) =>\n        point.rotateAroundOrigin(degree, center),\n      );\n    }\n    if (this.boundingBox !== null) {\n      this.boundingBox = this.boundingBox.transform((point) =>\n        point.rotateAroundOrigin(degree, center),\n      );\n    }\n  }\n}\n\nexport default Visel;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Box2Abs } from 'domain/entities';\nimport ReStruct from './restruct';\nimport { Render } from '../raphaelRender';\nimport { Scale } from 'domain/helpers';\nimport Visel from './visel';\nimport { IMAGE_KEY } from 'domain/constants';\n\nclass ReObject {\n  public visel: Visel;\n  public hover = false;\n  public hovering: any = null;\n  public selected = false;\n  public selectionPlate: any = null;\n\n  constructor(viselType: string) {\n    this.visel = new Visel(viselType);\n  }\n\n  changeSelectionStyle(options: any) {\n    const { hoverStyle } = options;\n    if (['simpleObject', IMAGE_KEY].includes(this.visel.type)) {\n      this.hovering?.attr({\n        'fill-opacity': this.selected ? 1 : 0,\n      });\n    } else {\n      this.hovering?.attr({\n        fill: hoverStyle.fill,\n        'fill-opacity': this.selected ? 1 : 0,\n      });\n    }\n  }\n\n  getVBoxObj(render: Render): Box2Abs | null {\n    let vbox = this.visel.boundingBox;\n    if (vbox === null) return null;\n    if (render.options.offset) {\n      vbox = vbox.translate(render.options.offset.negated());\n    }\n    return vbox.transform(Scale.canvasToModel, render.options);\n  }\n\n  setHover(hover: boolean, render: Render): void {\n    // TODO render should be field\n    const { options } = render;\n    if (hover) {\n      let noredraw = 'hovering' in this && this.hovering !== null;\n      if (noredraw) {\n        if (this.hovering.type === 'set') {\n          if (!this.hovering[0]) return;\n          noredraw = !this.hovering[0].removed;\n        } else {\n          noredraw = !this.hovering.removed;\n        }\n      }\n      if (noredraw) {\n        this.changeSelectionStyle(options);\n        this.hovering.show();\n      } else {\n        render.paper.setStart();\n        this.drawHover(render);\n        this.hovering = render.paper.setFinish();\n      }\n    } else if (this.hovering) {\n      this.changeSelectionStyle(options);\n      this.hovering.hide();\n    }\n\n    this.hover = hover;\n  }\n\n  drawHover(_render: Render): any {\n    throw new Error('ReObject.drawHover is not overridden.');\n  }\n\n  makeSelectionPlate(_restruct: ReStruct, _paper: any, _styles: any): any {\n    throw new Error('ReObject.makeSelectionPlate is not overridden');\n  }\n}\n\nexport default ReObject;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\n/*\n  This map is used to draw anything on 'layers'\n  You can treat these values as z-index: background has the lowest z-index, indices has the highest\n*/\nexport enum LayerMap {\n  background = 'background',\n  images = 'images',\n  selectionPlate = 'selectionPlate',\n  selectionPoints = 'selectionPoints',\n  hovering = 'hovering',\n  atom = 'atom',\n  bondSkeleton = 'bondSkeleton',\n  warnings = 'warnings',\n  data = 'data',\n  additionalInfo = 'additionalInfo',\n  indices = 'indices',\n}\n\nexport enum StereoColoringType {\n  LabelsOnly = 'LabelsOnly',\n  BondsOnly = 'BondsOnly',\n  LabelsAndBonds = 'LabelsAndBonds',\n  Off = 'Off',\n}\n\nexport enum StereLabelStyleType {\n  IUPAC = 'Iupac',\n  Classic = 'Classic',\n  On = 'On',\n  Off = 'Off',\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Struct } from 'domain/entities/struct';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { inRange } from 'lodash';\nimport { BondAtoms } from 'application/editor/shared/utils.types';\n\nlet FRAC = Math.PI / 12; // '15º'\n\nfunction setFracAngle(angle: number): void {\n  FRAC = (Math.PI / 180) * angle;\n}\n\nfunction calcAngle(pos0: Vec2, pos1: Vec2): number {\n  const v = Vec2.diff(pos1, pos0);\n  return Math.atan2(v.y, v.x);\n}\n\nfunction fracAngle(angle, angle2): number {\n  if (angle2) angle = calcAngle(angle, angle2);\n  return Math.round(angle / FRAC) * FRAC;\n}\n\nfunction calcNewAtomPos(pos0: Vec2, pos1: Vec2, ctrlKey: boolean): Vec2 {\n  const vector = new Vec2(1, 0).rotate(\n    ctrlKey ? calcAngle(pos0, pos1) : fracAngle(pos0, pos1),\n  );\n  vector.add_(pos0); // eslint-disable-line no-underscore-dangle\n  return vector;\n}\n\nfunction degrees(angle: number): number {\n  let degree = Math.round((angle / Math.PI) * 180);\n  if (degree > 180) degree -= 360;\n  else if (degree <= -180) degree += 360;\n  return degree;\n}\n\nconst BONDS_MERGE_ANGLE = 10; // 'º'\nconst BONDS_MERGE_SCALE = 0.2;\n\nfunction mergeBondsParams(\n  struct1: Struct,\n  bond1: BondAtoms,\n  struct2: Struct,\n  bond2: BondAtoms,\n) {\n  // TODO find a solution to remove not-null assertion from result atoms below\n  // https://github.com/epam/ketcher/issues/2652\n  const begin1 = struct1.atoms.get(bond1.begin)!;\n  const begin2 = struct2.atoms.get(bond2.begin)!;\n  const end1 = struct1.atoms.get(bond1.end)!;\n  const end2 = struct2.atoms.get(bond2.end)!;\n\n  const angle = calcAngle(begin1.pp, end1.pp) - calcAngle(begin2.pp, end2.pp);\n  const mergeAngle = Math.abs(degrees(angle) % 180);\n\n  const scale = Vec2.dist(begin1.pp, end1.pp) / Vec2.dist(begin2.pp, end2.pp);\n\n  const merged =\n    !inRange(mergeAngle, BONDS_MERGE_ANGLE, 180 - BONDS_MERGE_ANGLE) &&\n    inRange(scale, 1 - BONDS_MERGE_SCALE, 1 + BONDS_MERGE_SCALE);\n\n  return { merged, angle, scale, cross: Math.abs(degrees(angle)) > 90 };\n}\n\nexport default {\n  calcAngle,\n  fracAngle,\n  degrees,\n  setFracAngle,\n  mergeBondsParams,\n  calcNewAtomPos,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Vec2 } from 'domain/entities';\nimport utils from '../editor/shared/utils';\nimport { ShowHydrogenLabels } from './restruct/reatom';\nimport { RenderOptions } from './render.types';\n\nfunction defaultOptions(renderOptions: RenderOptions): RenderOptions {\n  const options = getOptionsWithConvertedUnits(renderOptions);\n\n  const scaleFactorMicro = options.microModeScale || 100;\n  const scaleFactorMacro = options.macroModeScale || 200;\n\n  if (options.rotationStep) {\n    utils.setFracAngle(options.rotationStep);\n  }\n\n  const labelFontSize = Math.ceil(1.9 * (scaleFactorMicro / 6));\n  const subFontSize = Math.ceil(0.5 * labelFontSize);\n\n  const defaultOptions: Partial<RenderOptions> = {\n    'dearomatize-on-load': false,\n    ignoreChiralFlag: false,\n    disableQueryElements: null,\n    // flags for debugging\n    showAtomIds: false,\n    showBondIds: false,\n    showHalfBondIds: false,\n    showLoopIds: false,\n    // rendering customization flags\n    // TODO: hide enhanced flags opts\n    showValenceWarnings: true,\n    autoScale: false, // scale structure to fit into the given view box, used in view mode\n    autoScaleMargin: 0,\n    maxBondLength: 0, // 0 stands for \"not specified\"\n    atomColoring: true,\n    hideImplicitHydrogen: false,\n    hideTerminalLabels: false,\n    // atoms\n    carbonExplicitly: false,\n    showCharge: true,\n    showHydrogenLabels: ShowHydrogenLabels.TerminalAndHetero,\n    showValence: true,\n    // bonds\n    aromaticCircle: true,\n\n    microModeScale: scaleFactorMicro,\n    macroModeScale: scaleFactorMacro,\n    zoom: 1.0,\n    offset: new Vec2(),\n\n    lineWidth: scaleFactorMicro / 20,\n    bondSpace: options.bondSpacingInPx || scaleFactorMicro / 7,\n    stereoBond: options.stereoBondWidthInPx || scaleFactorMicro / 7,\n    subFontSize: options.fontszsubInPx || subFontSize,\n    font: '30px Arial',\n    fontszInPx: options.fontszInPx || labelFontSize,\n    fontszsubInPx: options.fontszsubInPx || subFontSize,\n    fontRLabel: (options.fontszInPx || labelFontSize) * 1.2,\n    fontRLogic: (options.fontszInPx || labelFontSize) * 0.7,\n\n    radiusScaleFactor: 0.38,\n\n    /* styles */\n    lineattr: {\n      stroke: '#000',\n      'stroke-width': options.bondThicknessInPx || scaleFactorMicro / 20,\n      'stroke-linecap': 'round',\n      'stroke-linejoin': 'round',\n    },\n    arrowSnappingStyle: {\n      fill: '#365CFF',\n      stroke: '#365CFF',\n    },\n    bondSnappingStyle: {\n      fill: '#365CFF',\n      stroke: '#365CFF',\n      'stroke-width': options.bondThicknessInPx * 1.5,\n    },\n    /* eslint-enable quote-props */\n    selectionStyle: {\n      fill: '#57FF8F',\n      stroke: '#57FF8F',\n    },\n    hoverStyle: {\n      stroke: '#0097A8',\n      fill: '#CCFFDD',\n      'stroke-width': (0.6 * scaleFactorMicro) / 20,\n    },\n    innerHoverStyle: {\n      stroke: '#CCFFDD',\n      fill: 'none',\n      'stroke-width': (4.6 * scaleFactorMicro) / 20,\n    },\n    sgroupBracketStyle: {\n      stroke: 'darkgray',\n      'stroke-width': (0.5 * scaleFactorMicro) / 20,\n    },\n    lassoStyle: {\n      stroke: 'gray',\n      'stroke-width': '1px',\n    },\n    selectionStyleSimpleObject: {\n      stroke: '#57FF8F',\n      'stroke-width': scaleFactorMicro / 4,\n      'stroke-linecap': 'round',\n    },\n    movingStyle: {\n      cursor: 'all-scroll',\n    },\n    atomSelectionPlateRadius: options.fontszInPx || labelFontSize,\n    contractedFunctionalGroupSize: 50,\n\n    previewOpacity: 0.5,\n    viewOnlyMode: false,\n  };\n\n  return Object.assign({}, defaultOptions, options);\n}\n\nconst measureMap = {\n  px: 1,\n  cm: 37.795278,\n  pt: 1.333333,\n  inch: 96,\n};\n\nfunction convertValue(\n  value: number,\n  measureFrom: keyof typeof measureMap,\n  measureTo: keyof typeof measureMap,\n) {\n  const convertedValue =\n    measureTo === 'px' || measureTo === 'pt'\n      ? ((value * measureMap[measureFrom]) / measureMap[measureTo]).toFixed()\n      : ((value * measureMap[measureFrom]) / measureMap[measureTo]).toFixed(3);\n  return Number(convertedValue);\n}\n\nfunction convertHashSpacingToPx(\n  value: number,\n  measureFrom: keyof typeof measureMap,\n) {\n  const convertedValue = (value * measureMap[measureFrom]) / measureMap.px;\n  return Number(convertedValue.toFixed(1));\n}\n\nexport function getOptionsWithConvertedUnits(\n  options: RenderOptions,\n): RenderOptions {\n  const convertedOptions: Partial<\n    Pick<\n      RenderOptions,\n      | 'fontszInPx'\n      | 'fontszsubInPx'\n      | 'bondSpacingInPx'\n      | 'bondThicknessInPx'\n      | 'stereoBondWidthInPx'\n      | 'microModeScale'\n      | 'hashSpacingInPx'\n    >\n  > = {};\n  const defaultUnit = 'px';\n\n  if (typeof options.fontsz !== 'undefined') {\n    convertedOptions.fontszInPx = convertValue(\n      options.fontsz,\n      options.fontszUnit || defaultUnit,\n      defaultUnit,\n    );\n  }\n\n  if (typeof options.fontszsub !== 'undefined') {\n    convertedOptions.fontszsubInPx = convertValue(\n      options.fontszsub,\n      options.fontszsubUnit || defaultUnit,\n      defaultUnit,\n    );\n  }\n\n  if (\n    typeof options.bondSpacing !== 'undefined' &&\n    typeof options.bondLength !== 'undefined'\n  ) {\n    const convertedBondLength = convertValue(\n      options.bondLength,\n      options.bondLengthUnit || defaultUnit,\n      defaultUnit,\n    );\n\n    // bondSpacing is a percentage of bondLength\n    convertedOptions.bondSpacingInPx =\n      (options.bondSpacing / 100) * convertedBondLength;\n  }\n\n  if (typeof options.bondThickness !== 'undefined') {\n    convertedOptions.bondThicknessInPx = convertValue(\n      options.bondThickness,\n      options.bondThicknessUnit || defaultUnit,\n      defaultUnit,\n    );\n  }\n\n  if (typeof options.stereoBondWidth !== 'undefined') {\n    convertedOptions.stereoBondWidthInPx = convertValue(\n      options.stereoBondWidth,\n      options.stereoBondWidthUnit || defaultUnit,\n      defaultUnit,\n    );\n  }\n\n  if (\n    typeof options.bondLength !== 'undefined' &&\n    typeof options.bondLengthUnit !== 'undefined'\n  ) {\n    convertedOptions.microModeScale = convertValue(\n      options.bondLength,\n      options.bondLengthUnit || defaultUnit,\n      defaultUnit,\n    );\n  }\n\n  if (typeof options.hashSpacing !== 'undefined') {\n    convertedOptions.hashSpacingInPx = convertHashSpacingToPx(\n      options.hashSpacing,\n      options.hashSpacingUnit || defaultUnit,\n    );\n  }\n  return {\n    ...options,\n    ...convertedOptions,\n  };\n}\n\nexport default defaultOptions;\n","import { RxnArrowMode, Vec2 } from 'domain/entities';\nimport { StereLabelStyleType } from 'application/render/restruct';\n\nexport type RenderOptionStyles = Record<string, string | number>;\n\nexport enum MeasurementUnits {\n  Px = 'px',\n  Cm = 'cm',\n  Pt = 'pt',\n  Inch = 'inch',\n}\n\nexport enum UsageInMacromolecule {\n  MonomerConnectionsModal,\n  MonomerPreview,\n  BondPreview,\n}\n\nexport type RenderOptions = {\n  width?: number;\n  height?: number;\n\n  rotationStep?: number;\n  bondSpacing: number;\n  bondLength: number;\n  bondLengthUnit: MeasurementUnits;\n  stereoBondWidth: number;\n  stereoBondWidthUnit: MeasurementUnits;\n  bondThickness: number;\n  bondThicknessUnit: MeasurementUnits;\n\n  downScale?: boolean;\n  rescaleAmount?: number;\n  radiusScaleFactor: number;\n\n  'dearomatize-on-load'?: boolean;\n  ignoreChiralFlag?: boolean;\n  disableQueryElements?: string[] | null;\n\n  showAtomIds: boolean;\n  showBondIds: boolean;\n  showHalfBondIds: boolean;\n  showLoopIds: boolean;\n  showValenceWarnings: boolean;\n  autoScale: boolean;\n  autoScaleMargin: number;\n  maxBondLength: number;\n  atomColoring: boolean;\n  hideImplicitHydrogen: boolean;\n  hideTerminalLabels: boolean;\n  carbonExplicitly: boolean;\n  showCharge: boolean;\n  showHydrogenLabels: string;\n  showValence: boolean;\n  aromaticCircle: boolean;\n  microModeScale: number;\n  macroModeScale: number;\n  zoom: number;\n  offset: Vec2;\n  lineWidth: number;\n\n  bondSpace: number;\n  stereoBond: number;\n  subFontSize: number;\n  font: string;\n  fontsz: number;\n  fontszUnit: MeasurementUnits;\n  fontszsubUnit: MeasurementUnits;\n  fontszsub: number;\n  fontRLabel: number;\n  fontRLogic: number;\n\n  hashSpacing: number;\n  hashSpacingUnit: MeasurementUnits;\n\n  /* styles */\n  lineattr: RenderOptionStyles;\n  multitailArrow: RenderOptionStyles;\n  arrowSnappingStyle: RenderOptionStyles;\n  bondSnappingStyle: RenderOptionStyles;\n  selectionStyle: RenderOptionStyles;\n  hoverStyle: RenderOptionStyles;\n  innerHoverStyle: RenderOptionStyles;\n  movingStyle: RenderOptionStyles;\n  sgroupBracketStyle: RenderOptionStyles;\n  lassoStyle: RenderOptionStyles;\n  selectionStyleSimpleObject: RenderOptionStyles;\n  hoverStyleSimpleObject: RenderOptionStyles;\n  atomSelectionPlateRadius: number;\n  contractedFunctionalGroupSize: number;\n\n  stereoLabelStyle?: StereLabelStyleType;\n\n  previewOpacity: number;\n\n  connectedMonomerAttachmentPoints?: string[];\n  currentlySelectedMonomerAttachmentPoint?: string;\n  labelInMonomerConnectionsModal?: boolean;\n  labelInPreview?: boolean;\n\n  // Converted\n  fontszInPx: number;\n  fontszsubInPx: number;\n  bondSpacingInPx: number;\n  bondThicknessInPx: number;\n  stereoBondWidthInPx: number;\n  hashSpacingInPx: number;\n  usageInMacromolecule?: UsageInMacromolecule;\n  viewOnlyMode?: boolean;\n};\n\nexport interface RelativeBox {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport interface ArrowItem {\n  mode?: RxnArrowMode;\n  pos: Vec2[];\n  height: number;\n}\n\nexport type ViewBox = {\n  minX: number;\n  minY: number;\n  width: number;\n  height: number;\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { RaphaelAxisAlignedBoundingBox, RaphaelPaper } from 'raphael';\nimport { Atom, Bond, Box2Abs, HalfBond, Vec2 } from 'domain/entities';\nimport assert from 'assert';\nimport { ReStruct, LayerMap } from './restruct';\nimport Visel from './restruct/visel';\nimport {\n  RelativeBox,\n  RenderOptions,\n  UsageInMacromolecule,\n} from './render.types';\n\nfunction relBox(box: RaphaelAxisAlignedBoundingBox): RelativeBox {\n  return {\n    x: box.x,\n    y: box.y,\n    width: box.width,\n    height: box.height,\n  };\n}\n\n/**\n * Finds intersection of a ray and a box and\n * Returns the shift magnitude to avoid it\n */\nfunction shiftRayBox(p: Vec2, d: Vec2, bb: Box2Abs) {\n  assert(!!p);\n  assert(!!d);\n  assert(!!bb);\n\n  // four corner points of the box\n  const b = [\n    bb.p0,\n    new Vec2(bb.p1.x, bb.p0.y),\n    bb.p1,\n    new Vec2(bb.p0.x, bb.p1.y),\n  ];\n\n  const r = b.map((v) => v.sub(p)); // b relative to p\n\n  d = d.normalized();\n\n  const rc = r.map((v) => Vec2.cross(v, d)); // cross prods\n  const rd = r.map((v) => Vec2.dot(v, d)); // dot prods\n\n  // find foremost points on the right and on the left of the ray\n  let pid = -1;\n  let nid = -1;\n\n  for (let i = 0; i < 4; ++i) {\n    if (rc[i] > 0) {\n      if (pid < 0 || rd[pid] < rd[i]) pid = i;\n    } else if (nid < 0 || rd[nid] < rd[i]) {\n      nid = i;\n    }\n  }\n\n  if (nid < 0 || pid < 0) {\n    // no intersection, no shift\n    return 0;\n  }\n\n  // check the order\n  const id0 = rd[pid] > rd[nid] ? nid : pid;\n  const id1 = rd[pid] > rd[nid] ? pid : nid;\n\n  // simple proportion to calculate the shift\n  /* eslint-disable no-mixed-operators */\n  return (\n    rd[id0] +\n    (Math.abs(rc[id0]) * (rd[id1] - rd[id0])) /\n      (Math.abs(rc[id0]) + Math.abs(rc[id1]))\n  );\n}\nfunction calcCoordinates(aPoint: Vec2, bPoint: Vec2, lengthHyp: number) {\n  const obj: {\n    pos1: null | { x: number; y: number };\n    pos2: null | { x: number; y: number };\n  } = { pos1: null, pos2: null };\n  const oPos2 = { x: bPoint.x - aPoint.x, y: bPoint.y - aPoint.y };\n  const c =\n    (lengthHyp ** 2 - oPos2.x * oPos2.x - oPos2.y * oPos2.y - lengthHyp ** 2) /\n    -2;\n  const a = oPos2.x * oPos2.x + oPos2.y * oPos2.y;\n  if (oPos2.x !== 0) {\n    const b = -2 * oPos2.y * c;\n    const e = c * c - lengthHyp * lengthHyp * oPos2.x * oPos2.x;\n    const D = b * b - 4 * a * e;\n    if (D > 0) {\n      obj.pos1 = { x: 0, y: 0 };\n      obj.pos2 = { x: 0, y: 0 };\n      obj.pos1.y = (-b + Math.sqrt(D)) / (2 * a);\n      obj.pos2.y = (-b - Math.sqrt(D)) / (2 * a);\n      obj.pos1.x = (c - obj.pos1.y * oPos2.y) / oPos2.x;\n      obj.pos2.x = (c - obj.pos2.y * oPos2.y) / oPos2.x;\n    }\n  } else {\n    obj.pos1 = { x: 0, y: 0 };\n    obj.pos2 = { x: 0, y: 0 };\n    obj.pos1.y = c / oPos2.y;\n    obj.pos2.y = c / oPos2.y;\n    obj.pos1.x = -Math.sqrt(lengthHyp ** 2 - c ** 2 / oPos2.y ** 2);\n    obj.pos2.x = Math.sqrt(lengthHyp ** 2 - c ** 2 / oPos2.y ** 2);\n  }\n  if (obj.pos1 !== null) {\n    obj.pos1.x += aPoint.x;\n    obj.pos1.y += aPoint.y;\n  }\n  if (obj.pos2 !== null) {\n    obj.pos2.x += aPoint.x;\n    obj.pos2.y += aPoint.y;\n  }\n  return obj;\n}\n\nfunction getCIPValuePath({\n  paper,\n  cipLabelPosition,\n  atomOrBond,\n  options,\n}: {\n  paper: RaphaelPaper;\n  cipLabelPosition: Vec2;\n  atomOrBond: Atom | Bond;\n  options: RenderOptions;\n}) {\n  const text = paper\n    .text(cipLabelPosition.x, cipLabelPosition.y, `(${atomOrBond.cip})`)\n    .attr({\n      font: options.font,\n      'font-size': options.fontszInPx,\n    });\n  const box = text.getBBox();\n  const path = paper.set();\n  const rect = paper\n    .rect(box.x - 1, box.y - 1, box.width + 2, box.height + 2, 3, 3)\n    .attr({ fill: '#fff', stroke: '#fff' });\n  path.push(rect.toFront(), text.toFront());\n\n  return {\n    path,\n    text,\n    rectangle: rect,\n  };\n}\n\nfunction drawCIPLabel({\n  atomOrBond,\n  position,\n  restruct,\n  visel,\n}: {\n  atomOrBond: Bond | Atom;\n  position: Vec2;\n  restruct: ReStruct;\n  visel: Visel;\n}) {\n  const { options, paper } = restruct.render;\n  const path = paper.set();\n\n  const cipLabelPosition = position.scaled(options.microModeScale);\n  const cipValuePath = getCIPValuePath({\n    paper,\n    cipLabelPosition,\n    atomOrBond,\n    options,\n  });\n\n  if (atomOrBond instanceof Atom) {\n    const box = relBox(cipValuePath.path.getBBox());\n\n    cipValuePath.path.translateAbs(0.5 * box.width, -0.5 * box.height);\n  }\n\n  path.push(cipValuePath.path.toFront());\n\n  restruct.addReObjectPath(LayerMap.additionalInfo, visel, path, null, true);\n\n  return cipValuePath;\n}\n\nfunction updateHalfBondCoordinates(\n  hb1: HalfBond,\n  hb2: HalfBond,\n  xShift: number,\n): [HalfBond, HalfBond] {\n  if (hb1.p.y !== hb2.p.y) return [hb1, hb2];\n  if (hb1.p.x < hb2.p.x && hb1.p.y === hb2.p.y) {\n    hb1.p.x = hb1.p.x + xShift;\n  } else if (hb1.p.x > hb2.p.x) {\n    hb1.p.x = hb1.p.x - xShift;\n  }\n\n  return [hb1, hb2];\n}\n\nfunction escapeHtml(str) {\n  return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\nfunction useLabelStyles(\n  attachmentPointSelected: boolean,\n  attachmentPointUsed: boolean,\n  usageInMacromolecule: UsageInMacromolecule,\n): {\n  color: string;\n  fill: string;\n  stroke: string;\n} {\n  let color = '#585858';\n  let fill = '#FFF';\n  let stroke = '#7C7C7F';\n\n  switch (usageInMacromolecule) {\n    case UsageInMacromolecule.MonomerPreview:\n      stroke = 'none';\n      if (attachmentPointUsed) {\n        fill = '#E1E5EA';\n        color = '#B4B9D6';\n      }\n      break;\n    case UsageInMacromolecule.MonomerConnectionsModal:\n      if (attachmentPointSelected) {\n        fill = '#167782';\n        color = '#FFF';\n      } else if (attachmentPointUsed) {\n        fill = '#E1E5EA';\n        color = '#B4B9D6';\n        stroke = '#B4B9D6';\n      }\n      break;\n    case UsageInMacromolecule.BondPreview:\n      if (attachmentPointSelected) {\n        fill = '#CDF1FC';\n      } else if (attachmentPointUsed) {\n        fill = '#E1E5EA';\n        color = '#B4B9D6';\n      }\n      stroke = 'none';\n      break;\n    default:\n      break;\n  }\n\n  return { color, fill, stroke };\n}\n\nconst util = {\n  relBox,\n  shiftRayBox,\n  calcCoordinates,\n  drawCIPLabel,\n  updateHalfBondCoordinates,\n  escapeHtml,\n  useLabelStyles,\n};\n\nexport default util;\n","import { tfx } from 'utilities';\nimport { Vec2 } from 'domain/entities';\n\ninterface Point2D {\n  x: number;\n  y: number;\n}\n\nexport class PathBuilder {\n  static generatePoint(point: Point2D): string {\n    return `${tfx(point.x)},${tfx(point.y)}`;\n  }\n\n  private pathParts: Array<string>;\n\n  constructor(initialPath?: string) {\n    this.pathParts = [];\n    if (initialPath) {\n      this.pathParts.push(initialPath);\n    }\n  }\n\n  addMovement(to: Point2D): PathBuilder {\n    this.pathParts.push(`M${PathBuilder.generatePoint(to)}`);\n    return this;\n  }\n\n  addLine(to: Point2D, from?: Point2D): PathBuilder {\n    if (from) {\n      this.addMovement(from);\n    }\n    this.pathParts.push(`L${PathBuilder.generatePoint(to)}`);\n    return this;\n  }\n\n  addClosedLine(to: Point2D, from?: Point2D): PathBuilder {\n    this.addLine(to, from);\n    const index = this.pathParts.length - 1;\n    this.pathParts[index] = this.pathParts[index].concat('Z');\n    return this;\n  }\n\n  addQuadraticBezierCurve(control: Point2D, to: Point2D): PathBuilder {\n    this.pathParts.push(\n      `Q${PathBuilder.generatePoint(control)} ${PathBuilder.generatePoint(to)}`,\n    );\n    return this;\n  }\n\n  addPathParts(pathParts: Array<string>): PathBuilder {\n    this.pathParts = this.pathParts.concat(pathParts);\n    return this;\n  }\n\n  addOpenArrowPathParts(\n    start: Vec2,\n    arrowLength: number,\n    tipXOffset = 7,\n    tipYOffset = 5,\n  ): PathBuilder {\n    const endX = start.x + arrowLength;\n    const end = new Vec2(endX, start.y);\n    const tipX = endX - tipXOffset;\n\n    return this.addLine(end, start)\n      .addLine({ x: tipX, y: end.y - tipYOffset })\n      .addLine({ x: tipX, y: end.y + tipYOffset }, end);\n  }\n\n  addFilledTriangleArrowPathParts(\n    start: Vec2,\n    arrowLength: number,\n    triangleLength = 8,\n    triangleWidth = 4,\n  ): PathBuilder {\n    const endX = start.x + arrowLength;\n    const end = new Vec2(endX, start.y);\n    const triangleBottom = new Vec2(endX - triangleLength, end.y);\n    const tipX = endX - triangleLength;\n\n    return this.addLine(start, triangleBottom)\n      .addLine({ x: tipX, y: end.y - triangleWidth }, end)\n      .addClosedLine({ x: tipX, y: end.y + triangleWidth });\n  }\n\n  addMultitailArrowBase(\n    topY: number,\n    bottomY: number,\n    spineX: number,\n    tailLength: number,\n    cubicBezierOffset = 6,\n  ): PathBuilder {\n    const tailX = spineX - tailLength;\n    const tailStart = spineX - cubicBezierOffset;\n\n    return this.addMovement({ x: tailX, y: topY })\n      .addLine({ x: tailStart, y: topY })\n      .addQuadraticBezierCurve(\n        { x: spineX, y: topY },\n        { x: spineX, y: topY + cubicBezierOffset },\n      )\n      .addLine({ x: spineX, y: bottomY - cubicBezierOffset })\n      .addQuadraticBezierCurve(\n        { x: spineX, y: bottomY },\n        { x: tailStart, y: bottomY },\n      )\n      .addLine({ x: tailX, y: bottomY });\n  }\n\n  build(): string {\n    return this.pathParts.join(' ');\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { RaphaelPaper, Element } from 'raphael';\nimport { HalfBond, RxnArrowMode, Vec2 } from 'domain/entities';\n\nimport { getOptionsWithConvertedUnits } from './options';\nimport Raphael from './raphael-ext';\nimport svgPath from 'svgpath';\nimport util from './util';\nimport { ArrowItem, RelativeBox, RenderOptions } from './render.types';\nimport { tfx } from 'utilities';\nimport { PathBuilder } from './pathBuilder';\n\nconst ARROW_HEAD_LENGHT = 0.25; // 10\nconst ARROW_HEAD_WIDTH = 0.125; // 5\nconst ARROW_HEAD_ATTR = 0.1; // 4\nconst ARROW_OFFSET = 0.1; // 4\nconst ARROW_DASH_INTERVAL = 0.0875; // 3.5\nconst ARROW_FAIL_SIGN_WIDTH = 0.2; // 8\nconst ARROW_UNBALANCED_OFFSET = 0.2; // 8 (used to be 15)\n\nexport function getArrowHeadDimensions(options: RenderOptions) {\n  const { microModeScale } = getOptionsWithConvertedUnits(options);\n\n  return {\n    arrowHeadLength: ARROW_HEAD_LENGHT * microModeScale,\n    arrowHeadWidth: ARROW_HEAD_WIDTH * microModeScale,\n    arrowHeadAttr: ARROW_HEAD_ATTR * microModeScale,\n    arrowOffset: ARROW_OFFSET * microModeScale,\n  };\n}\n\nfunction getUnbalancedArrowHeadOffset(options: RenderOptions) {\n  const { microModeScale } = getOptionsWithConvertedUnits(options);\n\n  return ARROW_UNBALANCED_OFFSET * microModeScale;\n}\n\nfunction rectangle(paper: RaphaelPaper, points: [Vec2, Vec2]) {\n  return paper.rect(\n    tfx(Math.min(points[0].x, points[1].x)),\n    tfx(Math.min(points[0].y, points[1].y)),\n    tfx(Math.abs(points[1].x - points[0].x)),\n    tfx(Math.abs(points[1].y - points[0].y)),\n  );\n}\n\nfunction rectangleArrowHighlightAndSelection(\n  _paper: RaphaelPaper,\n  { pos: [start], height }: ArrowItem,\n  length: number,\n  angle: number,\n) {\n  const endX = start.x + length;\n  const [wOffset, hOffset] = [5, height || 8];\n\n  const path =\n    `M${tfx(start.x - wOffset)},${tfx(start.y)}` +\n    `L${tfx(start.x - wOffset)},${tfx(start.y - hOffset)}` +\n    `L${tfx(endX + wOffset)},${tfx(start.y - hOffset)}` +\n    `L${tfx(endX + wOffset)},${tfx(start.y + (!height ? hOffset : 0))}` +\n    `L${tfx(start.x - wOffset)},${tfx(start.y + (!height ? hOffset : 0))}Z`;\n\n  return svgPath(path).rotate(angle, start.x, start.y).toString();\n}\n\nfunction ellipse(paper: RaphaelPaper, points: [Vec2, Vec2]) {\n  const rad = Vec2.diff(points[1], points[0]);\n  const rx = rad.x / 2;\n  const ry = rad.y / 2;\n  return paper.ellipse(\n    points[0].x + rx,\n    points[0].y + ry,\n    Math.abs(rx),\n    Math.abs(ry),\n  );\n}\n\nfunction polyline(paper: RaphaelPaper, points: Vec2[]) {\n  const path = ['M', points[0].x, points[0].y];\n  for (let i = 1; i < points.length; i++)\n    path.push('L', points[i].x, points[i].y);\n  return paper.path(path);\n}\n\nfunction line(paper: RaphaelPaper, points: [Vec2, Vec2]) {\n  const path = ['M', points[0].x, points[0].y];\n  path.push('L', points[1].x, points[1].y);\n  return paper.path(path);\n}\n\nfunction arrow(\n  paper: RaphaelPaper,\n  item: ArrowItem,\n  length: number,\n  angle: number,\n  options: RenderOptions,\n  isResizing: boolean,\n) {\n  const shouldApplySnappingStyle =\n    isResizing &&\n    ['0', '-0', '90', '-90', '180', '-180'].includes(angle.toFixed());\n\n  switch (item.mode) {\n    case RxnArrowMode.OpenAngle: {\n      return arrowOpenAngle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.FilledTriangle: {\n      return arrowFilledTriangle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.FilledBow: {\n      return arrowFilledBow(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.DashedOpenAngle: {\n      return arrowDashedOpenAngle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.Failed: {\n      return arrowFailed(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.Retrosynthetic: {\n      return arrowRetrosynthetic(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.BothEndsFilledTriangle: {\n      return arrowBothEndsFilledTriangle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.EquilibriumFilledHalfBow: {\n      return arrowEquilibriumFilledHalfBow(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.EquilibriumFilledTriangle: {\n      return arrowEquilibriumFilledTriangle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.EquilibriumOpenAngle: {\n      return arrowEquilibriumOpenAngle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.UnbalancedEquilibriumFilledHalfBow: {\n      return arrowUnbalancedEquilibriumFilledHalfBow(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.UnbalancedEquilibriumOpenHalfAngle: {\n      return arrowUnbalancedEquilibriumOpenHalfAngle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.UnbalancedEquilibriumLargeFilledHalfBow: {\n      return arrowUnbalancedEquilibriumLargeFilledHalfBow(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.UnbalancedEquilibriumFilledHalfTriangle: {\n      return arrowUnbalancedEquilibriumFilledHalfTriangle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.EllipticalArcFilledBow: {\n      return arrowEllipticalArcFilledBow(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.EllipticalArcFilledTriangle: {\n      return arrowEllipticalArcFilledTriangle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.EllipticalArcOpenAngle: {\n      return arrowEllipticalArcOpenAngle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n    case RxnArrowMode.EllipticalArcOpenHalfAngle: {\n      return arrowEllipticalArcOpenHalfAngle(\n        paper,\n        item,\n        length,\n        angle,\n        options,\n        shouldApplySnappingStyle,\n      );\n    }\n  }\n}\n\nfunction arrowEllipticalArcFilledBow(\n  paper: RaphaelPaper,\n  { pos: [start], height }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const direction = height >= 0 ? 1 : -1;\n  const { arrowHeadLength, arrowHeadWidth, arrowHeadAttr } =\n    getArrowHeadDimensions(options);\n\n  const length = direction * arrowHeadLength;\n  const width = direction * arrowHeadWidth;\n  const attr = direction * arrowHeadAttr;\n\n  const endX = start.x + arrowLength;\n  const path =\n    `M${tfx(start.x)},${tfx(start.y)}` +\n    `A${arrowLength / 2},${height},${0},${0},${direction > 0 ? 1 : 0},${tfx(\n      endX,\n    )},${tfx(start.y)}` +\n    `L${tfx(endX - width)},${tfx(start.y - length)}` +\n    `l${tfx(width)},${tfx(attr)}` +\n    `l${tfx(width)},${tfx(-attr)}` +\n    `l${tfx(-width)},${length}`;\n\n  const transformedPath = svgPath(path)\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    ...(shouldApplySnappingStyle && {\n      stroke: options.arrowSnappingStyle.stroke,\n    }),\n  });\n}\n\nfunction arrowEllipticalArcFilledTriangle(\n  paper: RaphaelPaper,\n  { pos: [start], height }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth } = getArrowHeadDimensions(options);\n\n  const direction = height >= 0 ? 1 : -1;\n\n  const triangleLength = direction * arrowHeadLength;\n  const triangleWidth = direction * arrowHeadWidth;\n\n  const endX = start.x + arrowLength;\n\n  const path =\n    `M${tfx(start.x)},${tfx(start.y)}` +\n    `A${arrowLength / 2},${height},${0},${0},${direction > 0 ? 1 : 0},${tfx(\n      endX,\n    )},${tfx(start.y)}` +\n    `L${tfx(endX - triangleWidth)},${tfx(start.y - triangleLength)}` +\n    `l${tfx(triangleLength)},${tfx(0)}` +\n    `l${tfx(-triangleWidth)},${tfx(triangleLength)}`;\n\n  const transformedPath = svgPath(path)\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    ...(shouldApplySnappingStyle && {\n      stroke: options.arrowSnappingStyle.stroke,\n    }),\n  });\n}\n\nfunction arrowEllipticalArcOpenAngle(\n  paper: RaphaelPaper,\n  { pos: [start], height }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const direction = height >= 0 ? 1 : -1;\n\n  const { arrowHeadLength, arrowHeadWidth } = getArrowHeadDimensions(options);\n\n  const width = direction * arrowHeadWidth;\n  const length = direction * arrowHeadLength;\n\n  const endX = start.x + arrowLength;\n\n  const path =\n    `M${tfx(start.x)},${tfx(start.y)}` +\n    `A${arrowLength / 2},${height},${0},${0},${direction > 0 ? 1 : 0},${tfx(\n      endX,\n    )},${tfx(start.y)}` +\n    `L${tfx(endX - width)},${tfx(start.y - length)}` +\n    `M${tfx(endX)},${tfx(start.y)}` +\n    `L${tfx(endX + width)}, ${tfx(start.y - length)}`;\n\n  const transformedPath = svgPath(path)\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    ...(shouldApplySnappingStyle && {\n      stroke: options.arrowSnappingStyle.stroke,\n    }),\n  });\n}\n\nfunction arrowEllipticalArcOpenHalfAngle(\n  paper: RaphaelPaper,\n  { pos: [start], height }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const direction = height >= 0 ? 1 : -1;\n\n  const { arrowHeadLength, arrowHeadWidth } = getArrowHeadDimensions(options);\n\n  const width = direction * arrowHeadWidth;\n  const length = direction * arrowHeadLength;\n  const endX = start.x + arrowLength;\n\n  const path =\n    `M${tfx(start.x)},${tfx(start.y)}` +\n    `A${arrowLength / 2},${height},${0},${0},${direction > 0 ? 1 : 0}, ${tfx(\n      endX,\n    )},${tfx(start.y)}` +\n    `L${tfx(endX + width)}, ${tfx(start.y - length)}`;\n\n  const transformedPath = svgPath(path)\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    ...(shouldApplySnappingStyle && {\n      stroke: options.arrowSnappingStyle.stroke,\n    }),\n  });\n}\n\nfunction arrowOpenAngle(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadAttr, arrowHeadLength } = getArrowHeadDimensions(options);\n  const pathBuilder = new PathBuilder().addOpenArrowPathParts(\n    start,\n    arrowLength,\n    arrowHeadLength,\n    arrowHeadAttr,\n  );\n  const transformedPath = svgPath(pathBuilder.build())\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    ...(shouldApplySnappingStyle && {\n      stroke: options.arrowSnappingStyle.stroke,\n    }),\n  });\n}\n\nfunction arrowFilledTriangle(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth } = getArrowHeadDimensions(options);\n\n  const endX = start.x + arrowLength;\n\n  const path =\n    `M${tfx(start.x)},${tfx(start.y)}` +\n    `L${tfx(endX)},${tfx(start.y)}` +\n    `L${tfx(endX - arrowHeadLength)},${tfx(start.y + arrowHeadWidth)}` +\n    `L${tfx(endX - arrowHeadLength)},${tfx(start.y - arrowHeadWidth)}` +\n    `L${tfx(endX)},${tfx(start.y)}Z`;\n\n  const transformedPath = svgPath(path)\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    fill: '#000',\n    ...(shouldApplySnappingStyle && options.arrowSnappingStyle),\n  });\n}\n\nfunction arrowFilledBow(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth, arrowHeadAttr } =\n    getArrowHeadDimensions(options);\n\n  const endX = start.x + arrowLength;\n\n  const path =\n    `M${tfx(start.x)},${tfx(start.y)}` +\n    `L${tfx(endX)},${tfx(start.y)}` +\n    `L${tfx(endX - arrowHeadLength)},${tfx(start.y + arrowHeadWidth)}` +\n    `L${tfx(endX - arrowHeadLength + arrowHeadAttr)},${tfx(start.y)}` +\n    `L${tfx(endX - arrowHeadLength)},${tfx(start.y - arrowHeadWidth)}` +\n    `L${tfx(endX)},${tfx(start.y)}Z`;\n\n  const transformedPath = svgPath(path)\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    fill: '#000',\n    ...(shouldApplySnappingStyle && options.arrowSnappingStyle),\n  });\n}\n\nfunction arrowDashedOpenAngle(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth } = getArrowHeadDimensions(options);\n  const { microModeScale } = getOptionsWithConvertedUnits(options);\n\n  const dashInterval = ARROW_DASH_INTERVAL * microModeScale;\n\n  const path: string[] = [];\n\n  const endX = start.x + arrowLength;\n\n  // Dashed arrow\n  for (let i = 0; i < arrowLength / dashInterval; i++) {\n    if (i % 2) {\n      path.push(`L${tfx(start.x + i * dashInterval)},${tfx(start.y)}`);\n    } else {\n      path.push(`M${tfx(start.x + i * dashInterval)},${tfx(start.y)}`);\n    }\n  }\n\n  // Arrowhead\n  path.push(\n    `M${tfx(endX)},${tfx(start.y)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(start.y + arrowHeadWidth)}` +\n      `M${tfx(endX)},${tfx(start.y)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(start.y - arrowHeadWidth)}`,\n  );\n\n  const transformedPath = svgPath(path.join(''))\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    fill: '#000',\n    ...(shouldApplySnappingStyle && options.arrowSnappingStyle),\n  });\n}\n\nfunction arrowFailed(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth, arrowHeadAttr } =\n    getArrowHeadDimensions(options);\n  const { microModeScale } = getOptionsWithConvertedUnits(options);\n\n  const failSignWidth = ARROW_FAIL_SIGN_WIDTH * microModeScale;\n\n  const endX = start.x + arrowLength;\n\n  const arrowCenter = endX - (endX - start.x) / 2;\n\n  const path: string[] = [];\n\n  // Arrow with arrowhead\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y)}` +\n      `L${tfx(endX)},${tfx(start.y)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(start.y + arrowHeadWidth)}` +\n      `L${tfx(endX - arrowHeadLength + arrowHeadAttr)},${tfx(start.y)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(start.y - arrowHeadWidth)}` +\n      `L${tfx(endX)},${tfx(start.y)}Z`,\n  );\n\n  // Failed sign line 1\n  path.push(\n    `M${tfx(arrowCenter + failSignWidth)},${tfx(start.y + failSignWidth)}` +\n      `L${tfx(arrowCenter - failSignWidth)},${tfx(start.y - failSignWidth)}`,\n  );\n\n  // Failed sign line 2\n  path.push(\n    `M${tfx(arrowCenter + failSignWidth)},${tfx(start.y - failSignWidth)}` +\n      `L${tfx(arrowCenter - failSignWidth)},${tfx(start.y + failSignWidth)}`,\n  );\n\n  const transformedPath = svgPath(path.join(''))\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    fill: '#000',\n    ...(shouldApplySnappingStyle && options.arrowSnappingStyle),\n  });\n}\n\nfunction arrowRetrosynthetic(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth, arrowOffset } =\n    getArrowHeadDimensions(options);\n\n  const endX = start.x + arrowLength;\n\n  const path: string[] = [];\n\n  // First arrow and arrowhead\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(\n        start.y - arrowHeadWidth - arrowOffset,\n      )}` +\n      `L${tfx(endX + arrowHeadLength)},${tfx(start.y)}`,\n  );\n\n  // Second arrow and arrowhead\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(endX)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(\n        start.y + arrowHeadWidth + arrowOffset,\n      )}` +\n      `L${tfx(endX + arrowHeadLength)},${tfx(start.y)}`,\n  );\n\n  const transformedPath = svgPath(path.join(''))\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    ...(shouldApplySnappingStyle && {\n      stroke: options.arrowSnappingStyle.stroke,\n    }),\n  });\n}\n\nfunction arrowBothEndsFilledTriangle(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth } = getArrowHeadDimensions(options);\n\n  const endX = start.x + arrowLength;\n\n  const path =\n    `M${tfx(start.x)},${tfx(start.y)}` +\n    `L${tfx(endX)},${tfx(start.y)}` +\n    `L${tfx(endX - arrowHeadLength)},${tfx(start.y + arrowHeadWidth)}` +\n    `L${tfx(endX - arrowHeadLength)},${tfx(start.y - arrowHeadWidth)}` +\n    `L${tfx(endX)},${tfx(start.y)}` +\n    `M${tfx(start.x)},${tfx(start.y)}` +\n    `L${tfx(start.x + arrowHeadLength)},${tfx(start.y - arrowHeadWidth)}` +\n    `L${tfx(start.x + arrowHeadLength)},${tfx(start.y + arrowHeadWidth)}` +\n    `L${tfx(start.x)},${tfx(start.y)}`;\n\n  const transformedPath = svgPath(path)\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    fill: '#000',\n    ...(shouldApplySnappingStyle && options.arrowSnappingStyle),\n  });\n}\n\nfunction arrowEquilibriumFilledHalfBow(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadAttr, arrowOffset, arrowHeadWidth } =\n    getArrowHeadDimensions(options);\n\n  const endX = start.x + arrowLength;\n\n  const path: string[] = [];\n\n  // top arrow\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(\n        start.y - arrowHeadWidth - arrowOffset,\n      )}` +\n      `L${tfx(endX - arrowHeadLength + arrowHeadAttr)},${tfx(\n        start.y - arrowOffset,\n      )}Z`,\n  );\n\n  // bottom arrow\n  path.push(\n    `M${tfx(endX)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(start.x)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(start.x + arrowHeadLength)},${tfx(\n        start.y + arrowHeadWidth + arrowOffset,\n      )}` +\n      `L${tfx(start.x + arrowHeadLength - arrowHeadAttr)},${\n        start.y + arrowOffset\n      }Z`,\n  );\n\n  const transformedPath = svgPath(path.join(''))\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    fill: '#000',\n    ...(shouldApplySnappingStyle && options.arrowSnappingStyle),\n  });\n}\n\nfunction arrowEquilibriumFilledTriangle(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowOffset, arrowHeadWidth } =\n    getArrowHeadDimensions(options);\n\n  const endX = start.x + arrowLength;\n\n  const path: string[] = [];\n\n  // First arrow\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(\n        start.y + arrowHeadWidth - arrowOffset,\n      )}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(\n        start.y - arrowHeadWidth - arrowOffset,\n      )}` +\n      `L${tfx(endX)},${tfx(start.y - arrowOffset)}Z`,\n  );\n\n  // Second arrow\n  path.push(\n    `M${tfx(endX)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(start.x)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(start.x + arrowHeadLength)},${tfx(\n        start.y + arrowHeadWidth + arrowOffset,\n      )}` +\n      `L${tfx(start.x + arrowHeadLength)},${tfx(\n        start.y - arrowHeadWidth + arrowOffset,\n      )}` +\n      `L${tfx(start.x)},${tfx(start.y + arrowOffset)}Z`,\n  );\n\n  const transformedPath = svgPath(path.join(''))\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    fill: '#000',\n    ...(shouldApplySnappingStyle && options.arrowSnappingStyle),\n  });\n}\n\nfunction arrowEquilibriumOpenAngle(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth, arrowOffset } =\n    getArrowHeadDimensions(options);\n\n  const endX = start.x + arrowLength;\n\n  const path: string[] = [];\n\n  // First arrow\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(\n        start.y - arrowHeadWidth - arrowOffset,\n      )}`,\n  );\n\n  // Second arrow\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(endX)},${tfx(start.y + arrowOffset)}` +\n      `M${tfx(start.x)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(start.x + arrowHeadLength)},${tfx(\n        start.y + arrowOffset + arrowHeadWidth,\n      )}`,\n  );\n\n  const transformedPath = svgPath(path.join(''))\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    ...(shouldApplySnappingStyle && {\n      stroke: options.arrowSnappingStyle.stroke,\n    }),\n  });\n}\n\nfunction arrowUnbalancedEquilibriumFilledHalfBow(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth, arrowOffset, arrowHeadAttr } =\n    getArrowHeadDimensions(options);\n  const unbalanceVal = getUnbalancedArrowHeadOffset(options);\n\n  const endX = start.x + arrowLength;\n\n  const path: string[] = [];\n\n  // First arrow\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(\n        start.y - arrowHeadWidth - arrowOffset,\n      )}` +\n      `L${tfx(endX - arrowHeadLength + arrowHeadAttr)},${tfx(\n        start.y - arrowOffset,\n      )}Z`,\n  );\n\n  // Second (Unbalanced) arrow\n  path.push(\n    `M${tfx(endX - unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(start.x + unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(start.x + unbalanceVal + arrowHeadLength)},${tfx(\n        start.y + arrowHeadWidth + arrowOffset,\n      )}` +\n      `L${tfx(start.x + unbalanceVal + arrowHeadLength - arrowHeadAttr)},${\n        start.y + arrowOffset\n      }Z`,\n  );\n\n  const transformedPath = svgPath(path.join(''))\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    fill: '#000',\n    ...(shouldApplySnappingStyle && options.arrowSnappingStyle),\n  });\n}\n\nfunction arrowUnbalancedEquilibriumOpenHalfAngle(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth, arrowOffset } =\n    getArrowHeadDimensions(options);\n  const unbalanceVal = getUnbalancedArrowHeadOffset(options);\n\n  const endX = start.x + arrowLength;\n\n  const path: string[] = [];\n\n  // First arrow\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(\n        start.y - arrowHeadWidth - arrowOffset,\n      )}`,\n  );\n\n  // Second (Unbalanced) arrow\n  path.push(\n    `M${tfx(start.x + unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(endX - unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `M${tfx(start.x + unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(start.x + arrowHeadLength + unbalanceVal)},${tfx(\n        start.y + arrowOffset + arrowHeadWidth,\n      )}`,\n  );\n\n  const transformedPath = svgPath(path.join(''))\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    ...(shouldApplySnappingStyle && {\n      stroke: options.arrowSnappingStyle.stroke,\n    }),\n  });\n}\n\nfunction arrowUnbalancedEquilibriumLargeFilledHalfBow(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const {\n    arrowHeadLength,\n    arrowHeadWidth: arrowHeadWidthNormal,\n    arrowOffset,\n    arrowHeadAttr,\n  } = getArrowHeadDimensions(options);\n  const unbalanceVal = getUnbalancedArrowHeadOffset(options);\n\n  // Multiplying by 1.5 because it's large variant\n  const arrowHeadWidth = arrowHeadWidthNormal * 1.5;\n\n  const endX = start.x + arrowLength;\n\n  const path: string[] = [];\n\n  // First arrow\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(\n        start.y - arrowHeadWidth - arrowOffset,\n      )}` +\n      `L${tfx(endX - arrowHeadLength + arrowHeadAttr)},${tfx(\n        start.y - arrowOffset,\n      )}Z`,\n  );\n\n  // Second (Unbalanced) arrow\n  path.push(\n    `M${tfx(start.x + unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(endX - unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `M${tfx(start.x + unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(start.x + arrowHeadLength + unbalanceVal)},${tfx(\n        start.y + arrowHeadWidth + arrowOffset,\n      )}` +\n      `L${tfx(start.x + arrowHeadLength - arrowHeadAttr + unbalanceVal)},${\n        start.y + arrowOffset\n      }Z`,\n  );\n\n  const transformedPath = svgPath(path.join(''))\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    fill: '#000',\n    ...(shouldApplySnappingStyle && options.arrowSnappingStyle),\n  });\n}\n\nfunction arrowUnbalancedEquilibriumFilledHalfTriangle(\n  paper: RaphaelPaper,\n  { pos: [start] }: ArrowItem,\n  arrowLength: number,\n  arrowAngle: number,\n  options: RenderOptions,\n  shouldApplySnappingStyle: boolean,\n) {\n  const { arrowHeadLength, arrowHeadWidth, arrowOffset } =\n    getArrowHeadDimensions(options);\n  const unbalanceVal = getUnbalancedArrowHeadOffset(options);\n\n  const endX = start.x + arrowLength;\n\n  const path: string[] = [];\n\n  // First arrow\n  path.push(\n    `M${tfx(start.x)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX)},${tfx(start.y - arrowOffset)}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(\n        start.y - arrowHeadWidth - arrowOffset,\n      )}` +\n      `L${tfx(endX - arrowHeadLength)},${tfx(start.y - arrowOffset)}Z`,\n  );\n\n  // Second (Unbalanced) arrow\n  path.push(\n    `M${tfx(start.x + unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(endX - unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `M${tfx(start.x + unbalanceVal)},${tfx(start.y + arrowOffset)}` +\n      `L${tfx(start.x + arrowHeadLength + unbalanceVal)},${tfx(\n        start.y + arrowHeadWidth + arrowOffset,\n      )}` +\n      `L${tfx(start.x + arrowHeadLength + unbalanceVal)},${\n        start.y + arrowOffset\n      }Z`,\n  );\n\n  const transformedPath = svgPath(path.join(''))\n    .rotate(arrowAngle, start.x, start.y)\n    .toString();\n\n  return paper.path(transformedPath).attr({\n    ...options.lineattr,\n    fill: '#000',\n    ...(shouldApplySnappingStyle && options.arrowSnappingStyle),\n  });\n}\n\nfunction plus(paper: RaphaelPaper, point: Vec2, options: RenderOptions) {\n  const s = options.microModeScale / 5;\n  return paper\n    .path(\n      'M{0},{4}L{0},{5}M{2},{1}L{3},{1}',\n      tfx(point.x),\n      tfx(point.y),\n      tfx(point.x - s),\n      tfx(point.x + s),\n      tfx(point.y - s),\n      tfx(point.y + s),\n    )\n    .attr(options.lineattr);\n}\n\nfunction bondSingle(\n  paper: RaphaelPaper,\n  halfBond1: HalfBond,\n  halfBond2: HalfBond,\n  options: RenderOptions,\n  isSnapping: boolean,\n  color = '#000',\n) {\n  const a = halfBond1.p;\n  const b = halfBond2.p;\n  return paper\n    .path(makeStroke(a, b))\n    .attr(options.lineattr)\n    .attr({\n      fill: color,\n      stroke: color,\n    })\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n}\n\nfunction bondSingleUp(\n  paper: RaphaelPaper,\n  a: Vec2,\n  b2: Vec2,\n  b3: Vec2,\n  options: RenderOptions,\n  isSnapping: boolean,\n  color = '#000',\n) {\n  // eslint-disable-line max-params\n  return paper\n    .path(\n      'M{0},{1}L{2},{3}L{4},{5}Z',\n      tfx(a.x),\n      tfx(a.y),\n      tfx(b2.x),\n      tfx(b2.y),\n      tfx(b3.x),\n      tfx(b3.y),\n    )\n    .attr(options.lineattr)\n    .attr({\n      fill: color,\n      stroke: color,\n    })\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n}\n\nfunction bondSingleStereoBold(\n  paper: RaphaelPaper,\n  a1: Vec2,\n  a2: Vec2,\n  a3: Vec2,\n  a4: Vec2,\n  options: RenderOptions,\n  isSnapping: boolean,\n  color = '#000',\n) {\n  // eslint-disable-line max-params\n  const bond = paper\n    .path(\n      'M{0},{1}L{2},{3}L{4},{5}L{6},{7}Z',\n      tfx(a1.x),\n      tfx(a1.y),\n      tfx(a2.x),\n      tfx(a2.y),\n      tfx(a3.x),\n      tfx(a3.y),\n      tfx(a4.x),\n      tfx(a4.y),\n    )\n    .attr(options.lineattr)\n    .attr({\n      stroke: color,\n      fill: color,\n    })\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n  return bond;\n}\n\nfunction bondDoubleStereoBold(\n  paper: RaphaelPaper,\n  sgBondPath: Element,\n  b1: Vec2,\n  b2: Vec2,\n  options: RenderOptions,\n  isSnapping: boolean,\n  color = '#000',\n) {\n  // eslint-disable-line max-params\n  return paper.set([\n    sgBondPath,\n    paper\n      .path('M{0},{1}L{2},{3}', tfx(b1.x), tfx(b1.y), tfx(b2.x), tfx(b2.y))\n      .attr(options.lineattr)\n      .attr({\n        stroke: color,\n        fill: color,\n      })\n      .attr(isSnapping ? options.bondSnappingStyle : {}),\n  ]);\n}\n\nfunction bondSingleDown(\n  paper: RaphaelPaper,\n  halfBond1: HalfBond,\n  d: Vec2,\n  nlines: number,\n  step: number,\n  options: RenderOptions,\n  isSnapping: boolean,\n  color = '#000',\n) {\n  // eslint-disable-line max-params\n  const a = halfBond1.p;\n  const n = halfBond1.norm;\n  const bsp = 0.7 * options.stereoBond;\n\n  let path = '';\n  let p;\n  let q;\n  let r;\n  for (let i = 0; i < nlines; ++i) {\n    r = a.addScaled(d, step * i);\n    p = r.addScaled(n, (bsp * (i + 0.5)) / (nlines - 0.5));\n    q = r.addScaled(n, (-bsp * (i + 0.5)) / (nlines - 0.5));\n    path += makeStroke(p, q);\n  }\n  return paper\n    .path(path)\n    .attr(options.lineattr)\n    .attr({\n      fill: color,\n      stroke: color,\n    })\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n}\n\nfunction bondSingleEither(\n  paper: RaphaelPaper,\n  halfBond1: HalfBond,\n  d: Vec2,\n  nlines: number,\n  step: number,\n  options: RenderOptions,\n  isSnapping: boolean,\n  color = '#000',\n) {\n  // eslint-disable-line max-params\n  const a = halfBond1.p;\n  const n = halfBond1.norm;\n  const bsp = 0.7 * options.stereoBond;\n\n  let path = 'M' + tfx(a.x) + ',' + tfx(a.y);\n  let r = a;\n  for (let i = 0; i < nlines; ++i) {\n    r = a\n      .addScaled(d, step * (i + 0.5))\n      .addScaled(n, ((i & 1 ? -1 : +1) * bsp * (i + 0.5)) / (nlines - 0.5));\n    path += 'L' + tfx(r.x) + ',' + tfx(r.y);\n  }\n  return paper\n    .path(path)\n    .attr(options.lineattr)\n    .attr({\n      fill: color,\n      stroke: color,\n    })\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n}\n\nfunction bondDouble(\n  paper: RaphaelPaper,\n  a1: Vec2,\n  a2: Vec2,\n  b1: Vec2,\n  b2: Vec2,\n  cisTrans: boolean,\n  options: RenderOptions,\n  isSnapping: boolean,\n) {\n  // eslint-disable-line max-params\n  return paper\n    .path(\n      cisTrans\n        ? 'M{0},{1}L{6},{7}M{4},{5}L{2},{3}'\n        : 'M{0},{1}L{2},{3}M{4},{5}L{6},{7}',\n      tfx(a1.x),\n      tfx(a1.y),\n      tfx(b1.x),\n      tfx(b1.y),\n      tfx(a2.x),\n      tfx(a2.y),\n      tfx(b2.x),\n      tfx(b2.y),\n    )\n    .attr(options.lineattr)\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n}\n\nfunction bondSingleOrDouble(\n  paper: RaphaelPaper,\n  halfBond1: HalfBond,\n  halfBond2: HalfBond,\n  nSect: number,\n  options: RenderOptions,\n  isSnapping: boolean,\n) {\n  // eslint-disable-line max-statements, max-params\n  const a = halfBond1.p;\n  const b = halfBond2.p;\n  const n = halfBond1.norm;\n  const bsp = options.bondSpace / 2;\n\n  let path = '';\n  let pi;\n  let pp = a;\n  for (let i = 1; i <= nSect; ++i) {\n    pi = Vec2.lc2(a, (nSect - i) / nSect, b, i / nSect);\n    if (i & 1) {\n      path += makeStroke(pp, pi);\n    } else {\n      path += makeStroke(pp.addScaled(n, bsp), pi.addScaled(n, bsp));\n      path += makeStroke(pp.addScaled(n, -bsp), pi.addScaled(n, -bsp));\n    }\n    pp = pi;\n  }\n  return paper\n    .path(path)\n    .attr(options.lineattr)\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n}\n\nfunction bondTriple(\n  paper: RaphaelPaper,\n  halfBond1: HalfBond,\n  halfBond2: HalfBond,\n  options: RenderOptions,\n  isSnapping: boolean,\n  color = '#000',\n) {\n  const a = halfBond1.p;\n  const b = halfBond2.p;\n  const n = halfBond1.norm;\n  const a2 = a.addScaled(n, options.bondSpace);\n  const b2 = b.addScaled(n, options.bondSpace);\n  const a3 = a.addScaled(n, -options.bondSpace);\n  const b3 = b.addScaled(n, -options.bondSpace);\n  return paper\n    .path(makeStroke(a, b) + makeStroke(a2, b2) + makeStroke(a3, b3))\n    .attr(options.lineattr)\n    .attr({\n      fill: color,\n      stroke: color,\n    })\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n}\n\nfunction bondAromatic(\n  paper: RaphaelPaper,\n  paths: string[],\n  bondShift: number,\n  options: RenderOptions,\n  isSnapping: boolean,\n) {\n  const l1 = paper\n    .path(paths[0])\n    .attr(options.lineattr)\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n  const l2 = paper\n    .path(paths[1])\n    .attr(options.lineattr)\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n  if (bondShift !== undefined && bondShift !== null) {\n    (bondShift > 0 ? l1 : l2).attr({ 'stroke-dasharray': '- ' });\n  }\n\n  return paper.set([l1, l2]);\n}\n\nfunction bondAny(\n  paper: RaphaelPaper,\n  halfBond1: HalfBond,\n  halfBond2: HalfBond,\n  options: RenderOptions,\n  isSnapping: boolean,\n) {\n  const a = halfBond1.p;\n  const b = halfBond2.p;\n  return paper\n    .path(makeStroke(a, b))\n    .attr(options.lineattr)\n    .attr({ 'stroke-dasharray': '- ' })\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n}\n\nfunction bondHydrogen(\n  paper: RaphaelPaper,\n  halfBond1: HalfBond,\n  halfBond2: HalfBond,\n  options: RenderOptions,\n  isSnapping: boolean,\n) {\n  const a = halfBond1.p;\n  const b = halfBond2.p;\n  return paper\n    .path(makeStroke(a, b))\n    .attr(options.lineattr)\n    .attr({\n      'stroke-dasharray': '.',\n      'stroke-linecap': 'square',\n    })\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n}\n\nfunction bondDative(\n  paper: RaphaelPaper,\n  halfBond1: HalfBond,\n  halfBond2: HalfBond,\n  options: RenderOptions,\n  isSnapping: boolean,\n) {\n  const a = halfBond1.p;\n  const b = halfBond2.p;\n  return paper\n    .path(makeStroke(a, b))\n    .attr(options.lineattr)\n    .attr({ 'arrow-end': 'block-midium-long' })\n    .attr(isSnapping ? options.bondSnappingStyle : {});\n}\n\nfunction reactingCenter(\n  paper: RaphaelPaper,\n  points: Vec2[],\n  options: RenderOptions,\n) {\n  let pathDesc = '';\n  for (let i = 0; i < points.length / 2; ++i) {\n    pathDesc += makeStroke(points[2 * i], points[2 * i + 1]);\n  }\n  return paper.path(pathDesc).attr(options.lineattr);\n}\n\nfunction bondMark(\n  paper: RaphaelPaper,\n  point: Vec2,\n  mark: string | null,\n  options: RenderOptions,\n) {\n  const path = paper.text(point.x, point.y, mark).attr({\n    font: options.font,\n    'font-size': options.fontszsubInPx,\n    fill: '#000',\n  });\n  const rbb = util.relBox(path.getBBox());\n  recenterText(path, rbb);\n  return path;\n}\n\nfunction radicalCap(paper: RaphaelPaper, point1: Vec2, options: RenderOptions) {\n  const s = options.lineWidth * 0.9;\n  const dw = s;\n  const dh = 2 * s;\n  return paper\n    .path(\n      'M{0},{1}L{2},{3}L{4},{5}',\n      tfx(point1.x - dw),\n      tfx(point1.y + dh),\n      tfx(point1.x),\n      tfx(point1.y),\n      tfx(point1.x + dw),\n      tfx(point1.y + dh),\n    )\n    .attr({\n      stroke: '#000',\n      'stroke-width': options.lineWidth * 0.7,\n      'stroke-linecap': 'square',\n      'stroke-linejoin': 'miter',\n    });\n}\n\nfunction radicalBullet(\n  paper: RaphaelPaper,\n  point1: Vec2,\n  options: RenderOptions,\n) {\n  return paper.circle(tfx(point1.x), tfx(point1.y), options.lineWidth).attr({\n    stroke: null,\n    fill: '#000',\n  });\n}\n\nfunction bracket(\n  paper: RaphaelPaper,\n  bracketAngleDirection: Vec2,\n  bracketDirection: Vec2,\n  bondCenter: Vec2,\n  bracketWidth: number,\n  bracketHeight: number,\n  options: RenderOptions,\n  isBracketContainAttachment = false,\n) {\n  // eslint-disable-line max-params\n  bracketWidth = bracketWidth || 0.25;\n  bracketHeight = bracketHeight || 1.0;\n  const halfBracketHeight = 0.5;\n  let bracketPoint0, bracketPoint1;\n  if (isBracketContainAttachment) {\n    const longHalfBracketHeight = -0.8;\n    const shortHalfBracketHeight = 0.2;\n    bracketPoint0 = bondCenter.addScaled(\n      bracketDirection,\n      shortHalfBracketHeight * bracketHeight,\n    );\n    bracketPoint1 = bondCenter.addScaled(\n      bracketDirection,\n      longHalfBracketHeight * bracketHeight,\n    );\n  } else {\n    bracketPoint0 = bondCenter.addScaled(\n      bracketDirection,\n      -halfBracketHeight * bracketHeight,\n    );\n    bracketPoint1 = bondCenter.addScaled(\n      bracketDirection,\n      halfBracketHeight * bracketHeight,\n    );\n  }\n  const bracketArc0 = bracketPoint0.addScaled(\n    bracketAngleDirection,\n    -bracketWidth,\n  );\n  const bracketArc1 = bracketPoint1.addScaled(\n    bracketAngleDirection,\n    -bracketWidth,\n  );\n\n  return paper\n    .path(\n      'M{0},{1}L{2},{3}L{4},{5}L{6},{7}',\n      tfx(bracketArc0.x),\n      tfx(bracketArc0.y),\n      tfx(bracketPoint0.x),\n      tfx(bracketPoint0.y),\n      tfx(bracketPoint1.x),\n      tfx(bracketPoint1.y),\n      tfx(bracketArc1.x),\n      tfx(bracketArc1.y),\n    )\n    .attr(options.sgroupBracketStyle);\n}\n\nfunction selectionRectangle(\n  paper: RaphaelPaper,\n  point1: Vec2,\n  point2: Vec2,\n  options: RenderOptions,\n) {\n  return paper\n    .rect(\n      tfx(Math.min(point1.x, point2.x)),\n      tfx(Math.min(point1.y, point2.y)),\n      tfx(Math.abs(point2.x - point1.x)),\n      tfx(Math.abs(point2.y - point1.y)),\n    )\n    .attr(options.lassoStyle);\n}\n\nfunction selectionPolygon(\n  paper: RaphaelPaper,\n  r: Vec2[],\n  options: RenderOptions,\n) {\n  const v = r[r.length - 1];\n  let pstr = 'M' + tfx(v.x) + ',' + tfx(v.y);\n  for (let i = 0; i < r.length; ++i) {\n    pstr += 'L' + tfx(r[i].x) + ',' + tfx(r[i].y);\n  }\n  return paper.path(pstr).attr(options.lassoStyle);\n}\n\nfunction selectionLine(\n  paper: RaphaelPaper,\n  point1: Vec2,\n  point2: Vec2,\n  options: RenderOptions,\n) {\n  return paper.path(makeStroke(point1, point2)).attr(options.lassoStyle);\n}\n\nfunction makeStroke(point1: Vec2, point2: Vec2) {\n  return (\n    'M' +\n    tfx(point1.x) +\n    ',' +\n    tfx(point1.y) +\n    'L' +\n    tfx(point2.x) +\n    ',' +\n    tfx(point2.y) +\n    '\t'\n  );\n}\n\nfunction dashedPath(point1: Vec2, point2: Vec2, dash: number[]) {\n  let t0 = 0;\n  const t1 = Vec2.dist(point1, point2);\n  const d = Vec2.diff(point2, point1).normalized();\n  let black = true;\n  let path = '';\n  let i = 0;\n\n  while (t0 < t1) {\n    const len = dash[i % dash.length];\n    const t2 = t0 + Math.min(len, t1 - t0);\n    if (black) {\n      path +=\n        'M ' +\n        point1.addScaled(d, t0).coordStr() +\n        ' L ' +\n        point1.addScaled(d, t2).coordStr();\n    }\n    t0 += len;\n    black = !black;\n    i++;\n  }\n  return path;\n}\n\nfunction aromaticBondPaths(\n  a2: Vec2,\n  a3: Vec2,\n  b2: Vec2,\n  b3: Vec2,\n  mask: number,\n  dash: number[] | null,\n) {\n  // eslint-disable-line max-params\n  const l1 = dash && mask & 1 ? dashedPath(a2, b2, dash) : makeStroke(a2, b2);\n  const l2 = dash && mask & 2 ? dashedPath(a3, b3, dash) : makeStroke(a3, b3);\n\n  return [l1, l2];\n}\n\nfunction recenterText(path: Element, relativeBox: RelativeBox) {\n  // TODO: find a better way\n  if (Raphael.vml) {\n    const gap = relativeBox.height * 0.16;\n    path.translateAbs(0, gap);\n    relativeBox.y += gap;\n  }\n}\n\nfunction rgroupAttachmentPoint(\n  paper: RaphaelPaper,\n  shiftedAtomPositionVector: Vec2,\n  attachmentPointEnd: Vec2,\n  directionVector: Vec2,\n  options: RenderOptions,\n) {\n  const linePath = paper.path(\n    'M{0},{1}L{2},{3}',\n    tfx(shiftedAtomPositionVector.x),\n    tfx(shiftedAtomPositionVector.y),\n    tfx(attachmentPointEnd.x),\n    tfx(attachmentPointEnd.y),\n  );\n\n  const curvePath = paper.path(\n    getSvgCurveShapeAttachmentPoint(\n      attachmentPointEnd,\n      directionVector,\n      options.microModeScale,\n    ),\n  );\n\n  const resultShape = paper\n    .set([curvePath, linePath])\n    .attr(options.lineattr)\n    .attr({ 'stroke-width': options.bondThicknessInPx });\n\n  return resultShape;\n}\n\nfunction getSvgCurveShapeAttachmentPoint(\n  centerPosition: Vec2,\n  directionVector: Vec2,\n  basicSize: number,\n): string {\n  // declared here https://github.com/epam/ketcher/issues/2165\n  // this path has (0,0) in the position of attachment point atom\n  const attachmentPointSvgPathString = `M13 1.5l-1.5 3.7c-0.3 0.8-1.5 0.8-1.9 0l-1.7-4.4c-0.3-0.8-1.5-0.8-1.9 0l-1.7 4.4c-0.3 0.8-1.5 0.8-1.8 0l-1.8-4.4c-0.3-0.8-1.5-0.8-1.8 0l-1.7 4.4c-0.3 0.8-1.5 0.8-1.9 0l-1.7-4.4c-0.3-0.8-1.5-0.8-1.9 0l-1.6 4.2c-0.3 0.9-1.6 0.8-1.9 0l-1.2-3.5`;\n  const attachmentPointSvgPathSize = 39.8;\n\n  const shapeScale = basicSize / attachmentPointSvgPathSize;\n  const angleDegrees =\n    (Math.atan2(directionVector.y, directionVector.x) * 180) / Math.PI - 90;\n\n  return svgPath(attachmentPointSvgPathString)\n    .rotate(angleDegrees)\n    .scale(shapeScale)\n    .translate(centerPosition.x, centerPosition.y)\n    .toString();\n}\n\nfunction rgroupAttachmentPointLabel(\n  paper: RaphaelPaper,\n  labelPosition: Vec2,\n  labelText: string,\n  options: RenderOptions,\n  fill,\n) {\n  const labelPath = paper\n    .text(labelPosition.x, labelPosition.y, labelText)\n    .attr({\n      font: options.font,\n      'font-size': options.fontszInPx * 0.9,\n      fill,\n    });\n  return labelPath;\n}\n\nexport default {\n  recenterText,\n  arrow,\n  plus,\n  aromaticBondPaths,\n  bondSingle,\n  bondSingleUp,\n  bondSingleStereoBold,\n  bondDoubleStereoBold,\n  bondSingleDown,\n  bondSingleEither,\n  bondDouble,\n  bondSingleOrDouble,\n  bondTriple,\n  bondAromatic,\n  bondAny,\n  bondHydrogen,\n  bondDative,\n  reactingCenter,\n  bondMark,\n  radicalCap,\n  radicalBullet,\n  bracket,\n  selectionRectangle,\n  selectionPolygon,\n  selectionLine,\n  ellipse,\n  rectangle,\n  rectangleArrowHighlightAndSelection,\n  polyline,\n  line,\n  rgroupAttachmentPoint,\n  rgroupAttachmentPointLabel,\n};\n","import {\n  BaseMonomer,\n  Chem,\n  Peptide,\n  Phosphate,\n  RNABase,\n  Struct,\n  Sugar,\n  PolymerBond,\n} from 'domain/entities';\nimport {\n  IKetAttachmentPoint,\n  IKetIdtAliases,\n  KetAmbiguousMonomerTemplateOption,\n  KetAmbiguousMonomerTemplateSubType,\n  KetMonomerClass,\n} from 'application/formatters/types/ket';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { UsageInMacromolecule } from 'application/render';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\n\nexport type MonomerColorScheme = {\n  regular: string;\n  hover: string;\n};\n\nexport enum AttachmentPointName {\n  R1 = 'R1',\n  R2 = 'R2',\n  R3 = 'R3',\n  R4 = 'R4',\n  R5 = 'R5',\n  R6 = 'R6',\n  R7 = 'R7',\n  R8 = 'R8',\n  HYDROGEN = 'hydrogen',\n}\n\nexport type MonomerItemType = {\n  label: string;\n  colorScheme?: MonomerColorScheme;\n  favorite?: boolean;\n  struct: Struct;\n  props: {\n    id?: string;\n    MonomerNaturalAnalogCode: string;\n    MonomerName: string;\n    MonomerFullName?: string;\n    Name: string;\n    // TODO determine whenever these props are optional or not\n    BranchMonomer?: string;\n    MonomerCaps?: Partial<Record<AttachmentPointName, string>>;\n    MonomerCode?: string;\n    MonomerType?: string;\n    MonomerClass?: KetMonomerClass;\n    isMicromoleculeFragment?: boolean;\n    idtAliases?: IKetIdtAliases;\n    unresolved?: boolean;\n  };\n  attachmentPoints?: IKetAttachmentPoint[];\n  seqId?: number;\n  isAmbiguous?: boolean;\n};\n\nexport type AmbiguousMonomerType = {\n  id: string;\n  monomers: BaseMonomer[];\n  subtype: KetAmbiguousMonomerTemplateSubType;\n  label: string;\n  options: KetAmbiguousMonomerTemplateOption[];\n  idtAliases?: IKetIdtAliases;\n  isAmbiguous: true;\n  favorite?: boolean;\n};\n\nexport type MonomerOrAmbiguousType = MonomerItemType | AmbiguousMonomerType;\n\nexport const attachmentPointNames = [\n  'R1',\n  'R2',\n  'R3',\n  'R4',\n  'R5',\n  'R6',\n  'R7',\n  'R8',\n];\n\nexport type LeavingGroup = 'O' | 'OH' | 'H';\n\nexport type AttachmentPointConstructorParams = {\n  rootElement: D3SvgElementSelection<SVGGElement, void>;\n  monomer: BaseMonomer;\n  bodyWidth: number;\n  bodyHeight: number;\n  canvas: D3SvgElementSelection<SVGSVGElement, void>;\n  attachmentPointName: AttachmentPointName;\n  isUsed: boolean;\n  isPotentiallyUsed: boolean;\n  angle: number;\n  isSnake: boolean;\n  applyZoomForPositionCalculation: boolean;\n};\n\nexport type PreviewAttachmentPointConstructorParams =\n  AttachmentPointConstructorParams & {\n    selected: boolean;\n    connected: boolean;\n    usage: UsageInMacromolecule;\n  };\n\nexport type ConcreteMonomer = Peptide | Sugar | RNABase | Phosphate | Chem;\n\nexport type AttachmentPointsToBonds = Partial<\n  Record<AttachmentPointName, PolymerBond | MonomerToAtomBond | null>\n>;\n","export enum Entities {\n  Nucleotide = 'Nucleotide',\n  Nucleoside = 'Nucleoside',\n  Phosphate = 'Phosphate',\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  Atom,\n  Bond,\n  Box2Abs,\n  FunctionalGroup,\n  SGroup,\n  StereoFlag,\n  StereoLabel,\n  Struct,\n  Vec2,\n} from 'domain/entities';\nimport { ElementColor, Elements } from 'domain/constants';\nimport {\n  LayerMap,\n  StereLabelStyleType,\n  StereoColoringType,\n} from './generalEnumTypes';\n\nimport ReObject from './reobject';\nimport ReStruct from './restruct';\nimport { Render } from '../raphaelRender';\nimport { Scale } from 'domain/helpers';\nimport draw from '../draw';\nimport util from '../util';\nimport { tfx } from 'utilities';\nimport {\n  RenderOptions,\n  RenderOptionStyles,\n} from 'application/render/render.types';\nimport { MonomerMicromolecule } from 'domain/entities/monomerMicromolecule';\nimport { attachmentPointNames } from 'domain/types';\nimport { getAttachmentPointLabel } from 'domain/helpers/attachmentPointCalculations';\n\ninterface ElemAttr {\n  text: string;\n  path: any;\n  rbb: { x: number; y: number; width: number; height: number };\n}\n\nconst StereoLabelMinOpacity = 0.3;\nconst MAX_LABEL_LENGTH = 8;\n\nexport enum ShowHydrogenLabels {\n  Off = 'off',\n  Hetero = 'Hetero',\n  Terminal = 'Terminal',\n  TerminalAndHetero = 'Terminal and Hetero',\n  On = 'all',\n}\n\nexport enum ShowHydrogenLabelNames {\n  Off = 'Off',\n  Hetero = 'Hetero',\n  Terminal = 'Terminal',\n  TerminalAndHetero = 'Terminal and Hetero',\n  On = 'On',\n}\n\nclass ReAtom extends ReObject {\n  a: Atom;\n  showLabel: boolean;\n  hydrogenOnTheLeft: boolean;\n  color: string;\n  component: number;\n  label?: ElemAttr;\n  cip?: {\n    // Raphael paths\n    path: any;\n    text: any;\n    rectangle: any;\n  };\n\n  constructor(atom: Atom) {\n    super('atom');\n    this.a = atom; // TODO rename a to item\n    this.showLabel = false;\n\n    this.hydrogenOnTheLeft = false;\n\n    this.color = '#000000';\n    this.component = -1;\n  }\n\n  static isSelectable(): true {\n    return true;\n  }\n\n  getVBoxObj(render: Render): Box2Abs | null {\n    if (this.visel.boundingBox) {\n      return ReObject.prototype.getVBoxObj.call(this, render);\n    }\n    return new Box2Abs(this.a.pp, this.a.pp);\n  }\n\n  drawHover(render: Render) {\n    const ret = this.makeHoverPlate(render);\n    render.ctab.addReObjectPath(LayerMap.atom, this.visel, ret);\n    return ret;\n  }\n\n  getLabeledSelectionContour(render: Render, isHighlight: boolean) {\n    const { paper, ctab: restruct, options } = render;\n    const { fontszInPx, radiusScaleFactor } = options;\n    const highlightPadding = isHighlight ? -2 : 0;\n    const padding = fontszInPx * radiusScaleFactor + highlightPadding;\n    const radius = fontszInPx * radiusScaleFactor * 2 + highlightPadding;\n    const box = this.getVBoxObj(restruct.render)!;\n    const ps1 = Scale.modelToCanvas(box.p0, restruct.render.options);\n    const ps2 = Scale.modelToCanvas(box.p1, restruct.render.options);\n    const width = ps2.x - ps1.x;\n    const height = fontszInPx * 1.23;\n    return paper.rect(\n      ps1.x - padding,\n      ps1.y - padding,\n      width + padding * 2,\n      height + padding * 2,\n      radius,\n    );\n  }\n\n  getUnlabeledSelectionContour(render: Render, isHighlight: boolean) {\n    const { paper, options } = render;\n    const { atomSelectionPlateRadius } = options;\n    const highlightPadding = isHighlight ? -2 : 0;\n    const ps = Scale.modelToCanvas(this.a.pp, options);\n    return paper.circle(\n      ps.x,\n      ps.y,\n      atomSelectionPlateRadius + highlightPadding,\n    );\n  }\n\n  getSelectionContour(render: Render, isHighlight: boolean) {\n    const hasLabel =\n      (this.a.pseudo && this.a.pseudo.length > 1 && !getQueryAttrsText(this)) ||\n      (this.showLabel && this.a.implicitH !== 0);\n    return hasLabel\n      ? this.getLabeledSelectionContour(render, isHighlight)\n      : this.getUnlabeledSelectionContour(render, isHighlight);\n  }\n\n  private isPlateShouldBeHidden = (atom: Atom, render: Render) => {\n    const sgroups = render.ctab.sgroups;\n    const functionalGroups = render.ctab.molecule.functionalGroups;\n    const struct = render.ctab.molecule;\n    const atomId = struct.atoms.keyOf(atom) as number;\n\n    return (\n      FunctionalGroup.isAtomInContractedFunctionalGroup(\n        atom,\n        sgroups,\n        functionalGroups,\n        true,\n      ) || Atom.isHiddenLeavingGroupAtom(struct, atomId)\n    );\n  };\n\n  private makeHighlightePlate = (\n    restruct: ReStruct,\n    style: RenderOptionStyles,\n  ) => {\n    const atom = this.a;\n    const { render } = restruct;\n    if (this.isPlateShouldBeHidden(atom, render)) {\n      return null;\n    }\n\n    return this.getSelectionContour(render, true).attr(style);\n  };\n\n  makeHoverPlate(render: Render) {\n    const atom = this.a;\n    const { options } = render;\n    if (this.isPlateShouldBeHidden(atom, render)) {\n      return null;\n    }\n\n    return this.getSelectionContour(render, false).attr(options.hoverStyle);\n  }\n\n  makeSelectionPlate(restruct: ReStruct) {\n    const atom = this.a;\n    const { render } = restruct;\n    const { options } = render;\n\n    if (this.isPlateShouldBeHidden(atom, render)) {\n      return null;\n    }\n    return this.getSelectionContour(render, false).attr(options.selectionStyle);\n  }\n\n  private isNeedShiftForCharge(showCharge: boolean, bondLength: number) {\n    const MIN_BOND_LENGTH = 24;\n    const isBondLengthTooShort = bondLength <= MIN_BOND_LENGTH;\n    const hasCharge = this.a.charge !== null && this.a.charge !== 0;\n    return showCharge && isBondLengthTooShort && hasCharge;\n  }\n\n  private getRatio(\n    renderOptions: RenderOptions,\n    bondLen: number | null,\n  ): number {\n    const DEFAULT_BOND_LENGTH = 40;\n    const DEFAULT_SUB_FONT_SIZE = 13;\n    const subFontSize = renderOptions.fontszsubInPx || DEFAULT_SUB_FONT_SIZE;\n    if (!bondLen) return 1;\n    const showCharge = renderOptions.showCharge;\n\n    const isNeedShift = this.isNeedShiftForCharge(showCharge, bondLen);\n\n    if (!isNeedShift) {\n      return 1;\n    }\n\n    const DEFAULT_PROPORTION = DEFAULT_BOND_LENGTH / DEFAULT_SUB_FONT_SIZE;\n    const currentProportion = bondLen / subFontSize;\n    const ratio = currentProportion / DEFAULT_PROPORTION;\n    return ratio;\n  }\n\n  /**\n   * if atom is rendered as Abbreviation: O, NH, ...\n   * In this case we need to shift the bond render start position to free space for Atom,\n   * same for the Attachment point\n   */\n  getShiftedSegmentPosition(\n    renderOptions: RenderOptions,\n    direction: Vec2,\n    _atomPosition?: Vec2,\n    bondLen: number | null = null,\n  ): Vec2 {\n    const atomPosition = Scale.modelToCanvas(\n      _atomPosition || this.a.pp,\n      renderOptions,\n    );\n    let atomSymbolShift = 0;\n    const exts = this.visel.exts;\n    const ratio = this.getRatio(renderOptions, bondLen);\n    for (let k = 0; k < exts.length; ++k) {\n      const box = exts[k].translate(atomPosition);\n      const shiftRayBox = util.shiftRayBox(atomPosition, direction, box);\n      const shift = shiftRayBox * ratio;\n      atomSymbolShift = Math.max(atomSymbolShift, shift);\n    }\n\n    if (atomSymbolShift > 0) {\n      return atomPosition.addScaled(\n        direction,\n        atomSymbolShift + 3 * renderOptions.lineWidth,\n      );\n    } else {\n      return atomPosition;\n    }\n  }\n\n  hasAttachmentPoint(): boolean {\n    return Boolean(this.a.attachmentPoints);\n  }\n\n  show(restruct: ReStruct, aid: number, options: any): void {\n    // eslint-disable-line max-statements\n    const struct = restruct.molecule;\n    const atom = struct.atoms.get(aid)!;\n    const sgroups = struct.sgroups;\n    const functionalGroups = struct.functionalGroups;\n    const render = restruct.render;\n    const ps = Scale.modelToCanvas(this.a.pp, render.options);\n    const sgroup = restruct.molecule.getGroupFromAtomId(aid);\n\n    if (Atom.isHiddenLeavingGroupAtom(struct, aid)) {\n      return;\n    }\n\n    if (\n      FunctionalGroup.isAtomInContractedFunctionalGroup(\n        atom,\n        sgroups,\n        functionalGroups,\n        false,\n      )\n    ) {\n      const isPositionAtom =\n        sgroup?.getContractedPosition(restruct.molecule).atomId === aid;\n      if (isPositionAtom) {\n        const position = Scale.modelToCanvas(\n          sgroup instanceof MonomerMicromolecule\n            ? (sgroup.pp as Vec2)\n            : this.a.pp,\n          render.options,\n        );\n        const path = render.paper\n          .text(position.x, position.y, sgroup.data.name)\n          .attr({\n            'font-weight': 700,\n            'font-size': 14,\n          });\n        restruct.addReObjectPath(\n          LayerMap.data,\n          this.visel,\n          path,\n          position,\n          true,\n        );\n      }\n      return;\n    }\n\n    this.hydrogenOnTheLeft = shouldHydrogenBeOnLeft(restruct.molecule, this);\n    this.showLabel = isLabelVisible(restruct, render.options, this);\n    this.color = 'black'; // reset color\n\n    let delta;\n    let rightMargin;\n    let leftMargin;\n    let implh;\n    let isHydrogen;\n    let label;\n    let index: any = null;\n\n    if (this.showLabel) {\n      const data = buildLabel(this, render.paper, ps, options, aid, sgroup);\n      delta = 0.5 * options.lineWidth;\n      label = data.label;\n      rightMargin = data.rightMargin;\n      leftMargin = data.leftMargin;\n      implh = Math.floor(this.a.implicitH);\n      isHydrogen = label.text === 'H';\n\n      if (label.background) {\n        restruct.addReObjectPath(\n          LayerMap.data,\n          this.visel,\n          label.background,\n          ps,\n          true,\n        );\n      }\n      restruct.addReObjectPath(LayerMap.data, this.visel, label.path, ps, true);\n    }\n    if (options.showAtomIds) {\n      index = {};\n      index.text = aid.toString();\n      let idPos = this.hydrogenOnTheLeft\n        ? Vec2.lc(ps, 1, new Vec2({ x: -2, y: 0, z: 0 }), 6)\n        : Vec2.lc(ps, 1, new Vec2({ x: 2, y: 0, z: 0 }), 6);\n      if (this.showLabel) {\n        idPos = Vec2.lc(idPos, 1, new Vec2({ x: 1, y: -3, z: 0 }), 6);\n      }\n      index.path = render.paper.text(idPos.x, idPos.y, index.text).attr({\n        font: options.font,\n        'font-size': options.fontszsubInPx,\n        fill: '#070',\n      });\n      index.rbb = util.relBox(index.path.getBBox());\n      draw.recenterText(index.path, index.rbb);\n      restruct.addReObjectPath(LayerMap.indices, this.visel, index.path, ps);\n    }\n\n    if (this.showLabel) {\n      let hydroIndex: any = null;\n      if (isHydrogen && implh > 0) {\n        hydroIndex = showHydroIndex(this, render, implh, rightMargin);\n        rightMargin += hydroIndex.rbb.width + delta;\n        restruct.addReObjectPath(\n          LayerMap.data,\n          this.visel,\n          hydroIndex.path,\n          ps,\n          true,\n        );\n      }\n\n      if (this.a.radical !== 0) {\n        const radical = showRadical(this, render);\n        restruct.addReObjectPath(\n          LayerMap.data,\n          this.visel,\n          radical.path,\n          ps,\n          true,\n        );\n      }\n      if (this.a.isotope !== null) {\n        const isotope = showIsotope(this, render, leftMargin);\n        leftMargin -= isotope.rbb.width + delta;\n        restruct.addReObjectPath(\n          LayerMap.data,\n          this.visel,\n          isotope.path,\n          ps,\n          true,\n        );\n      }\n      if (\n        !isHydrogen &&\n        !this.a.alias &&\n        implh > 0 &&\n        displayHydrogen(this, options.showHydrogenLabels)\n      ) {\n        const data = showHydrogen(this, render, implh, {\n          hydrogen: {},\n          hydroIndex,\n          rightMargin,\n          leftMargin,\n        });\n        const hydrogen = data.hydrogen;\n        hydroIndex = data.hydroIndex;\n        rightMargin = data.rightMargin;\n        leftMargin = data.leftMargin;\n        restruct.addReObjectPath(\n          LayerMap.data,\n          this.visel,\n          hydrogen.path,\n          ps,\n          true,\n        );\n        if (hydroIndex != null) {\n          restruct.addReObjectPath(\n            LayerMap.data,\n            this.visel,\n            hydroIndex.path,\n            ps,\n            true,\n          );\n        }\n      }\n      if (this.a.charge === 0) {\n        this.a.charge = null;\n      }\n      if (this.a.charge && options.showCharge) {\n        const charge = showCharge(this, render, rightMargin);\n        rightMargin += charge.rbb.width + delta;\n        restruct.addReObjectPath(\n          LayerMap.data,\n          this.visel,\n          charge.path,\n          ps,\n          true,\n        );\n      }\n      if (this.a.explicitValence >= 0 && options.showValence) {\n        const valence = showExplicitValence(this, render, rightMargin);\n        rightMargin += valence.rbb.width + delta;\n        restruct.addReObjectPath(\n          LayerMap.data,\n          this.visel,\n          valence.path,\n          ps,\n          true,\n        );\n      }\n\n      if (this.a.badConn && options.showValenceWarnings) {\n        const warning = showWarning(this, render, leftMargin, rightMargin);\n        restruct.addReObjectPath(\n          LayerMap.warnings,\n          this.visel,\n          warning.path,\n          ps,\n          true,\n        );\n      }\n      if (index) {\n        /* eslint-disable no-mixed-operators */\n        pathAndRBoxTranslate(\n          index.path,\n          index.rbb,\n          -0.5 * label.rbb.width - 0.5 * index.rbb.width - delta,\n          0.3 * label.rbb.height,\n        );\n        /* eslint-enable no-mixed-operators */\n      }\n    }\n\n    // draw hover after label is calculated\n    this.setHover(this.hover, render);\n\n    const stereoLabel = this.a.stereoLabel; // Enhanced Stereo\n    const aamText = getAamText(this);\n    const customQueryText = checkIsSmartPropertiesExist(this.a)\n      ? getOnlyQueryAttributesCustomQuery(this.a)\n      : getQueryAttrsText(this);\n    let shortenCustomQueryText = customQueryText;\n    let customQueryTooltipText: string | undefined;\n\n    if (shortenCustomQueryText.length > MAX_LABEL_LENGTH) {\n      customQueryTooltipText = shortenCustomQueryText;\n      shortenCustomQueryText = `${shortenCustomQueryText.substring(\n        0,\n        MAX_LABEL_LENGTH,\n      )}...`;\n    }\n\n    // we render them together to avoid possible collisions\n\n    const fragmentId = Number(restruct.atoms.get(aid)?.a.fragment);\n    // TODO: fragment should not be null\n    const fragment = restruct.molecule.frags.get(fragmentId);\n\n    const displayStereoLabel = shouldDisplayStereoLabel(\n      stereoLabel,\n      options.stereoLabelStyle,\n      options.ignoreChiralFlag,\n      fragment?.enhancedStereoFlag,\n    );\n\n    let text = '';\n\n    if (displayStereoLabel) {\n      text = `${stereoLabel}\\n`;\n    }\n\n    if (shortenCustomQueryText.length > 0) {\n      text += `${shortenCustomQueryText}\\n`;\n    }\n\n    if (aamText.length > 0) {\n      text += `.${aamText}.`;\n    }\n\n    if (text.length > 0) {\n      const elem = Elements.get(this.a.label);\n      const aamPath = render.paper.text(ps.x, ps.y, text).attr({\n        font: options.font,\n        'font-size': options.fontszsubInPx,\n        fill:\n          options.atomColoring && elem ? ElementColor[this.a.label] : '#000',\n      });\n      if (stereoLabel) {\n        // use dom element to change color of stereo label which is the first element\n        // of just created text\n        // text -> tspan\n        const color = getStereoAtomColor(render.options, stereoLabel);\n        aamPath.node.childNodes[0].setAttribute('fill', color);\n        const opacity = getStereoAtomOpacity(render.options, stereoLabel);\n        aamPath.node.childNodes[0].setAttribute('fill-opacity', opacity);\n      }\n      const aamBox = util.relBox(aamPath.getBBox());\n      draw.recenterText(aamPath, aamBox);\n      const visel = this.visel;\n      let t = 3;\n      let dir = this.bisectLargestSector(restruct.molecule);\n      // estimate the shift to clear the atom label\n      for (let i = 0; i < visel.exts.length; ++i) {\n        t = Math.max(t, util.shiftRayBox(ps, dir, visel.exts[i].translate(ps)));\n      }\n      // estimate the shift backwards to account for the size of the aam/query text box itself\n      t += util.shiftRayBox(ps, dir.negated(), Box2Abs.fromRelBox(aamBox));\n      dir = dir.scaled(8 + t);\n      pathAndRBoxTranslate(aamPath, aamBox, dir.x, dir.y);\n      restruct.addReObjectPath(LayerMap.data, this.visel, aamPath, ps, true);\n\n      if (customQueryTooltipText) {\n        addTooltip(aamPath.node, customQueryTooltipText);\n      }\n    }\n\n    // Checking whether atom is highlighted and what's the last color\n    const highlights = restruct.molecule.highlights;\n    let isHighlighted = false;\n    let highlightColor = '';\n    highlights.forEach((highlight) => {\n      const hasCurrentHighlight = highlight.atoms?.includes(aid);\n      isHighlighted = isHighlighted || hasCurrentHighlight;\n      if (hasCurrentHighlight) {\n        highlightColor = highlight.color;\n      }\n    });\n\n    // Drawing highlight\n    if (isHighlighted) {\n      const style = { fill: highlightColor, stroke: 'none' };\n\n      const path = this.makeHighlightePlate(restruct, style);\n      restruct.addReObjectPath(LayerMap.hovering, this.visel, path);\n    }\n\n    if (atom.cip) {\n      this.cip = util.drawCIPLabel({\n        atomOrBond: atom,\n        position: atom.pp,\n        restruct: render.ctab,\n        visel: this.visel,\n      });\n    }\n  }\n\n  getLargestSectorFromNeighbors(struct: Struct): {\n    neighborAngle: number;\n    largestAngle: number;\n  } {\n    let angles: Array<number> = [];\n    this.a.neighbors.forEach((halfBondId) => {\n      const halfBond = struct.halfBonds.get(halfBondId);\n      halfBond && angles.push(halfBond.ang);\n    });\n    angles = angles.sort((a, b) => a - b);\n    const largeAngles: Array<number> = [];\n    for (let i = 0; i < angles.length - 1; ++i) {\n      largeAngles.push(angles[(i + 1) % angles.length] - angles[i]);\n    }\n    largeAngles.push(angles[0] - angles[angles.length - 1] + 2 * Math.PI);\n    let largestAngle = 0;\n    let neighborAngle = -Math.PI / 2;\n    for (let i = 0; i < angles.length; ++i) {\n      if (largeAngles[i] > largestAngle) {\n        largestAngle = largeAngles[i];\n        neighborAngle = angles[i];\n      }\n    }\n\n    return { neighborAngle, largestAngle };\n  }\n\n  bisectLargestSector(struct: Struct): Vec2 {\n    const { largestAngle, neighborAngle } =\n      this.getLargestSectorFromNeighbors(struct);\n    const bisectAngle = neighborAngle + largestAngle / 2;\n    return newVectorFromAngle(bisectAngle);\n  }\n}\n\nfunction getStereoAtomColor(options, stereoLabel) {\n  if (\n    !stereoLabel ||\n    options.colorStereogenicCenters === StereoColoringType.Off ||\n    options.colorStereogenicCenters === StereoColoringType.BondsOnly\n  ) {\n    return '#000';\n  }\n\n  return getColorFromStereoLabel(options, stereoLabel);\n}\n\nexport function getColorFromStereoLabel(options, stereoLabel) {\n  const stereoLabelType = stereoLabel.match(/\\D+/g)[0];\n\n  switch (stereoLabelType) {\n    case StereoLabel.And:\n      return options.colorOfAndCenters;\n    case StereoLabel.Or:\n      return options.colorOfOrCenters;\n    case StereoLabel.Abs:\n      return options.colorOfAbsoluteCenters;\n    default:\n      return '#000';\n  }\n}\n\nfunction getStereoAtomOpacity(options, stereoLabel) {\n  const stereoLabelType = stereoLabel.match(/\\D+/g)[0];\n  const stereoLabelNumber = +stereoLabel.replace(stereoLabelType, '');\n  if (\n    !options.autoFadeOfStereoLabels ||\n    stereoLabelType === StereoLabel.Abs ||\n    options.colorStereogenicCenters === StereoColoringType.Off ||\n    options.colorStereogenicCenters === StereoColoringType.BondsOnly\n  ) {\n    return 1;\n  }\n  return Math.max(1 - (stereoLabelNumber - 1) / 10, StereoLabelMinOpacity);\n}\n\nfunction shouldDisplayStereoLabel(\n  stereoLabel,\n  labelStyle,\n  ignoreChiralFlag,\n  flag: StereoFlag | undefined,\n): boolean {\n  if (!stereoLabel) {\n    return false;\n  }\n\n  const stereoLabelType = stereoLabel.match(/\\D+/g)[0];\n\n  if (ignoreChiralFlag && stereoLabelType === StereoLabel.Abs) {\n    return false;\n  }\n  if (ignoreChiralFlag && stereoLabelType !== StereoLabel.Abs) {\n    return true;\n  }\n\n  switch (labelStyle) {\n    case StereLabelStyleType.Off:\n      return false;\n    case StereLabelStyleType.On:\n      return true;\n    case StereLabelStyleType.Classic:\n      return !!(\n        flag === StereoFlag.Mixed || stereoLabelType === StereoLabel.Or\n      );\n    case StereLabelStyleType.IUPAC:\n      return !!(\n        flag === StereoFlag.Mixed && stereoLabelType !== StereoLabel.Abs\n      );\n    default:\n      return true;\n  }\n}\n\nfunction isLabelVisible(restruct, options, atom: ReAtom) {\n  const isAttachmentPointAtom = Boolean(atom.a.attachmentPoints);\n  const isCarbon = atom.a.label.toLowerCase() === 'c';\n  const visibleTerminal =\n    options.showHydrogenLabels !== ShowHydrogenLabels.Off &&\n    options.showHydrogenLabels !== ShowHydrogenLabels.Hetero;\n\n  const neighborsLength =\n    atom.a.neighbors.length === 0 ||\n    (atom.a.neighbors.length < 2 && visibleTerminal);\n\n  if (isAttachmentPointAtom && isCarbon) {\n    return false;\n  }\n\n  const shouldBeVisible =\n    neighborsLength ||\n    options.carbonExplicitly ||\n    options.showHydrogenLabels === ShowHydrogenLabels.On ||\n    atom.a.alias ||\n    atom.a.isotope !== null ||\n    atom.a.radical !== 0 ||\n    atom.a.charge !== null ||\n    atom.a.explicitValence >= 0 ||\n    atom.a.atomList !== null ||\n    atom.a.rglabel !== null ||\n    (atom.a.badConn && options.showValenceWarnings) ||\n    atom.a.label.toLowerCase() !== 'c';\n\n  if (shouldBeVisible) return true;\n\n  if (atom.a.neighbors.length === 2) {\n    const nei1 = atom.a.neighbors[0];\n    const nei2 = atom.a.neighbors[1];\n    const hb1 = restruct.molecule.halfBonds.get(nei1);\n    const hb2 = restruct.molecule.halfBonds.get(nei2);\n    const bond1 = restruct.bonds.get(hb1.bid);\n    const bond2 = restruct.bonds.get(hb2.bid);\n\n    const sameNotStereo =\n      bond1.b.type === bond2.b.type &&\n      bond1.b.stereo === Bond.PATTERN.STEREO.NONE &&\n      bond2.b.stereo === Bond.PATTERN.STEREO.NONE;\n\n    if (sameNotStereo && Math.abs(Vec2.cross(hb1.dir, hb2.dir)) < 0.2) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction displayHydrogen(atom: ReAtom, hydrogenLabels: ShowHydrogenLabels) {\n  return (\n    hydrogenLabels === ShowHydrogenLabels.On ||\n    (hydrogenLabels === ShowHydrogenLabels.Terminal &&\n      atom.a.neighbors.length < 2) ||\n    (hydrogenLabels === ShowHydrogenLabels.Hetero &&\n      atom.label?.text.toLowerCase() !== 'c') ||\n    (hydrogenLabels === ShowHydrogenLabels.TerminalAndHetero &&\n      (atom.a.neighbors.length < 2 || atom.label?.text.toLowerCase() !== 'c'))\n  );\n}\n\nfunction shouldHydrogenBeOnLeft(struct, atom) {\n  if (atom.a.neighbors.length === 0) {\n    if (atom.a.label === 'D' || atom.a.label === 'T') {\n      return false;\n    } else {\n      const element = Elements.get(atom.a.label);\n      return !element || Boolean(element.leftH);\n    }\n  }\n\n  if (atom.a.neighbors.length === 1) {\n    const neighbor = atom.a.neighbors[0];\n    const neighborDirection = struct.halfBonds.get(neighbor).dir;\n\n    return neighborDirection.x > 0;\n  }\n\n  return false;\n}\n\nfunction getOnlyQueryAttributesCustomQuery(atom: Atom) {\n  const queryText =\n    atom.queryProperties.customQuery ||\n    getAtomCustomQuery(\n      {\n        ...atom,\n        ...atom.queryProperties,\n      },\n      true,\n    );\n  return queryText;\n}\n\nfunction addTooltip(node, text: string) {\n  const tooltip = text.split(/(?<=[;,])/).join(' ');\n  node.childNodes[0].setAttribute('data-tooltip', util.escapeHtml(tooltip));\n}\n\nfunction buildLabel(\n  atom: ReAtom,\n  paper: any,\n  ps: Vec2,\n  options: any,\n  atomId: number,\n  sgroup?: SGroup,\n): {\n  rightMargin: number;\n  leftMargin: number;\n  label: ElemAttr;\n} {\n  const {\n    atomColoring,\n    font,\n    fontszInPx,\n    currentlySelectedMonomerAttachmentPoint,\n    connectedMonomerAttachmentPoints,\n    usageInMacromolecule,\n  } = options;\n  // eslint-disable-line max-statements\n  const label: any = {\n    text: getLabelText(atom.a, atomId, sgroup),\n  };\n  let tooltip: string | null = null;\n  if (!label.text) {\n    label.text = 'R#';\n  }\n\n  if (label.text === atom.a.label) {\n    const element = Elements.get(label.text);\n    if (atomColoring && element) {\n      atom.color = ElementColor[label.text] || '#000';\n    }\n  }\n\n  const shouldStyleLabel = usageInMacromolecule !== undefined;\n  const isMonomerAttachmentPoint = attachmentPointNames.includes(label.text);\n  const isMonomerAttachmentPointSelected =\n    currentlySelectedMonomerAttachmentPoint === label.text;\n  const isMonomerAttachmentPointUsed =\n    connectedMonomerAttachmentPoints?.includes(label.text);\n\n  const { color, fill, stroke } = util.useLabelStyles(\n    isMonomerAttachmentPointSelected,\n    isMonomerAttachmentPointUsed,\n    usageInMacromolecule,\n  );\n\n  if (isMonomerAttachmentPoint && shouldStyleLabel) {\n    atom.color = color;\n  }\n\n  if (label.text?.length > MAX_LABEL_LENGTH) {\n    tooltip = label.text;\n    label.text = `${label.text?.substring(0, 8)}...`;\n  }\n\n  const { previewOpacity } = options;\n\n  label.path = paper.text(ps.x, ps.y, label.text).attr({\n    font,\n    'font-size': fontszInPx,\n    fill: atom.color,\n    'font-style': atom.a.pseudo ? 'italic' : '',\n    'fill-opacity': atom.a.isPreview ? previewOpacity : 1,\n  });\n\n  if (isMonomerAttachmentPoint && shouldStyleLabel) {\n    const backgroundSize = fontszInPx * 2;\n\n    label.background = paper\n      .rect(\n        ps.x - backgroundSize / 2,\n        ps.y - backgroundSize / 2,\n        backgroundSize,\n        backgroundSize,\n        10,\n      )\n      .attr({ fill })\n      .attr({ stroke });\n  }\n  if (tooltip) {\n    addTooltip(label.path.node, tooltip);\n  }\n\n  label.rbb = util.relBox(label.path.getBBox());\n  draw.recenterText(label.path, label.rbb);\n  let rightMargin =\n    (label.rbb.width / 2) * (options.zoom > 1 ? 1 : options.zoom); //\n  let leftMargin =\n    (-label.rbb.width / 2) * (options.zoom > 1 ? 1 : options.zoom);\n\n  if (atom.a.atomList !== null) {\n    const xShift =\n      ((atom.hydrogenOnTheLeft ? -1 : 1) *\n        (label.rbb.width - label.rbb.height)) /\n      2;\n    pathAndRBoxTranslate(\n      label.path,\n      label.rbb,\n      xShift,\n\n      0,\n    );\n    rightMargin += xShift;\n    leftMargin += xShift;\n  }\n\n  atom.label = label;\n  return { label, rightMargin, leftMargin };\n}\n\nfunction getLabelText(atom, atomId: number, sgroup?: SGroup) {\n  if (sgroup?.isSuperatomWithoutLabel) {\n    const attachmentPoint = sgroup\n      .getAttachmentPoints()\n      .find((attachmentPoint) => {\n        return attachmentPoint.leaveAtomId === atomId;\n      });\n\n    if (attachmentPoint && attachmentPoint.attachmentPointNumber) {\n      return getAttachmentPointLabel(attachmentPoint.attachmentPointNumber);\n    }\n  }\n\n  if (atom.atomList !== null) return atom.atomList.label();\n\n  if (atom.pseudo) return atom.pseudo;\n\n  if (atom.alias) return atom.alias;\n\n  if (atom.label === 'R#' && atom.rglabel !== null) {\n    let text = '';\n\n    for (let rgi = 0; rgi < 32; rgi++) {\n      if (atom.rglabel & (1 << rgi)) {\n        // eslint-disable-line max-depth\n        text += 'R' + (rgi + 1).toString();\n      }\n    }\n\n    return text;\n  }\n\n  return atom.label;\n}\n\nfunction showHydroIndex(atom, render, implh, rightMargin): ElemAttr {\n  const ps = Scale.modelToCanvas(atom.a.pp, render.options);\n  const options = render.options;\n  const delta = 0.5 * options.lineWidth;\n  const hydroIndex: any = {};\n  hydroIndex.text = (implh + 1).toString();\n  hydroIndex.path = render.paper.text(ps.x, ps.y, hydroIndex.text).attr({\n    font: options.font,\n    'font-size': options.fontszsubInPx,\n    fill: atom.color,\n  });\n  hydroIndex.rbb = util.relBox(hydroIndex.path.getBBox());\n  draw.recenterText(hydroIndex.path, hydroIndex.rbb);\n  /* eslint-disable no-mixed-operators */\n  pathAndRBoxTranslate(\n    hydroIndex.path,\n    hydroIndex.rbb,\n    rightMargin + 0.5 * hydroIndex.rbb.width + delta,\n    0.2 * atom.label.rbb.height,\n  );\n  /* eslint-enable no-mixed-operators */\n  return hydroIndex;\n}\n\nfunction showRadical(atom: ReAtom, render: Render): Omit<ElemAttr, 'text'> {\n  const ps: Vec2 = Scale.modelToCanvas(atom.a.pp, render.options);\n  const options = render.options;\n  const paper: any = render.paper;\n  const radical: any = {};\n  let hshift;\n  switch (atom.a.radical) {\n    case 1:\n      radical.path = paper.set();\n      hshift = 1.6 * options.lineWidth;\n      radical.path.push(\n        draw.radicalBullet(paper, ps.add(new Vec2(-hshift, 0)), options),\n        draw.radicalBullet(paper, ps.add(new Vec2(hshift, 0)), options),\n      );\n      radical.path.attr('fill', atom.color);\n      break;\n    case 2:\n      radical.path = paper.set();\n      radical.path.push(draw.radicalBullet(paper, ps, options));\n      radical.path.attr('fill', atom.color);\n      break;\n    case 3:\n      radical.path = paper.set();\n      hshift = 1.6 * options.lineWidth;\n      radical.path.push(\n        draw.radicalCap(paper, ps.add(new Vec2(-hshift, 0)), options),\n        draw.radicalCap(paper, ps.add(new Vec2(hshift, 0)), options),\n      );\n      radical.path.attr('stroke', atom.color);\n      break;\n    default:\n      break;\n  }\n  radical.rbb = util.relBox(radical.path.getBBox());\n  let vshift = -0.5 * (atom.label!.rbb.height + radical.rbb.height);\n  if (atom.a.radical === 3) vshift -= options.lineWidth / 2;\n  pathAndRBoxTranslate(radical.path, radical.rbb, 0, vshift);\n  return radical;\n}\n\nfunction showIsotope(\n  atom: ReAtom,\n  render: Render,\n  leftMargin: number,\n): ElemAttr {\n  const ps = Scale.modelToCanvas(atom.a.pp, render.options);\n  const options = render.options;\n  const delta = 0.5 * options.lineWidth;\n  const isotope: any = {};\n  isotope.text = atom.a.isotope === null ? '' : atom.a.isotope.toString();\n  isotope.path = render.paper.text(ps.x, ps.y, isotope.text).attr({\n    font: options.font,\n    'font-size': options.fontszsubInPx,\n    fill: atom.color,\n  });\n  isotope.rbb = util.relBox(isotope.path.getBBox());\n  draw.recenterText(isotope.path, isotope.rbb);\n  /* eslint-disable no-mixed-operators */\n  pathAndRBoxTranslate(\n    isotope.path,\n    isotope.rbb,\n    leftMargin - 0.5 * isotope.rbb.width - delta,\n    -0.3 * atom.label!.rbb.height,\n  );\n  /* eslint-enable no-mixed-operators */\n  return isotope;\n}\n\nfunction showCharge(\n  atom: ReAtom,\n  render: Render,\n  rightMargin: number,\n): ElemAttr {\n  const ps = Scale.modelToCanvas(atom.a.pp, render.options);\n  const options = render.options;\n  const delta = 0.5 * options.lineWidth;\n  const charge: any = {};\n  charge.text = '';\n  if (atom.a.charge !== null) {\n    const absCharge = Math.abs(atom.a.charge);\n    if (absCharge !== 1) charge.text = absCharge.toString();\n    if (atom.a.charge < 0) charge.text += '\\u2013';\n    else charge.text += '+';\n  } else {\n    charge.text = '';\n  }\n\n  charge.path = render.paper.text(ps.x, ps.y, charge.text).attr({\n    font: options.font,\n    'font-size': options.fontszsubInPx,\n    fill: atom.color,\n  });\n  charge.rbb = util.relBox(charge.path.getBBox());\n  draw.recenterText(charge.path, charge.rbb);\n  /* eslint-disable no-mixed-operators */\n  pathAndRBoxTranslate(\n    charge.path,\n    charge.rbb,\n    rightMargin + 0.5 * charge.rbb.width + delta,\n    -0.3 * atom.label!.rbb.height,\n  );\n  /* eslint-enable no-mixed-operators */\n  return charge;\n}\n\nfunction showExplicitValence(\n  atom: ReAtom,\n  render: Render,\n  rightMargin: number,\n): ElemAttr {\n  const mapValence = {\n    0: '0',\n    1: 'I',\n    2: 'II',\n    3: 'III',\n    4: 'IV',\n    5: 'V',\n    6: 'VI',\n    7: 'VII',\n    8: 'VIII',\n    9: 'IX',\n    10: 'X',\n    11: 'XI',\n    12: 'XII',\n    13: 'XIII',\n    14: 'XIV',\n  };\n  const ps = Scale.modelToCanvas(atom.a.pp, render.options);\n  const options = render.options;\n  const delta = 0.5 * options.lineWidth;\n  const valence: any = {};\n  valence.text = mapValence[atom.a.explicitValence];\n  if (!valence.text) {\n    throw new Error('invalid valence ' + atom.a.explicitValence.toString());\n  }\n  valence.text = '(' + valence.text + ')';\n  valence.path = render.paper.text(ps.x, ps.y, valence.text).attr({\n    font: options.font,\n    'font-size': options.fontszsubInPx,\n    fill: atom.color,\n  });\n  valence.rbb = util.relBox(valence.path.getBBox());\n  draw.recenterText(valence.path, valence.rbb);\n  /* eslint-disable no-mixed-operators */\n  pathAndRBoxTranslate(\n    valence.path,\n    valence.rbb,\n    rightMargin + 0.5 * valence.rbb.width + delta,\n    -0.3 * atom.label!.rbb.height,\n  );\n  /* eslint-enable no-mixed-operators */\n  return valence;\n}\n\nfunction showHydrogen(\n  atom: ReAtom,\n  render: Render,\n  implh: number,\n  data: {\n    hydrogen: any;\n    hydroIndex: number;\n    rightMargin: number;\n    leftMargin: number;\n  },\n): {\n  hydrogen: ElemAttr;\n  hydroIndex: ElemAttr;\n  rightMargin: number;\n  leftMargin: number;\n} {\n  // eslint-disable-line max-statements\n  let hydroIndex: any = data.hydroIndex;\n  const hydrogenLeft = atom.hydrogenOnTheLeft;\n  const ps = Scale.modelToCanvas(atom.a.pp, render.options);\n  const options = render.options;\n  const delta = 0.5 * options.lineWidth;\n  const hydrogen = data.hydrogen;\n  hydrogen.text = 'H';\n  hydrogen.path = render.paper.text(ps.x, ps.y, hydrogen.text).attr({\n    font: options.font,\n    'font-size': options.fontszInPx,\n    fill: atom.color,\n  });\n  hydrogen.rbb = util.relBox(hydrogen.path.getBBox());\n  draw.recenterText(hydrogen.path, hydrogen.rbb);\n  if (!hydrogenLeft) {\n    pathAndRBoxTranslate(\n      hydrogen.path,\n      hydrogen.rbb,\n      data.rightMargin + 0.5 * hydrogen.rbb.width + delta,\n      0,\n    );\n    data.rightMargin += hydrogen.rbb.width + delta;\n  }\n  if (implh > 1) {\n    hydroIndex = {};\n    hydroIndex.text = implh.toString();\n    hydroIndex.path = render.paper.text(ps.x, ps.y, hydroIndex.text).attr({\n      font: options.font,\n      'font-size': options.fontszsubInPx,\n      fill: atom.color,\n    });\n    hydroIndex.rbb = util.relBox(hydroIndex.path.getBBox());\n    draw.recenterText(hydroIndex.path, hydroIndex.rbb);\n    if (!hydrogenLeft) {\n      pathAndRBoxTranslate(\n        hydroIndex.path,\n        hydroIndex.rbb,\n        data.rightMargin +\n          0.5 * hydroIndex.rbb.width * (options.zoom > 1 ? 1 : options.zoom) +\n          delta,\n        0.2 * atom.label!.rbb.height,\n      );\n      data.rightMargin += hydroIndex.rbb.width + delta;\n    }\n  }\n  if (hydrogenLeft) {\n    if (hydroIndex != null) {\n      pathAndRBoxTranslate(\n        hydroIndex.path,\n        hydroIndex.rbb,\n        data.leftMargin - 0.5 * hydroIndex.rbb.width - delta,\n        0.2 * atom.label!.rbb.height,\n      );\n      data.leftMargin -= hydroIndex.rbb.width + delta;\n    }\n    pathAndRBoxTranslate(\n      hydrogen.path,\n      hydrogen.rbb,\n      data.leftMargin -\n        0.5 *\n          hydrogen.rbb.width *\n          (implh > 1 && options.zoom < 1 ? options.zoom : 1) -\n        delta,\n      0,\n    );\n    data.leftMargin -= hydrogen.rbb.width + delta;\n  }\n  return Object.assign(data, { hydrogen, hydroIndex });\n}\n\nfunction showWarning(\n  atom,\n  render,\n  leftMargin,\n  rightMargin,\n): { rbb: DOMRect; path: any } {\n  const ps = Scale.modelToCanvas(atom.a.pp, render.options);\n  const delta = 0.5 * render.options.lineWidth;\n  const warning: any = {};\n  const y = ps.y + atom.label.rbb.height / 2 + delta;\n  warning.path = render.paper\n    .path(\n      'M{0},{1}L{2},{3}',\n      tfx(ps.x + leftMargin),\n      tfx(y),\n      tfx(ps.x + rightMargin),\n      tfx(y),\n    )\n    .attr(render.options.lineattr)\n    .attr({ stroke: '#F00' });\n  warning.rbb = util.relBox(warning.path.getBBox());\n  return warning;\n}\n\nfunction getAamText(atom) {\n  let aamText = '';\n  if (atom.a.aam > 0) aamText += atom.a.aam;\n  if (atom.a.invRet > 0) {\n    if (aamText.length > 0) aamText += ',';\n    if (atom.a.invRet === 1) aamText += 'Inv';\n    else if (atom.a.invRet === 2) aamText += 'Ret';\n    else throw new Error('Invalid value for the invert/retain flag');\n  }\n  if (atom.a.exactChangeFlag > 0) {\n    if (aamText.length > 0) aamText += ',';\n    if (atom.a.exactChangeFlag === 1) aamText += 'ext';\n    else throw new Error('Invalid value for the exact change flag');\n  }\n  return aamText;\n}\n\nfunction getRingBondCountAttrText(value: number) {\n  let attrText: string;\n  if (value > 0) {\n    attrText = 'rb' + value.toString();\n  } else if (value === -1) {\n    attrText = 'rb0';\n  } else if (value === -2) {\n    attrText = 'rb*';\n  } else {\n    throw new Error('Ring bond count invalid');\n  }\n  return attrText;\n}\n\nfunction getRingConnectivity(value: number) {\n  if (value > 0) {\n    return 'x' + value.toString();\n  } else if (value === -1 || value === -2) {\n    return 'x0';\n  } else {\n    return '';\n  }\n}\n\nfunction getDegree(value: number) {\n  if (value > 0) {\n    return 'D' + value.toString();\n  } else if (value === -1 || value === -2) {\n    return 'D0';\n  } else {\n    return '';\n  }\n}\n\nfunction getSubstitutionCountAttrText(value: number) {\n  let attrText: string;\n  if (value > 0) {\n    attrText = 's' + value.toString();\n  } else if (value === -1) {\n    attrText = 's0';\n  } else if (value === -2) {\n    attrText = 's*';\n  } else {\n    throw new Error('Substitution count invalid');\n  }\n  return attrText;\n}\n\nexport function getAtomType(atom: Atom) {\n  return atom.atomList\n    ? 'list'\n    : atom.pseudo === atom.label\n    ? 'pseudo'\n    : 'single';\n}\n\nexport function checkIsSmartPropertiesExist(atom) {\n  const smartsSpecificProperties = [\n    'ringMembership',\n    'ringSize',\n    'connectivity',\n    'chirality',\n    'aromaticity',\n    'customQuery',\n  ];\n  return smartsSpecificProperties.some((name) => atom.queryProperties?.[name]);\n}\n\nexport function getAtomCustomQuery(atom, includeOnlyQueryAttributes?: boolean) {\n  let queryAttrsText = '';\n  const nonQueryAttributes = ['charge', 'explicitValence', 'isotope'];\n\n  const addSemicolon = () => {\n    if (queryAttrsText.length > 0) queryAttrsText += ';';\n  };\n  const patterns: {\n    [key: string]: (value: string, atom) => string;\n  } = {\n    isotope: (value) => value,\n    aromaticity: (value) => (value === 'aromatic' ? 'a' : 'A'),\n    charge: (value) => {\n      if (value === '') return value;\n      const regExpResult = /^([+-]?)([0-9]{1,3}|1000)([+-]?)$/.exec(value);\n      const charge = regExpResult\n        ? parseInt(\n            regExpResult[1] + regExpResult[3] + regExpResult[2],\n          ).toString()\n        : value;\n      return charge[0] !== '-' ? `+${charge}` : charge;\n    },\n    unsaturatedAtom: (value) => (Number(value) === 1 ? 'u' : ''),\n    explicitValence: (value) => (Number(value) !== -1 ? `v${value}` : ''),\n    ringBondCount: (value) => getRingConnectivity(Number(value)),\n    substitutionCount: (value) => getDegree(Number(value)),\n    hCount: (value) =>\n      Number(value) > 0 ? 'H' + (Number(value) - 1).toString() : '',\n    implicitHCount: (value) => `h${value}`,\n    ringMembership: (value) => `R${value}`,\n    ringSize: (value) => `r${value}`,\n    connectivity: (value) => `X${value}`,\n    chirality: (value) => (value === 'clockwise' ? '@@' : '@'),\n  };\n\n  for (const propertyName in patterns) {\n    if (\n      includeOnlyQueryAttributes &&\n      nonQueryAttributes.includes(propertyName)\n    ) {\n      continue;\n    }\n\n    const value = atom[propertyName];\n    if (propertyName in atom && value !== null) {\n      const attrText = patterns[propertyName](value, atom);\n      if (attrText) {\n        addSemicolon();\n      }\n      queryAttrsText += attrText;\n    }\n  }\n\n  return queryAttrsText;\n}\n\nfunction getQueryAttrsText(atom): string {\n  let queryAttrsText = '';\n\n  const addSemicolon = () => {\n    if (queryAttrsText.length > 0) queryAttrsText += ';';\n  };\n\n  const { ringBondCount, substitutionCount, unsaturatedAtom, hCount } = atom.a;\n\n  if (ringBondCount !== 0) {\n    queryAttrsText += getRingBondCountAttrText(ringBondCount);\n  }\n  if (substitutionCount !== 0) {\n    addSemicolon();\n    queryAttrsText += getSubstitutionCountAttrText(substitutionCount);\n  }\n  if (unsaturatedAtom > 0) {\n    addSemicolon();\n    if (unsaturatedAtom === 1) queryAttrsText += 'u';\n    else throw new Error('Unsaturated atom invalid value');\n  }\n  if (hCount > 0) {\n    addSemicolon();\n    queryAttrsText += 'H' + (hCount - 1).toString();\n  }\n  return queryAttrsText;\n}\n\nfunction pathAndRBoxTranslate(path, rbb, x, y) {\n  path.translateAbs(x, y);\n  rbb.x += x;\n  rbb.y += y;\n}\n\nfunction newVectorFromAngle(angle: number): Vec2 {\n  return new Vec2(Math.cos(angle), Math.sin(angle));\n}\n\nexport default ReAtom;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  Atom,\n  Bond,\n  FunctionalGroup,\n  HalfBond,\n  SGroup,\n  Struct,\n  Vec2,\n} from 'domain/entities';\nimport { LayerMap, StereoColoringType } from './generalEnumTypes';\nimport { getColorFromStereoLabel } from './reatom';\n\nimport ReObject from './reobject';\nimport ReStruct from './restruct';\nimport { Render } from '../raphaelRender';\nimport { Scale } from 'domain/helpers';\nimport draw from '../draw';\nimport util from '../util';\nimport { MonomerMicromolecule } from 'domain/entities/monomerMicromolecule';\nimport { RenderOptions, RenderOptionStyles } from '../render.types';\n\nclass ReBond extends ReObject {\n  b: Bond;\n  doubleBondShift: number;\n  path: any;\n  neihbid1 = -1;\n  neihbid2 = -1;\n  boldStereo?: boolean;\n  rbb?: { x: number; y: number; width: number; height: number };\n  cip?: {\n    // Raphael paths\n    path: any;\n    text: any;\n    rectangle: any;\n  };\n\n  constructor(bond: Bond) {\n    super('bond');\n    this.b = bond; // TODO rename b to item\n    this.doubleBondShift = 0;\n  }\n\n  static isSelectable() {\n    return true;\n  }\n\n  private static getAtomPositionForBond(\n    struct: Struct,\n    atomId: number,\n    sgroup?: SGroup,\n  ) {\n    return sgroup?.isContracted()\n      ? sgroup?.getContractedPosition(struct).atomId\n      : atomId;\n  }\n\n  static bondRecalc(bond: ReBond, restruct: ReStruct, options: any): void {\n    const render = restruct.render;\n    const sgroup1 = restruct.molecule.getGroupFromAtomId(bond.b.begin);\n    const sgroup2 = restruct.molecule.getGroupFromAtomId(bond.b.end);\n    const beginAtom = restruct.atoms.get(\n      ReBond.getAtomPositionForBond(restruct.molecule, bond.b.begin, sgroup1),\n    );\n    const endAtom = restruct.atoms.get(\n      ReBond.getAtomPositionForBond(restruct.molecule, bond.b.end, sgroup2),\n    );\n\n    if (\n      !beginAtom ||\n      !endAtom ||\n      bond.b.hb1 === undefined ||\n      bond.b.hb2 === undefined\n    ) {\n      return;\n    }\n\n    let p1: Vec2;\n    let p2: Vec2;\n\n    if (sgroup1 instanceof MonomerMicromolecule && sgroup1 !== sgroup2) {\n      p1 = sgroup1.isContracted() ? (sgroup1.pp as Vec2) : beginAtom.a.pp;\n    } else {\n      p1 = beginAtom.a.pp;\n    }\n\n    if (sgroup2 instanceof MonomerMicromolecule && sgroup1 !== sgroup2) {\n      p2 = sgroup2.isContracted() ? (sgroup2.pp as Vec2) : endAtom.a.pp;\n    } else {\n      p2 = endAtom.a.pp;\n    }\n\n    const hb1 = restruct.molecule.halfBonds.get(bond.b.hb1);\n    const hb2 = restruct.molecule.halfBonds.get(bond.b.hb2);\n\n    if (!hb1?.dir || !hb2?.dir) return;\n\n    bond.b.center = Vec2.lc2(p1, 0.5, p2, 0.5);\n    bond.b.len = Vec2.dist(\n      Scale.modelToCanvas(p1, render.options),\n      Scale.modelToCanvas(p2, render.options),\n    );\n\n    hb1.p = beginAtom.getShiftedSegmentPosition(\n      options,\n      hb1.dir,\n      p1,\n      bond.b.len,\n    );\n    hb2.p = endAtom.getShiftedSegmentPosition(options, hb2.dir, p2, bond.b.len);\n\n    bond.b.sb = options.lineWidth * 5;\n    /* eslint-disable no-mixed-operators */\n    bond.b.sa = Math.max(bond.b.sb, bond.b.len / 2 - options.lineWidth * 2);\n    /* eslint-enable no-mixed-operators */\n    bond.b.angle = (Math.atan2(hb1.dir.y, hb1.dir.x) * 180) / Math.PI;\n  }\n\n  drawHover(render: Render) {\n    const ret = this.makeHoverPlate(render);\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, ret);\n    return ret;\n  }\n\n  getSelectionPoints(render: Render, isHighlight = false) {\n    // please refer to: ketcher-core/docs/data/hover_selection_1.png\n    const bond: Bond = this.b;\n    const { ctab: restruct, options } = render;\n    const { bondThickness, bondSpacingInPx, stereoBondWidth } = options;\n    const regularSelectionThikness = bondSpacingInPx + bondThickness;\n\n    // get half-bond positions, this is where the actual bond\n    // image on the screen is drawn, it may be different e.g. if the\n    // bond is connected to an atom with a label as opposed\n    // to when it is connected to a Carbon atom w/o a label\n    // please refer to: ketcher-core/docs/data/hover_selection_2.png\n    const halfBondStart = restruct.molecule.halfBonds.get(bond.hb1!)!.p;\n    const halfBondEnd = restruct.molecule.halfBonds.get(bond.hb2!)!.p;\n\n    const isStereoBond =\n      bond.stereo !== Bond.PATTERN.STEREO.NONE &&\n      bond.stereo !== Bond.PATTERN.STEREO.CIS_TRANS;\n\n    const highlightPadding = isHighlight ? -1 : 0;\n    const stereoPadding = isStereoBond ? 0 : -2;\n    const addPadding = highlightPadding + stereoPadding;\n\n    // find the points on the line where we will be drawing the curves\n    const contourStart = Vec2.getLinePoint(\n      halfBondEnd,\n      halfBondStart,\n      addPadding,\n    );\n    const contourEnd = Vec2.getLinePoint(\n      halfBondStart,\n      halfBondEnd,\n      addPadding,\n    );\n\n    const stereoBondStartHeightCoef = 0.5;\n    const bondPadding = 0.5;\n    const highlightBondPadding = isHighlight ? 0 : 2;\n    const addStart =\n      (isStereoBond\n        ? stereoBondWidth * stereoBondStartHeightCoef\n        : regularSelectionThikness + bondPadding) + highlightBondPadding;\n    const stereoBondEndHeightCoef = 1;\n    const addEnd =\n      (isStereoBond\n        ? stereoBondWidth +\n          (regularSelectionThikness * stereoBondEndHeightCoef) / stereoBondWidth\n        : regularSelectionThikness + bondPadding) + highlightBondPadding;\n\n    const contourPaddedStart = Vec2.getLinePoint(\n      contourStart,\n      contourEnd,\n      addEnd,\n    );\n    const contourPaddedEnd = Vec2.getLinePoint(\n      contourEnd,\n      contourStart,\n      addStart,\n    );\n\n    // we need four points for each bezier curve\n    // and two for each line that together form the selection contour\n    // the padded values are for the curve points and the rest of\n    // the values are for drawing the lines\n    // please refer to: ketcher-core/docs/data/hover_selection_3.png\n    const startPoint = contourStart.add(new Vec2(addEnd, 0));\n    const endPoint = contourEnd.add(new Vec2(addStart, 0));\n    const padStartPoint = contourPaddedStart.add(new Vec2(addEnd, 0));\n    const padEndPoint = contourPaddedEnd.add(new Vec2(addStart, 0));\n\n    const { angle } = bond;\n\n    // rotate the points +/-90 degrees to find the\n    // perpendicular points that will be used for actual drawing\n    // of selection contour on canvas\n    const startTop = startPoint.rotateAroundOrigin(\n      angle + 90,\n      new Vec2(contourStart.x, contourStart.y),\n    );\n    const startBottom = startPoint.rotateAroundOrigin(\n      angle - 90,\n      new Vec2(contourStart.x, contourStart.y),\n    );\n    const startPadTop = padStartPoint.rotateAroundOrigin(\n      angle + 90,\n      contourPaddedStart,\n    );\n    const startPadBottom = padStartPoint.rotateAroundOrigin(\n      angle - 90,\n      contourPaddedStart,\n    );\n    const endTop = endPoint.rotateAroundOrigin(angle + 90, contourEnd);\n    const endBottom = endPoint.rotateAroundOrigin(angle - 90, contourEnd);\n    const endPadTop = padEndPoint.rotateAroundOrigin(\n      angle + 90,\n      contourPaddedEnd,\n    );\n    const endPadBottom = padEndPoint.rotateAroundOrigin(\n      angle - 90,\n      contourPaddedEnd,\n    );\n\n    return [\n      startPadTop,\n      startTop,\n      endTop,\n      endPadTop,\n      endPadBottom,\n      endBottom,\n      startPadBottom,\n      startBottom,\n    ];\n  }\n\n  getSelectionContour(render: Render, isHighlight: boolean) {\n    const { paper } = render;\n    const [\n      startPadTop,\n      startTop,\n      endTop,\n      endPadTop,\n      endPadBottom,\n      endBottom,\n      startPadBottom,\n      startBottom,\n    ] = this.getSelectionPoints(render, isHighlight);\n\n    // for a visual representation of the points\n    // please refer to: ketcher-core/docs/data/hover_selection_exp.png\n    const pathString = `\n      M ${startTop.x} ${startTop.y}\n      L ${endTop.x} ${endTop.y}\n      C ${endPadTop.x} ${endPadTop.y}, ${endPadBottom.x} ${endPadBottom.y}, ${endBottom.x} ${endBottom.y}\n      L ${startBottom.x} ${startBottom.y}\n      C ${startPadBottom.x} ${startPadBottom.y}, ${startPadTop.x} ${startPadTop.y}, ${startTop.x} ${startTop.y}\n    `;\n\n    return paper.path(pathString);\n  }\n\n  makeHoverPlate(render: Render) {\n    const restruct = render.ctab;\n    const options = render.options;\n    if (this.isPlateShouldBeHidden(restruct, options)) {\n      return null;\n    }\n\n    const rect = this.getSelectionContour(render, false);\n\n    return rect.attr({ ...options.hoverStyle });\n  }\n\n  makeSelectionPlate(restruct: ReStruct, _: any, options: any) {\n    if (this.isPlateShouldBeHidden(restruct, options)) {\n      return null;\n    }\n\n    const rect = this.getSelectionContour(restruct.render, false);\n\n    return rect.attr(options.selectionStyle);\n  }\n\n  private isPlateShouldBeHidden = (\n    restruct: ReStruct,\n    options: RenderOptions,\n  ) => {\n    ReBond.bondRecalc(this, restruct, options);\n    const bond = this.b;\n    const sgroups = restruct.render.ctab.sgroups;\n    const functionalGroups = restruct.render.ctab.molecule.functionalGroups;\n    return (\n      FunctionalGroup.isBondInContractedFunctionalGroup(\n        bond,\n        sgroups,\n        functionalGroups,\n      ) || Bond.isBondToHiddenLeavingGroup(restruct.molecule, bond)\n    );\n  };\n\n  private makeHighlitePlate(\n    restruct: ReStruct,\n    highlightStyle: RenderOptionStyles,\n  ) {\n    const options = restruct.render.options;\n    if (this.isPlateShouldBeHidden(restruct, options)) {\n      return null;\n    }\n\n    const rect = this.getSelectionContour(restruct.render, true);\n    return rect.attr(highlightStyle);\n  }\n\n  show(restruct: ReStruct, bid: number, options: any): void {\n    // eslint-disable-line max-statements\n    const render = restruct.render;\n    const struct = restruct.molecule;\n    const bond = restruct.molecule.bonds.get(bid)!;\n    const sgroups = restruct.molecule.sgroups;\n    const functionalGroups = restruct.molecule.functionalGroups;\n\n    if (Bond.isBondToHiddenLeavingGroup(struct, bond)) {\n      return;\n    }\n\n    if (\n      bond &&\n      FunctionalGroup.isBondInContractedFunctionalGroup(\n        bond,\n        sgroups,\n        functionalGroups,\n      )\n    ) {\n      return;\n    }\n\n    if (\n      bond.type === Bond.PATTERN.TYPE.HYDROGEN &&\n      Bond.isBondToExpandedMonomer(struct, bond)\n    ) {\n      return;\n    }\n\n    const paper = render.paper;\n    const hb1 =\n      this.b.hb1 !== undefined ? struct.halfBonds.get(this.b.hb1) : null;\n    const hb2 =\n      this.b.hb2 !== undefined ? struct.halfBonds.get(this.b.hb2) : null;\n\n    checkStereoBold(bid, this, restruct);\n    ReBond.bondRecalc(this, restruct, options);\n    setDoubleBondShift(this, struct);\n    if (!hb1 || !hb2) return;\n    const isSnapping = restruct.isSnappingBond(bid);\n    this.path = getBondPath(restruct, this, hb1, hb2, isSnapping);\n    this.rbb = util.relBox(this.path.getBBox());\n    // add layer for bond's skeleton:\n    restruct.addReObjectPath(\n      LayerMap.bondSkeleton,\n      this.visel,\n      this.path,\n      null,\n      true,\n    );\n    const reactingCenter: any = {};\n    reactingCenter.path = getReactingCenterPath(render, this, hb1, hb2);\n    if (reactingCenter.path) {\n      reactingCenter.rbb = util.relBox(reactingCenter.path.getBBox());\n      restruct.addReObjectPath(\n        LayerMap.data,\n        this.visel,\n        reactingCenter.path,\n        null,\n        true,\n      );\n    }\n    const topology: any = {};\n    topology.path = getBondMark(render, this, hb1, hb2);\n    if (topology.path) {\n      topology.rbb = util.relBox(topology.path.getBBox());\n      restruct.addReObjectPath(\n        LayerMap.data,\n        this.visel,\n        topology.path,\n        null,\n        true,\n      );\n    }\n    this.setHover(this.hover, render);\n\n    let ipath = null;\n    const bondIdxOff = options.subFontSize * 0.6;\n    if (options.showBondIds) {\n      ipath = getIdsPath(bid, paper, hb1, hb2, bondIdxOff, 0.5, 0.5, hb1.norm);\n      restruct.addReObjectPath(LayerMap.indices, this.visel, ipath);\n    }\n    if (options.showHalfBondIds) {\n      ipath = getIdsPath(\n        this.b.hb1!,\n        paper,\n        hb1,\n        hb2,\n        bondIdxOff,\n        0.8,\n        0.2,\n        hb1.norm,\n      );\n      restruct.addReObjectPath(LayerMap.indices, this.visel, ipath);\n      ipath = getIdsPath(\n        this.b.hb2!,\n        paper,\n        hb1,\n        hb2,\n        bondIdxOff,\n        0.2,\n        0.8,\n        hb2.norm,\n      );\n      restruct.addReObjectPath(LayerMap.indices, this.visel, ipath);\n    }\n    if (options.showLoopIds && !options.showBondIds) {\n      ipath = getIdsPath(\n        hb1.loop,\n        paper,\n        hb1,\n        hb2,\n        bondIdxOff,\n        0.5,\n        0.5,\n        hb2.norm,\n      );\n      restruct.addReObjectPath(LayerMap.indices, this.visel, ipath);\n      ipath = getIdsPath(\n        hb2.loop,\n        paper,\n        hb1,\n        hb2,\n        bondIdxOff,\n        0.5,\n        0.5,\n        hb1.norm,\n      );\n      restruct.addReObjectPath(LayerMap.indices, this.visel, ipath);\n    }\n\n    // Checking whether bond is highlighted and what is the last color\n    const highlights = restruct.molecule.highlights;\n    let isHighlighted = false;\n    let highlightColor = '';\n    highlights.forEach((highlight) => {\n      const hasCurrentHighlight = highlight.bonds?.includes(bid);\n      isHighlighted = isHighlighted || hasCurrentHighlight;\n      if (hasCurrentHighlight) {\n        highlightColor = highlight.color;\n      }\n    });\n\n    // Drawing highlight\n    if (isHighlighted) {\n      const style = {\n        fill: highlightColor,\n        stroke: 'none',\n      };\n\n      const ret = this.makeHighlitePlate(restruct, style);\n      render.ctab.addReObjectPath(LayerMap.hovering, this.visel, ret);\n    }\n\n    if (bond.cip) {\n      this.cip = util.drawCIPLabel({\n        atomOrBond: bond,\n        position: bond.center,\n        restruct: render.ctab,\n        visel: this.visel,\n      });\n    }\n  }\n}\n\nfunction findIncomingStereoUpBond(\n  atom: Atom,\n  bid0: number,\n  includeBoldStereoBond: boolean,\n  restruct: ReStruct,\n): number {\n  return atom.neighbors.findIndex((hbid) => {\n    const hb = restruct.molecule.halfBonds.get(hbid);\n\n    if (!hb || hb.bid === bid0) return false;\n\n    const neibond = restruct.bonds.get(hb.bid);\n\n    if (!neibond) return false;\n    const singleUp =\n      neibond.b.type === Bond.PATTERN.TYPE.SINGLE &&\n      neibond.b.stereo === Bond.PATTERN.STEREO.UP;\n\n    if (singleUp) {\n      return (\n        neibond.b.end === hb.begin ||\n        (neibond.boldStereo && includeBoldStereoBond)\n      );\n    }\n\n    return !!(\n      neibond.b.type === Bond.PATTERN.TYPE.DOUBLE &&\n      neibond.b.stereo === Bond.PATTERN.STEREO.NONE &&\n      includeBoldStereoBond &&\n      neibond.boldStereo\n    );\n  });\n}\n\nfunction findIncomingUpBonds(\n  bid0: number,\n  bond: ReBond,\n  restruct: ReStruct,\n): void {\n  const halfbonds = [bond.b.begin, bond.b.end].map((aid) => {\n    const atom = restruct.molecule.atoms.get(aid);\n    if (!atom) return -1;\n    const pos = findIncomingStereoUpBond(atom, bid0, true, restruct);\n    return pos < 0 ? -1 : atom.neighbors[pos];\n  });\n\n  bond.neihbid1 = restruct.atoms.get(bond.b.begin)?.showLabel\n    ? -1\n    : halfbonds[0];\n  bond.neihbid2 = restruct.atoms.get(bond.b.end)?.showLabel ? -1 : halfbonds[1];\n}\n\nfunction checkStereoBold(bid0, bond, restruct) {\n  const halfbonds = [bond.b.begin, bond.b.end].map((aid) => {\n    const atom = restruct.molecule.atoms.get(aid);\n    const pos = findIncomingStereoUpBond(atom, bid0, false, restruct);\n    return pos < 0 ? -1 : atom.neighbors[pos];\n  });\n  bond.boldStereo = halfbonds[0] >= 0 && halfbonds[1] >= 0;\n}\n\nfunction getBondPath(\n  restruct: ReStruct,\n  bond: ReBond,\n  hb1: HalfBond,\n  hb2: HalfBond,\n  isSnapping: boolean,\n) {\n  let path: any = null;\n  const render = restruct.render;\n  const struct = restruct.molecule;\n  const shiftA = !restruct.atoms.get(hb1.begin)?.showLabel;\n  const shiftB = !restruct.atoms.get(hb2.begin)?.showLabel;\n  let newHalfBonds: [HalfBond, HalfBond];\n  const xShiftMinus1 = -1;\n  const xShiftPlus1 = 1;\n  switch (bond.b.type) {\n    case Bond.PATTERN.TYPE.SINGLE:\n      switch (bond.b.stereo) {\n        case Bond.PATTERN.STEREO.UP:\n          findIncomingUpBonds(hb1.bid, bond, restruct);\n          if (bond.boldStereo && bond.neihbid1 >= 0 && bond.neihbid2 >= 0) {\n            path = getBondSingleStereoBoldPath(\n              render,\n              hb1,\n              hb2,\n              bond,\n              struct,\n              isSnapping,\n            );\n          } else\n            path = getBondSingleUpPath(\n              render,\n              hb1,\n              hb2,\n              bond,\n              struct,\n              isSnapping,\n            );\n          break;\n        case Bond.PATTERN.STEREO.DOWN:\n          path = getBondSingleDownPath(\n            render,\n            hb1,\n            hb2,\n            bond,\n            struct,\n            isSnapping,\n          );\n          break;\n        case Bond.PATTERN.STEREO.EITHER:\n          path = getBondSingleEitherPath(\n            render,\n            hb1,\n            hb2,\n            bond,\n            struct,\n            isSnapping,\n          );\n          break;\n        default:\n          path = draw.bondSingle(\n            render.paper,\n            hb1,\n            hb2,\n            render.options,\n            isSnapping,\n            getStereoBondColor(render.options, bond, struct),\n          );\n          break;\n      }\n      break;\n    case Bond.PATTERN.TYPE.DOUBLE:\n      findIncomingUpBonds(hb1.bid, bond, restruct);\n      if (\n        bond.b.stereo === Bond.PATTERN.STEREO.NONE &&\n        bond.boldStereo &&\n        bond.neihbid1 >= 0 &&\n        bond.neihbid2 >= 0\n      ) {\n        path = getBondDoubleStereoBoldPath(\n          render,\n          hb1,\n          hb2,\n          bond,\n          struct,\n          shiftA,\n          shiftB,\n          isSnapping,\n        );\n      } else\n        path = getBondDoublePath(\n          render,\n          hb1,\n          hb2,\n          bond,\n          shiftA,\n          shiftB,\n          isSnapping,\n        );\n      break;\n    case Bond.PATTERN.TYPE.TRIPLE:\n      path = draw.bondTriple(\n        render.paper,\n        hb1,\n        hb2,\n        render.options,\n        isSnapping,\n      );\n      break;\n    case Bond.PATTERN.TYPE.AROMATIC: {\n      const inAromaticLoop =\n        (hb1.loop >= 0 && struct.loops.get(hb1.loop)?.aromatic) ||\n        (hb2.loop >= 0 && struct.loops.get(hb2.loop)?.aromatic);\n      path = inAromaticLoop\n        ? draw.bondSingle(render.paper, hb1, hb2, render.options, isSnapping)\n        : getBondAromaticPath(\n            render,\n            hb1,\n            hb2,\n            bond,\n            shiftA,\n            shiftB,\n            isSnapping,\n          );\n      break;\n    }\n    case Bond.PATTERN.TYPE.SINGLE_OR_DOUBLE:\n      newHalfBonds = util.updateHalfBondCoordinates(hb1, hb2, xShiftPlus1);\n      path = getSingleOrDoublePath(\n        render,\n        newHalfBonds[0],\n        newHalfBonds[1],\n        isSnapping,\n      );\n      break;\n    case Bond.PATTERN.TYPE.SINGLE_OR_AROMATIC:\n      path = getBondAromaticPath(\n        render,\n        hb1,\n        hb2,\n        bond,\n        shiftA,\n        shiftB,\n        isSnapping,\n      );\n      break;\n    case Bond.PATTERN.TYPE.DOUBLE_OR_AROMATIC:\n      newHalfBonds = util.updateHalfBondCoordinates(hb1, hb2, xShiftMinus1);\n      path = getBondAromaticPath(\n        render,\n        newHalfBonds[0],\n        newHalfBonds[1],\n        bond,\n        shiftA,\n        shiftB,\n        isSnapping,\n      );\n      break;\n    case Bond.PATTERN.TYPE.ANY:\n      newHalfBonds = util.updateHalfBondCoordinates(hb1, hb2, xShiftMinus1);\n      path = draw.bondAny(\n        render.paper,\n        newHalfBonds[0],\n        newHalfBonds[1],\n        render.options,\n        isSnapping,\n      );\n      break;\n    case Bond.PATTERN.TYPE.HYDROGEN:\n      newHalfBonds = util.updateHalfBondCoordinates(hb1, hb2, xShiftPlus1);\n      path = draw.bondHydrogen(\n        render.paper,\n        newHalfBonds[0],\n        newHalfBonds[1],\n        render.options,\n        isSnapping,\n      );\n      break;\n    case Bond.PATTERN.TYPE.DATIVE:\n      path = draw.bondDative(\n        render.paper,\n        hb1,\n        hb2,\n        render.options,\n        isSnapping,\n      );\n      break;\n    default:\n      throw new Error('Bond type ' + bond.b.type + ' not supported');\n  }\n  if (path) {\n    const { previewOpacity } = render.options;\n    path.attr({ opacity: bond.b.isPreview ? previewOpacity : 1 });\n  }\n  return path;\n}\n\n/* Get Path */\nfunction getBondSingleUpPath(\n  render: Render,\n  hb1: HalfBond,\n  hb2: HalfBond,\n  bond: ReBond,\n  struct: Struct,\n  isSnapping: boolean,\n) {\n  // eslint-disable-line max-params\n  const a = hb1.p;\n  const b = hb2.p;\n  const n = hb1.norm;\n  const options = render.options;\n  const bsp = 0.7 * options.stereoBond;\n  let b2 = b.addScaled(n, bsp);\n  let b3 = b.addScaled(n, -bsp);\n  if (bond.neihbid2 >= 0) {\n    // if the end is shared with another up-bond heading this way\n    const coords = stereoUpBondGetCoordinates(\n      hb2,\n      bond.neihbid2,\n      options.stereoBond,\n      struct,\n    );\n    b2 = coords[0];\n    b3 = coords[1];\n  }\n  return draw.bondSingleUp(\n    render.paper,\n    a,\n    b2,\n    b3,\n    options,\n    isSnapping,\n    getStereoBondColor(options, bond, struct),\n  );\n}\n\nfunction getStereoBondColor(\n  options: any,\n  bond: ReBond,\n  struct: Struct,\n): string {\n  const defaultColor = '#000';\n\n  if (bond.b.stereo === 0) return defaultColor;\n\n  const beginAtomStereoLabel = struct.atoms.get(bond.b.begin)?.stereoLabel;\n  const endAtomStereoLabel = struct.atoms.get(bond.b.end)?.stereoLabel;\n\n  let stereoLabel = '';\n  if (beginAtomStereoLabel && !endAtomStereoLabel) {\n    stereoLabel = beginAtomStereoLabel;\n  } else if (!beginAtomStereoLabel && endAtomStereoLabel) {\n    stereoLabel = endAtomStereoLabel;\n  }\n\n  if (\n    // if no stereolabel presents or presents in both then use default color\n    !stereoLabel ||\n    options.colorStereogenicCenters === StereoColoringType.Off ||\n    options.colorStereogenicCenters === StereoColoringType.LabelsOnly\n  ) {\n    return defaultColor;\n  }\n\n  return getColorFromStereoLabel(options, stereoLabel);\n}\n\nfunction getBondSingleStereoBoldPath(\n  render: Render,\n  hb1: HalfBond,\n  hb2: HalfBond,\n  bond: ReBond,\n  struct: Struct,\n  isSnapping: boolean,\n) {\n  // eslint-disable-line max-params\n  const options = render.options;\n  const coords1 = stereoUpBondGetCoordinates(\n    hb1,\n    bond.neihbid1,\n    options.stereoBond,\n    struct,\n  );\n  const coords2 = stereoUpBondGetCoordinates(\n    hb2,\n    bond.neihbid2,\n    options.stereoBond,\n    struct,\n  );\n  const a1 = coords1[0];\n  const a2 = coords1[1];\n  const a3 = coords2[0];\n  const a4 = coords2[1];\n  return draw.bondSingleStereoBold(\n    render.paper,\n    a1,\n    a2,\n    a3,\n    a4,\n    options,\n    isSnapping,\n    getStereoBondColor(options, bond, struct),\n  );\n}\n\nfunction getBondDoubleStereoBoldPath(\n  render: Render,\n  hb1: HalfBond,\n  hb2: HalfBond,\n  bond: ReBond,\n  struct: Struct,\n  shiftA: boolean,\n  shiftB: boolean,\n  isSnapping: boolean,\n) {\n  // eslint-disable-line max-params\n  const a = hb1.p;\n  const b = hb2.p;\n  const n = hb1.norm;\n  const shift = bond.doubleBondShift;\n  const bsp = 1.5 * render.options.stereoBond;\n  let b1 = a.addScaled(n, bsp * shift);\n  let b2 = b.addScaled(n, bsp * shift);\n  if (shift > 0) {\n    if (shiftA) {\n      b1 = b1.addScaled(\n        hb1.dir,\n        bsp * getBondLineShift(hb1.rightCos, hb1.rightSin),\n      );\n    }\n    if (shiftB) {\n      b2 = b2.addScaled(\n        hb1.dir,\n        -bsp * getBondLineShift(hb2.leftCos, hb2.leftSin),\n      );\n    }\n  } else if (shift < 0) {\n    if (shiftA) {\n      b1 = b1.addScaled(\n        hb1.dir,\n        bsp * getBondLineShift(hb1.leftCos, hb1.leftSin),\n      );\n    }\n    if (shiftB) {\n      b2 = b2.addScaled(\n        hb1.dir,\n        -bsp * getBondLineShift(hb2.rightCos, hb2.rightSin),\n      );\n    }\n  }\n  const sgBondPath = getBondSingleStereoBoldPath(\n    render,\n    hb1,\n    hb2,\n    bond,\n    struct,\n    isSnapping,\n  );\n  return draw.bondDoubleStereoBold(\n    render.paper,\n    sgBondPath,\n    b1,\n    b2,\n    render.options,\n    isSnapping,\n    getStereoBondColor(render.options, bond, struct),\n  );\n}\n\nexport function getBondLineShift(cos: number, sin: number): number {\n  if (sin < 0 || Math.abs(cos) > 0.9) return 0;\n  return sin / (1 - cos);\n}\n\nfunction stereoUpBondGetCoordinates(\n  hb: HalfBond,\n  neihbid: number,\n  bondSpace: any,\n  struct: Struct,\n): [Vec2, Vec2] {\n  const neihb = struct.halfBonds.get(neihbid);\n  const cos = Vec2.dot(hb.dir, neihb!.dir);\n  const sin = Vec2.cross(hb.dir, neihb!.dir);\n  const cosHalf = Math.sqrt(0.5 * (1 - cos));\n  const biss = neihb!.dir.rotateSC(\n    (sin >= 0 ? -1 : 1) * cosHalf,\n    Math.sqrt(0.5 * (1 + cos)),\n  );\n\n  const denomAdd = 0.3;\n  const scale = 0.7;\n  const a1 = hb.p.addScaled(biss, (scale * bondSpace) / (cosHalf + denomAdd));\n  const a2 = hb.p.addScaled(\n    biss.negated(),\n    (scale * bondSpace) / (cosHalf + denomAdd),\n  );\n  return sin > 0 ? [a1, a2] : [a2, a1];\n}\n\nfunction calculateLines(length: number, lineWidth: number, interval: number) {\n  const usableLength = length - lineWidth;\n  const linesCount = Math.max(\n    Math.floor(usableLength / (lineWidth + interval)),\n    0,\n  );\n  return linesCount + 2;\n}\n\nfunction getBondSingleDownPath(\n  render: Render,\n  hb1: HalfBond,\n  hb2: HalfBond,\n  bond: ReBond,\n  struct: Struct,\n  isSnapping: boolean,\n) {\n  const MIN_LINES = 4;\n  const DEFAULT_HASH_SPACING_IN_PX = 1.2;\n  const a = hb1.p;\n  const b = hb2.p;\n  const options = render.options;\n  let d = b.sub(a);\n  const len = d.length() + 0.2;\n  d = d.normalized();\n  let hashSpacingInPx = options.hashSpacingInPx ?? DEFAULT_HASH_SPACING_IN_PX;\n  const interval = hashSpacingInPx * options.lineWidth;\n  const gaps = MIN_LINES - 1;\n  const isHashSpacingTooLarge = interval >= len / gaps;\n\n  const nlines = calculateLines(len, options.lineWidth, interval);\n\n  if (isHashSpacingTooLarge && nlines < MIN_LINES) {\n    const averageSpacing = (len - options.lineWidth) / gaps;\n    hashSpacingInPx = averageSpacing / options.lineWidth;\n  }\n\n  const intervalAdjusted = hashSpacingInPx * options.lineWidth;\n\n  const finalLines = calculateLines(len, options.lineWidth, intervalAdjusted);\n\n  const step = len / (finalLines - 1);\n  return draw.bondSingleDown(\n    render.paper,\n    hb1,\n    d,\n    finalLines,\n    step,\n    options,\n    isSnapping,\n    getStereoBondColor(options, bond, struct),\n  );\n}\n\nfunction getBondSingleEitherPath(\n  render: Render,\n  hb1: HalfBond,\n  hb2: HalfBond,\n  bond: ReBond,\n  struct: Struct,\n  isSnapping: boolean,\n) {\n  const a = hb1.p;\n  const b = hb2.p;\n  const options = render.options;\n  let d = b.sub(a);\n  const len = d.length();\n  d = d.normalized();\n  const interval = 0.6 * options.lineWidth;\n  const nlines =\n    Math.max(\n      Math.floor((len - options.lineWidth) / (options.lineWidth + interval)),\n      0,\n    ) + 2;\n  const step = len / (nlines - 0.5);\n  return draw.bondSingleEither(\n    render.paper,\n    hb1,\n    d,\n    nlines,\n    step,\n    options,\n    isSnapping,\n    getStereoBondColor(options, bond, struct),\n  );\n}\n\nfunction getBondDoublePath(\n  render: Render,\n  hb1: HalfBond,\n  hb2: HalfBond,\n  bond: ReBond,\n  shiftA: boolean,\n  shiftB: boolean,\n  isSnapping: boolean,\n) {\n  // eslint-disable-line max-params, max-statements\n  const cisTrans = bond.b.stereo === Bond.PATTERN.STEREO.CIS_TRANS;\n\n  const a = hb1.p;\n  const b = hb2.p;\n  const n = hb1.norm;\n  const shift = cisTrans ? 0 : bond.doubleBondShift;\n\n  const options = render.options;\n  const bsp = options.bondSpace / 2;\n  const s1 = bsp + shift * bsp;\n  const s2 = -bsp + shift * bsp;\n\n  let a1 = a.addScaled(n, s1);\n  let b1 = b.addScaled(n, s1);\n  let a2 = a.addScaled(n, s2);\n  let b2 = b.addScaled(n, s2);\n\n  if (shift > 0) {\n    if (shiftA) {\n      a1 = a1.addScaled(\n        hb1.dir,\n        options.bondSpace * getBondLineShift(hb1.rightCos, hb1.rightSin),\n      );\n    }\n    if (shiftB) {\n      b1 = b1.addScaled(\n        hb1.dir,\n        -options.bondSpace * getBondLineShift(hb2.leftCos, hb2.leftSin),\n      );\n    }\n  } else if (shift < 0) {\n    if (shiftA) {\n      a2 = a2.addScaled(\n        hb1.dir,\n        options.bondSpace * getBondLineShift(hb1.leftCos, hb1.leftSin),\n      );\n    }\n    if (shiftB) {\n      b2 = b2.addScaled(\n        hb1.dir,\n        -options.bondSpace * getBondLineShift(hb2.rightCos, hb2.rightSin),\n      );\n    }\n  }\n\n  return draw.bondDouble(\n    render.paper,\n    a1,\n    a2,\n    b1,\n    b2,\n    cisTrans,\n    options,\n    isSnapping,\n  );\n}\n\nfunction getSingleOrDoublePath(\n  render: Render,\n  hb1: HalfBond,\n  hb2: HalfBond,\n  isSnapping: boolean,\n) {\n  const a = hb1.p;\n  const b = hb2.p;\n  const options = render.options;\n\n  let nSect =\n    Vec2.dist(a, b) / Number((options.bondSpace + options.lineWidth).toFixed());\n  if (!(nSect & 1)) nSect += 1;\n  return draw.bondSingleOrDouble(\n    render.paper,\n    hb1,\n    hb2,\n    nSect,\n    options,\n    isSnapping,\n  );\n}\n\nfunction getBondAromaticPath(\n  render: Render,\n  hb1: HalfBond,\n  hb2: HalfBond,\n  bond: ReBond,\n  shiftA: boolean,\n  shiftB: boolean,\n  isSnapping: boolean,\n) {\n  // eslint-disable-line max-params\n  const dashdotPattern = [0.125, 0.125, 0.005, 0.125];\n  let mask = 0;\n  let dash: number[] | null = null;\n  const options = render.options;\n  const bondShift = bond.doubleBondShift;\n\n  if (bond.b.type === Bond.PATTERN.TYPE.SINGLE_OR_AROMATIC) {\n    mask = bondShift > 0 ? 1 : 2;\n    dash = dashdotPattern.map((v) => v * options.microModeScale);\n  }\n  if (bond.b.type === Bond.PATTERN.TYPE.DOUBLE_OR_AROMATIC) {\n    mask = 3;\n    dash = dashdotPattern.map((v) => v * options.microModeScale);\n  }\n  const paths = getAromaticBondPaths(\n    hb1,\n    hb2,\n    bondShift,\n    shiftA,\n    shiftB,\n    options.bondSpace,\n    mask,\n    dash,\n  );\n  return draw.bondAromatic(render.paper, paths, bondShift, options, isSnapping);\n}\n\nfunction getAromaticBondPaths(\n  hb1: HalfBond,\n  hb2: HalfBond,\n  shift: number,\n  shiftA: boolean,\n  shiftB: boolean,\n  bondSpace: number,\n  mask: number,\n  dash: number[] | null,\n) {\n  // eslint-disable-line max-params, max-statements\n  const a = hb1.p;\n  const b = hb2.p;\n  const n = hb1.norm;\n  const bsp = bondSpace / 2;\n  const s1 = bsp + shift * bsp;\n  const s2 = -bsp + shift * bsp;\n  let a2 = a.addScaled(n, s1);\n  let b2 = b.addScaled(n, s1);\n  let a3 = a.addScaled(n, s2);\n  let b3 = b.addScaled(n, s2);\n  if (shift > 0) {\n    if (shiftA) {\n      a2 = a2.addScaled(\n        hb1.dir,\n        bondSpace * getBondLineShift(hb1.rightCos, hb1.rightSin),\n      );\n    }\n    if (shiftB) {\n      b2 = b2.addScaled(\n        hb1.dir,\n        -bondSpace * getBondLineShift(hb2.leftCos, hb2.leftSin),\n      );\n    }\n  } else if (shift < 0) {\n    if (shiftA) {\n      a3 = a3.addScaled(\n        hb1.dir,\n        bondSpace * getBondLineShift(hb1.leftCos, hb1.leftSin),\n      );\n    }\n    if (shiftB) {\n      b3 = b3.addScaled(\n        hb1.dir,\n        -bondSpace * getBondLineShift(hb2.rightCos, hb2.rightSin),\n      );\n    }\n  }\n  return draw.aromaticBondPaths(a2, a3, b2, b3, mask, dash);\n}\n\nfunction getReactingCenterPath(\n  render: Render,\n  bond: ReBond,\n  hb1: HalfBond,\n  hb2: HalfBond,\n) {\n  // eslint-disable-line max-statements\n  const a = hb1.p;\n  const b = hb2.p;\n  const c = b.add(a).scaled(0.5);\n  const d = b.sub(a).normalized();\n  const n = d.rotateSC(1, 0);\n\n  const p: Array<Vec2> = [];\n\n  const lw = render.options.lineWidth;\n  const bs = render.options.bondSpace / 2;\n  const alongIntRc = lw; // half interval along for CENTER\n  const alongIntMadeBroken = 2 * lw; // half interval between along for MADE_OR_BROKEN\n  const alongSz = 1.5 * bs; // half size along for CENTER\n  const acrossInt = 1.5 * bs; // half interval across for CENTER\n  const acrossSz = 3.0 * bs; // half size across for all\n  const tiltTan = 0.2; // tangent of the tilt angle\n\n  switch (bond.b.reactingCenterStatus) {\n    case Bond.PATTERN.REACTING_CENTER.NOT_CENTER: // X\n      p.push(c.addScaled(n, acrossSz).addScaled(d, tiltTan * acrossSz));\n      p.push(c.addScaled(n, -acrossSz).addScaled(d, -tiltTan * acrossSz));\n      p.push(c.addScaled(n, acrossSz).addScaled(d, -tiltTan * acrossSz));\n      p.push(c.addScaled(n, -acrossSz).addScaled(d, tiltTan * acrossSz));\n      break;\n    case Bond.PATTERN.REACTING_CENTER.CENTER: // #\n      p.push(\n        c\n          .addScaled(n, acrossSz)\n          .addScaled(d, tiltTan * acrossSz)\n          .addScaled(d, alongIntRc),\n      );\n      p.push(\n        c\n          .addScaled(n, -acrossSz)\n          .addScaled(d, -tiltTan * acrossSz)\n          .addScaled(d, alongIntRc),\n      );\n      p.push(\n        c\n          .addScaled(n, acrossSz)\n          .addScaled(d, tiltTan * acrossSz)\n          .addScaled(d, -alongIntRc),\n      );\n      p.push(\n        c\n          .addScaled(n, -acrossSz)\n          .addScaled(d, -tiltTan * acrossSz)\n          .addScaled(d, -alongIntRc),\n      );\n      p.push(c.addScaled(d, alongSz).addScaled(n, acrossInt));\n      p.push(c.addScaled(d, -alongSz).addScaled(n, acrossInt));\n      p.push(c.addScaled(d, alongSz).addScaled(n, -acrossInt));\n      p.push(c.addScaled(d, -alongSz).addScaled(n, -acrossInt));\n      break;\n    // case Bond.PATTERN.REACTING_CENTER.UNCHANGED: draw a circle\n    case Bond.PATTERN.REACTING_CENTER.MADE_OR_BROKEN:\n      p.push(c.addScaled(n, acrossSz).addScaled(d, alongIntMadeBroken));\n      p.push(c.addScaled(n, -acrossSz).addScaled(d, alongIntMadeBroken));\n      p.push(c.addScaled(n, acrossSz).addScaled(d, -alongIntMadeBroken));\n      p.push(c.addScaled(n, -acrossSz).addScaled(d, -alongIntMadeBroken));\n      break;\n    case Bond.PATTERN.REACTING_CENTER.ORDER_CHANGED:\n      p.push(c.addScaled(n, acrossSz));\n      p.push(c.addScaled(n, -acrossSz));\n      break;\n    case Bond.PATTERN.REACTING_CENTER.MADE_OR_BROKEN_AND_CHANGED:\n      p.push(c.addScaled(n, acrossSz).addScaled(d, alongIntMadeBroken));\n      p.push(c.addScaled(n, -acrossSz).addScaled(d, alongIntMadeBroken));\n      p.push(c.addScaled(n, acrossSz).addScaled(d, -alongIntMadeBroken));\n      p.push(c.addScaled(n, -acrossSz).addScaled(d, -alongIntMadeBroken));\n      p.push(c.addScaled(n, acrossSz));\n      p.push(c.addScaled(n, -acrossSz));\n      break;\n    default:\n      return null;\n  }\n  return draw.reactingCenter(render.paper, p, render.options);\n}\n\nfunction getBondMark(\n  render: Render,\n  bond: ReBond,\n  hb1: HalfBond,\n  hb2: HalfBond,\n) {\n  // eslint-disable-line max-statements\n  const options = render.options;\n  let mark: string | null = null;\n  let tooltip: string | null = null;\n  if (bond.b.customQuery) {\n    mark = bond.b.customQuery;\n    if (bond.b.customQuery.length > 8) {\n      tooltip = bond.b.customQuery;\n      mark = `${bond.b.customQuery.substring(0, 8)}...`;\n    }\n  } else if (bond.b.topology === Bond.PATTERN.TOPOLOGY.RING) {\n    mark = 'rng';\n  } else if (bond.b.topology === Bond.PATTERN.TOPOLOGY.CHAIN) {\n    mark = 'chn';\n  } else {\n    return null;\n  }\n\n  const a = hb1.p;\n  const b = hb2.p;\n  const c = b.add(a).scaled(0.5);\n  const d = b.sub(a).normalized();\n  let n = d.rotateSC(1, 0);\n  let fixed = options.lineWidth;\n  if (bond.doubleBondShift > 0) n = n.scaled(-bond.doubleBondShift);\n  else if (bond.doubleBondShift === 0) fixed += options.bondSpace / 2;\n\n  const s = new Vec2(2, 1).scaled(options.bondSpace);\n  if (bond.b.type === Bond.PATTERN.TYPE.TRIPLE) fixed += options.bondSpace;\n  const p = c.add(new Vec2(n.x * (s.x + fixed), n.y * (s.y + fixed)));\n  const path = draw.bondMark(render.paper, p, mark, options);\n  tooltip &&\n    path.node.childNodes[0].setAttribute(\n      'data-tooltip',\n      util.escapeHtml(tooltip),\n    );\n\n  return path;\n}\n\nfunction getIdsPath(\n  bid: number,\n  paper: any,\n  hb1: HalfBond,\n  hb2: HalfBond,\n  bondIdxOff: number,\n  param1: number,\n  param2: number,\n  norm: Vec2,\n) {\n  // eslint-disable-line max-params\n  const pb = Vec2.lc(hb1.p, param1, hb2.p, param2, norm, bondIdxOff);\n  const ipath = paper.text(pb.x, pb.y, bid.toString());\n  const irbb = util.relBox(ipath.getBBox());\n  draw.recenterText(ipath, irbb);\n  return ipath;\n}\n/* ----- */\n\nfunction setDoubleBondShift(bond: ReBond, struct: Struct): void {\n  const hb1 = bond.b.hb1;\n  const hb2 = bond.b.hb2;\n\n  if ((!hb1 && hb1 !== 0) || (!hb2 && hb2 !== 0)) {\n    bond.doubleBondShift = selectDoubleBondShiftChain(struct, bond);\n    return;\n  }\n\n  const loop1 = struct.halfBonds.get(hb1)!.loop;\n  const loop2 = struct.halfBonds.get(hb2)!.loop;\n  if (loop1 >= 0 && loop2 >= 0) {\n    const d1 = struct.loops.get(loop1)!.dblBonds;\n    const d2 = struct.loops.get(loop2)!.dblBonds;\n    const n1 = struct.loops.get(loop1)!.hbs.length;\n    const n2 = struct.loops.get(loop2)!.hbs.length;\n    bond.doubleBondShift = selectDoubleBondShift(n1, n2, d1, d2);\n  } else if (loop1 >= 0) {\n    bond.doubleBondShift = -1;\n  } else if (loop2 >= 0) {\n    bond.doubleBondShift = 1;\n  } else {\n    bond.doubleBondShift = selectDoubleBondShiftChain(struct, bond);\n  }\n}\n\nfunction selectDoubleBondShift(\n  n1: number,\n  n2: number,\n  d1: number,\n  d2: number,\n): number {\n  if (n1 === 6 && n2 !== 6 && (d1 > 1 || d2 === 1)) return -1;\n  if (n2 === 6 && n1 !== 6 && (d2 > 1 || d1 === 1)) return 1;\n  if (n2 * d1 > n1 * d2) return -1;\n  if (n2 * d1 < n1 * d2) return 1;\n  if (n2 > n1) return -1;\n  return 1;\n}\n\nfunction selectDoubleBondShiftChain(struct: Struct, bond: ReBond): number {\n  if ((!bond.b.hb1 && bond.b.hb1 !== 0) || (!bond.b.hb2 && bond.b.hb2 !== 0)) {\n    return 0;\n  }\n\n  const hb1 = struct.halfBonds.get(bond.b.hb1);\n  const hb2 = struct.halfBonds.get(bond.b.hb2);\n  if (!hb1 || !hb2) return 0;\n  const nLeft = (hb1.leftSin > 0.3 ? 1 : 0) + (hb2.rightSin > 0.3 ? 1 : 0);\n  const nRight = (hb2.leftSin > 0.3 ? 1 : 0) + (hb1.rightSin > 0.3 ? 1 : 0);\n  if (nLeft > nRight) return -1;\n  if (nLeft < nRight) return 1;\n  if ((hb1.leftSin > 0.3 ? 1 : 0) + (hb1.rightSin > 0.3 ? 1 : 0) === 1)\n    return 1;\n  return 0;\n}\n\nexport default ReBond;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Box2Abs, Fragment, StereoFlag } from 'domain/entities';\n\nimport { LayerMap } from './generalEnumTypes';\nimport ReObject from './reobject';\nimport ReStruct from './restruct';\nimport { Render } from '../raphaelRender';\nimport { Scale } from 'domain/helpers';\n\nclass ReEnhancedFlag extends ReObject {\n  #path: any;\n\n  constructor() {\n    super('enhancedFlag');\n  }\n\n  static isSelectable() {\n    return true;\n  }\n\n  hoverPath(render: Render): any {\n    const box = Box2Abs.fromRelBox(this.#path.getBBox());\n    const sz = box.p1.sub(box.p0);\n    const p0 = box.p0.sub(render.options.offset);\n    return render.paper.rect(p0.x, p0.y, sz.x, sz.y);\n  }\n\n  drawHover(render: Render): any {\n    // TODO: after the enhanced flag stops being displayed, need to remove the reEnhancedflag object from ctab\n    if (!this.#path?.attrs) return null;\n    const ret = this.hoverPath(render).attr(render.options.hoverStyle);\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, ret);\n    return ret;\n  }\n\n  makeSelectionPlate(restruct: ReStruct, _paper: any, options: any): any {\n    // TODO: after the enhanced flag stops being displayed, need to remove the reEnhancedflag object from ctab\n    if (!this.#path?.attrs) return null;\n    return this.hoverPath(restruct.render).attr(options.selectionStyle);\n  }\n\n  show(restruct: ReStruct, fragmentId: number, options: any): void {\n    const render = restruct.render;\n    const fragment = restruct.molecule.frags.get(fragmentId);\n\n    if (!fragment?.enhancedStereoFlag) {\n      return;\n    }\n\n    const position = fragment.stereoFlagPosition\n      ? fragment.stereoFlagPosition\n      : Fragment.getDefaultStereoFlagPosition(restruct.molecule, fragmentId)!;\n\n    const paper = render.paper;\n    const ps = Scale.modelToCanvas(position, options);\n\n    const stereoFlagMap = {\n      [StereoFlag.Abs]: options.absFlagLabel,\n      [StereoFlag.And]: options.andFlagLabel,\n      [StereoFlag.Mixed]: options.mixedFlagLabel,\n      [StereoFlag.Or]: options.orFlagLabel,\n    };\n\n    if (options.showStereoFlags && !options.ignoreChiralFlag) {\n      this.#path = paper\n        .text(\n          ps.x,\n          ps.y,\n          fragment.enhancedStereoFlag\n            ? stereoFlagMap[fragment.enhancedStereoFlag]\n            : '',\n        )\n        .attr({\n          font: options.font,\n          'font-size': options.fontszInPx,\n          fill: '#000',\n        });\n    }\n    render.ctab.addReObjectPath(\n      LayerMap.data,\n      this.visel,\n      this.#path,\n      null,\n      true,\n    );\n  }\n}\n\nexport default ReEnhancedFlag;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Box2Abs, Vec2 } from 'domain/entities';\n\nimport ReObject from './reobject';\nimport { Scale } from 'domain/helpers';\n\nclass ReFrag extends ReObject {\n  constructor(/* Struct.Fragment */ frag) {\n    super('frag');\n    this.item = frag;\n  }\n\n  static isSelectable() {\n    return false;\n  }\n\n  fragGetAtoms(restruct, fid) {\n    return Array.from(restruct.atoms.keys()).filter(\n      (aid) => restruct.atoms.get(aid).a.fragment === fid,\n    );\n  }\n\n  fragGetBonds(restruct, fid) {\n    return Array.from(restruct.bonds.keys()).filter((bid) => {\n      const bond = restruct.bonds.get(bid).b;\n\n      const firstFrag = restruct.atoms.get(bond.begin).a.fragment;\n      const secondFrag = restruct.atoms.get(bond.end).a.fragment;\n\n      return firstFrag === fid && secondFrag === fid;\n    });\n  }\n\n  calcBBox(restruct, fid, render) {\n    // TODO need to review parameter list\n    let ret;\n    restruct.atoms.forEach((atom) => {\n      if (atom.a.fragment !== fid) return;\n\n      // TODO ReObject.calcBBox to be used instead\n      let bba = atom.visel.boundingBox;\n      if (!bba) {\n        bba = new Box2Abs(atom.a.pp, atom.a.pp);\n        const ext = new Vec2(0.05 * 3, 0.05 * 3);\n        bba = bba.extend(ext, ext);\n      } else {\n        if (!render) render = global._ui_editor.render; // eslint-disable-line\n        bba = bba\n          .translate((render.options.offset || new Vec2()).negated())\n          .transform(Scale.canvasToModel, render.options);\n      }\n      ret = ret ? Box2Abs.union(ret, bba) : bba;\n    });\n\n    return ret;\n  }\n\n  // TODO need to review parameter list\n  _draw(render, fid, attrs) {\n    // eslint-disable-line no-underscore-dangle\n    const bb = this.calcBBox(render.ctab, fid, render);\n\n    if (bb) {\n      const p0 = Scale.modelToCanvas(\n        new Vec2(bb.p0.x, bb.p0.y),\n        render.options,\n      );\n      const p1 = Scale.modelToCanvas(\n        new Vec2(bb.p1.x, bb.p1.y),\n        render.options,\n      );\n      return render.paper\n        .rect(p0.x, p0.y, p1.x - p0.x, p1.y - p0.y, 0)\n        .attr(attrs);\n    }\n\n    // TODO abnormal situation, empty fragments must be destroyed by tools\n  }\n\n  draw(_render) {\n    // eslint-disable-line no-unused-vars\n    return null; // this._draw(render, fid, { 'stroke' : 'lightgray' }); // [RB] for debugging only\n  }\n\n  drawHover(_render) {\n    // eslint-disable-line no-unused-vars\n    // Do nothing. This method shouldn't actually be called.\n  }\n\n  setHover(hover, render) {\n    let fid = render.ctab.frags.keyOf(this);\n\n    if (!fid && fid !== 0) {\n      console.warn('Fragment does not belong to the render');\n      return;\n    }\n\n    fid = parseInt(fid, 10);\n\n    render.ctab.atoms.forEach((atom) => {\n      if (atom.a.fragment === fid) atom.setHover(hover, render);\n    });\n\n    render.ctab.bonds.forEach((bond) => {\n      if (render.ctab.atoms.get(bond.b.begin).a.fragment === fid) {\n        bond.setHover(hover, render);\n      }\n    });\n  }\n}\nexport default ReFrag;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Box2Abs } from 'domain/entities/box2Abs';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { LayerMap } from './generalEnumTypes';\nimport ReObject from './reobject';\nimport { Scale } from 'domain/helpers';\nimport draw from '../draw';\nimport util from '../util';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { Render } from '../raphaelRender';\n\nconst BORDER_EXT = new Vec2(0.05 * 3, 0.05 * 3);\nconst PADDING_VECTOR = new Vec2(0.2, 0.4);\nclass ReRGroup extends ReObject {\n  constructor(/* RGroup */ rgroup) {\n    super('rgroup');\n    this.labelBox = null;\n    this.item = rgroup;\n  }\n\n  static isSelectable() {\n    return false;\n  }\n\n  getAtoms(render) {\n    let ret = [];\n    this.item.frags.forEach((fid) => {\n      ret = ret.concat(\n        render.ctab.frags.get(fid).fragGetAtoms(render.ctab, fid),\n      );\n    });\n    return ret;\n  }\n\n  getBonds(render) {\n    let ret = [];\n    this.item.frags.forEach((fid) => {\n      ret = ret.concat(\n        render.ctab.frags.get(fid).fragGetBonds(render.ctab, fid),\n      );\n    });\n    return ret;\n  }\n\n  /**\n   * @param {Render} render\n   */\n  calcBBox(render) {\n    /** @type {Box2Abs | null} */\n    let rGroupBoundingBox = null;\n    this.item.frags.forEach((fid) => {\n      const fragBox = render.ctab.frags\n        .get(fid)\n        .calcBBox(render.ctab, fid, render);\n      if (fragBox) {\n        rGroupBoundingBox = rGroupBoundingBox\n          ? Box2Abs.union(rGroupBoundingBox, fragBox)\n          : fragBox;\n      }\n    });\n\n    const rGroupAttachmentPointsVBox =\n      render.ctab.getRGroupAttachmentPointsVBoxByAtomIds(this.getAtoms(render));\n    if (rGroupBoundingBox && rGroupAttachmentPointsVBox) {\n      rGroupBoundingBox = Box2Abs.union(\n        rGroupBoundingBox,\n        rGroupAttachmentPointsVBox,\n      );\n    }\n\n    rGroupBoundingBox = rGroupBoundingBox\n      ? rGroupBoundingBox.extend(BORDER_EXT, BORDER_EXT)\n      : rGroupBoundingBox;\n\n    return rGroupBoundingBox;\n  }\n\n  // TODO need to review parameter list\n  draw(render, options) {\n    // eslint-disable-line max-statements\n    let bb = this.calcBBox(render);\n\n    if (!bb) {\n      console.error(\n        'Abnormal situation, empty fragments must be destroyed by tools',\n      );\n      return {};\n    } else {\n      // add a little space between the attachment points and brackets\n      bb = bb.extend(PADDING_VECTOR, PADDING_VECTOR);\n    }\n\n    const ret = { data: [] };\n    const p0 = Scale.modelToCanvas(bb.p0, options);\n    const p1 = Scale.modelToCanvas(bb.p1, options);\n    const brackets = render.paper.set();\n\n    rGroupdrawBrackets(brackets, render, bb); // eslint-disable-line new-cap\n\n    ret.data.push(brackets);\n    const key = render.ctab.rgroups.keyOf(this);\n    const labelSet = render.paper.set();\n    const label = render.paper\n      .text(p0.x, (p0.y + p1.y) / 2, 'R' + key + '=')\n      .attr({\n        font: options.font,\n        'font-size': options.fontRLabel,\n        fill: 'black',\n      });\n\n    const labelBox = util.relBox(label.getBBox());\n    label.translateAbs(-labelBox.width / 2 - options.lineWidth, 0);\n\n    labelSet.push(label);\n    const logicStyle = {\n      font: options.font,\n      'font-size': options.fontRLogic,\n      fill: 'black',\n    };\n\n    const logic = [rLogicToString(key, this.item)];\n\n    let shift = labelBox.height / 2 + options.lineWidth / 2;\n    for (let i = 0; i < logic.length; ++i) {\n      const logicPath = render.paper\n        .text(p0.x, (p0.y + p1.y) / 2, logic[i])\n        .attr(logicStyle);\n      const logicBox = util.relBox(logicPath.getBBox());\n      shift += logicBox.height / 2;\n      logicPath.translateAbs(\n        -logicBox.width / 2 - 6 * options.lineWidth,\n        shift,\n      );\n      shift += logicBox.height / 2 + options.lineWidth / 2;\n      ret.data.push(logicPath);\n      labelSet.push(logicPath);\n    }\n\n    ret.data.push(label);\n    this.labelBox = Box2Abs.fromRelBox(labelSet.getBBox()).transform(\n      Scale.canvasToModel,\n      render.options,\n    );\n    return ret;\n  }\n\n  // TODO need to review parameter list\n  _draw(render, rgid, attrs) {\n    // eslint-disable-line no-underscore-dangle\n    if (!this.getVBoxObj(render)) return null;\n    const bb = this.getVBoxObj(render).extend(BORDER_EXT, BORDER_EXT); // eslint-disable-line no-underscore-dangle\n\n    if (!bb) return null;\n\n    const p0 = Scale.modelToCanvas(bb.p0, render.options);\n    const p1 = Scale.modelToCanvas(bb.p1, render.options);\n    return render.paper\n      .rect(p0.x, p0.y, p1.x - p0.x, p1.y - p0.y, 0)\n      .attr(attrs);\n  }\n\n  drawHover(render) {\n    const rgid = render.ctab.rgroups.keyOf(this);\n\n    if (!rgid) {\n      console.error(\n        'Abnormal situation, fragment does not belong to the render',\n      );\n      return null;\n    }\n\n    const ret = this._draw(\n      render,\n      rgid,\n      render.options.hoverStyle /* { 'fill' : 'red' } */,\n    ); // eslint-disable-line no-underscore-dangle\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, ret);\n\n    this.item.frags.forEach((fnum, fid) => {\n      render.ctab.frags.get(fid).drawHover(render);\n    });\n\n    return ret;\n  }\n\n  show(restruct, id, options) {\n    const drawing = this.draw(restruct.render, options);\n\n    Object.keys(drawing).forEach((group) => {\n      while (drawing[group].length > 0) {\n        restruct.addReObjectPath(\n          LayerMap.data,\n          this.visel,\n          drawing[group].shift(),\n          null,\n          true,\n        );\n      }\n    });\n    // TODO rgroup selection & highlighting\n  }\n}\n\nfunction rGroupdrawBrackets(set, render, bb, d) {\n  d = Scale.modelToCanvas(d || new Vec2(1, 0), render.options);\n  const bracketWidth = Math.min(0.25, bb.sz().x * 0.3);\n  const bracketHeight = bb.p1.y - bb.p0.y;\n  const cy = 0.5 * (bb.p1.y + bb.p0.y);\n\n  const leftBracket = draw.bracket(\n    render.paper,\n    d.negated(),\n    d.negated().rotateSC(1, 0),\n    Scale.modelToCanvas(new Vec2(bb.p0.x, cy), render.options),\n    bracketWidth,\n    bracketHeight,\n    render.options,\n  );\n\n  const rightBracket = draw.bracket(\n    render.paper,\n    d,\n    d.rotateSC(1, 0),\n    Scale.modelToCanvas(new Vec2(bb.p1.x, cy), render.options),\n    bracketWidth,\n    bracketHeight,\n    render.options,\n  );\n\n  return set.push(leftBracket, rightBracket);\n}\n\nfunction rLogicToString(id, rLogic) {\n  const ifThen = rLogic.ifthen > 0 ? 'IF ' : '';\n\n  const rangeExists =\n    rLogic.range.startsWith('>') ||\n    rLogic.range.startsWith('<') ||\n    rLogic.range.startsWith('=');\n\n  let range = null;\n  if (rLogic.range.length > 0) {\n    range = rangeExists ? rLogic.range : '=' + rLogic.range;\n  } else range = '>0';\n\n  const restH = rLogic.resth ? ' (RestH)' : '';\n  const nextRg = rLogic.ifthen > 0 ? '\\nTHEN R' + rLogic.ifthen.toString() : '';\n\n  return `${ifThen}R${id.toString()}${range}${restH}${nextRg}`;\n}\n\nexport default ReRGroup;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Box2Abs, RxnArrow, RxnArrowMode, Vec2 } from 'domain/entities';\n\nimport { LayerMap } from './generalEnumTypes';\nimport Raphael from '../raphael-ext';\nimport ReObject from './reobject';\nimport ReStruct from './restruct';\nimport { Render } from '../raphaelRender';\nimport { Scale } from 'domain/helpers';\nimport draw from '../draw';\nimport util from '../util';\nimport { tfx } from 'utilities';\n\ntype Arrow = {\n  pos: Array<Vec2>;\n  mode: RxnArrowMode;\n  height?: number;\n};\n\ntype ArrowParams = {\n  length: number;\n  angle: number;\n};\ninterface MinDistanceWithReferencePoint {\n  minDist: number;\n  refPoint: Vec2 | null;\n}\n\nclass ReRxnArrow extends ReObject {\n  item: Arrow;\n  isResizing = false;\n\n  constructor(/* chem.RxnArrow */ arrow: Arrow) {\n    super('rxnArrow');\n    this.item = arrow;\n  }\n\n  static isSelectable(): boolean {\n    return true;\n  }\n\n  calcDistance(p: Vec2, s: any): MinDistanceWithReferencePoint {\n    const point: Vec2 = new Vec2(p.x, p.y);\n    const distRef: MinDistanceWithReferencePoint =\n      this.getReferencePointDistance(p);\n    const item = this.item;\n    const pos = item.pos;\n\n    let dist: number = point.calculateDistanceToLine([pos[0], pos[1]]);\n\n    if (RxnArrow.isElliptical(item)) {\n      // currently an elliptical arrow is highlighted if a pointer is close to one of the 3 virtual lines\n      // that form a triangle from the arrow's 3 reference points\n      // TODO: make a better detection (maybe rectangular, so it's similar to visual highlight/selection)\n      const [startPoint, endPoint, middlePoint] = this.getReferencePoints();\n      dist = Math.min(\n        dist,\n        point.calculateDistanceToLine([startPoint, middlePoint]),\n        point.calculateDistanceToLine([middlePoint, endPoint]),\n      );\n    }\n\n    const refPoint: Vec2 | null =\n      distRef.minDist <= 8 / s ? distRef.refPoint : null;\n    // distance is a smallest between dist to figure and it's reference points\n    dist = Math.min(distRef.minDist, dist);\n    return { minDist: dist, refPoint };\n  }\n\n  getReferencePointDistance(p: Vec2): MinDistanceWithReferencePoint {\n    const dist: any = [];\n    const refPoints = this.getReferencePoints();\n    refPoints.forEach((rp) => {\n      dist.push({ minDist: Math.abs(Vec2.dist(p, rp)), refPoint: rp });\n    });\n\n    const minDist: MinDistanceWithReferencePoint = dist.reduce(\n      (acc, current) =>\n        !acc ? current : acc.minDist < current.minDist ? acc : current,\n      null,\n    );\n\n    return minDist;\n  }\n\n  hoverPath(render: Render) {\n    const path = this.generatePath(render, render.options, 'selection');\n\n    return render.paper.path(path);\n  }\n\n  drawHover(render: Render) {\n    const ret = this.hoverPath(render).attr(render.options.hoverStyle);\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, ret);\n    return ret;\n  }\n\n  getReferencePoints(): Array<Vec2> {\n    const refPoints: Array<Vec2> = [];\n    const item = this.item;\n    const [a, b] = item.pos;\n    const height = item.height;\n    refPoints.push(new Vec2(a.x, a.y));\n    refPoints.push(new Vec2(b.x, b.y));\n\n    if (RxnArrow.isElliptical(item)) {\n      const middlePoint = findMiddlePoint(height!, a, b);\n      refPoints.push(middlePoint);\n    }\n    return refPoints;\n  }\n\n  makeAdditionalInfo(restruct: ReStruct) {\n    const scaleFactor = restruct.render.options.microModeScale;\n    const refPoints = this.getReferencePoints();\n    const selectionSet = restruct.render.paper.set();\n\n    refPoints.forEach((rp) => {\n      const scaledRP = Scale.modelToCanvas(rp, restruct.render.options);\n      selectionSet.push(\n        restruct.render.paper\n          .circle(scaledRP.x, scaledRP.y, scaleFactor / 8)\n          .attr({ fill: 'black' }),\n      );\n    });\n\n    return selectionSet;\n  }\n\n  makeSelectionPlate(restruct: ReStruct, _paper, styles) {\n    const render = restruct.render;\n    const options = restruct.render.options;\n    const selectionSet = restruct.render.paper.set();\n\n    selectionSet.push(\n      render.paper\n        .path(this.generatePath(render, options, 'selection'))\n        .attr(styles.selectionStyle),\n    );\n    return selectionSet;\n  }\n\n  generatePath(render: Render, options, type) {\n    let path;\n    const item = this.item;\n    const height =\n      RxnArrow.isElliptical(item) && item.height\n        ? item.height * options.microModeScale\n        : 0;\n    const pos = item.pos.map((p) => {\n      return Scale.modelToCanvas(p, options) || new Vec2();\n    });\n    const { length, angle } = this.getArrowParams(\n      pos[0].x,\n      pos[0].y,\n      pos[1].x,\n      pos[1].y,\n    );\n\n    switch (type) {\n      case 'selection':\n        path = draw.rectangleArrowHighlightAndSelection(\n          render.paper,\n          { pos, height },\n          length,\n          angle,\n        );\n        break;\n      case 'arrow':\n        path = draw.arrow(\n          render.paper,\n          { ...item, pos, height },\n          length,\n          angle,\n          options,\n          this.isResizing,\n        );\n        break;\n    }\n\n    return path;\n  }\n\n  getArrowParams(x1, y1, x2, y2): ArrowParams {\n    const length = Math.hypot(x2 - x1, y2 - y1);\n    const angle = Raphael.angle(x1, y1, x2, y2) - 180;\n\n    return { length, angle };\n  }\n\n  show(restruct: ReStruct, _id, options) {\n    const path = this.generatePath(restruct.render, options, 'arrow');\n\n    const offset = options.offset;\n    if (offset != null) path.translateAbs(offset.x, offset.y);\n\n    this.visel.add(path, Box2Abs.fromRelBox(util.relBox(path.getBBox())));\n  }\n}\n\nfunction findMiddlePoint(height: number, a: Vec2, b: Vec2) {\n  if (+tfx(height) === 0) {\n    const minX = Math.min(a.x, b.x);\n    const minY = Math.min(a.y, b.y);\n    const x = minX + Math.abs(a.x - b.x) / 2;\n    const y = minY + Math.abs(a.y - b.y) / 2;\n    return new Vec2(x, y);\n  }\n  const length = Math.hypot(b.x - a.x, b.y - a.y);\n  const lengthHyp = Math.hypot(length / 2, height);\n  const coordinates1 = util.calcCoordinates(a, b, lengthHyp).pos1;\n  const coordinates2 = util.calcCoordinates(a, b, lengthHyp).pos2;\n\n  if (height > 0) {\n    if (b.x < a.x) {\n      return new Vec2(coordinates1?.x, coordinates1?.y);\n    }\n    if (b.x > a.x) {\n      return new Vec2(coordinates2?.x, coordinates2?.y);\n    }\n    if (b.x === a.x) {\n      if (b.y > a.y) {\n        return new Vec2(coordinates2?.x, coordinates2?.y);\n      }\n      if (b.y < a.y) {\n        return new Vec2(coordinates1?.x, coordinates1?.y);\n      }\n      if (b.y === a.y) {\n        return new Vec2(a.x, a.y);\n      }\n    }\n  } else {\n    if (b.x > a.x) {\n      return new Vec2(coordinates1?.x, coordinates1?.y);\n    }\n    if (b.x < a.x) {\n      return new Vec2(coordinates2?.x, coordinates2?.y);\n    }\n    if (b.x === a.x) {\n      if (b.y > a.y) {\n        return new Vec2(coordinates1?.x, coordinates1?.y);\n      }\n      if (b.y < a.y) {\n        return new Vec2(coordinates2?.x, coordinates2?.y);\n      }\n      if (b.y === a.y) {\n        return new Vec2(a.x, a.y);\n      }\n    }\n  }\n  return new Vec2(a.x, a.y);\n}\n\nexport default ReRxnArrow;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Box2Abs } from 'domain/entities';\nimport { LayerMap } from './generalEnumTypes';\nimport ReObject from './reobject';\nimport { Scale } from 'domain/helpers';\nimport draw from '../draw';\nimport util from '../util';\n\nclass ReRxnPlus extends ReObject {\n  constructor(/* chem.RxnPlus */ plus) {\n    super('rxnPlus');\n    this.item = plus;\n  }\n\n  static isSelectable() {\n    return true;\n  }\n\n  hoverPath(render) {\n    const p = Scale.modelToCanvas(this.item.pp, render.options);\n    const s = render.options.microModeScale;\n    /* eslint-disable no-mixed-operators */\n    return render.paper.rect(p.x - s / 4, p.y - s / 4, s / 2, s / 2, s / 8);\n    /* eslint-enable no-mixed-operators */\n  }\n\n  drawHover(render) {\n    const ret = this.hoverPath(render).attr(render.options.hoverStyle);\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, ret);\n    return ret;\n  }\n\n  makeSelectionPlate(restruct, paper, styles) {\n    // TODO [MK] review parameters\n    return this.hoverPath(restruct.render).attr(styles.selectionStyle);\n  }\n\n  show(restruct, id, options) {\n    const render = restruct.render;\n    const centre = Scale.modelToCanvas(this.item.pp, options);\n    const path = draw.plus(render.paper, centre, options);\n    const offset = options.offset;\n    if (offset != null) path.translateAbs(offset.x, offset.y);\n    this.visel.add(path, Box2Abs.fromRelBox(util.relBox(path.getBBox())));\n  }\n}\n\nexport default ReRxnPlus;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { LayerMap } from './generalEnumTypes';\nimport ReObject from './reobject';\nimport { Scale } from 'domain/helpers';\n\nclass ReDataSGroupData extends ReObject {\n  constructor(sgroup) {\n    super('sgroupData');\n    this.sgroup = sgroup;\n  }\n\n  static isSelectable() {\n    return true;\n  }\n\n  hoverPath(render) {\n    const box = this.sgroup.dataArea;\n    const p0 = Scale.modelToCanvas(box.p0, render.options);\n    const sz = Scale.modelToCanvas(box.p1, render.options).sub(p0);\n    return render.paper.rect(p0.x, p0.y, sz.x, sz.y);\n  }\n\n  drawHover(render) {\n    const ret = this.hoverPath(render).attr(render.options.hoverStyle);\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, ret);\n    return ret;\n  }\n\n  makeSelectionPlate(restruct, paper, styles) {\n    // TODO [MK] review parameters\n    return this.hoverPath(restruct.render).attr(styles.selectionStyle);\n  }\n}\n\nexport default ReDataSGroupData;\n","import { Vec2 } from 'domain/entities';\n\nexport default class BracketParams {\n  center: Vec2;\n  bracketAngleDirection: Vec2;\n  bracketDirection: Vec2;\n  width: number;\n  height: number;\n  constructor(\n    center: Vec2,\n    bracketAngleDirection: Vec2,\n    width: number,\n    height: number,\n    bracketDirection?: Vec2,\n  ) {\n    this.center = center;\n    this.bracketAngleDirection = bracketAngleDirection;\n    this.bracketDirection =\n      bracketDirection || bracketAngleDirection.rotateSC(1, 0);\n    this.width = width;\n    this.height = height;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  Box2Abs,\n  FunctionalGroup,\n  Pile,\n  SGroup,\n  Vec2,\n  Struct,\n  MonomerMicromolecule,\n} from 'domain/entities';\nimport { SgContexts } from 'application/editor/shared/constants';\nimport ReDataSGroupData from './redatasgroupdata';\nimport ReStruct from './restruct';\nimport { Render } from '../raphaelRender';\nimport { LayerMap } from './generalEnumTypes';\nimport ReObject from './reobject';\nimport { Scale } from 'domain/helpers';\nimport draw from '../draw';\nimport util from '../util';\nimport { tfx } from 'utilities';\nimport BracketParams from '../bracket-params';\nimport { RaphaelPaper } from 'raphael';\nimport { RenderOptions } from '../render.types';\ninterface SGroupdrawBracketsOptions {\n  set: any;\n  render: Render;\n  sgroup: SGroup;\n  crossBonds: { [key: number]: Array<number> };\n  atomSet: Pile;\n  bracketBox: Box2Abs;\n  direction: Vec2;\n  lowerIndexText?: string | null;\n  upperIndexText?: string | null;\n  indexAttribute?: object;\n}\n\nclass ReSGroup extends ReObject {\n  public item: SGroup | undefined;\n  public render!: Render;\n\n  constructor(sgroup: SGroup) {\n    super('sgroup');\n    /** @type {SGroup} */\n    this.item = sgroup;\n  }\n\n  static isSelectable(): boolean {\n    return false;\n  }\n\n  /**\n   * @param remol {ReStruct}\n   * @param sgroup {SGroup}\n   * @returns {*}\n   */\n  draw(remol: ReStruct, sgroup: SGroup): any {\n    this.render = remol.render;\n    let set = this.render.paper.set();\n    const atomSet = new Pile(sgroup.atoms);\n    const crossBonds = SGroup.getCrossBonds(remol.molecule, atomSet);\n    SGroup.bracketPos(sgroup, remol.molecule, crossBonds, remol, this.render);\n    const bracketBox = sgroup.bracketBox;\n    const direction = sgroup.bracketDirection;\n    sgroup.areas = [bracketBox];\n    if (sgroup.isExpanded()) {\n      const SGroupdrawBracketsOptions: SGroupdrawBracketsOptions = {\n        set,\n        render: this.render,\n        sgroup,\n        crossBonds,\n        atomSet,\n        bracketBox,\n        direction,\n      };\n      switch (sgroup.type) {\n        case 'MUL': {\n          SGroupdrawBracketsOptions.lowerIndexText = sgroup.data.mul;\n          break;\n        }\n        case 'queryComponent': {\n          break;\n        }\n        case 'SRU': {\n          let connectivity: string = sgroup.data.connectivity || 'eu';\n          if (connectivity === 'ht') connectivity = '';\n          const subscript = sgroup.data.subscript || 'n';\n          SGroupdrawBracketsOptions.lowerIndexText = subscript;\n          SGroupdrawBracketsOptions.upperIndexText = connectivity;\n          break;\n        }\n        case 'SUP': {\n          SGroupdrawBracketsOptions.lowerIndexText = sgroup.data.name;\n          SGroupdrawBracketsOptions.upperIndexText = null;\n          SGroupdrawBracketsOptions.indexAttribute = { 'font-style': 'italic' };\n          break;\n        }\n        case 'GEN': {\n          break;\n        }\n        case 'DAT': {\n          set = drawGroupDat(remol, sgroup);\n          break;\n        }\n        default:\n          break;\n      }\n\n      // DAT S-Groups do not have brackets\n      const sgroupTypesWithBrackets = [\n        'MUL',\n        'SRU',\n        'SUP',\n        'GEN',\n        'queryComponent',\n      ];\n      if (\n        sgroupTypesWithBrackets.includes(sgroup.type) &&\n        !sgroup.isSuperatomWithoutLabel &&\n        !(sgroup instanceof MonomerMicromolecule)\n      ) {\n        SGroupdrawBrackets(SGroupdrawBracketsOptions);\n      }\n    }\n    return set;\n  }\n\n  getTextHighlightDimensions(\n    padding = 0,\n    render: Render,\n  ): { startX: number; startY: number; width: number; height: number } {\n    let startX = 0;\n    let startY = 0;\n    let width = 0;\n    let height = 0;\n    const sGroup = this.item;\n    if (sGroup) {\n      const { atomId, position } = sGroup.getContractedPosition(\n        render.ctab.molecule,\n      );\n      if (sGroup?.isContracted() && position) {\n        const reSGroupAtom = render.ctab.atoms.get(atomId);\n        const sGroupTextBoundingBox =\n          reSGroupAtom?.visel.boundingBox || reSGroupAtom?.visel.oldBoundingBox;\n        if (sGroupTextBoundingBox) {\n          const { x, y } = Scale.modelToCanvas(position, render.options);\n          const { p0, p1 } = sGroupTextBoundingBox;\n          width = p1.x - p0.x + padding * 2;\n          height = p1.y - p0.y + padding * 2;\n          startX = x - width / 2;\n          startY = y - height / 2;\n        }\n      }\n    }\n\n    return { startX, startY, width, height };\n  }\n\n  getContractedSelectionContour(render: Render): any {\n    const { paper, options } = render;\n    const { fontszInPx, radiusScaleFactor } = options;\n    const radius = fontszInPx * radiusScaleFactor * 2;\n    const { startX, startY, width, height } = this.getTextHighlightDimensions(\n      fontszInPx / 2,\n      render,\n    );\n    return paper.rect(startX, startY, width, height, radius);\n  }\n\n  makeSelectionPlate(\n    restruct: ReStruct,\n    _paper: RaphaelPaper,\n    options: any,\n  ): any | void {\n    const sgroup = this.item;\n    const functionalGroups = restruct.molecule.functionalGroups;\n    const render = restruct.render;\n    if (\n      FunctionalGroup.isContractedFunctionalGroup(sgroup?.id, functionalGroups)\n    ) {\n      return this.getContractedSelectionContour(render).attr(\n        options.selectionStyle,\n      );\n    }\n  }\n\n  drawHover(render: Render): void {\n    // eslint-disable-line max-statements\n    const options = render.options;\n    const paper = render.paper;\n    const sGroupItem = this.item;\n    if (sGroupItem) {\n      const { a0, a1, b0, b1 } = getHighlighPathInfo(sGroupItem, render);\n      const functionalGroups = render.ctab.molecule.functionalGroups;\n      const set = paper.set();\n      if (\n        FunctionalGroup.isContractedFunctionalGroup(\n          sGroupItem.id,\n          functionalGroups,\n        )\n      ) {\n        sGroupItem.hovering = this.getContractedSelectionContour(render).attr(\n          options.hoverStyle,\n        );\n      } else if (!this.selected) {\n        sGroupItem.hovering = paper\n          .path(\n            'M{0},{1}L{2},{3}L{4},{5}L{6},{7}L{0},{1}',\n            tfx(a0.x),\n            tfx(a0.y),\n            tfx(a1.x),\n            tfx(a1.y),\n            tfx(b1.x),\n            tfx(b1.y),\n            tfx(b0.x),\n            tfx(b0.y),\n          )\n          .attr(options.hoverStyle);\n      }\n      set.push(sGroupItem.hovering);\n\n      SGroup.getAtoms(render.ctab.molecule, sGroupItem).forEach((aid) => {\n        set.push(render?.ctab?.atoms?.get(aid)?.makeHoverPlate(render));\n      }, this);\n      SGroup.getBonds(render.ctab.molecule, sGroupItem).forEach((bid) => {\n        set.push(render?.ctab?.bonds?.get(bid)?.makeHoverPlate(render));\n      }, this);\n      render.ctab.addReObjectPath(LayerMap.hovering, this.visel, set);\n    }\n  }\n\n  show(restruct: ReStruct): void {\n    const render = restruct.render;\n    const sgroup = this.item;\n    if (sgroup && sgroup.data.fieldName !== 'MRV_IMPLICIT_H') {\n      const remol = render.ctab;\n      const path = this.draw(remol, sgroup);\n      restruct.addReObjectPath(LayerMap.data, this.visel, path, null, true);\n      this.setHover(this.hover, render); // TODO: fix this\n    }\n  }\n}\n\nfunction SGroupdrawBrackets({\n  set,\n  render,\n  sgroup,\n  crossBonds,\n  atomSet,\n  bracketBox,\n  direction,\n  lowerIndexText,\n  upperIndexText,\n  indexAttribute,\n}: SGroupdrawBracketsOptions): void {\n  const attachmentPoints = [...atomSet].reduce((arr, atomId) => {\n    const rgroupAttachmentPointIds =\n      render.ctab.molecule.getRGroupAttachmentPointsByAtomId(atomId);\n    return [...arr, ...rgroupAttachmentPointIds];\n  }, []);\n  const crossBondsPerAtom = Object.values(crossBonds);\n  const crossBondsValues = crossBondsPerAtom.flat();\n  const brackets = getBracketParameters(\n    atomSet,\n    crossBondsPerAtom,\n    crossBondsValues,\n    attachmentPoints,\n    bracketBox,\n    direction,\n    render,\n    sgroup.id,\n  );\n  let rightBracketIndex = -1;\n  const isBracketContainAttachment =\n    crossBondsValues.length === 2 &&\n    crossBondsPerAtom.length === 1 &&\n    !!attachmentPoints.length;\n  for (let i = 0; i < brackets.length; ++i) {\n    const bracket = brackets[i];\n    const path = draw.bracket(\n      render.paper,\n      Scale.modelToCanvas(bracket.bracketAngleDirection, render.options),\n      Scale.modelToCanvas(bracket.bracketDirection, render.options),\n      Scale.modelToCanvas(bracket.center, render.options),\n      bracket.width,\n      bracket.height,\n      render.options,\n      isBracketContainAttachment,\n    );\n    set.push(path);\n    if (\n      rightBracketIndex < 0 ||\n      brackets[rightBracketIndex].bracketAngleDirection.x <\n        bracket.bracketAngleDirection.x ||\n      (brackets[rightBracketIndex].bracketAngleDirection.x ===\n        bracket.bracketAngleDirection.x &&\n        brackets[rightBracketIndex].bracketAngleDirection.y >\n          bracket.bracketAngleDirection.y)\n    ) {\n      rightBracketIndex = i;\n    }\n  }\n  const bracketR = brackets[rightBracketIndex];\n  function renderIndex(text: string, isLowerText = false): void {\n    let path: Vec2;\n    let lowerPath: Vec2;\n    const bracketPoint1 = new Vec2(\n      set[rightBracketIndex].getPath()[1][1],\n      set[rightBracketIndex].getPath()[1][2],\n      0,\n    );\n    const bracketPoint2 = new Vec2(\n      set[rightBracketIndex].getPath()[2][1],\n      set[rightBracketIndex].getPath()[2][2],\n      0,\n    );\n    if (bracketPoint2.y === bracketPoint1.y) {\n      lowerPath =\n        bracketPoint2.x > bracketPoint1.x ? bracketPoint1 : bracketPoint2;\n    } else {\n      lowerPath =\n        bracketPoint2.y > bracketPoint1.y ? bracketPoint2 : bracketPoint1;\n    }\n    if (isLowerText) {\n      path = lowerPath;\n    } else {\n      path =\n        lowerPath.x === bracketPoint1.x && lowerPath.y === bracketPoint1.y\n          ? bracketPoint2\n          : bracketPoint1;\n    }\n\n    const indexPos = new Vec2(path.x, path.y);\n    const indexPath = render.paper.text(indexPos.x, indexPos.y, text).attr({\n      font: render.options.font,\n      'font-size': render.options.fontszsubInPx,\n    });\n    if (indexAttribute) indexPath.attr(indexAttribute);\n    const indexBox = Box2Abs.fromRelBox(util.relBox(indexPath.getBBox()));\n    const t =\n      Math.max(\n        util.shiftRayBox(\n          indexPos,\n          bracketR.bracketAngleDirection.negated(),\n          indexBox,\n        ),\n        3,\n      ) + 2;\n    indexPath.translateAbs(\n      t * bracketR.bracketAngleDirection.x,\n      t * bracketR.bracketAngleDirection.y,\n    );\n    set.push(indexPath);\n  }\n  if (lowerIndexText) {\n    renderIndex(lowerIndexText, true);\n  }\n  if (upperIndexText) renderIndex(upperIndexText);\n}\n\nfunction showValue(\n  paper: RaphaelPaper,\n  pos: Vec2 | undefined,\n  sgroup: SGroup,\n  options: RenderOptions,\n): any {\n  const text = paper.text(pos?.x, pos?.y, sgroup.data.fieldValue).attr({\n    font: options.font,\n    'font-size': options.fontszsubInPx,\n  });\n  const box = text.getBBox();\n  let rect = paper.rect(\n    box.x - 1,\n    box.y - 1,\n    box.width + 2,\n    box.height + 2,\n    3,\n    3,\n  );\n  rect = sgroup.selected\n    ? rect.attr(options.selectionStyle)\n    : rect.attr({ fill: '#fff', stroke: '#fff' });\n  const set = paper.set();\n  set.push(rect, text.toFront());\n  return set;\n}\n\nfunction drawGroupDat(restruct: ReStruct, sgroup: SGroup) {\n  SGroup.bracketPos(sgroup, restruct.molecule);\n  sgroup.areas = sgroup.bracketBox ? [sgroup.bracketBox] : [];\n\n  if (sgroup.pp === null) sgroup.calculatePP(restruct.molecule);\n\n  return sgroup.data.attached\n    ? drawAttachedDat(restruct, sgroup)\n    : drawAbsoluteDat(restruct, sgroup);\n}\n\nfunction drawAbsoluteDat(restruct: ReStruct, sgroup: SGroup): any {\n  const render = restruct.render;\n  const options = render.options;\n  const paper = render.paper;\n  const set = paper.set();\n\n  const ps = sgroup?.pp?.scaled(options.microModeScale);\n  const name = showValue(paper, ps, sgroup, options);\n\n  if (sgroup.data.context !== SgContexts.Bond) {\n    const box = util.relBox(name.getBBox());\n    name.translateAbs(0.5 * box.width, -0.5 * box.height);\n  }\n\n  set.push(name);\n\n  const sbox = Box2Abs.fromRelBox(util.relBox(name.getBBox()));\n  sgroup.dataArea = sbox.transform(Scale.canvasToModel, render.options);\n\n  if (!restruct.sgroupData.has(sgroup.id)) {\n    restruct.sgroupData.set(sgroup.id, new ReDataSGroupData(sgroup));\n  }\n\n  return set;\n}\n\nfunction drawAttachedDat(restruct: ReStruct, sgroup: SGroup): any {\n  const render = restruct.render;\n  const options = render.options;\n  const paper = render.paper;\n  const set = paper.set();\n\n  SGroup.getAtoms(restruct, sgroup).forEach((aid) => {\n    const atom = restruct.atoms.get(aid);\n    if (atom) {\n      const p = Scale.modelToCanvas(atom.a.pp, options);\n      const bb = atom.visel.boundingBox;\n      if (bb !== null) p.x = Math.max(p.x, bb.p1.x);\n      p.x += options.lineWidth; // shift a bit to the right\n      const nameI = showValue(paper, p, sgroup, options);\n      const boxI = util.relBox(nameI.getBBox());\n      nameI.translateAbs(0.5 * boxI.width, -0.3 * boxI.height);\n      set.push(nameI);\n      let sboxI = Box2Abs.fromRelBox(util.relBox(nameI.getBBox()));\n      sboxI = sboxI.transform(Scale.canvasToModel, render.options);\n      sgroup.areas.push(sboxI);\n    }\n  });\n\n  return set;\n}\n\nfunction getBracketParameters(\n  atomSet: Pile,\n  crossBondsPerAtom: Array<Array<number>>,\n  crossBondsValues: Array<number>,\n  attachmentPoints: number[],\n  bracketBox: Box2Abs,\n  direction: Vec2,\n  render: Render,\n  id: number,\n) {\n  const mol = render.ctab.molecule;\n  const brackets: BracketParams[] = [];\n  const bracketDirection = direction.rotateSC(1, 0);\n\n  if (crossBondsValues.length < 2) {\n    getBracketParamersWithCrossBondsLessThan2(\n      direction,\n      bracketDirection,\n      bracketBox,\n      brackets,\n    );\n  } else if (crossBondsValues.length === 2 && crossBondsPerAtom.length === 2) {\n    getBracketParamersWithCrossBondsEquals2(\n      mol,\n      crossBondsValues,\n      id,\n      render,\n      attachmentPoints,\n      brackets,\n    );\n  } else if (crossBondsValues.length === 2 && crossBondsPerAtom.length === 1) {\n    getBracketParamersWithCrossBondsMoreThan2OnOneAtom(\n      crossBondsValues as [number, number],\n      mol,\n      attachmentPoints,\n      render,\n      brackets,\n    );\n  } else {\n    for (let i = 0; i < crossBondsValues.length; ++i) {\n      const bond = mol.bonds.get(Number(crossBondsValues[i]));\n      const center = bond?.getCenter(mol);\n      const direction = atomSet.has(bond?.begin)\n        ? bond?.getDir(mol)\n        : bond?.getDir(mol).negated();\n      if (center && direction) {\n        brackets.push(\n          new BracketParams(center, direction, 0.2, bracketBox.sz().y),\n        );\n      }\n    }\n  }\n  return brackets;\n}\n\nfunction getBracketParamersWithCrossBondsMoreThan2OnOneAtom(\n  crossBondsValues: [number, number],\n  mol: Struct,\n  attachmentPoints: number[],\n  render: Render,\n  brackets: BracketParams[],\n) {\n  let notTemplateShapeFirstAtom = false;\n  const bondDirections: Vec2[] = crossBondsValues.map((value) => {\n    const bond = mol.bonds.get(Number(value));\n    return bond?.getDir(mol) || new Vec2();\n  });\n  // if bonds direction is clockwise, then negated\n  const needNegated =\n    Vec2.crossProduct(bondDirections[0], bondDirections[1]) > 0;\n  notTemplateShapeFirstAtom =\n    Math.abs(Number(crossBondsValues[0]) - Number(crossBondsValues[1])) === 1;\n  if (notTemplateShapeFirstAtom && !needNegated) {\n    crossBondsValues.reverse();\n  }\n\n  for (let i = 0; i < crossBondsValues.length; ++i) {\n    const bond = mol.bonds.get(Number(crossBondsValues[i]));\n    let bondDirection = bond?.getDir(mol) || new Vec2();\n    let bracketDirection: Vec2;\n    let bracketAngleDirection: Vec2;\n    let attachmentDirection: Vec2;\n    if (attachmentPoints.length !== 2) {\n      if (needNegated && notTemplateShapeFirstAtom) {\n        bondDirection = bondDirection.negated();\n      }\n      bondDirection = i === 0 ? bondDirection : bondDirection.negated();\n      bracketDirection =\n        i === 0\n          ? bondDirection.rotateSC(1, 0).negated()\n          : bondDirection.rotateSC(1, 0);\n      bracketAngleDirection = bondDirection;\n    } else {\n      attachmentPoints = attachmentPoints.sort(\n        (point1, point2) => point1 - point2,\n      );\n      // if there are 2 attachment points then make brackets parallel to attachments\n      attachmentDirection =\n        render.ctab.rgroupAttachmentPoints.get(attachmentPoints[i])\n          ?.lineDirectionVector || new Vec2();\n      bracketDirection = attachmentDirection.negated();\n      bracketAngleDirection =\n        i === 0\n          ? bracketDirection.rotateSC(1, 0)\n          : bracketDirection.rotateSC(1, 0).negated();\n    }\n    brackets.push(\n      new BracketParams(\n        bond?.getCenter(mol) || new Vec2(),\n        bracketAngleDirection,\n        0.2,\n        attachmentPoints.length ? 1.8 : 1.0,\n        bracketDirection,\n      ),\n    );\n  }\n  return { crossBondsValues, attachmentPoints };\n}\n\nfunction getBracketParamersWithCrossBondsEquals2(\n  mol: Struct,\n  crossBondsValues: number[],\n  id: number,\n  render: Render,\n  attachmentPoints: number[],\n  brackets: BracketParams[],\n) {\n  const bond1 = mol.bonds.get(Number(crossBondsValues[0]));\n  const bond2 = mol.bonds.get(Number(crossBondsValues[1]));\n  if (bond1 && bond2) {\n    const leftCenter = bond1.getCenter(mol);\n    const rightCenter = bond2.getCenter(mol);\n    let leftShift = -1;\n    let rightShift = -1;\n    let bracketShift = -1;\n    let bracketShiftNegated = -1;\n    const centerConnection = Vec2.centre(leftCenter, rightCenter);\n    const rightDirection = Vec2.diff(rightCenter, leftCenter).normalized();\n    const leftDirection = rightDirection.negated();\n    const bracketDirection = rightDirection.rotateSC(1, 0);\n    const bracketDirectionNegated = bracketDirection.negated();\n\n    mol?.sGroupForest?.children?.get(id)?.forEach((sgid) => {\n      let boundingBox = render?.ctab?.sgroups?.get(sgid)?.visel.boundingBox;\n      boundingBox =\n        boundingBox\n          ?.translate((render.options.offset || new Vec2()).negated())\n          .transform(Scale.canvasToModel, render.options) || new Box2Abs();\n      leftShift = Math.max(\n        leftShift,\n        util.shiftRayBox(leftCenter, leftDirection, boundingBox),\n      );\n      rightShift = Math.max(\n        rightShift,\n        util.shiftRayBox(rightCenter, rightDirection, boundingBox),\n      );\n      bracketShift = Math.max(\n        bracketShift,\n        util.shiftRayBox(centerConnection, bracketDirection, boundingBox),\n      );\n      bracketShiftNegated = Math.max(\n        bracketShiftNegated,\n        util.shiftRayBox(\n          centerConnection,\n          bracketDirectionNegated,\n          boundingBox,\n        ),\n      );\n    });\n    leftShift = Math.max(leftShift + 0.2, 0);\n    rightShift = Math.max(rightShift + 0.2, 0);\n    bracketShift = Math.max(\n      Math.max(bracketShift, bracketShiftNegated) + 0.1,\n      0,\n    );\n    const bracketWidth = 0.25;\n    let bracketHeight = 1.5 + bracketShift;\n    if (attachmentPoints.length) {\n      bracketHeight = 2 + 2 * Math.sin(Math.PI / 6) + bracketShift;\n    }\n    brackets.push(\n      new BracketParams(\n        leftCenter.addScaled(leftDirection, leftShift),\n        leftDirection,\n        bracketWidth,\n        bracketHeight,\n      ),\n      new BracketParams(\n        rightCenter.addScaled(rightDirection, rightShift),\n        rightDirection,\n        bracketWidth,\n        bracketHeight,\n      ),\n    );\n  }\n}\n\nfunction getBracketParamersWithCrossBondsLessThan2(\n  direction: Vec2,\n  bracketDirection: Vec2,\n  bracketBox: Box2Abs,\n  brackets: BracketParams[],\n) {\n  direction = direction || new Vec2(1, 0);\n  bracketDirection = bracketDirection || direction.rotateSC(1, 0);\n  const bracketWidth = Math.min(0.25, bracketBox.sz().x * 0.3);\n  const leftCenter = Vec2.lc2(\n    direction,\n    bracketBox.p0.x,\n    bracketDirection,\n    0.5 * (bracketBox.p0.y + bracketBox.p1.y),\n  );\n  const rightCenter = Vec2.lc2(\n    direction,\n    bracketBox.p1.x,\n    bracketDirection,\n    0.5 * (bracketBox.p0.y + bracketBox.p1.y),\n  );\n  const bracketHeight = bracketBox.sz().y;\n\n  brackets.push(\n    new BracketParams(\n      leftCenter,\n      direction.negated(),\n      bracketWidth,\n      bracketHeight,\n    ),\n    new BracketParams(rightCenter, direction, bracketWidth, bracketHeight),\n  );\n}\n\n/**\n * @param sgroup {SGroup}\n * @param render {Render}\n * @returns {{a1: Vec2, size: number | number, startY: number, startX: number, b0: Vec2, a0: Vec2, b1: Vec2}}\n */\nfunction getHighlighPathInfo(\n  sgroup: SGroup,\n  render: Render,\n): {\n  a0: Vec2;\n  a1: Vec2;\n  b0: Vec2;\n  b1: Vec2;\n  startX: number;\n  startY: number;\n  size: number;\n} {\n  const options = render.options;\n  let bracketBox = sgroup.bracketBox.transform(Scale.modelToCanvas, options);\n  const lineWidth = options.lineWidth;\n  const vext = new Vec2(lineWidth * 4, lineWidth * 6);\n  bracketBox = bracketBox.extend(vext, vext);\n  const direction = sgroup.bracketDirection;\n  const bracketDirection = direction.rotateSC(1, 0);\n  const a0 = Vec2.lc2(\n    direction,\n    bracketBox.p0.x,\n    bracketDirection,\n    bracketBox.p0.y,\n  );\n  const a1 = Vec2.lc2(\n    direction,\n    bracketBox.p0.x,\n    bracketDirection,\n    bracketBox.p1.y,\n  );\n  const b0 = Vec2.lc2(\n    direction,\n    bracketBox.p1.x,\n    bracketDirection,\n    bracketBox.p0.y,\n  );\n  const b1 = Vec2.lc2(\n    direction,\n    bracketBox.p1.x,\n    bracketDirection,\n    bracketBox.p1.y,\n  );\n  const size = options.contractedFunctionalGroupSize;\n  let startX = (b0.x + a0.x) / 2 - size / 2;\n  let startY = (a1.y + a0.y) / 2 - size / 2;\n  const { position: contractedPosition } = sgroup.getContractedPosition(\n    render.ctab.molecule,\n  );\n  if (contractedPosition) {\n    const shift = new Vec2(size / 2, size / 2, 0);\n    const hoverPp = Vec2.diff(contractedPosition.scaled(40), shift);\n    startX = hoverPp.x;\n    startY = hoverPp.y;\n  }\n  return {\n    a0,\n    a1,\n    b0,\n    b1,\n    startX,\n    startY,\n    size,\n  };\n}\n\nexport default ReSGroup;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Box2Abs, SimpleObjectMode, Vec2 } from 'domain/entities';\n\nimport { LayerMap } from './generalEnumTypes';\nimport ReObject from './reobject';\nimport ReStruct from './restruct';\nimport { Render } from '../raphaelRender';\nimport { Scale } from 'domain/helpers';\nimport draw from '../draw';\nimport util from '../util';\nimport { tfx } from 'utilities';\n\ninterface MinDistanceWithReferencePoint {\n  minDist: number;\n  refPoint: Vec2 | null;\n}\ninterface StyledPath {\n  path: any;\n  stylesApplied: boolean;\n}\nclass ReSimpleObject extends ReObject {\n  private item: any;\n  private selectionSet: any;\n  private selectionPointsSet: any;\n\n  constructor(simpleObject: any) {\n    super('simpleObject');\n    this.item = simpleObject;\n  }\n\n  static isSelectable(): boolean {\n    return true;\n  }\n\n  calcDistance(p: Vec2, s: any): MinDistanceWithReferencePoint {\n    const point: Vec2 = new Vec2(p.x, p.y);\n\n    const distRef: MinDistanceWithReferencePoint =\n      this.getReferencePointDistance(p);\n    const item = this.item;\n    const mode = item.mode;\n    const pos = item.pos;\n    let dist: number;\n\n    switch (mode) {\n      case SimpleObjectMode.ellipse: {\n        const rad = Vec2.diff(pos[1], pos[0]);\n        const rx = rad.x / 2;\n        const ry = rad.y / 2;\n        const center = Vec2.sum(pos[0], new Vec2(rx, ry));\n        const pointToCenter = Vec2.diff(point, center);\n        if (rx !== 0 && ry !== 0) {\n          dist = Math.abs(\n            1 -\n              (pointToCenter.x * pointToCenter.x) / (rx * rx) -\n              (pointToCenter.y * pointToCenter.y) / (ry * ry),\n          );\n        } else {\n          // in case rx or ry is equal to 0 we have a line as a trivial case of ellipse\n          // in such case distance need to be calculated as a distance between line and current point\n          dist = point.calculateDistanceToLine([pos[0], pos[1]]);\n        }\n        break;\n      }\n      case SimpleObjectMode.rectangle: {\n        const topX = Math.min(pos[0].x, pos[1].x);\n        const topY = Math.min(pos[0].y, pos[1].y);\n        const bottomX = Math.max(pos[0].x, pos[1].x);\n        const bottomY = Math.max(pos[0].y, pos[1].y);\n\n        const distances: Array<number> = [];\n\n        if (point.x >= topX && point.x <= bottomX) {\n          if (point.y < topY) {\n            distances.push(topY - point.y);\n          } else if (point.y > bottomY) {\n            distances.push(point.y - bottomY);\n          } else {\n            distances.push(point.y - topY, bottomY - point.y);\n          }\n        }\n        if (point.x < topX && point.y < topY) {\n          distances.push(Vec2.dist(new Vec2(topX, topY), point));\n        }\n        if (point.x > bottomX && point.y > bottomY) {\n          distances.push(Vec2.dist(new Vec2(bottomX, bottomY), point));\n        }\n        if (point.x < topX && point.y > bottomY) {\n          distances.push(Vec2.dist(new Vec2(topX, bottomY), point));\n        }\n        if (point.x > bottomX && point.y < topY) {\n          distances.push(Vec2.dist(new Vec2(bottomX, topY), point));\n        }\n        if (point.y >= topY && point.y <= bottomY) {\n          if (point.x < topX) {\n            distances.push(topX - point.x);\n          } else if (point.x > bottomX) {\n            distances.push(point.x - bottomX);\n          } else {\n            distances.push(point.x - topX, bottomX - point.x);\n          }\n        }\n        dist = Math.min(...distances);\n        break;\n      }\n      case SimpleObjectMode.line: {\n        dist = point.calculateDistanceToLine([pos[0], pos[1]]);\n        break;\n      }\n\n      default: {\n        throw new Error('Unsupported shape type');\n      }\n    }\n\n    const refPoint: Vec2 | null =\n      distRef.minDist <= 8 / s ? distRef.refPoint : null;\n    // distance is a smallest between dist to figure and it's reference points\n    dist = Math.min(distRef.minDist, dist);\n    return { minDist: dist, refPoint };\n  }\n\n  getReferencePointDistance(p: Vec2): MinDistanceWithReferencePoint {\n    const dist: any = [];\n    const refPoints = this.getReferencePoints();\n    refPoints.forEach((rp) => {\n      dist.push({ minDist: Math.abs(Vec2.dist(p, rp)), refPoint: rp });\n    });\n\n    const minDist: MinDistanceWithReferencePoint = dist.reduce(\n      (acc, current) =>\n        !acc ? current : acc.minDist < current.minDist ? acc : current,\n      null,\n    );\n\n    return minDist;\n  }\n\n  getReferencePoints(onlyOnObject = false): Array<Vec2> {\n    const refPoints: Array<Vec2> = [];\n    switch (this.item.mode) {\n      case SimpleObjectMode.ellipse:\n      case SimpleObjectMode.rectangle: {\n        const p0: Vec2 = new Vec2(\n          Math.min(this.item.pos[0].x, this.item.pos[1].x),\n          Math.min(this.item.pos[0].y, this.item.pos[1].y),\n        );\n        const w = Math.abs(Vec2.diff(this.item.pos[0], this.item.pos[1]).x);\n        const h = Math.abs(Vec2.diff(this.item.pos[0], this.item.pos[1]).y);\n\n        refPoints.push(\n          new Vec2(p0.x + 0.5 * w, p0.y),\n          new Vec2(p0.x + w, p0.y + 0.5 * h),\n          new Vec2(p0.x + 0.5 * w, p0.y + h),\n          new Vec2(p0.x, p0.y + 0.5 * h),\n        );\n        if (!onlyOnObject || this.item.mode === SimpleObjectMode.rectangle) {\n          refPoints.push(\n            p0,\n            new Vec2(p0.x, p0.y + h),\n            new Vec2(p0.x + w, p0.y + h),\n            new Vec2(p0.x + w, p0.y),\n          );\n        }\n        break;\n      }\n      case SimpleObjectMode.line: {\n        this.item.pos.forEach((i) => refPoints.push(new Vec2(i.x, i.y, 0)));\n        break;\n      }\n\n      default: {\n        throw new Error('Unsupported shape type');\n      }\n    }\n    return refPoints;\n  }\n\n  getFigureHoverPath(path: any, render: Render, isBorder = true) {\n    if (isBorder) {\n      return path.attr({ ...render.options.hoverStyle, fill: 'none' });\n    } else {\n      return path.attr(render.options.innerHoverStyle);\n    }\n  }\n\n  hoverPath(render: Render): Array<StyledPath> {\n    const point: Array<Vec2> = [];\n\n    this.item.pos.forEach((p, index) => {\n      point[index] = Scale.modelToCanvas(p, render.options);\n    });\n    const scaleFactor = render.options.microModeScale;\n\n    const paths: Array<StyledPath> = [];\n\n    // TODO: It seems that inheritance will be the better approach here\n    const lineOffset = scaleFactor / 8;\n    switch (this.item.mode) {\n      case SimpleObjectMode.ellipse: {\n        const rad = Vec2.diff(point[1], point[0]);\n        const rx = rad.x / 2;\n        const ry = rad.y / 2;\n        const centerX = tfx(point[0].x + rx);\n        const centerY = tfx(point[0].y + ry);\n        const outerBorderEllipse = render.paper.ellipse(\n          centerX,\n          centerY,\n          tfx(Math.abs(rx) + lineOffset),\n          tfx(Math.abs(ry) + lineOffset),\n        );\n        paths.push({\n          path: this.getFigureHoverPath(outerBorderEllipse, render),\n          stylesApplied: true,\n        });\n\n        const fillEllipse = render.paper.ellipse(\n          centerX,\n          centerY,\n          tfx(Math.abs(rx)),\n          tfx(Math.abs(ry)),\n        );\n        paths.push({\n          path: this.getFigureHoverPath(fillEllipse, render, false),\n          stylesApplied: true,\n        });\n        if (\n          Math.abs(rx) - scaleFactor / 8 > 0 &&\n          Math.abs(ry) - scaleFactor / 8 > 0\n        ) {\n          const innerBorderEllipse = render.paper.ellipse(\n            centerX,\n            centerY,\n            tfx(Math.abs(rx) - lineOffset),\n            tfx(Math.abs(ry) - lineOffset),\n          );\n          paths.push({\n            path: this.getFigureHoverPath(innerBorderEllipse, render),\n            stylesApplied: true,\n          });\n        }\n        break;\n      }\n\n      case SimpleObjectMode.rectangle: {\n        const leftX = Math.min(point[0].x, point[1].x);\n        const topY = Math.min(point[0].y, point[1].y);\n        const rightX = Math.max(point[0].x, point[1].x) - leftX;\n        const bottomY = Math.max(point[0].y, point[1].y) - topY;\n\n        const outerBorderRect = render.paper.rect(\n          tfx(leftX - lineOffset),\n          tfx(topY - lineOffset),\n          tfx(rightX + 2 * lineOffset),\n          tfx(bottomY + 2 * lineOffset),\n        );\n        paths.push({\n          path: this.getFigureHoverPath(outerBorderRect, render),\n          stylesApplied: true,\n        });\n        const fillRect = render.paper.rect(\n          tfx(leftX),\n          tfx(topY),\n          tfx(rightX),\n          tfx(bottomY),\n        );\n        paths.push({\n          path: this.getFigureHoverPath(fillRect, render, false),\n          stylesApplied: true,\n        });\n        if (rightX - 2 * lineOffset > 0 && bottomY - 2 * lineOffset > 0) {\n          const innerRect = render.paper.rect(\n            tfx(leftX + lineOffset),\n            tfx(topY + lineOffset),\n            tfx(rightX - 2 * lineOffset),\n            tfx(bottomY - 2 * lineOffset),\n          );\n          paths.push({\n            path: this.getFigureHoverPath(innerRect, render),\n            stylesApplied: true,\n          });\n        }\n\n        break;\n      }\n      case SimpleObjectMode.line: {\n        // TODO: reuse this code for polyline\n        const poly: Array<string | number> = [];\n\n        const angle = Math.atan(\n          (point[1].y - point[0].y) / (point[1].x - point[0].x),\n        );\n\n        const p0 = { x: 0, y: 0 };\n        const p1 = { x: 0, y: 0 };\n\n        const k = point[0].x > point[1].x ? -1 : 1;\n\n        p0.x = point[0].x - k * ((scaleFactor / 8) * Math.cos(angle));\n        p0.y = point[0].y - k * ((scaleFactor / 8) * Math.sin(angle));\n        p1.x = point[1].x + k * ((scaleFactor / 8) * Math.cos(angle));\n        p1.y = point[1].y + k * ((scaleFactor / 8) * Math.sin(angle));\n\n        poly.push(\n          'M',\n          p0.x + ((k * scaleFactor) / 8) * Math.sin(angle),\n          p0.y - ((k * scaleFactor) / 8) * Math.cos(angle),\n        );\n        poly.push(\n          'L',\n          p1.x + ((k * scaleFactor) / 8) * Math.sin(angle),\n          p1.y - ((k * scaleFactor) / 8) * Math.cos(angle),\n        );\n        poly.push(\n          'L',\n          p1.x - ((k * scaleFactor) / 8) * Math.sin(angle),\n          p1.y + ((k * scaleFactor) / 8) * Math.cos(angle),\n        );\n        poly.push(\n          'L',\n          p0.x - ((k * scaleFactor) / 8) * Math.sin(angle),\n          p0.y + ((k * scaleFactor) / 8) * Math.cos(angle),\n        );\n        poly.push(\n          'L',\n          p0.x + ((k * scaleFactor) / 8) * Math.sin(angle),\n          p0.y - ((k * scaleFactor) / 8) * Math.cos(angle),\n        );\n        paths.push({\n          path: render.paper.path(poly).attr(render.options.hoverStyle),\n          stylesApplied: true,\n        });\n        break;\n      }\n      default: {\n        throw new Error('Unsupported shape type');\n      }\n    }\n\n    return paths;\n  }\n\n  drawHover(render: Render): Array<any> {\n    const paths: Array<any> = this.hoverPath(render).map((enhPath) => {\n      if (!enhPath.stylesApplied) {\n        return enhPath.path.attr(render.options.hoverStyle);\n      }\n      return enhPath.path;\n    });\n\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, paths);\n    return paths;\n  }\n\n  makeSelectionPlate(restruct: ReStruct, paper: any, styles: any): any {\n    const pos = this.item.pos.map((p) => {\n      return Scale.modelToCanvas(p, restruct.render.options) || new Vec2();\n    });\n\n    const refPoints = this.getReferencePoints();\n    const scaleFactor = restruct.render.options.microModeScale;\n    this.selectionSet = restruct.render.paper.set();\n    this.selectionPointsSet = restruct.render.paper.set();\n    this.selectionSet.push(\n      generatePath(this.item.mode, paper, pos).attr(\n        styles.selectionStyleSimpleObject,\n      ),\n    );\n    refPoints.forEach((rp) => {\n      const scaledRP = Scale.modelToCanvas(rp, restruct.render.options);\n      this.selectionPointsSet.push(\n        restruct.render.paper\n          .circle(scaledRP.x, scaledRP.y, scaleFactor / 8)\n          .attr({ fill: 'black' }),\n      );\n    });\n    restruct.addReObjectPath(\n      LayerMap.selectionPoints,\n      this.visel,\n      this.selectionPointsSet,\n    );\n    return this.selectionSet;\n  }\n\n  togglePoints(displayFlag: boolean) {\n    displayFlag\n      ? this.selectionPointsSet?.show()\n      : this.selectionPointsSet?.hide();\n  }\n\n  show(restruct: ReStruct, options: any): void {\n    const render = restruct.render;\n    const pos = this.item.pos.map((p) => {\n      return Scale.modelToCanvas(p, options) || new Vec2();\n    });\n\n    const path = generatePath(this.item.mode, render.paper, pos);\n\n    const offset = options.offset;\n    if (offset != null) path.translateAbs(offset.x, offset.y);\n\n    this.visel.add(path, Box2Abs.fromRelBox(util.relBox(path.getBBox())));\n  }\n}\n\nfunction generatePath(mode: SimpleObjectMode, paper, pos: [Vec2, Vec2]): any {\n  let path: any;\n  switch (mode) {\n    case SimpleObjectMode.ellipse: {\n      path = draw.ellipse(paper, pos);\n      break;\n    }\n    case SimpleObjectMode.rectangle: {\n      path = draw.rectangle(paper, pos);\n      break;\n    }\n    case SimpleObjectMode.line: {\n      path = draw.line(paper, pos);\n      break;\n    }\n    default: {\n      throw new Error('Unsupported shape type');\n    }\n  }\n\n  return path;\n}\n\nexport default ReSimpleObject;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Bond, Vec2 } from 'domain/entities';\n\nimport { LayerMap } from './generalEnumTypes';\nimport ReObject from './reobject';\nimport { Scale } from 'domain/helpers';\nimport { tfx } from 'utilities';\n\nclass ReLoop extends ReObject {\n  constructor(loop) {\n    super('loop');\n    this.loop = loop;\n    this.centre = new Vec2();\n    this.radius = new Vec2();\n  }\n\n  static isSelectable() {\n    return false;\n  }\n\n  show(restruct, rlid, options) {\n    // eslint-disable-line max-statements\n    const render = restruct.render;\n    const paper = render.paper;\n    const molecule = restruct.molecule;\n    const loop = this.loop;\n    this.centre = new Vec2();\n    loop.hbs.forEach((hbid) => {\n      const hb = molecule.halfBonds.get(hbid);\n      const bond = restruct.bonds.get(hb.bid);\n      const apos = Scale.modelToCanvas(\n        restruct.atoms.get(hb.begin).a.pp,\n        options,\n      );\n      if (bond.b.type !== Bond.PATTERN.TYPE.AROMATIC) loop.aromatic = false;\n      this.centre.add_(apos); // eslint-disable-line no-underscore-dangle\n    });\n    loop.convex = true;\n    for (let k = 0; k < this.loop.hbs.length; ++k) {\n      const hba = molecule.halfBonds.get(loop.hbs[k]);\n      const hbb = molecule.halfBonds.get(loop.hbs[(k + 1) % loop.hbs.length]);\n      const angle = Math.atan2(\n        Vec2.cross(hba.dir, hbb.dir),\n        Vec2.dot(hba.dir, hbb.dir),\n      );\n      if (angle > 0) loop.convex = false;\n    }\n\n    this.centre = this.centre.scaled(1.0 / loop.hbs.length);\n    this.radius = -1;\n    loop.hbs.forEach((hbid) => {\n      const hb = molecule.halfBonds.get(hbid);\n      const apos = Scale.modelToCanvas(\n        restruct.atoms.get(hb.begin).a.pp,\n        options,\n      );\n      const bpos = Scale.modelToCanvas(\n        restruct.atoms.get(hb.end).a.pp,\n        options,\n      );\n      const n = Vec2.diff(bpos, apos).rotateSC(1, 0).normalized();\n      const dist = Vec2.dot(Vec2.diff(apos, this.centre), n);\n      this.radius = this.radius < 0 ? dist : Math.min(this.radius, dist);\n    });\n    this.radius *= 0.7;\n    if (!loop.aromatic) return;\n    let path = null;\n    if (loop.convex && options.aromaticCircle) {\n      path = paper.circle(this.centre.x, this.centre.y, this.radius).attr({\n        stroke: '#000',\n        'stroke-width': options.lineattr['stroke-width'],\n      });\n    } else {\n      let pathStr = '';\n      for (let k = 0; k < loop.hbs.length; ++k) {\n        const hba = molecule.halfBonds.get(loop.hbs[k]);\n        const hbb = molecule.halfBonds.get(loop.hbs[(k + 1) % loop.hbs.length]);\n        const angle = Math.atan2(\n          Vec2.cross(hba.dir, hbb.dir),\n          Vec2.dot(hba.dir, hbb.dir),\n        );\n        const halfAngle = (Math.PI - angle) / 2;\n        const dir = hbb.dir.rotate(halfAngle);\n        const pi = Scale.modelToCanvas(\n          restruct.atoms.get(hbb.begin).a.pp,\n          options,\n        );\n        let sin = Math.sin(halfAngle);\n        const minSin = 0.1;\n        if (Math.abs(sin) < minSin) sin = (sin * minSin) / Math.abs(sin);\n        const offset = options.bondSpace / sin;\n        const qi = pi.addScaled(dir, -offset);\n        pathStr += k === 0 ? 'M' : 'L';\n        pathStr += tfx(qi.x) + ',' + tfx(qi.y);\n      }\n      pathStr += 'Z';\n      path = paper.path(pathStr).attr({\n        stroke: '#000',\n        'stroke-width': options.lineattr['stroke-width'],\n        'stroke-dasharray': '- ',\n      });\n    }\n    restruct.addReObjectPath(LayerMap.data, this.visel, path, null, true);\n  }\n\n  isValid(struct, rlid) {\n    const halfBonds = struct.halfBonds;\n    return this.loop.hbs.every(\n      (hbid) => halfBonds.has(hbid) && halfBonds.get(hbid).loop === rlid,\n    );\n  }\n}\n\nexport default ReLoop;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  DraftInlineStyleType,\n  RawDraftContentBlock,\n  RawDraftContentState,\n  RawDraftInlineStyleRange,\n} from 'draft-js';\nimport { Box2Abs, Text, TextCommand, Vec2 } from 'domain/entities';\nimport { flatten, isEqual } from 'lodash/fp';\n\nimport { LayerMap } from './generalEnumTypes';\nimport ReObject from './reobject';\nimport ReStruct from './restruct';\nimport { Scale } from 'domain/helpers';\nimport { RaphaelBaseElement } from 'raphael';\n\ninterface CustomRawDraftInlineStyleRange\n  extends Omit<RawDraftInlineStyleRange, 'style'> {\n  style:\n    | DraftInlineStyleType\n    | TextCommand.Subscript\n    | TextCommand.Superscript\n    | TextCommand.FontSize;\n}\n\nconst SCALE = 40; // from ketcher-core\n\nclass ReText extends ReObject {\n  private item: Text;\n  paths: Array<Array<RaphaelBaseElement>> = [];\n\n  constructor(text: Text) {\n    super('text');\n    this.item = text;\n  }\n\n  static isSelectable() {\n    return true;\n  }\n\n  getReferencePoints(): Array<Vec2> {\n    if (!this.paths.length) return [];\n\n    const { p0, p1 } = this.getRelBox(this.paths);\n\n    const p = this.item.position;\n    const width = Math.abs(Vec2.diff(p0, p1).x) / SCALE;\n    const height = Math.abs(Vec2.diff(p0, p1).y) / SCALE;\n\n    const refPoints: Array<Vec2> = [];\n\n    refPoints.push(\n      this.item.position,\n      new Vec2(p.x, p.y + height),\n      new Vec2(p.x + width, p.y + height),\n      new Vec2(p.x + width, p.y),\n    );\n\n    return refPoints;\n  }\n\n  getVBoxObj(): Box2Abs {\n    const [leftTopPoint, _, rightBottomPoint] = this.getReferencePoints();\n    return new Box2Abs(leftTopPoint, rightBottomPoint);\n  }\n\n  hoverPath(render: any): any {\n    const { p0, p1 } = this.getRelBox(this.paths);\n    const topLeft = p0.sub(render.options.offset);\n    const { x: width, y: height } = p1.sub(p0);\n\n    return render.paper.rect(topLeft.x, topLeft.y, width, height, 5);\n  }\n\n  getRelBox(paths: Array<Array<RaphaelBaseElement>>): { p0: Vec2; p1: Vec2 } {\n    const firstElOfFirstRow: RaphaelBaseElement = paths[0][0];\n    const leftEdge = firstElOfFirstRow.getBBox().x;\n\n    const firstRow: Array<RaphaelBaseElement> = paths[0];\n    const topEdge: number = Math.min(\n      ...firstRow.map((path) => path.getBBox().y),\n    );\n\n    const widestRow: Array<RaphaelBaseElement> = paths.reduce(\n      (widestRow, nextRow) =>\n        this.getRowWidth(nextRow) > this.getRowWidth(widestRow)\n          ? nextRow\n          : widestRow,\n      paths[0],\n    );\n    const lastElOfWidestRow: RaphaelBaseElement =\n      widestRow[widestRow.length - 1];\n    const rightEdge: number =\n      lastElOfWidestRow.getBBox().x + lastElOfWidestRow.getBBox().width;\n\n    const lastRow: Array<RaphaelBaseElement> = paths[paths.length - 1];\n    const bottomEdge: number = Math.max(\n      ...lastRow.map((path) => path.getBBox().y + path.getBBox().height),\n    );\n\n    return {\n      p0: new Vec2(leftEdge, topEdge),\n      p1: new Vec2(rightEdge, bottomEdge),\n    };\n  }\n\n  getRowWidth(row: Array<RaphaelBaseElement>): number {\n    return row.reduce((rowWidth, nextRow) => {\n      rowWidth += nextRow.getBBox().width;\n      return rowWidth;\n    }, 0);\n  }\n\n  drawHover(render: any): any {\n    if (!this.paths.length) return null;\n    const ret = this.hoverPath(render).attr(render.options.hoverStyle);\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, ret);\n    return ret;\n  }\n\n  makeSelectionPlate(restruct: ReStruct, paper: any, options: any): any {\n    if (!this.paths.length || !paper) return null;\n    return this.hoverPath(restruct.render).attr(options.selectionStyle);\n  }\n\n  show(restruct: ReStruct, _id: number, options: any): void {\n    const render = restruct.render;\n    const paper = render.paper;\n    const paperScale = Scale.modelToCanvas(this.item.position!, options);\n\n    let shiftY = 0;\n    this.paths = [];\n    // TODO: create parser in ketcher-core package\n    const rawContentState: RawDraftContentState | null = this.item.content\n      ? (JSON.parse(this.item.content) as RawDraftContentState)\n      : null;\n    if (!rawContentState) {\n      return;\n    }\n\n    rawContentState.blocks.forEach((block: RawDraftContentBlock) => {\n      const ranges: Array<[number, number, Record<string, any>]> =\n        this.getRanges(block, options);\n      let shiftX = 0;\n      const row: Array<RaphaelBaseElement> = [];\n      ranges.forEach(([start, end, styles]) => {\n        block.text = block.text.replace(/[^\\S\\r\\n]/g, '\\u00a0');\n        const path = paper\n          .text(\n            paperScale.x,\n            paperScale.y,\n            block.text.substring(start, end + 1) || '\\u00a0',\n          )\n          .attr({\n            font: options.font,\n            'font-size': options.fontszInPx,\n            'text-anchor': 'start',\n            fill: '#000000',\n            ...styles,\n          });\n        path.translateAbs(shiftX, shiftY + (styles.shiftY || 0));\n        row.push(path);\n        shiftX += path.getBBox().width;\n      });\n\n      this.paths.push(row);\n\n      const { p0, p1 } = this.getRelBox([row]);\n      shiftY += Math.abs(Vec2.diff(p0, p1).y);\n    });\n\n    this.item.setPos(this.getReferencePoints());\n\n    render.ctab.addReObjectPath(\n      LayerMap.data,\n      this.visel,\n      flatten(this.paths),\n      null,\n      true,\n    );\n  }\n\n  getRanges(\n    block: RawDraftContentBlock,\n    options: any,\n  ): Array<[number, number, Record<string, any>]> {\n    const ranges: Array<[number, number, Record<string, any>]> = [];\n\n    let start = 0;\n    let styles: Record<string, any> = this.getStyles(block, start, options);\n    for (let i = 1; i < block.text.length; i++) {\n      const nextStyles = this.getStyles(block, i, options);\n\n      if (!isEqual(styles, nextStyles)) {\n        ranges.push([start, i - 1, styles]);\n        styles = nextStyles;\n        start = i;\n      }\n    }\n    ranges.push([start, block.text.length - 1, styles]);\n\n    return ranges;\n  }\n\n  getStyles(\n    block: RawDraftContentBlock,\n    index: number,\n    options: any,\n  ): Record<string, string> {\n    const ranges = block.inlineStyleRanges.filter(\n      (inlineRange: CustomRawDraftInlineStyleRange) =>\n        inlineRange.offset <= index &&\n        index < inlineRange.offset + inlineRange.length,\n    );\n\n    const customFontSize: number | null = ranges.reduce(\n      (acc: number | null, range: any) => {\n        if (range.style.includes(TextCommand.FontSize)) {\n          return range.style.match(/\\d+/)?.[0];\n        }\n        return acc;\n      },\n      null,\n    );\n\n    // Sort to apply font size styles first and then override it by subscript/superscript styles\n    ranges.sort((_, nextRange) => {\n      return nextRange.style.includes(TextCommand.FontSize) ? 1 : -1;\n    });\n\n    return ranges.reduce(\n      (styles: any, textRange: CustomRawDraftInlineStyleRange) => {\n        const fontsz = customFontSize || options.fontszInPx;\n        const fontszsub = (customFontSize || options.fontszsubInPx) * 0.5;\n        switch (textRange.style) {\n          case TextCommand.Bold:\n            styles['font-weight'] = 'bold';\n            break;\n\n          case TextCommand.Italic:\n            styles['font-style'] = 'italic';\n            break;\n\n          case TextCommand.Subscript:\n            styles['font-size'] = fontszsub + 'px';\n            styles.shiftY = fontsz / 4;\n\n            break;\n\n          case TextCommand.Superscript:\n            styles['font-size'] = fontszsub + 'px';\n            styles.shiftY = -fontsz / 3;\n            break;\n\n          case `${TextCommand.FontSize}_${customFontSize}px`:\n            styles['font-size'] = customFontSize + 'px';\n            break;\n\n          default:\n        }\n\n        return styles;\n      },\n      {},\n    );\n  }\n}\n\nexport default ReText;\n","import { RaphaelPaper } from 'raphael';\nimport {\n  AttachmentPoints,\n  Bond,\n  RGroupAttachmentPoint,\n  RGroupAttachmentPointType,\n  Struct,\n  Vec2,\n} from 'domain/entities';\nimport { Scale } from 'domain/helpers';\nimport { ReAtom, ReObject, ReStruct } from '.';\nimport draw from '../draw';\nimport { Render } from '../raphaelRender';\nimport { RenderOptions, RenderOptionStyles } from '../render.types';\nimport { LayerMap } from './generalEnumTypes';\nimport Visel from './visel';\n\nclass ReRGroupAttachmentPoint extends ReObject {\n  item: RGroupAttachmentPoint;\n  reAtom: ReAtom;\n  lineDirectionVector: Vec2 = new Vec2();\n\n  static LINE_OUTLINE_WIDTH = 0.36;\n  static OUTLINE_PADDING = 0.15;\n  static CURVE_OUTLINE_WIDTH = 1.0;\n  static CURVE_OUTLINE_HEIGHT = 0.42;\n\n  constructor(item: RGroupAttachmentPoint, reAtom: ReAtom) {\n    super('rgroupAttachmentPoint');\n    this.item = item;\n    this.reAtom = reAtom;\n  }\n\n  get normalizedLineDirectionVector() {\n    return this.lineDirectionVector.normalized();\n  }\n\n  get normalizedCurveDirectionVector() {\n    return this.lineDirectionVector.rotate(Math.PI / 2).normalized();\n  }\n\n  get startPoint() {\n    return this.reAtom.a.pp;\n  }\n\n  get middlePoint() {\n    return this.outlineEndPoint.addScaled(\n      this.normalizedLineDirectionVector,\n      -ReRGroupAttachmentPoint.CURVE_OUTLINE_HEIGHT,\n    );\n  }\n\n  get endPoint() {\n    return this.startPoint.add(this.lineDirectionVector);\n  }\n\n  get outlineEndPoint() {\n    const length =\n      this.lineDirectionVector.length() +\n      ReRGroupAttachmentPoint.OUTLINE_PADDING;\n    return this.startPoint.addScaled(\n      this.normalizedLineDirectionVector,\n      length,\n    );\n  }\n\n  static isSelectable() {\n    return true;\n  }\n\n  getOutlinePoints(isHighlight = false) {\n    const highlightPadding = isHighlight ? -0.1 : 0;\n    const curveOutlineWidth =\n      ReRGroupAttachmentPoint.CURVE_OUTLINE_WIDTH + highlightPadding;\n    const lineOutlineWidth =\n      ReRGroupAttachmentPoint.LINE_OUTLINE_WIDTH + highlightPadding;\n\n    const topLeftPadPoint = this.outlineEndPoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      -curveOutlineWidth / 2,\n    );\n    const topLeftPoint = topLeftPadPoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      ReRGroupAttachmentPoint.OUTLINE_PADDING,\n    );\n    const topRightPadPoint = this.outlineEndPoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      curveOutlineWidth / 2,\n    );\n    const topRightPoint = topRightPadPoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      -ReRGroupAttachmentPoint.OUTLINE_PADDING,\n    );\n    const middleMostLeftPadPoint = this.middlePoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      -curveOutlineWidth / 2,\n    );\n    const middleMostLeftPoint = middleMostLeftPadPoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      ReRGroupAttachmentPoint.OUTLINE_PADDING,\n    );\n    const middleMostRightPadPoint = this.middlePoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      curveOutlineWidth / 2,\n    );\n    const middleMostRightPoint = middleMostRightPadPoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      -ReRGroupAttachmentPoint.OUTLINE_PADDING,\n    );\n    const middleLeftPoint = this.middlePoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      -lineOutlineWidth / 2,\n    );\n    const middleRightPoint = this.middlePoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      lineOutlineWidth / 2,\n    );\n    const bottomLeftPadPoint = this.startPoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      -lineOutlineWidth / 2,\n    );\n    const bottomLeftPoint = bottomLeftPadPoint.addScaled(\n      this.normalizedLineDirectionVector,\n      ReRGroupAttachmentPoint.OUTLINE_PADDING,\n    );\n    const bottomRightPadPoint = this.startPoint.addScaled(\n      this.normalizedCurveDirectionVector,\n      lineOutlineWidth / 2,\n    );\n    const bottomRightPoint = bottomRightPadPoint.addScaled(\n      this.normalizedLineDirectionVector,\n      ReRGroupAttachmentPoint.OUTLINE_PADDING,\n    );\n\n    return [\n      topLeftPadPoint,\n      topLeftPoint,\n      topRightPoint,\n      topRightPadPoint,\n      middleMostRightPadPoint,\n      middleMostRightPoint,\n      middleRightPoint,\n      bottomRightPoint,\n      bottomRightPadPoint,\n      bottomLeftPadPoint,\n      bottomLeftPoint,\n      middleLeftPoint,\n      middleMostLeftPoint,\n      middleMostLeftPadPoint,\n    ] as const;\n  }\n\n  getDistanceTo(destination: Vec2) {\n    return Vec2.dist(destination, this.middlePoint);\n  }\n\n  private makeHighlightePlate = (\n    restruct: ReStruct,\n    style: RenderOptionStyles,\n  ) => {\n    const { paper, options } = restruct.render;\n    const hoverPlatePath = this.getHoverPlatePath(options, true);\n    return paper.path(hoverPlatePath).attr(options.selectionStyle).attr(style);\n  };\n\n  show(restruct: ReStruct, rgroupAttachmentPointId: number) {\n    const directionVector = this.getAttachmentPointDirectionVector(\n      restruct.molecule,\n    );\n\n    if (!directionVector) {\n      return;\n    }\n    this.lineDirectionVector = directionVector;\n\n    showAttachmentPointShape(\n      this.reAtom,\n      restruct.render,\n      directionVector,\n      restruct.addReObjectPath.bind(restruct),\n      this.visel,\n    );\n\n    const showLabel = isAttachmentPointLabelRequired(restruct);\n    if (showLabel) {\n      // in case of isTrisectionRequired (trisection case) we should show labels '1' and '2' for those separated vectors\n      const labelText = this.item.type === 'primary' ? '1' : '2';\n      showAttachmentPointLabel(\n        this.reAtom,\n        restruct.render,\n        directionVector,\n        restruct.addReObjectPath.bind(restruct),\n        labelText,\n        this.visel,\n      );\n    }\n    const highlights = restruct.molecule.highlights;\n    let isHighlighted = false;\n    let highlightColor = '';\n    highlights.forEach((highlight) => {\n      const hasCurrentHighlight = highlight.rgroupAttachmentPoints?.includes(\n        rgroupAttachmentPointId,\n      );\n      isHighlighted = isHighlighted || hasCurrentHighlight;\n      if (hasCurrentHighlight) {\n        highlightColor = highlight.color;\n      }\n    });\n    if (isHighlighted) {\n      const style = { fill: highlightColor, stroke: 'none' };\n      const path = this.makeHighlightePlate(restruct, style);\n      restruct.addReObjectPath(LayerMap.hovering, this.visel, path);\n    }\n  }\n\n  private getHoverPlatePath(options: RenderOptions, isHighlight = false) {\n    const outlinePoints = this.getOutlinePoints(isHighlight);\n    const scaledOutlinePoints = outlinePoints.map((point) =>\n      Scale.modelToCanvas(point, options),\n    );\n    const [\n      topLeftPadPoint,\n      topLeftPoint,\n      topRightPoint,\n      topRightPadPoint,\n      middleMostRightPadPoint,\n      middleMostRightPoint,\n      middleRightPoint,\n      bottomRightPoint,\n      bottomRightPadPoint,\n      bottomLeftPadPoint,\n      bottomLeftPoint,\n      middleLeftPoint,\n      middleMostLeftPoint,\n      middleMostLeftPadPoint,\n    ] = scaledOutlinePoints;\n\n    // Docs: ketcher-core/docs/data/hover_selection_rgroup_attachment_point.png\n    const pathString = `\n      M ${topLeftPoint.x} ${topLeftPoint.y}\n      L ${topRightPoint.x} ${topRightPoint.y}\n      C ${topRightPadPoint.x} ${topRightPadPoint.y}, ${middleMostRightPadPoint.x} ${middleMostRightPadPoint.y}, ${middleMostRightPoint.x} ${middleMostRightPoint.y}\n      L ${middleRightPoint.x} ${middleRightPoint.y}\n      L ${bottomRightPoint.x} ${bottomRightPoint.y}\n      C ${bottomRightPadPoint.x} ${bottomRightPadPoint.y}, ${bottomLeftPadPoint.x} ${bottomLeftPadPoint.y}, ${bottomLeftPoint.x} ${bottomLeftPoint.y}\n      L ${middleLeftPoint.x} ${middleLeftPoint.y}\n      L ${middleMostLeftPoint.x} ${middleMostLeftPoint.y}\n      C ${middleMostLeftPadPoint.x} ${middleMostLeftPadPoint.y}, ${topLeftPadPoint.x} ${topLeftPadPoint.y}, ${topLeftPoint.x} ${topLeftPoint.y}\n    `;\n    return pathString;\n  }\n\n  makeHoverPlate(render: Render) {\n    const hoverPlatePath = this.getHoverPlatePath(render.options);\n    return render.paper.path(hoverPlatePath).attr(render.options.hoverStyle);\n  }\n\n  makeSelectionPlate(\n    _restruct: ReStruct,\n    paper: RaphaelPaper,\n    options: RenderOptions,\n  ) {\n    const hoverPlatePath = this.getHoverPlatePath(options);\n    return paper.path(hoverPlatePath).attr(options.selectionStyle);\n  }\n\n  drawHover(render: Render) {\n    const hoverPlate = this.makeHoverPlate(render);\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, hoverPlate);\n    return hoverPlate;\n  }\n\n  private getAttachmentPointDirectionVector(struct: Struct) {\n    if (!this.reAtom.hasAttachmentPoint()) {\n      return;\n    }\n    if (this.isTrisectionAttachmentPoint()) {\n      return trisectionLargestSector(this.reAtom, struct, this.item.type);\n    } else {\n      const hasOnlyOneBond = this.reAtom.a.neighbors.length === 1;\n      const directionVector = hasOnlyOneBond\n        ? getAttachmentDirectionForOnlyOneBond(this.reAtom, struct)\n        : this.reAtom.bisectLargestSector(struct);\n      return directionVector;\n    }\n  }\n\n  private isTrisectionAttachmentPoint(): boolean {\n    // in this case we should split the attachment point vector to two vectors\n    return this.reAtom.a.attachmentPoints === AttachmentPoints.BothSides;\n  }\n}\n\nfunction showAttachmentPointShape(\n  atom: ReAtom,\n  { options, paper }: Render,\n  directionVector: Vec2,\n  addReObjectPath: InstanceType<typeof ReStruct>['addReObjectPath'],\n  visel: Visel,\n): void {\n  const atomPositionVector = Scale.modelToCanvas(atom.a.pp, options);\n  const shiftedAtomPositionVector = atom.getShiftedSegmentPosition(\n    options,\n    directionVector,\n  );\n  const attachmentPointEnd = atomPositionVector.addScaled(\n    directionVector,\n    options.microModeScale * 0.85,\n  );\n\n  const resultShape = draw.rgroupAttachmentPoint(\n    paper,\n    shiftedAtomPositionVector,\n    attachmentPointEnd,\n    directionVector,\n    options,\n  );\n\n  addReObjectPath(\n    LayerMap.indices,\n    visel,\n    resultShape,\n    atomPositionVector,\n    true,\n  );\n}\n\nfunction trisectionLargestSector(\n  atom: ReAtom,\n  struct: Struct,\n  attachmentPointType: RGroupAttachmentPointType,\n) {\n  const { largestAngle, neighborAngle } =\n    atom.getLargestSectorFromNeighbors(struct);\n  const firstTrisectorAngle = neighborAngle + largestAngle / 3;\n  const secondTrisectorAngle = neighborAngle + (largestAngle * 2) / 3;\n\n  return attachmentPointType === 'primary'\n    ? newVectorFromAngle(firstTrisectorAngle)\n    : newVectorFromAngle(secondTrisectorAngle);\n}\n\nfunction newVectorFromAngle(angle: number): Vec2 {\n  return new Vec2(Math.cos(angle), Math.sin(angle));\n}\n\nfunction isAttachmentPointLabelRequired(restruct: ReStruct) {\n  return restruct.molecule.atoms.some(\n    ({ attachmentPoints }) =>\n      attachmentPoints === AttachmentPoints.SecondSideOnly ||\n      attachmentPoints === AttachmentPoints.BothSides,\n  );\n}\n\nfunction getAttachmentDirectionForOnlyOneBond(\n  atom: ReAtom,\n  struct: Struct,\n): Vec2 {\n  const DEGREE_120_FOR_ONE_BOND = (2 * Math.PI) / 3;\n  const DEGREE_180_FOR_TRIPLE_BOND = Math.PI;\n  const onlyNeighbor = atom.a.neighbors[0];\n  // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion\n  const neighbour = struct.halfBonds.get(onlyNeighbor)!;\n  const angle = neighbour.ang;\n  const isTripleBond =\n    struct.bonds.get(neighbour.bid)?.type === Bond.PATTERN.TYPE.TRIPLE;\n  const finalAngle =\n    angle +\n    (isTripleBond ? DEGREE_180_FOR_TRIPLE_BOND : DEGREE_120_FOR_ONE_BOND);\n  return newVectorFromAngle(finalAngle);\n}\n\nfunction showAttachmentPointLabel(\n  atom: ReAtom,\n  { options, paper }: Render,\n  directionVector: Vec2,\n  addReObjectPath: InstanceType<typeof ReStruct>['addReObjectPath'],\n  labelText: string,\n  visel: Visel,\n): void {\n  const atomPositionVector = Scale.modelToCanvas(atom.a.pp, options);\n  const labelPosition = getLabelPositionForAttachmentPoint(\n    atomPositionVector,\n    directionVector,\n    options.microModeScale,\n  );\n  const labelPath = draw.rgroupAttachmentPointLabel(\n    paper,\n    labelPosition,\n    labelText,\n    options,\n    atom.color,\n  );\n  addReObjectPath(LayerMap.indices, visel, labelPath, atomPositionVector, true);\n}\n\nfunction getLabelPositionForAttachmentPoint(\n  atomPositionVector: Vec2,\n  directionVector: Vec2,\n  shapeHeight: number,\n): Vec2 {\n  const normal = directionVector.rotateSC(1, 0);\n  return atomPositionVector\n    .addScaled(normal, 0.17 * shapeHeight)\n    .addScaled(directionVector, shapeHeight * 0.7);\n}\n\nexport { ReRGroupAttachmentPoint };\n","import { LayerMap, ReObject, ReStruct } from 'application/render/restruct';\nimport {\n  Image,\n  ImageReferenceName,\n  ImageReferencePositionInfo,\n} from 'domain/entities/image';\nimport { RenderOptions } from 'application/render/render.types';\nimport { Scale } from 'domain/helpers';\nimport { RaphaelPaper, RaphaelSet } from 'raphael';\nimport { Box2Abs, Vec2 } from 'domain/entities';\nimport draw from 'application/render/draw';\nimport { IMAGE_KEY } from 'domain/constants';\nimport { Render } from 'application/render';\n\ntype GetReferencePositions = ReturnType<Image['getReferencePositions']>;\nconst REFERENCE_POINT_LINE_WIDTH_MULTIPLIER = 0.4;\n\ninterface ClosestReferencePosition {\n  distance: number;\n  ref: ImageReferencePositionInfo | null;\n}\n\nexport class ReImage extends ReObject {\n  private selectionPointsSet: RaphaelSet;\n\n  static isSelectable(): boolean {\n    return true;\n  }\n\n  constructor(public image: Image) {\n    super(IMAGE_KEY);\n  }\n\n  private getScaledPointWithOffset(\n    originalPoint: Vec2,\n    renderOptions: RenderOptions,\n  ): Vec2 {\n    const scaledPoint: Vec2 = Scale.modelToCanvas(originalPoint, renderOptions);\n    return scaledPoint.add(renderOptions.offset);\n  }\n\n  private getScale(renderOptions: RenderOptions) {\n    return renderOptions.microModeScale / 8;\n  }\n\n  private getDimensions(renderOptions: RenderOptions): Vec2 {\n    return Vec2.diff(\n      this.getScaledPointWithOffset(\n        this.image.getBottomRightPosition(),\n        renderOptions,\n      ),\n      this.getScaledPointWithOffset(\n        this.image.getTopLeftPosition(),\n        renderOptions,\n      ),\n    );\n  }\n\n  private getSelectionReferencePositions(\n    renderOptions: RenderOptions,\n  ): GetReferencePositions {\n    // We need just one additional pixel for selection dots to not overlap with image\n    const scale = this.getScale(renderOptions) + 1;\n    const [\n      topLeftPosition,\n      topRightPosition,\n      bottomRightPosition,\n      bottomLeftPosition,\n    ] = this.image\n      .getCornerPositions()\n      .map((position) => Scale.modelToCanvas(position, renderOptions));\n    const selectionTopLeftPosition = topLeftPosition.sub(\n      new Vec2(scale, scale),\n    );\n    const selectionTopRightPosition = topRightPosition.add(\n      new Vec2(scale, -1 * scale),\n    );\n    const selectionBottomRightPosition = bottomRightPosition.add(\n      new Vec2(scale, scale),\n    );\n    const selectionBottomLeftPosition = bottomLeftPosition.add(\n      new Vec2(-1 * scale, scale),\n    );\n\n    return {\n      topLeftPosition: selectionTopLeftPosition,\n      topMiddlePosition: Vec2.centre(\n        selectionTopLeftPosition,\n        selectionTopRightPosition,\n      ),\n      topRightPosition: selectionTopRightPosition,\n      rightMiddlePosition: Vec2.centre(\n        selectionTopRightPosition,\n        selectionBottomRightPosition,\n      ),\n      bottomRightPosition: selectionBottomRightPosition,\n      bottomMiddlePosition: Vec2.centre(\n        selectionBottomLeftPosition,\n        selectionBottomRightPosition,\n      ),\n      bottomLeftPosition: selectionBottomLeftPosition,\n      leftMiddlePosition: Vec2.centre(\n        selectionTopLeftPosition,\n        selectionBottomLeftPosition,\n      ),\n    };\n  }\n\n  private drawSelectionLine(\n    paper: RaphaelPaper,\n    renderOptions: RenderOptions,\n  ): RaphaelSet {\n    const selectionSet = paper.set();\n    const scale = this.getScale(renderOptions);\n    const {\n      topLeftPosition,\n      topRightPosition,\n      bottomRightPosition,\n      bottomLeftPosition,\n    } = this.getSelectionReferencePositions(renderOptions);\n    const polygon = [\n      topLeftPosition,\n      topRightPosition,\n      bottomRightPosition,\n      bottomLeftPosition,\n    ];\n    const styleOptions = renderOptions.selectionStyleSimpleObject;\n    const strokeWidth =\n      Number(styleOptions['stroke-width']) +\n      scale * REFERENCE_POINT_LINE_WIDTH_MULTIPLIER;\n\n    selectionSet.push(\n      draw.selectionPolygon(paper, polygon, renderOptions).attr({\n        ...renderOptions.selectionStyleSimpleObject,\n        'stroke-linecap': 'square',\n        'stroke-width': strokeWidth,\n      }),\n    );\n    return selectionSet;\n  }\n\n  private drawSelectionPoints(\n    reStruct: ReStruct,\n    paper: RaphaelPaper,\n    renderOptions: RenderOptions,\n  ) {\n    this.selectionPointsSet = paper.set();\n    const scale = this.getScale(renderOptions);\n    const strokeWidth = scale * REFERENCE_POINT_LINE_WIDTH_MULTIPLIER;\n    const selectionReferencePositions = Object.entries(\n      this.getSelectionReferencePositions(renderOptions),\n    );\n    selectionReferencePositions.forEach(([key, { x, y }]) => {\n      const element = paper.circle(x, y, scale).attr({\n        fill: 'none',\n        'stroke-width': strokeWidth,\n      });\n      if (element.node && element.node.setAttribute) {\n        element.node.setAttribute('data-testid', `imageResize-${key}`);\n      }\n\n      this.selectionPointsSet.push(element);\n    });\n    reStruct.addReObjectPath(\n      LayerMap.selectionPoints,\n      this.visel,\n      this.selectionPointsSet,\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  show(restruct: ReStruct, renderOptions: RenderOptions, nextPath?: any) {\n    const scaledTopLeftWithOffset = this.getScaledPointWithOffset(\n      this.image.getTopLeftPosition(),\n      renderOptions,\n    );\n    const dimensions = this.getDimensions(renderOptions);\n\n    const image = restruct.render.paper.image(\n      this.image.bitmap,\n      scaledTopLeftWithOffset.x,\n      scaledTopLeftWithOffset.y,\n      dimensions.x,\n      dimensions.y,\n    );\n    restruct.addReObjectPath(LayerMap.images, this.visel, image);\n\n    if (nextPath) {\n      image.insertBefore(nextPath);\n    }\n  }\n\n  drawHover(render: Render) {\n    const offset =\n      this.getScale(render.options) *\n      (1 + REFERENCE_POINT_LINE_WIDTH_MULTIPLIER);\n    const STROKE_WIDTH = 0.6;\n    const FILL_WIDTH = 2 * offset - STROKE_WIDTH;\n    const { topLeftPosition, bottomRightPosition } =\n      this.getSelectionReferencePositions(render.options);\n    const outerBorderOffset = new Vec2(offset, offset);\n    const topLeftCorner = topLeftPosition.sub(outerBorderOffset);\n    const dimensions = bottomRightPosition.sub(topLeftPosition);\n    const dimensionsWithBorders = dimensions.add(outerBorderOffset.scaled(2));\n\n    const paths = [\n      render.paper\n        .rect(\n          topLeftCorner.x,\n          topLeftCorner.y,\n          dimensionsWithBorders.x,\n          dimensionsWithBorders.y,\n        )\n        .attr({ ...render.options.hoverStyle, fill: 'none' }),\n      render.paper\n        .rect(topLeftPosition.x, topLeftPosition.y, dimensions.x, dimensions.y)\n        .attr({\n          ...render.options.innerHoverStyle,\n          'stroke-width': FILL_WIDTH,\n        }),\n    ];\n\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, paths);\n\n    return paths;\n  }\n\n  makeSelectionPlate(\n    reStruct: ReStruct,\n    paper: RaphaelPaper,\n    options: RenderOptions,\n  ) {\n    this.drawSelectionPoints(reStruct, paper, options);\n    return this.drawSelectionLine(paper, options);\n  }\n\n  getVBoxObj(): Box2Abs | null {\n    return new Box2Abs(\n      this.image.getTopLeftPosition(),\n      this.image.getBottomRightPosition(),\n    );\n  }\n\n  togglePoints(displayFlag: boolean) {\n    displayFlag\n      ? this.selectionPointsSet?.show()\n      : this.selectionPointsSet?.hide();\n  }\n\n  calculateDistanceToPoint(point: Vec2, renderOptions: RenderOptions): number {\n    if (this.isPointInsidePolygon(point, renderOptions)) {\n      return 0;\n    }\n    const {\n      topLeftPosition,\n      topRightPosition,\n      bottomRightPosition,\n      bottomLeftPosition,\n    } = this.getSelectionReferencePositions(renderOptions);\n\n    return Math.min(\n      point.calculateDistanceToLine([topLeftPosition, topRightPosition]),\n      point.calculateDistanceToLine([topRightPosition, bottomRightPosition]),\n      point.calculateDistanceToLine([bottomRightPosition, bottomLeftPosition]),\n      point.calculateDistanceToLine([bottomLeftPosition, topLeftPosition]),\n    );\n  }\n\n  calculateClosestReferencePosition(\n    point: Vec2,\n    renderOptions: RenderOptions,\n  ): ClosestReferencePosition {\n    const entries = Object.entries(\n      this.getSelectionReferencePositions(renderOptions),\n    ) as Array<[ImageReferenceName, Vec2]>;\n    return entries.reduce(\n      (acc, [key, position]) => {\n        const offset = Vec2.diff(position, point);\n        const distance = offset.length();\n        if (distance < acc.distance) {\n          return {\n            distance,\n            ref: {\n              name: key,\n              offset: Scale.canvasToModel(offset, renderOptions),\n            },\n          };\n        } else {\n          return acc;\n        }\n      },\n      {\n        ref: null,\n        distance: Number.POSITIVE_INFINITY,\n      } as ClosestReferencePosition,\n    );\n  }\n\n  isPointInsidePolygon(point: Vec2, renderOptions: RenderOptions): boolean {\n    const referencePositions =\n      this.getSelectionReferencePositions(renderOptions);\n\n    return point.isInsidePolygon([\n      referencePositions.topLeftPosition,\n      referencePositions.topRightPosition,\n      referencePositions.bottomRightPosition,\n      referencePositions.bottomLeftPosition,\n    ]);\n  }\n}\n","import { BaseMicromoleculeEntity } from 'domain/entities/BaseMicromoleculeEntity';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { Pool } from 'domain/entities/pool';\nimport { getNodeWithInvertedYCoord, KetFileNode } from 'domain/serializers';\nimport { MULTITAIL_ARROW_SERIALIZE_KEY } from 'domain/constants';\nimport { FixedPrecisionCoordinates } from 'domain/entities';\n\nexport type Line = [Vec2, Vec2];\n\nexport interface MultitailArrowsReferencePositions {\n  head: Vec2;\n  topTail: Vec2;\n  bottomTail: Vec2;\n  topSpine: Vec2;\n  bottomSpine: Vec2;\n  tails: Pool<Vec2>;\n}\n\nenum MultitailValidationErrors {\n  INCORRECT_SPINE = 'INCORRECT_SPINE',\n  INCORRECT_HEAD = 'INCORRECT_HEAD',\n  INCORRECT_TAILS = 'INCORRECT_TAILS',\n}\n\nexport type MultitailArrowReferencePositionsNames =\n  keyof MultitailArrowsReferencePositions;\n\nexport interface MultitailArrowsReferenceLines {\n  head: Line;\n  topTail: Line;\n  bottomTail: Line;\n  spine: Line;\n  tails: Pool<Line>;\n}\n\nexport type MultitailArrowReferenceLinesNames =\n  keyof MultitailArrowsReferenceLines;\n\nexport interface KetFileMultitailArrowNode {\n  head: {\n    position: Vec2;\n  };\n  spine: {\n    pos: [Vec2, Vec2];\n  };\n  tails: {\n    pos: Array<Vec2>;\n  };\n  zOrder: 0;\n}\n\ninterface TailDistance {\n  distance: number;\n  center: number;\n}\n\nexport class MultitailArrow extends BaseMicromoleculeEntity {\n  static KET_MIN_DISTANCE =\n    FixedPrecisionCoordinates.fromFloatingPrecision(0.01);\n\n  static MIN_TAIL_DISTANCE =\n    FixedPrecisionCoordinates.fromFloatingPrecision(0.35);\n\n  static MIN_HEAD_LENGTH = FixedPrecisionCoordinates.fromFloatingPrecision(0.5);\n  static MIN_TAIL_LENGTH = FixedPrecisionCoordinates.fromFloatingPrecision(0.4);\n  static MIN_TOP_BOTTOM_OFFSET =\n    FixedPrecisionCoordinates.fromFloatingPrecision(0.15);\n\n  static MIN_HEIGHT = FixedPrecisionCoordinates.fromFloatingPrecision(0.5);\n  static TOP_TAIL_NAME = 'topTail';\n  static BOTTOM_TAIL_NAME = 'bottomTail';\n  static TAILS_NAME = 'tails';\n\n  static canAddTail(distance: TailDistance['distance']): boolean {\n    return (\n      distance >=\n      MultitailArrow.MIN_TAIL_DISTANCE.multiply(2).getFloatingPrecision()\n    );\n  }\n\n  static fromTwoPoints(topLeft: Vec2, bottomRight: Vec2) {\n    const center = Vec2.centre(topLeft, bottomRight);\n    const tailLength = FixedPrecisionCoordinates.fromFloatingPrecision(\n      Math.max(\n        (bottomRight.x - topLeft.x) / 3,\n        MultitailArrow.MIN_TAIL_LENGTH.getFloatingPrecision(),\n      ),\n    );\n    const topSpineX = FixedPrecisionCoordinates.fromFloatingPrecision(\n      topLeft.x,\n    ).add(tailLength);\n    const topSpineY = FixedPrecisionCoordinates.fromFloatingPrecision(\n      topLeft.y,\n    );\n    const height = FixedPrecisionCoordinates.fromFloatingPrecision(\n      Math.max(\n        bottomRight.y - topLeft.y,\n        MultitailArrow.MIN_HEIGHT.getFloatingPrecision(),\n      ),\n    );\n    const headOffsetX = FixedPrecisionCoordinates.fromFloatingPrecision(\n      bottomRight.x,\n    ).sub(topSpineX);\n    const headOffsetY = FixedPrecisionCoordinates.fromFloatingPrecision(\n      center.y,\n    ).sub(topSpineY);\n\n    return new MultitailArrow(\n      topSpineX,\n      topSpineY,\n      height,\n      headOffsetX,\n      headOffsetY,\n      tailLength,\n      new Pool<FixedPrecisionCoordinates>(),\n    );\n  }\n\n  static validateKetNode(\n    ketFileData: KetFileMultitailArrowNode,\n  ): string | null {\n    const { head, spine, tails } = ketFileData;\n    const [spineStart, spineEnd] = spine.pos;\n    const spineStartX = FixedPrecisionCoordinates.fromFloatingPrecision(\n      spineStart.x,\n    );\n    const spineStartY = FixedPrecisionCoordinates.fromFloatingPrecision(\n      spineStart.y,\n    );\n    const spineEndX = FixedPrecisionCoordinates.fromFloatingPrecision(\n      spineEnd.x,\n    );\n    const spineEndY = FixedPrecisionCoordinates.fromFloatingPrecision(\n      spineEnd.y,\n    );\n    const headX = FixedPrecisionCoordinates.fromFloatingPrecision(\n      head.position.x,\n    );\n    const headY = FixedPrecisionCoordinates.fromFloatingPrecision(\n      head.position.y,\n    );\n    const tailsFixedPrecision = tails.pos\n      .map((tail) => ({\n        x: FixedPrecisionCoordinates.fromFloatingPrecision(tail.x),\n        y: FixedPrecisionCoordinates.fromFloatingPrecision(tail.y),\n      }))\n      .sort((a, b) => b.y.value - a.y.value);\n\n    if (\n      spineStartX.value !== spineEndX.value ||\n      spineStartY.value < spineEndY.sub(MultitailArrow.KET_MIN_DISTANCE).value\n    ) {\n      return MultitailValidationErrors.INCORRECT_SPINE;\n    }\n    if (\n      headX.value < spineStartX.add(MultitailArrow.KET_MIN_DISTANCE).value ||\n      headY.sub(MultitailArrow.KET_MIN_DISTANCE).value < spineEndY.value ||\n      headY.add(MultitailArrow.KET_MIN_DISTANCE).value > spineStartY.value\n    ) {\n      return MultitailValidationErrors.INCORRECT_HEAD;\n    }\n    if (\n      tailsFixedPrecision.at(0)?.y.value !== spineStartY.value ||\n      tailsFixedPrecision.at(-1)?.y.value !== spineEndY.value\n    ) {\n      return MultitailValidationErrors.INCORRECT_TAILS;\n    }\n\n    const firstTailX = tailsFixedPrecision[0].x;\n    if (\n      firstTailX.value > spineStartX.sub(MultitailArrow.KET_MIN_DISTANCE).value\n    ) {\n      return MultitailValidationErrors.INCORRECT_TAILS;\n    }\n\n    const result = tailsFixedPrecision.every((tail, index, allTails) => {\n      if (\n        index > 0 &&\n        allTails[index - 1].y.value <\n          tail.y.add(MultitailArrow.KET_MIN_DISTANCE).value\n      ) {\n        return false;\n      }\n\n      return (\n        tail.x.value === firstTailX.value &&\n        tail.y.value >= spineEndY.value &&\n        tail.y.value <= spineStartY.value\n      );\n    });\n\n    return !result ? MultitailValidationErrors.INCORRECT_TAILS : null;\n  }\n\n  static fromKetNode(ketFileNode: KetFileNode<KetFileMultitailArrowNode>) {\n    const data = getNodeWithInvertedYCoord(\n      ketFileNode.data,\n    ) as KetFileMultitailArrowNode;\n    const [spineStart, spineEnd] = data.spine.pos;\n    const head = data.head.position;\n    const spineTopX = FixedPrecisionCoordinates.fromFloatingPrecision(\n      spineStart.x,\n    );\n    const spineTopY = FixedPrecisionCoordinates.fromFloatingPrecision(\n      spineStart.y,\n    );\n    const height = FixedPrecisionCoordinates.fromFloatingPrecision(\n      spineEnd.y,\n    ).sub(spineTopY);\n    const headOffsetX = FixedPrecisionCoordinates.fromFloatingPrecision(\n      head.x,\n    ).sub(spineTopX);\n    const headOffsetY = FixedPrecisionCoordinates.fromFloatingPrecision(\n      head.y,\n    ).sub(spineTopY);\n\n    const tailsYOffset = new Pool<FixedPrecisionCoordinates>();\n    const tails = data.tails.pos.sort((a, b) => a.y - b.y);\n    const tailsLength = spineTopX.sub(\n      FixedPrecisionCoordinates.fromFloatingPrecision(tails[0].x),\n    );\n    tails.slice(1, -1).forEach((tail) => {\n      tailsYOffset.add(\n        FixedPrecisionCoordinates.fromFloatingPrecision(tail.y).sub(spineTopY),\n      );\n    });\n\n    return new MultitailArrow(\n      spineTopX,\n      spineTopY,\n      height,\n      headOffsetX,\n      headOffsetY,\n      tailsLength,\n      tailsYOffset,\n    );\n  }\n\n  static fromFloatingPointCoordinates(\n    spineTop: Vec2,\n    height: number,\n    headOffset: Vec2,\n    tailLength: number,\n    tailsYOffset: Pool<number>,\n  ) {\n    const tailsYOffsetFixedPrecision = tailsYOffset.clone();\n    tailsYOffsetFixedPrecision.forEach((item, key, map) => {\n      const pool = map as unknown as Pool<FixedPrecisionCoordinates>;\n      pool.set(key, FixedPrecisionCoordinates.fromFloatingPrecision(item));\n    });\n    return new MultitailArrow(\n      FixedPrecisionCoordinates.fromFloatingPrecision(spineTop.x),\n      FixedPrecisionCoordinates.fromFloatingPrecision(spineTop.y),\n      FixedPrecisionCoordinates.fromFloatingPrecision(height),\n      FixedPrecisionCoordinates.fromFloatingPrecision(headOffset.x),\n      FixedPrecisionCoordinates.fromFloatingPrecision(headOffset.y),\n      FixedPrecisionCoordinates.fromFloatingPrecision(tailLength),\n      tailsYOffsetFixedPrecision as unknown as Pool<FixedPrecisionCoordinates>,\n    );\n  }\n\n  constructor(\n    private spineTopX: FixedPrecisionCoordinates,\n    private spineTopY: FixedPrecisionCoordinates,\n    private height: FixedPrecisionCoordinates,\n    private headOffsetX: FixedPrecisionCoordinates,\n    private headOffsetY: FixedPrecisionCoordinates,\n    private tailLength: FixedPrecisionCoordinates,\n    private tailsYOffset: Pool<FixedPrecisionCoordinates>,\n  ) {\n    super();\n  }\n\n  getReferencePositions(): MultitailArrowsReferencePositions {\n    const tailX = this.spineTopX.sub(this.tailLength);\n    const bottomY = this.spineTopY.add(this.height);\n    const tails = new Pool<Vec2>();\n    this.tailsYOffset.forEach((tailYOffset, key) => {\n      tails.set(\n        key,\n        new Vec2(\n          tailX.getFloatingPrecision(),\n          this.spineTopY.add(tailYOffset).getFloatingPrecision(),\n        ),\n      );\n    });\n\n    return {\n      head: new Vec2(\n        this.spineTopX.add(this.headOffsetX).getFloatingPrecision(),\n        this.spineTopY.add(this.headOffsetY).getFloatingPrecision(),\n      ),\n      topTail: new Vec2(\n        tailX.getFloatingPrecision(),\n        this.spineTopY.getFloatingPrecision(),\n      ),\n      bottomTail: new Vec2(\n        tailX.getFloatingPrecision(),\n        bottomY.getFloatingPrecision(),\n      ),\n      topSpine: new Vec2(\n        this.spineTopX.getFloatingPrecision(),\n        this.spineTopY.getFloatingPrecision(),\n      ),\n      bottomSpine: new Vec2(\n        this.spineTopX.getFloatingPrecision(),\n        bottomY.getFloatingPrecision(),\n      ),\n      tails,\n    };\n  }\n\n  getReferencePositionsArray(): Array<Vec2> {\n    const { tails, ...positions } = this.getReferencePositions();\n    return Object.values(positions).concat(Array.from(tails.values()));\n  }\n\n  getReferenceLines(\n    referencePositions: MultitailArrowsReferencePositions,\n  ): MultitailArrowsReferenceLines {\n    const spineX = referencePositions.topSpine.x;\n    const headSpinePosition = new Vec2(spineX, referencePositions.head.y);\n    const tails = new Pool<Line>();\n    referencePositions.tails.forEach((tail, key) => {\n      tails.set(key, [tail, new Vec2(spineX, tail.y)]);\n    });\n\n    return {\n      topTail: [referencePositions.topTail, referencePositions.topSpine],\n      bottomTail: [\n        referencePositions.bottomTail,\n        referencePositions.bottomSpine,\n      ],\n      spine: [referencePositions.topSpine, referencePositions.bottomSpine],\n      head: [headSpinePosition, referencePositions.head],\n      tails,\n    };\n  }\n\n  getTailsDistance(\n    tailsYOffsets: Array<FixedPrecisionCoordinates>,\n  ): Array<TailDistance> {\n    const allTailsOffsets = tailsYOffsets\n      .concat([new FixedPrecisionCoordinates(0), this.height])\n      .sort((a, b) => a.sub(b).getFloatingPrecision());\n    return allTailsOffsets.reduce(\n      (acc: Array<TailDistance>, item, index, array) => {\n        if (index === 0) {\n          return acc;\n        }\n        const distance = item.sub(array[index - 1]);\n        const centerFloatingPoint = item.sub(distance.divide(2));\n        return acc.concat({\n          distance: distance.getFloatingPrecision(),\n          center: centerFloatingPoint.getFloatingPrecision(),\n        });\n      },\n      [],\n    );\n  }\n\n  getTailsMaxDistance(): TailDistance {\n    return this.getTailsDistance(Array.from(this.tailsYOffset.values())).reduce(\n      (acc: TailDistance, item) => {\n        return item.distance > acc.distance ? item : acc;\n      },\n      { distance: 0, center: 0 },\n    );\n  }\n\n  getTailCoordinate(id: number): FixedPrecisionCoordinates | undefined {\n    return this.tailsYOffset.get(id);\n  }\n\n  addTail(id?: number, coordinate?: FixedPrecisionCoordinates): number {\n    // Coordinate can only be present for undo\\redo\n    if (typeof id === 'number' && coordinate) {\n      this.tailsYOffset.set(id, coordinate);\n      return id;\n    }\n    const { center, distance } = this.getTailsMaxDistance();\n    if (!MultitailArrow.canAddTail(distance)) {\n      throw new Error('Cannot add tail because no minimal distance found');\n    }\n    const centerFixedPrecision =\n      FixedPrecisionCoordinates.fromFloatingPrecision(center);\n    if (typeof id === 'number') {\n      this.tailsYOffset.set(id, centerFixedPrecision);\n      return id;\n    } else {\n      return this.tailsYOffset.add(centerFixedPrecision);\n    }\n  }\n\n  removeTail(id: number) {\n    this.tailsYOffset.delete(id);\n  }\n\n  center(): Vec2 {\n    return Vec2.centre(\n      new Vec2(\n        this.spineTopX.sub(this.tailLength).getFloatingPrecision(),\n        this.spineTopY.getFloatingPrecision(),\n      ),\n      new Vec2(\n        this.spineTopX.add(this.headOffsetX).getFloatingPrecision(),\n        this.spineTopY.add(this.height).getFloatingPrecision(),\n      ),\n    );\n  }\n\n  clone(): MultitailArrow {\n    return new MultitailArrow(\n      this.spineTopX,\n      this.spineTopY,\n      this.height,\n      this.headOffsetX,\n      this.headOffsetY,\n      this.tailLength,\n      this.tailsYOffset,\n    );\n  }\n\n  rescaleSize(scale: number) {\n    this.spineTopX = this.spineTopX.multiply(scale);\n    this.spineTopY = this.spineTopY.multiply(scale);\n    this.headOffsetX = this.headOffsetX.multiply(scale);\n    this.headOffsetY = this.headOffsetY.multiply(scale);\n    this.height = this.height.multiply(scale);\n    this.tailLength = this.tailLength.multiply(scale);\n    this.tailsYOffset.forEach((item, index) => {\n      this.tailsYOffset.set(index, item.multiply(scale));\n    });\n  }\n\n  resizeHead(offset: number): number {\n    const fixedPrecisionOffset =\n      FixedPrecisionCoordinates.fromFloatingPrecision(offset);\n    const headOffsetX = new FixedPrecisionCoordinates(\n      Math.max(\n        this.headOffsetX.add(fixedPrecisionOffset).value,\n        MultitailArrow.MIN_HEAD_LENGTH.value,\n      ),\n    );\n    const realOffset = headOffsetX.sub(this.headOffsetX);\n    this.headOffsetX = headOffsetX;\n    return realOffset.getFloatingPrecision();\n  }\n\n  moveHead(offset: number): number {\n    const fixedPrecisionOffset =\n      FixedPrecisionCoordinates.fromFloatingPrecision(offset);\n    const headOffsetY = new FixedPrecisionCoordinates(\n      Math.min(\n        Math.max(\n          MultitailArrow.MIN_TOP_BOTTOM_OFFSET.value,\n          this.headOffsetY.add(fixedPrecisionOffset).value,\n        ),\n        this.height.sub(MultitailArrow.MIN_TOP_BOTTOM_OFFSET).value,\n      ),\n    );\n    const realOffset = headOffsetY.sub(this.headOffsetY);\n    this.headOffsetY = headOffsetY;\n    return realOffset.getFloatingPrecision();\n  }\n\n  resizeTails(offset: number): number {\n    const fixedPrecisionOffset =\n      FixedPrecisionCoordinates.fromFloatingPrecision(offset);\n    const updatedLength = new FixedPrecisionCoordinates(\n      Math.max(\n        this.tailLength.sub(fixedPrecisionOffset).value,\n        MultitailArrow.MIN_TAIL_LENGTH.value,\n      ),\n    );\n    const realOffset = this.tailLength.sub(updatedLength);\n    this.tailLength = updatedLength;\n    return realOffset.getFloatingPrecision();\n  }\n\n  normalizeTailPosition(\n    proposedPosition: FixedPrecisionCoordinates,\n    tailId: number,\n  ): FixedPrecisionCoordinates | null {\n    const proposedPositionFloatingPrecision =\n      proposedPosition.getFloatingPrecision();\n    const getDistanceToTailDistance = (tailDistance: TailDistance): number =>\n      Math.abs(tailDistance.center - proposedPositionFloatingPrecision) -\n      tailDistance.distance / 2;\n\n    const tailsWithoutCurrent = Array.from(this.tailsYOffset.entries())\n      .filter(([key]) => key !== tailId)\n      .map(([_, value]) => value);\n    const tailMinDistance = this.getTailsDistance(tailsWithoutCurrent)\n      .filter((item) => MultitailArrow.canAddTail(item.distance))\n      .sort(\n        (a, b) => getDistanceToTailDistance(a) - getDistanceToTailDistance(b),\n      )\n      .at(0);\n\n    if (!tailMinDistance) {\n      return null;\n    }\n\n    const positionCenter = FixedPrecisionCoordinates.fromFloatingPrecision(\n      tailMinDistance.center,\n    );\n    const positionDistance = FixedPrecisionCoordinates.fromFloatingPrecision(\n      tailMinDistance.distance,\n    );\n    const maxDistanceFromCenter = positionDistance\n      .divide(2)\n      .sub(MultitailArrow.MIN_TAIL_DISTANCE);\n    if (\n      Math.abs(positionCenter.sub(proposedPosition).value) >=\n      maxDistanceFromCenter.value\n    ) {\n      const distanceFromCenter =\n        positionCenter.value > proposedPosition.value\n          ? maxDistanceFromCenter.multiply(-1)\n          : maxDistanceFromCenter;\n      return positionCenter.add(distanceFromCenter);\n    }\n    return proposedPosition;\n  }\n\n  moveTail(offset: number, id: number, normalize?: true): number;\n  moveTail(\n    offset: number,\n    name:\n      | typeof MultitailArrow.TOP_TAIL_NAME\n      | typeof MultitailArrow.BOTTOM_TAIL_NAME,\n  ): number;\n\n  moveTail(offset: number, second: number | string, normalize?: true): number {\n    const offsetFixedPrecision =\n      FixedPrecisionCoordinates.fromFloatingPrecision(offset);\n    const minHeight = new FixedPrecisionCoordinates(\n      Math.max(\n        MultitailArrow.MIN_TAIL_DISTANCE.multiply(this.tailsYOffset.size + 1)\n          .value,\n        MultitailArrow.MIN_HEIGHT.value,\n      ),\n    );\n    const tailsOffset = Array.from(this.tailsYOffset.values()).sort(\n      (a, b) => a.value - b.value,\n    );\n    const lastTail = tailsOffset.at(-1) || new FixedPrecisionCoordinates(0);\n    const firstTail =\n      tailsOffset.at(0) || new FixedPrecisionCoordinates(Infinity);\n    const closestTopLimit = new FixedPrecisionCoordinates(\n      Math.min(\n        firstTail.sub(MultitailArrow.MIN_TAIL_DISTANCE).value,\n        this.headOffsetY.sub(MultitailArrow.MIN_TOP_BOTTOM_OFFSET).value,\n      ),\n    );\n    const closestBottomLimit = new FixedPrecisionCoordinates(\n      Math.max(\n        lastTail.add(MultitailArrow.MIN_TAIL_DISTANCE).value,\n        this.headOffsetY.add(MultitailArrow.MIN_TOP_BOTTOM_OFFSET).value,\n      ),\n    );\n\n    if (typeof second === 'number') {\n      const originalValue = this.tailsYOffset.get(\n        second,\n      ) as FixedPrecisionCoordinates;\n      let updatedHeight = new FixedPrecisionCoordinates(\n        Math.max(\n          MultitailArrow.MIN_TAIL_DISTANCE.value,\n          Math.min(\n            originalValue.add(offsetFixedPrecision).value,\n            this.height.sub(MultitailArrow.MIN_TAIL_DISTANCE).value,\n          ),\n        ),\n      );\n      if (normalize) {\n        const result = this.normalizeTailPosition(updatedHeight, second);\n        if (result === null) {\n          return originalValue.getFloatingPrecision();\n        }\n        updatedHeight = result;\n      }\n\n      const realOffset = updatedHeight.sub(originalValue);\n      this.tailsYOffset.set(second, updatedHeight);\n      return realOffset.getFloatingPrecision();\n    } else if (second === MultitailArrow.BOTTOM_TAIL_NAME) {\n      const updatedHeight = new FixedPrecisionCoordinates(\n        Math.max(\n          minHeight.value,\n          this.height.add(offsetFixedPrecision).value,\n          closestBottomLimit.value,\n        ),\n      );\n      const realOffset = updatedHeight.sub(this.height);\n      this.height = updatedHeight;\n      return realOffset.getFloatingPrecision();\n    } else {\n      const realOffset = new FixedPrecisionCoordinates(\n        Math.min(\n          offsetFixedPrecision.value,\n          closestTopLimit.value,\n          this.height.sub(minHeight).value,\n        ),\n      );\n      if (realOffset.value !== 0) {\n        this.spineTopY = this.spineTopY.add(realOffset);\n        this.headOffsetY = this.headOffsetY.sub(realOffset);\n        this.height = this.height.sub(realOffset);\n        const updatedTails = this.tailsYOffset.clone();\n        updatedTails.forEach((item, key) => {\n          updatedTails.set(key, item.sub(realOffset));\n        });\n        this.tailsYOffset = updatedTails;\n      }\n      return realOffset.getFloatingPrecision();\n    }\n  }\n\n  move(offset: Vec2): void {\n    this.spineTopX = this.spineTopX.add(\n      FixedPrecisionCoordinates.fromFloatingPrecision(offset.x),\n    );\n    this.spineTopY = this.spineTopY.add(\n      FixedPrecisionCoordinates.fromFloatingPrecision(offset.y),\n    );\n  }\n\n  toKetNode(): KetFileNode<KetFileMultitailArrowNode> {\n    const head = new Vec2(\n      this.spineTopX.add(this.headOffsetX).getFloatingPrecision(),\n      this.spineTopY.add(this.headOffsetY).getFloatingPrecision(),\n    );\n    const bottomY = this.spineTopY.add(this.height);\n    const spine: [Vec2, Vec2] = [\n      new Vec2(\n        this.spineTopX.getFloatingPrecision(),\n        this.spineTopY.getFloatingPrecision(),\n      ),\n      new Vec2(\n        this.spineTopX.getFloatingPrecision(),\n        bottomY.getFloatingPrecision(),\n      ),\n    ];\n    const tailX = this.spineTopX.sub(this.tailLength);\n    const nonBorderTails = Array.from(this.tailsYOffset.values()).map(\n      (yOffset) => this.spineTopY.add(yOffset),\n    );\n    const convertTail = (y: FixedPrecisionCoordinates) =>\n      new Vec2(tailX.getFloatingPrecision(), y.getFloatingPrecision());\n    const tails = [this.spineTopY]\n      .concat(nonBorderTails)\n      .concat(bottomY)\n      .map(convertTail);\n\n    return {\n      type: MULTITAIL_ARROW_SERIALIZE_KEY,\n      center: this.center(),\n      selected: this.getInitiallySelected(),\n      data: getNodeWithInvertedYCoord({\n        head: {\n          position: head,\n        },\n        spine: {\n          pos: spine,\n        },\n        tails: {\n          pos: tails,\n        },\n        zOrder: 0,\n      }),\n    };\n  }\n}\n","import ReObject from './reobject';\nimport { Line, MultitailArrow } from 'domain/entities/multitailArrow';\nimport { MULTITAIL_ARROW_KEY } from 'domain/constants/multitailArrow';\nimport { LayerMap, Render, ReStruct } from 'application/render';\nimport { RenderOptions } from 'application/render/render.types';\nimport { getArrowHeadDimensions } from 'application/render/draw';\nimport { PathBuilder } from 'application/render/pathBuilder';\nimport { Scale } from 'domain/helpers';\nimport { Box2Abs, Pool, Vec2 } from 'domain/entities';\nimport util from 'application/render/util';\nimport { RaphaelPaper } from 'raphael';\n\nexport enum MultitailArrowRefName {\n  HEAD = 'head',\n  TAILS = 'tails',\n  TOP_TAIL = 'topTail',\n  BOTTOM_TAIL = 'bottomTail',\n  SPINE = 'spine',\n}\n\nexport interface MultitailArrowReferencePosition {\n  name: MultitailArrowRefName;\n  isLine: boolean;\n  tailId: number | null;\n}\n\nexport interface MultitailArrowClosestReferencePosition {\n  distance: number;\n  ref: MultitailArrowReferencePosition | null;\n}\n\nexport class ReMultitailArrow extends ReObject {\n  static CUBIC_BEZIER_OFFSET = 6;\n  static FRAME_OFFSET = 0.175;\n  static SELECTION_POINT_OFFSET_FROM_SPINE = 0.1;\n\n  static isSelectable(): boolean {\n    return true;\n  }\n\n  static getTailIdFromRefName(name: string): number | null {\n    if (name.startsWith(MultitailArrowRefName.TAILS)) {\n      return parseInt(name.replace(`${MultitailArrowRefName.TAILS}-`, ''));\n    }\n    return null;\n  }\n\n  constructor(public multitailArrow: MultitailArrow) {\n    super(MULTITAIL_ARROW_KEY);\n  }\n\n  getFrameOffset(options: RenderOptions) {\n    return ReMultitailArrow.FRAME_OFFSET * options.microModeScale;\n  }\n\n  getSelectionPointOffset(options: RenderOptions) {\n    return (\n      ReMultitailArrow.SELECTION_POINT_OFFSET_FROM_SPINE *\n      options.microModeScale\n    );\n  }\n\n  getReferencePositions(\n    renderOptions: RenderOptions,\n  ): ReturnType<MultitailArrow['getReferencePositions']> {\n    const positions = this.multitailArrow.getReferencePositions();\n    const tails = new Pool<Vec2>();\n    positions.tails.forEach((item, key) => {\n      tails.set(key, Scale.modelToCanvas(item, renderOptions));\n    });\n\n    return {\n      head: Scale.modelToCanvas(positions.head, renderOptions),\n      topTail: Scale.modelToCanvas(positions.topTail, renderOptions),\n      bottomTail: Scale.modelToCanvas(positions.bottomTail, renderOptions),\n      topSpine: Scale.modelToCanvas(positions.topSpine, renderOptions),\n      bottomSpine: Scale.modelToCanvas(positions.bottomSpine, renderOptions),\n      tails,\n    };\n  }\n\n  getReferenceLines(\n    renderOptions: RenderOptions,\n    referencePositions = this.getReferencePositions(renderOptions),\n  ) {\n    return this.multitailArrow.getReferenceLines(referencePositions);\n  }\n\n  drawSingleLineHover(\n    builder: PathBuilder,\n    renderOptions: RenderOptions,\n    lineStart: Vec2,\n    lineEnd: Vec2,\n    verticalDirection: -1 | 1,\n    horizontalDirection: -1 | 1,\n  ): void {\n    const offset = this.getFrameOffset(renderOptions);\n    const cubicBezierOffset =\n      horizontalDirection * ReMultitailArrow.CUBIC_BEZIER_OFFSET;\n    const start = lineStart.add(\n      new Vec2(offset * horizontalDirection, offset * verticalDirection),\n    );\n    const end = start.add(new Vec2(0, 2 * offset * -verticalDirection));\n    builder\n      .addLine(start)\n      .addLine(lineEnd.add(new Vec2(0, offset * verticalDirection)))\n      .addQuadraticBezierCurve(\n        lineEnd.add(new Vec2(cubicBezierOffset, offset * verticalDirection)),\n        lineEnd.add(new Vec2(cubicBezierOffset, 0)),\n      )\n      .addQuadraticBezierCurve(\n        lineEnd.add(new Vec2(cubicBezierOffset, offset * -verticalDirection)),\n        lineEnd.add(new Vec2(0, offset * -verticalDirection)),\n      )\n      .addLine(end);\n  }\n\n  buildFrame(renderOptions: RenderOptions): string {\n    const offset = this.getFrameOffset(renderOptions);\n    const { topSpine, bottomSpine, topTail, bottomTail, head, tails } =\n      this.getReferencePositions(renderOptions);\n    const builder = new PathBuilder();\n    const tailsPoints = Array.from(tails.values()).sort((a, b) => a.y - b.y);\n\n    const start = topSpine.add(new Vec2(offset, offset));\n\n    builder\n      .addMovement(start)\n      .addLine(\n        topSpine.add(\n          new Vec2(offset, -offset + ReMultitailArrow.CUBIC_BEZIER_OFFSET),\n        ),\n      )\n      .addQuadraticBezierCurve(\n        topSpine.add(new Vec2(offset, -offset)),\n        topSpine.add(\n          new Vec2(offset - ReMultitailArrow.CUBIC_BEZIER_OFFSET, -offset),\n        ),\n      );\n    this.drawSingleLineHover(builder, renderOptions, topSpine, topTail, -1, -1);\n    tailsPoints.forEach((tailPoint) => {\n      this.drawSingleLineHover(\n        builder,\n        renderOptions,\n        new Vec2(topSpine.x, tailPoint.y),\n        tailPoint,\n        -1,\n        -1,\n      );\n    });\n    this.drawSingleLineHover(\n      builder,\n      renderOptions,\n      bottomSpine,\n      bottomTail,\n      -1,\n      -1,\n    );\n    builder\n      .addLine(\n        bottomSpine.add(\n          new Vec2(offset - ReMultitailArrow.CUBIC_BEZIER_OFFSET, offset),\n        ),\n      )\n      .addQuadraticBezierCurve(\n        bottomSpine.add(new Vec2(offset, offset)),\n        bottomSpine.add(\n          new Vec2(offset, offset - ReMultitailArrow.CUBIC_BEZIER_OFFSET),\n        ),\n      );\n    this.drawSingleLineHover(\n      builder,\n      renderOptions,\n      new Vec2(topSpine.x, head.y),\n      head,\n      1,\n      1,\n    );\n    builder.addLine(start);\n    return builder.build();\n  }\n\n  drawHover(render: Render) {\n    const path = this.buildFrame(render.options);\n    const paths = render.ctab.render.paper\n      .path(path)\n      .attr({ ...render.options.hoverStyle });\n\n    render.ctab.addReObjectPath(LayerMap.hovering, this.visel, paths);\n\n    return paths;\n  }\n\n  getSelectionPointsFromReferencePoint(\n    point: Vec2,\n    topSpine: Vec2,\n    name: string,\n    spineOffset: number,\n  ) {\n    const spineOffsetWithDirection =\n      topSpine.x > point.x ? -spineOffset : spineOffset;\n    return {\n      [`${name}-resize`]: point,\n      [`${name}-move`]: new Vec2(\n        topSpine.x + spineOffsetWithDirection,\n        point.y,\n      ),\n    };\n  }\n\n  addTestSelectionPoints(\n    reStruct: ReStruct,\n    paper: RaphaelPaper,\n    renderOptions: RenderOptions,\n  ) {\n    const OFFSET = this.getSelectionPointOffset(renderOptions);\n    const { topTail, bottomTail, tails, head, topSpine } =\n      this.getReferencePositions(renderOptions);\n    const selectionPointSet = paper.set();\n    const points: Record<string, Vec2> = {\n      ...this.getSelectionPointsFromReferencePoint(\n        topTail,\n        topSpine,\n        'topTail',\n        OFFSET,\n      ),\n      ...this.getSelectionPointsFromReferencePoint(\n        bottomTail,\n        topSpine,\n        'bottomTail',\n        OFFSET,\n      ),\n      ...this.getSelectionPointsFromReferencePoint(\n        head,\n        topSpine,\n        'head',\n        OFFSET,\n      ),\n      ...Array.from(tails.entries()).reduce(\n        (acc, [key, value]) => ({\n          ...acc,\n          ...this.getSelectionPointsFromReferencePoint(\n            value,\n            topSpine,\n            `${MultitailArrow.TAILS_NAME}-${key}`,\n            OFFSET,\n          ),\n        }),\n        {},\n      ),\n    };\n    Object.entries(points).forEach(([key, point]) => {\n      const element = paper.circle(point.x, point.y, 1).attr({\n        fill: 'none',\n        stroke: 'none',\n      });\n      if (element.node && element.node.setAttribute) {\n        element.node.setAttribute('data-testid', key);\n      }\n      selectionPointSet.push(element);\n    });\n    reStruct.addReObjectPath(\n      LayerMap.selectionPlate,\n      this.visel,\n      selectionPointSet,\n    );\n  }\n\n  makeSelectionPlate(\n    reStruct: ReStruct,\n    paper: RaphaelPaper,\n    options: RenderOptions,\n  ) {\n    this.addTestSelectionPoints(reStruct, paper, options);\n    const path = this.buildFrame(options);\n    const selectionSet = paper.set();\n    const paths = reStruct.render.paper\n      .path(path)\n      .attr({ ...options.selectionStyle });\n\n    selectionSet.push(paths);\n    return selectionSet;\n  }\n\n  show(reStruct: ReStruct, renderOptions: RenderOptions) {\n    reStruct.clearVisel(this.visel);\n    const pathBuilder = new PathBuilder();\n    const headPathBuilder = new PathBuilder();\n    const { topTail, topSpine, bottomSpine, head, tails } =\n      this.getReferencePositions(renderOptions);\n    const topTailOffsetX = topSpine.sub(topTail).x;\n    const arrowStart = new Vec2(topSpine.x, head.y);\n    const arrowLength = head.x - arrowStart.x;\n\n    const { arrowHeadLength, arrowHeadWidth } =\n      getArrowHeadDimensions(renderOptions);\n\n    pathBuilder.addMultitailArrowBase(\n      topSpine.y,\n      bottomSpine.y,\n      topSpine.x,\n      topTailOffsetX,\n    );\n    headPathBuilder.addFilledTriangleArrowPathParts(\n      arrowStart,\n      arrowLength,\n      arrowHeadLength,\n      arrowHeadWidth,\n    );\n    tails.forEach((tail) => {\n      pathBuilder.addLine(tail, { x: topSpine.x, y: tail.y });\n    });\n\n    const path = reStruct.render.paper.path(pathBuilder.build());\n    const header = reStruct.render.paper.path(headPathBuilder.build());\n    path.attr(renderOptions.lineattr);\n    header.attr({\n      ...renderOptions.lineattr,\n      fill: '#000',\n    });\n    this.visel.add(path, Box2Abs.fromRelBox(util.relBox(path.getBBox())));\n    this.visel.add(header, Box2Abs.fromRelBox(util.relBox(header.getBBox())));\n  }\n\n  private getClosestArrowPartPosition(\n    point: Vec2,\n    entities: Array<[string, Vec2]>,\n    isLine: false,\n  ): MultitailArrowClosestReferencePosition;\n\n  private getClosestArrowPartPosition(\n    point: Vec2,\n    entities: Array<[string, Line]>,\n    isLine: true,\n  ): MultitailArrowClosestReferencePosition;\n\n  private getClosestArrowPartPosition(\n    point: Vec2,\n    entities: Array<[string, Vec2 | Line]>,\n    isLine: boolean,\n  ): MultitailArrowClosestReferencePosition {\n    return entities.reduce(\n      (acc, [name, value]) => {\n        const distance = isLine\n          ? point.calculateDistanceToLine(value as Line)\n          : Vec2.dist(point, value as Vec2);\n        const tailId = ReMultitailArrow.getTailIdFromRefName(name);\n        let refName: MultitailArrowRefName;\n        if (typeof tailId === 'number') {\n          refName = MultitailArrowRefName.TAILS;\n        } else if (\n          [\n            MultitailArrowRefName.HEAD,\n            MultitailArrowRefName.BOTTOM_TAIL,\n            MultitailArrowRefName.TOP_TAIL,\n          ].includes(name as MultitailArrowRefName)\n        ) {\n          refName = name as MultitailArrowRefName;\n        } else {\n          refName = MultitailArrowRefName.SPINE;\n        }\n\n        return distance < acc.distance\n          ? {\n              distance,\n              ref:\n                refName !== MultitailArrowRefName.SPINE\n                  ? {\n                      name: refName,\n                      isLine,\n                      tailId,\n                    }\n                  : null,\n            }\n          : acc;\n      },\n      {\n        distance: Infinity,\n        ref: null,\n      } as MultitailArrowClosestReferencePosition,\n    );\n  }\n\n  private getTailArrayFromPool<T>(tails: Pool<T>): Array<[string, T]> {\n    return Array.from(tails.entries()).map(([key, value]) => [\n      `${MultitailArrow.TAILS_NAME}-${key}`,\n      value,\n    ]);\n  }\n\n  calculateDistanceToPoint(\n    point: Vec2,\n    renderOptions: RenderOptions,\n    maxDistanceToPoint: number,\n  ): MultitailArrowClosestReferencePosition {\n    const referencePositions = this.getReferencePositions(renderOptions);\n    const referenceLines = this.getReferenceLines(\n      renderOptions,\n      referencePositions,\n    );\n    const { tails, ...rest } = referenceLines;\n    const tailsAndHeadLines: Array<[string, Line]> = Object.entries(\n      rest,\n    ).concat(this.getTailArrayFromPool(tails));\n\n    const lineResult = this.getClosestArrowPartPosition(\n      point,\n      tailsAndHeadLines,\n      true,\n    );\n\n    if (lineResult.distance < maxDistanceToPoint) {\n      const {\n        topSpine: _t,\n        bottomSpine: _b,\n        tails: tailsPoints,\n        ...validReferencePositions\n      } = referencePositions;\n\n      const tailsAnddHeadPoints: Array<[string, Vec2]> = Object.entries(\n        validReferencePositions,\n      ).concat(this.getTailArrayFromPool(tailsPoints));\n\n      const pointsResult = this.getClosestArrowPartPosition(\n        point,\n        tailsAnddHeadPoints,\n        false,\n      );\n      if (\n        pointsResult.distance < maxDistanceToPoint / 2 ||\n        (pointsResult.distance < maxDistanceToPoint &&\n          pointsResult.distance <= lineResult.distance)\n      ) {\n        return pointsResult;\n      }\n    }\n\n    return lineResult;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  Box2Abs,\n  FunctionalGroup,\n  Pile,\n  Pool,\n  RGroupAttachmentPoint,\n  Struct,\n  Vec2,\n} from 'domain/entities';\nimport assert from 'assert';\nimport { LayerMap } from './generalEnumTypes';\nimport ReAtom from './reatom';\nimport ReBond from './rebond';\nimport ReDataSGroupData from './redatasgroupdata';\nimport ReEnhancedFlag from './reenhancedFlag';\nimport ReFrag from './refrag';\nimport ReLoop from './reloop';\nimport ReRGroup from './rergroup';\nimport ReRxnArrow from './rerxnarrow';\nimport ReRxnPlus from './rerxnplus';\nimport ReSGroup from './resgroup';\nimport ReSimpleObject from './resimpleObject';\nimport ReText from './retext';\nimport { Render } from '../raphaelRender';\nimport Visel from './visel';\nimport util from '../util';\nimport { ReRGroupAttachmentPoint } from './rergroupAttachmentPoint';\nimport { ReImage } from 'application/render/restruct/reImage';\nimport { IMAGE_KEY, MULTITAIL_ARROW_KEY } from 'domain/constants';\nimport { ReMultitailArrow } from './remultitailArrow';\n\nclass ReStruct {\n  public static readonly maps = {\n    atoms: ReAtom,\n    bonds: ReBond,\n    rxnPluses: ReRxnPlus,\n    rxnArrows: ReRxnArrow,\n    frags: ReFrag,\n    rgroups: ReRGroup,\n    rgroupAttachmentPoints: ReRGroupAttachmentPoint,\n    sgroupData: ReDataSGroupData,\n    enhancedFlags: ReEnhancedFlag,\n    sgroups: ReSGroup,\n    reloops: ReLoop,\n    simpleObjects: ReSimpleObject,\n    texts: ReText,\n    [IMAGE_KEY]: ReImage,\n    [MULTITAIL_ARROW_KEY]: ReMultitailArrow,\n  } as const;\n\n  public render: Render;\n  public molecule: Struct;\n  public atoms: Map<number, ReAtom> = new Map();\n  public bonds: Map<number, ReBond> = new Map();\n  public reloops: Map<number, ReLoop> = new Map();\n  public rxnPluses: Map<number, ReRxnPlus> = new Map();\n  public rxnArrows: Map<number, ReRxnArrow> = new Map();\n  public frags: Pool = new Pool();\n  public rgroups: Pool = new Pool();\n  public rgroupAttachmentPoints: Pool<ReRGroupAttachmentPoint> = new Pool();\n\n  public sgroups: Map<number, ReSGroup> = new Map();\n  public sgroupData: Map<number, ReDataSGroupData> = new Map();\n  public enhancedFlags: Map<number, ReEnhancedFlag> = new Map();\n  public simpleObjects: Map<number, ReSimpleObject> = new Map();\n  public texts: Map<number, ReText> = new Map();\n  public images = new Map<number, ReImage>();\n  public multitailArrows = new Map<number, ReMultitailArrow>();\n\n  private initialized = false;\n  private layers: Record<LayerMap, any> = {} as Record<LayerMap, unknown>;\n  public connectedComponents: Pool = new Pool();\n  private ccFragmentType: Pool = new Pool();\n  private structChanged = false;\n\n  // TWIMC, Those maps are accessed via dynamic names, using static maps field + 'Changed' string\n  private atomsChanged: Map<number, 1> = new Map();\n  private simpleObjectsChanged: Map<number, ReSimpleObject> = new Map();\n  private rxnArrowsChanged: Map<number, ReRxnArrow> = new Map();\n  private rxnPlusesChanged: Map<number, ReRxnPlus> = new Map();\n  private enhancedFlagsChanged: Map<number, ReEnhancedFlag> = new Map();\n  private bondsChanged: Map<number, ReEnhancedFlag> = new Map();\n  private textsChanged: Map<number, ReText> = new Map();\n  private imagesChanged = new Map<number, ReImage>();\n  private multitailArrowsChanged = new Map<number, ReMultitailArrow>();\n  private snappingBonds: number[] = [];\n\n  constructor(\n    molecule,\n    render: Render | { skipRaphaelInitialization: boolean; theme },\n  ) {\n    // eslint-disable-line max-statements\n    this.render = render as Render;\n    this.molecule = molecule || new Struct();\n    this.initLayers();\n    this.clearMarks();\n    // TODO: eachItem ?\n\n    molecule.atoms.forEach((atom, aid) => {\n      this.atoms.set(aid, new ReAtom(atom));\n    });\n\n    molecule.bonds.forEach((bond, bid) => {\n      this.bonds.set(bid, new ReBond(bond));\n    });\n\n    molecule.loops.forEach((loop, lid) => {\n      this.reloops.set(lid, new ReLoop(loop));\n    });\n\n    molecule.rxnPluses.forEach((item, id) => {\n      this.rxnPluses.set(id, new ReRxnPlus(item));\n    });\n\n    molecule.rxnArrows.forEach((item, id) => {\n      this.rxnArrows.set(id, new ReRxnArrow(item));\n    });\n\n    molecule.simpleObjects.forEach((item, id) => {\n      this.simpleObjects.set(id, new ReSimpleObject(item));\n    });\n\n    molecule.texts.forEach((item, id) => {\n      this.texts.set(id, new ReText(item));\n    });\n\n    molecule.frags.forEach((item, id) => {\n      this.frags.set(id, new ReFrag(item));\n      if (item) this.enhancedFlags.set(id, new ReEnhancedFlag());\n    });\n\n    molecule.rgroups.forEach((item, id) => {\n      this.rgroups.set(id, new ReRGroup(item));\n    });\n\n    molecule.rgroupAttachmentPoints.forEach(\n      (item: RGroupAttachmentPoint, id: number) => {\n        const reAtom = this.atoms.get(item.atomId);\n        assert(reAtom != null);\n        this.rgroupAttachmentPoints.set(\n          id,\n          new ReRGroupAttachmentPoint(item, reAtom),\n        );\n      },\n    );\n\n    molecule.sgroups.forEach((item, id) => {\n      this.sgroups.set(id, new ReSGroup(item));\n      if (item.type === 'DAT' && !item.data.attached) {\n        this.sgroupData.set(id, new ReDataSGroupData(item));\n      }\n    });\n    molecule.images.forEach((item, id) => {\n      this.images.set(id, new ReImage(item));\n    });\n    molecule.multitailArrows.forEach((item, id) => {\n      this.multitailArrows.set(id, new ReMultitailArrow(item));\n    });\n  }\n\n  get visibleRGroupAttachmentPoints() {\n    const sgroups = this.molecule.sgroups;\n    const functionalGroups = this.molecule.functionalGroups;\n    return this.rgroupAttachmentPoints.filter((_id, reItem) => {\n      const atomId = reItem.item.atomId;\n      const atom = this.molecule.atoms.get(atomId);\n      assert(atom != null);\n      return !FunctionalGroup.isAtomInContractedFunctionalGroup(\n        atom,\n        sgroups,\n        functionalGroups,\n        false,\n      );\n    });\n  }\n\n  connectedComponentRemoveAtom(aid: number, reAtom?: ReAtom): void {\n    const atom = reAtom || this.atoms.get(aid);\n    if (!atom || atom.component < 0) return;\n    const cc = this.connectedComponents.get(atom.component);\n\n    cc.delete(aid);\n    if (cc.size < 1) this.connectedComponents.delete(atom.component);\n\n    atom.component = -1;\n  }\n\n  clearConnectedComponents(): void {\n    this.connectedComponents.clear();\n    this.atoms.forEach((atom) => {\n      atom.component = -1;\n    });\n  }\n\n  getConnectedComponent(\n    aid: Array<number> | number,\n    adjacentComponents: Pile,\n  ): Pile {\n    const list = Array.isArray(aid) ? Array.from(aid) : [aid];\n    const ids = new Pile();\n\n    while (list.length > 0) {\n      const aid = list.pop()!;\n      ids.add(aid);\n      const atom = this.atoms.get(aid);\n      if (!atom) continue;\n      if (atom.component >= 0) adjacentComponents.add(atom.component);\n\n      atom.a.neighbors.forEach((neighbor) => {\n        const halfBond = this.molecule.halfBonds.get(neighbor);\n        if (!halfBond) return;\n        const neiId = halfBond.end;\n        if (!ids.has(neiId)) list.push(neiId);\n      });\n    }\n\n    return ids;\n  }\n\n  addConnectedComponent(idSet: Pile<number>): number {\n    const compId = this.connectedComponents.add(idSet);\n    const adjacentComponents = new Pile();\n    const aidSet = this.getConnectedComponent(\n      Array.from(idSet),\n      adjacentComponents,\n    );\n\n    adjacentComponents.delete(compId);\n\n    let type = -1;\n    aidSet.forEach((aid) => {\n      const atom = this.atoms.get(aid);\n      if (!atom) return;\n      atom.component = compId;\n      if (atom.a.rxnFragmentType !== -1) type = atom.a.rxnFragmentType;\n    });\n\n    this.ccFragmentType.set(compId, type);\n    return compId;\n  }\n\n  removeConnectedComponent(ccid: number): boolean {\n    this.connectedComponents.get(ccid).forEach((aid) => {\n      const atom = this.atoms.get(aid);\n      if (atom) atom.component = -1;\n    });\n\n    return this.connectedComponents.delete(ccid);\n  }\n\n  assignConnectedComponents(): void {\n    this.atoms.forEach((atom, aid) => {\n      if (atom.component >= 0) return;\n\n      const adjacentComponents = new Pile();\n      const idSet = this.getConnectedComponent(aid, adjacentComponents);\n      adjacentComponents.forEach((ccid) => {\n        this.removeConnectedComponent(ccid);\n      });\n\n      this.addConnectedComponent(idSet);\n    });\n  }\n\n  initLayers(): void {\n    for (const group in LayerMap) {\n      this.layers[LayerMap[group]] = this.render.paper\n        .rect(0, 0, 10, 10)\n        .attr({\n          class: group + 'Layer',\n          fill: '#000',\n          opacity: '0.0',\n        })\n        .toFront();\n    }\n  }\n\n  addReObjectPath(\n    group: LayerMap,\n    visel: Visel,\n    path,\n    pos: Vec2 | null = null,\n    visible = false,\n  ): void {\n    // eslint-disable-line max-params\n    if (!path || !this.layers[group].node.parentNode) return;\n    const paths = Array.isArray(path) ? path : [path];\n\n    paths.forEach((path) => {\n      const offset = this.render.options.offset;\n      let bb = visible ? Box2Abs.fromRelBox(util.relBox(path.getBBox())) : null;\n      const ext = pos && bb ? bb.translate(pos.negated()) : null;\n      if (offset !== null) {\n        path.translateAbs(offset.x, offset.y);\n        bb = bb ? bb.translate(offset) : null;\n      }\n      visel.add(path, bb, ext);\n      path.insertBefore(this.layers[LayerMap[group]]);\n    });\n  }\n\n  clearMarks(): void {\n    Object.keys(ReStruct.maps).forEach((map) => {\n      this[map + 'Changed'] = new Map();\n    });\n\n    this.structChanged = false;\n  }\n\n  markItemRemoved(): void {\n    this.structChanged = true;\n  }\n\n  markBond(bid: number, mark: number): void {\n    this.markItem('bonds', bid, mark);\n  }\n\n  markAtom(aid: number, mark: number): void {\n    this.markItem('atoms', aid, mark);\n  }\n\n  markRgroupAttachmentPoint(rgAPid: number, mark: number): void {\n    this.markItem('rgroupAttachmentPoints', rgAPid, mark);\n  }\n\n  markItem(map: string, id: number, mark: number): void {\n    const mapChanged = this[map + 'Changed'];\n\n    const value = mapChanged.has(id)\n      ? Math.max(mark, mapChanged.get(id))\n      : mark;\n\n    mapChanged.set(id, value);\n\n    if (this[map].has(id)) this.clearVisel(this[map].get(id).visel);\n  }\n\n  clearVisel(visel: Visel): void {\n    visel.paths.forEach((path) => {\n      path.remove();\n    });\n    visel.clear();\n  }\n\n  eachItem(func) {\n    Object.keys(ReStruct.maps).forEach((map) => {\n      this[map].forEach(func);\n    });\n  }\n\n  /**\n   * Why?\n   * we can't use just getVBoxObj and the center for atoms\n   * because this will lead incorrect center position for the move atom around it\n   * because of atom's vBox contain text label with is not constant after flip/rotate\n   * and this lead to unstable flip tool work\n   */\n  // eslint-disable-next-line no-use-before-define\n  getSelectionBoxCenter(selection: SelectionMap): Vec2 | undefined {\n    let boundingBox: Box2Abs | null = null;\n\n    for (const atomId of selection.atoms ?? []) {\n      const atomPositionPoint = this.atoms.get(atomId)!.a.pp;\n      const atomBox = new Box2Abs(atomPositionPoint, atomPositionPoint);\n      boundingBox =\n        boundingBox == null ? atomBox : Box2Abs.union(boundingBox, atomBox);\n    }\n    const selectionExceptAtoms = { ...selection };\n    delete selectionExceptAtoms.atoms;\n\n    const selectionExceptAtomsBoundingBox =\n      this.getBoundingBoxForSelection(selectionExceptAtoms);\n    if (selectionExceptAtomsBoundingBox) {\n      boundingBox = boundingBox\n        ? Box2Abs.union(boundingBox, selectionExceptAtomsBoundingBox)\n        : selectionExceptAtomsBoundingBox;\n    }\n\n    return boundingBox?.centre();\n  }\n\n  // eslint-disable-next-line no-use-before-define\n  getVBoxObj(selection?: SelectionMap): Box2Abs {\n    if (isSelectionEmpty(selection)) {\n      selection = this.getAllElementsAsSelectionMap();\n    }\n\n    let boundingBox = this.getBoundingBoxForSelection(selection);\n\n    boundingBox = boundingBox || new Box2Abs(0, 0, 0, 0);\n    return boundingBox;\n  }\n\n  // eslint-disable-next-line no-use-before-define\n  private getAllElementsAsSelectionMap(): SelectionMap {\n    // eslint-disable-next-line no-use-before-define\n    const selection: SelectionMap = {};\n    Object.keys(ReStruct.maps).forEach((map) => {\n      selection[map] = Array.from(this[map].keys());\n    });\n    return selection;\n  }\n\n  // eslint-disable-next-line no-use-before-define\n  private getBoundingBoxForSelection(selection: SelectionMap): Box2Abs | null {\n    let boundingBox: Box2Abs | null = null;\n    Object.keys(ReStruct.maps).forEach((elementKey) => {\n      selection[elementKey]?.forEach((elementId) => {\n        const box = this[elementKey].get(elementId).getVBoxObj(this.render);\n        if (box) {\n          boundingBox = boundingBox\n            ? Box2Abs.union(boundingBox, box)\n            : box.clone();\n        }\n      });\n    });\n    return boundingBox;\n  }\n\n  translate(d): void {\n    this.eachItem((item) => item.visel.translate(d));\n  }\n\n  scale(s: number): void {\n    // NOTE: bounding boxes are not valid after scaling\n    this.eachItem((item) => scaleVisel(item.visel, s));\n  }\n\n  clearVisels(): void {\n    this.eachItem((item) => this.clearVisel(item.visel));\n  }\n\n  update(force: boolean): boolean {\n    // eslint-disable-line max-statements\n    force = force || !this.initialized;\n\n    // check items to update\n    Object.keys(ReStruct.maps).forEach((map) => {\n      const mapChanged = this[map + 'Changed'];\n      if (force) {\n        this[map].forEach((_item, id) => mapChanged.set(id, 1));\n      } else {\n        // check if some of the items marked are already gone\n        mapChanged.forEach((_value, id) => {\n          if (!this[map].has(id)) mapChanged.delete(id);\n        });\n      }\n    });\n\n    this.atomsChanged.forEach((_value, aid) =>\n      this.connectedComponentRemoveAtom(aid),\n    );\n\n    // clean up empty fragments\n    // TODO: fragment removal should be triggered by the action responsible for the fragment contents removal and form an operation of its own\n    const emptyFrags = this.frags.filter(\n      (fid, frag) => !frag.calcBBox(this.render.ctab, fid, this.render),\n    );\n\n    emptyFrags.forEach((frag, fid) => {\n      this.clearVisel(frag.visel);\n      this.frags.delete(fid);\n      this.molecule.frags.delete(fid);\n    });\n\n    Object.keys(ReStruct.maps).forEach((map) => {\n      const mapChanged = this[map + 'Changed'];\n\n      mapChanged.forEach((_value, id) => {\n        if (this[map].get(id).visel) {\n          this.clearVisel(this[map].get(id).visel);\n        }\n        this.structChanged = this.structChanged || mapChanged.get(id) > 0;\n      });\n    });\n    // TODO: when to update sgroup?\n    this.sgroups.forEach((sgroup) => {\n      this.clearVisel(sgroup.visel);\n      sgroup.hovering = null;\n      sgroup.selectionPlate = null;\n    });\n\n    // TODO [RB] need to implement update-on-demand for fragments and r-groups\n    this.frags.forEach((frag) => {\n      this.clearVisel(frag.visel);\n    });\n\n    this.rgroups.forEach((rgroup) => {\n      this.clearVisel(rgroup.visel);\n    });\n\n    if (force) {\n      // clear and recreate all half-bonds\n      this.clearConnectedComponents();\n      this.molecule.initHalfBonds();\n      this.molecule.initNeighbors();\n    }\n\n    // only update half-bonds adjacent to atoms that have moved\n    const atomsChangedArray = Array.from(this.atomsChanged.keys());\n    this.molecule.updateHalfBonds(atomsChangedArray);\n    this.molecule.sortNeighbors(atomsChangedArray);\n\n    this.assignConnectedComponents();\n    this.initialized = true;\n\n    this.verifyLoops();\n    const updLoops = force || this.structChanged;\n    if (updLoops) this.updateLoops();\n    this.showAtoms();\n    this.showBonds();\n    this.showRgroupAttachmentPoints();\n    if (updLoops) this.showLoops();\n    this.showReactionSymbols();\n    this.showSGroups();\n\n    this.showFragments();\n    this.showRGroups();\n    this.showEnhancedFlags();\n    this.showSimpleObjects();\n    this.showTexts();\n    this.showImages();\n    this.showMultitailArrows();\n    this.clearMarks();\n\n    return true;\n  }\n\n  updateLoops(): void {\n    this.reloops.forEach((reloop) => {\n      this.clearVisel(reloop.visel);\n    });\n    const ret = this.molecule.findLoops();\n    ret.bondsToMark.forEach((bid) => {\n      this.markBond(bid, 1);\n    });\n    ret.newLoops.forEach((loopId) => {\n      this.reloops.set(loopId, new ReLoop(this.molecule.loops.get(loopId)));\n    });\n  }\n\n  showLoops(): void {\n    const options = this.render.options;\n    this.reloops.forEach((reloop, rlid) => {\n      reloop.show(this, rlid, options);\n    });\n  }\n\n  showSimpleObjects(): void {\n    const options = this.render.options;\n\n    this.simpleObjectsChanged.forEach((_value, id) => {\n      const simpleObject = this.simpleObjects.get(id);\n      if (simpleObject) simpleObject.show(this, options);\n    });\n  }\n\n  showTexts() {\n    const options = this.render.options;\n\n    this.textsChanged.forEach((_value, id) => {\n      const text = this.texts.get(id);\n      if (text) text.show(this, id, options);\n    });\n  }\n\n  showReactionSymbols(): void {\n    const options = this.render.options;\n\n    this.rxnArrowsChanged.forEach((_value, id) => {\n      const arrow = this.rxnArrows.get(id);\n      if (arrow) arrow.show(this, id, options);\n    });\n\n    this.rxnPlusesChanged.forEach((_value, id) => {\n      const plus = this.rxnPluses.get(id);\n      if (plus) plus.show(this, id, options);\n    });\n  }\n\n  showSGroups(): void {\n    this.molecule.sGroupForest\n      .getSGroupsBFS()\n      .reverse()\n      .forEach((id) => {\n        const resgroup = this.sgroups.get(id);\n        if (!resgroup) return;\n        resgroup.show(this);\n      });\n  }\n\n  showFragments(): void {\n    this.frags.forEach((frag, id) => {\n      const path = frag.draw(this.render, id);\n      if (path) {\n        this.addReObjectPath(LayerMap.data, frag.visel, path, null, true);\n      }\n      // TODO fragment selection & highlighting\n    });\n  }\n\n  showRGroups(): void {\n    const options = this.render.options;\n    this.rgroups.forEach((rgroup, id) => {\n      rgroup.show(this, id, options);\n    });\n  }\n\n  loopRemove(loopId: number): void {\n    const reloop = this.reloops.get(loopId);\n    if (!reloop) {\n      return;\n    }\n    this.clearVisel(reloop.visel);\n\n    const bondlist: Array<number> = [];\n\n    reloop.loop.hbs.forEach((hbid) => {\n      const hb = this.molecule.halfBonds.get(hbid);\n      if (!hb) return;\n      hb.loop = -1;\n      this.markBond(hb.bid, 1);\n      this.markAtom(hb.begin, 1);\n      bondlist.push(hb.bid);\n    });\n\n    this.reloops.delete(loopId);\n    this.molecule.loops.delete(loopId);\n  }\n\n  verifyLoops(): void {\n    this.reloops.forEach((reloop, rlid) => {\n      if (!reloop.isValid(this.molecule, rlid)) this.loopRemove(rlid);\n    });\n  }\n\n  getRGroupAttachmentPointsVBoxByAtomIds(atomsIds: number[]): Box2Abs | null {\n    let allAtomAttachmentPointsVBox: Box2Abs | null = null;\n\n    atomsIds.forEach((atomId) => {\n      const attachmentPointIds =\n        this.molecule.getRGroupAttachmentPointsByAtomId(atomId);\n\n      const oneAtomAttachmentPointsVBox = attachmentPointIds.reduce(\n        (previousVBox, attachmentPointId) => {\n          const attachmentPoint =\n            this.rgroupAttachmentPoints.get(attachmentPointId);\n          assert(attachmentPoint != null);\n          const currentVBox = attachmentPoint.getVBoxObj(this.render);\n          return previousVBox && currentVBox\n            ? Box2Abs.union(previousVBox, currentVBox)\n            : currentVBox;\n        },\n        null as Box2Abs | null,\n      );\n\n      if (allAtomAttachmentPointsVBox && oneAtomAttachmentPointsVBox) {\n        allAtomAttachmentPointsVBox = Box2Abs.union(\n          allAtomAttachmentPointsVBox,\n          oneAtomAttachmentPointsVBox,\n        );\n      } else {\n        allAtomAttachmentPointsVBox =\n          allAtomAttachmentPointsVBox ?? oneAtomAttachmentPointsVBox;\n      }\n    });\n\n    return allAtomAttachmentPointsVBox;\n  }\n\n  private showRgroupAttachmentPoints() {\n    // why update all rgroupAttachmentPoints instead of changed ones?\n    // 1. The label of an R-Group attachment point may be affected by other R-Group attachment points\n    // 2. The visibility of an an R-Group attachment point may be affected by contracting/expanding an S-Group\n    this.rgroupAttachmentPoints.forEach((_value, id) => {\n      const rgroupAttachmentPoint = this.rgroupAttachmentPoints.get(id);\n      if (rgroupAttachmentPoint?.visel) {\n        this.clearVisel(rgroupAttachmentPoint.visel);\n      }\n\n      const attachedAtomId = rgroupAttachmentPoint?.item.atomId;\n      const sgroup = this.molecule.getGroupFromAtomId(attachedAtomId);\n      const isInsideContractedSGroup = Boolean(sgroup?.isContracted());\n      if (isInsideContractedSGroup) {\n        return;\n      }\n\n      rgroupAttachmentPoint?.show(this, id);\n    });\n  }\n\n  private showAtoms(): void {\n    // eslint-disable-line max-statements\n    const options = this.render.options;\n    this.atomsChanged.forEach((_value, aid) => {\n      const atom = this.atoms.get(aid);\n      if (atom) atom.show(this, aid, options);\n    });\n  }\n\n  showEnhancedFlags(): void {\n    const options = this.render.options;\n\n    this.enhancedFlagsChanged.forEach((_value, chid) => {\n      const flag = this.enhancedFlags.get(chid);\n      if (flag) flag.show(this, chid, options);\n    });\n  }\n\n  showBonds(): void {\n    // eslint-disable-line max-statements\n    const options = this.render.options;\n\n    this.bondsChanged.forEach((_value, bid) => {\n      const bond = this.bonds.get(bid);\n      if (bond) {\n        bond.show(this, bid, options);\n      }\n    });\n  }\n\n  showImages() {\n    const options = this.render.options;\n    this.imagesChanged.forEach((_, id) => {\n      const image = this.images.get(id);\n      if (image) {\n        image.show(this, options);\n      }\n    });\n  }\n\n  showMultitailArrows() {\n    this.multitailArrowsChanged.forEach((_, id) => {\n      const multitailArrow = this.multitailArrows.get(id);\n      if (multitailArrow) {\n        multitailArrow.show(this, this.render.options);\n      }\n    });\n  }\n\n  setSelection(selection?) {\n    const atoms: { selected: boolean; sgroup: number }[] = [];\n\n    Object.keys(ReStruct.maps).forEach((map) => {\n      const [mapValues] = this[map].values(); // hack to include ReSGroup, figure out better solution\n      if (ReStruct.maps[map].isSelectable() || mapValues instanceof ReSGroup) {\n        this[map].forEach((item, id) => {\n          if (item instanceof ReAtom) {\n            let sgroup;\n            for (const sgId of item.a.sgs.values()) {\n              sgroup = sgId;\n            }\n            atoms.push({\n              selected: item.selected,\n              sgroup,\n            });\n          }\n          if (\n            item instanceof ReSGroup &&\n            FunctionalGroup.isContractedFunctionalGroup(\n              item?.item?.id,\n              this.molecule.functionalGroups,\n            )\n          ) {\n            const sGroupAtoms = atoms.filter(\n              (atom) => atom.sgroup === item?.item?.id,\n            );\n            item.selected =\n              sGroupAtoms.length > 0 &&\n              sGroupAtoms.some((atom) => atom.selected);\n          }\n\n          let selected = selection?.[map]\n            ? selection[map].indexOf(id) > -1\n            : item.selected;\n\n          if (selection === null) {\n            selected = false;\n          }\n\n          this.showItemSelection(item, selected);\n        });\n      }\n    });\n  }\n\n  showItemSelection(item, selected) {\n    const exists = isSelectionSvgObjectExists(item);\n    // TODO: simplify me, who sets `removed`?\n    item.selected = selected;\n    if (item instanceof ReDataSGroupData) item.sgroup.selected = selected;\n    if (selected) {\n      if (!exists) {\n        const render = this.render;\n        const options = render.options;\n        const paper = render.paper;\n\n        item.selectionPlate = item.makeSelectionPlate(this, paper, options);\n        this.addReObjectPath(\n          LayerMap.selectionPlate,\n          item.visel,\n          item.selectionPlate,\n        );\n\n        if (typeof item.makeAdditionalInfo === 'function') {\n          item.additionalInfo = item.makeAdditionalInfo(this);\n          this.addReObjectPath(\n            LayerMap.additionalInfo,\n            item.visel,\n            item.additionalInfo,\n          );\n        }\n      }\n      if (item.selectionPlate) {\n        item.selectionPlate.show();\n        item.additionalInfo?.show();\n        item.cip?.rectangle.attr({\n          fill: '#7f7',\n          stroke: '#7f7',\n        });\n        if (item.togglePoints) item.togglePoints(true);\n      }\n    } else if (exists && item.selectionPlate) {\n      item.selectionPlate.hide();\n      if (item.togglePoints) item.togglePoints(false);\n      item.additionalInfo?.hide();\n      item.cip?.rectangle.attr({\n        fill: '#fff',\n        stroke: '#fff',\n      });\n    }\n  }\n\n  addSnappingBonds(bondId: number) {\n    this.snappingBonds.push(bondId);\n  }\n\n  clearSnappingBonds() {\n    this.snappingBonds = [];\n  }\n\n  isSnappingBond(bondId: number) {\n    return this.snappingBonds.includes(bondId);\n  }\n}\n\n// eslint-disable-next-line no-use-before-define\nfunction isSelectionEmpty(selection?: SelectionMap): selection is undefined {\n  if (!selection) return true;\n\n  const anySelection = Object.keys(ReStruct.maps).some(\n    (map) => selection[map] && selection[map].length > 0,\n  );\n\n  return !anySelection;\n}\n\nfunction scaleRPath(path, scaleFactor: number): void {\n  if (path.type === 'set') {\n    // TODO: rework scaling\n    for (let i = 0; i < path.length; ++i) scaleRPath(path[i], scaleFactor);\n  } else {\n    if (!(typeof path.attrs === 'undefined')) {\n      if ('font-size' in path.attrs) {\n        path.attr('font-size', path.attrs['font-size'] * scaleFactor);\n      } else if ('stroke-width' in path.attrs) {\n        path.attr('stroke-width', path.attrs['stroke-width'] * scaleFactor);\n      }\n    }\n    path.scale(scaleFactor, scaleFactor, 0, 0);\n  }\n}\n\nfunction scaleVisel(visel, s) {\n  for (let i = 0; i < visel.paths.length; ++i) scaleRPath(visel.paths[i], s);\n}\n\n/**\n * SelectionPlate could be an item then value would be in it\n * or it could be a set of items then removed value need to be check on at least one of items in set\n * @param item\n * @returns {boolean}\n */\nfunction isSelectionSvgObjectExists(item) {\n  return (\n    item &&\n    item.selectionPlate !== null &&\n    ((!item.selectionPlate?.items && !item.selectionPlate?.removed) ||\n      (Array.isArray(item.selectionPlate?.items) &&\n        !item.selectionPlate[0]?.removed))\n  );\n}\n\ntype SelectionMap = Partial<\n  Record<keyof typeof ReStruct.maps, number[] | undefined>\n>;\n\nexport default ReStruct;\n","import { Vec2 } from 'domain/entities';\nimport { Render } from './raphaelRender';\nimport { Scale } from 'domain/helpers';\n\nconst canvasToView = (point: Vec2, render: Render) => {\n  const offset = new Vec2(render.viewBox.minX, render.viewBox.minY);\n  return point.sub(offset).scaled(render.options.zoom);\n};\n\nconst modelToView = (vector: Vec2, render: Render) => {\n  const pointInCanvas = Scale.modelToCanvas(vector, render.options);\n  return canvasToView(pointInCanvas, render);\n};\n\nconst viewToCanvas = (point: Vec2, render: Render) => {\n  const offset = new Vec2(render.viewBox.minX, render.viewBox.minY);\n  return point.scaled(1 / render.options.zoom).add(offset);\n};\n\nconst pageToView = (\n  event: MouseEvent | { clientX: number; clientY: number },\n  renderClientArea: HTMLElement,\n) => {\n  const { top: offsetTop, left: offsetLeft } =\n    renderClientArea.getBoundingClientRect();\n  return new Vec2(event.clientX - offsetLeft, event.clientY - offsetTop);\n};\n\nconst pageToCanvas = (\n  event: MouseEvent | { clientX: number; clientY: number },\n  render: Render,\n) => {\n  const pointInViewBox = pageToView(event, render.clientArea);\n  return viewToCanvas(pointInViewBox, render);\n};\n\nconst pageToModel = (\n  event: MouseEvent | { clientX: number; clientY: number },\n  render: Render,\n) => {\n  const pointInCanvas = pageToCanvas(event, render);\n  return Scale.canvasToModel(pointInCanvas, render.options);\n};\n\n/**\n * @see ./__docs__/Coordinate-Origins.png\n * `model` - The original coordinates of entities.\n * `canvas` - The scaled `model`. The real coordinates Raphael uses to draw entities.\n * `page` - The part of the document you're viewing which is currently visible in the window.\n * `view` - The part of the canvas you're viewing which is currently visible in the window.\n * */\nexport const CoordinateTransformation = {\n  modelToView,\n  canvasToView,\n  viewToCanvas,\n  pageToCanvas,\n  pageToModel,\n};\n","import { Box2Abs, Vec2 } from 'domain/entities';\nimport { Render } from '../raphaelRender';\nimport { Scale } from 'domain/helpers';\n\nexport class ScrollOffset {\n  #render: Render;\n  up = 0;\n  down = 0;\n  left = 0;\n  right = 0;\n\n  constructor(render: Render) {\n    this.#render = render;\n  }\n\n  getAbsViewBox(): Box2Abs {\n    const viewBox = this.#render.viewBox;\n    const viewBoxMinXY = new Vec2(viewBox.minX, viewBox.minY);\n    const viewBoxMaxXY = new Vec2(\n      viewBox.minX + viewBox.width,\n      viewBox.minY + viewBox.height,\n    );\n    return new Box2Abs(viewBoxMinXY, viewBoxMaxXY);\n  }\n\n  getAbsBoundingBox(): Box2Abs {\n    const protoBoundingBox = this.#render.ctab.getVBoxObj();\n    const boundingBoxMinXY = Scale.modelToCanvas(\n      protoBoundingBox.p0,\n      this.#render.options,\n    );\n    const boundingBoxMaxXY = Scale.modelToCanvas(\n      protoBoundingBox.p1,\n      this.#render.options,\n    );\n    return new Box2Abs(boundingBoxMinXY, boundingBoxMaxXY);\n  }\n\n  #calculateOffset() {\n    const absBoundingBox = this.getAbsBoundingBox();\n    if (absBoundingBox.hasZeroArea()) {\n      this.up = 0;\n      this.down = 0;\n      this.left = 0;\n      this.right = 0;\n    } else {\n      const absViewBox = this.getAbsViewBox();\n      this.up = absViewBox.p0.y - absBoundingBox.p0.y;\n      this.down = absBoundingBox.p1.y - absViewBox.p1.y;\n      this.left = absViewBox.p0.x - absBoundingBox.p0.x;\n      this.right = absBoundingBox.p1.x - absViewBox.p1.x;\n    }\n  }\n\n  update() {\n    this.#calculateOffset();\n  }\n\n  hasVerticalOffset() {\n    return this.up > 0 || this.down > 0;\n  }\n\n  hasHorizontalOffset() {\n    return this.left > 0 || this.right > 0;\n  }\n}\n","import { Render } from '../raphaelRender';\nimport { ViewBox } from '../render.types';\nimport { RaphaelElement, RaphaelRectAttr } from './types';\n\nexport abstract class Scrollbar {\n  protected bar: RaphaelElement | null = null;\n  protected render: Render;\n  protected viewBoxBeforeDrag: ViewBox | null = null;\n\n  protected MIN_LENGTH = 40;\n  protected RADIUS = 2;\n  protected MARGIN = 5;\n  protected WIDTH = 4;\n  protected DIST_TO_EDGE = 5;\n  protected COLOR = '#b2bbc3';\n\n  protected constructor(render: Render) {\n    this.render = render;\n  }\n\n  update() {\n    this.bar = this.hasOffset() ? this.redraw() : this.hide();\n  }\n\n  protected redraw() {\n    return this.bar ? this.updateAttr() : this.draw();\n  }\n\n  protected updateAttr() {\n    const attr = this.getDynamicAttr();\n    return this.bar?.attr(attr);\n  }\n\n  protected hide() {\n    this.bar?.undrag();\n    this.bar?.remove();\n    return null;\n  }\n\n  protected draw() {\n    const { x, y, width, height, r } = this.getDynamicAttr();\n    const bar = this.render.paper.rect(x, y, width, height, r).attr({\n      stroke: this.COLOR,\n      fill: this.COLOR,\n    });\n\n    /** @see https://dmitrybaranovskiy.github.io/raphael/reference.html#Element.drag */\n    bar.drag(\n      this.onDragMove,\n      this.onDragStart,\n      this.onDragEnd,\n      this,\n      this,\n      this,\n    );\n\n    return bar;\n  }\n\n  protected onDragStart(_x: number, _y: number, event: MouseEvent) {\n    this.viewBoxBeforeDrag = { ...this.render.viewBox };\n    event.stopPropagation();\n  }\n\n  protected onDragEnd(event: MouseEvent) {\n    event.stopPropagation();\n  }\n\n  abstract hasOffset(): boolean;\n  abstract getDynamicAttr(): RaphaelRectAttr;\n  abstract onDragMove(\n    dx: number,\n    dy: number,\n    x: number,\n    y: number,\n    event: MouseEvent,\n  ): void;\n}\n","import type { RenderOptions } from '../render.types';\n\nconst SCALE_FACTOR = 0.5;\n\n/**\n * To make scrollbar provide better UX, this function can help to achieve\n * moving scrollbar `x` offsets leads to moving viewBox `2 * x` offsets\n * */\nexport const getUserFriendlyScrollOffset = (offset: number) => {\n  return offset * SCALE_FACTOR;\n};\n\nexport const getUserFriendlyViewBoxDelta = (delta: number) => {\n  return delta / SCALE_FACTOR;\n};\n\nexport const getZoomedValue = (value: number, renderOptions: RenderOptions) => {\n  return value / renderOptions.zoom;\n};\n","import { clamp } from 'lodash';\nimport { Render } from '../raphaelRender';\nimport { ScrollOffset } from './scroll-offset';\nimport { Scrollbar } from './scrollbar';\nimport { RaphaelRectAttr } from './types';\nimport {\n  getUserFriendlyScrollOffset,\n  getUserFriendlyViewBoxDelta,\n  getZoomedValue,\n} from './utils';\n\nexport class VerticalScrollbar extends Scrollbar {\n  #scrollOffset: ScrollOffset;\n\n  constructor(render: Render, scrollOffset: ScrollOffset) {\n    super(render);\n    this.#scrollOffset = scrollOffset;\n  }\n\n  hasOffset(): boolean {\n    return this.#scrollOffset.hasVerticalOffset();\n  }\n\n  getDynamicAttr(): RaphaelRectAttr {\n    const minX =\n      this.render.viewBox.minX +\n      this.render.viewBox.width -\n      getZoomedValue(this.DIST_TO_EDGE, this.render.options);\n    const minY =\n      this.render.viewBox.minY +\n      clamp(\n        getUserFriendlyScrollOffset(this.#scrollOffset.up),\n        getZoomedValue(this.MARGIN, this.render.options),\n        this.render.viewBox.height -\n          getZoomedValue(this.MIN_LENGTH + this.MARGIN, this.render.options),\n      );\n    const maxY =\n      this.render.viewBox.minY +\n      this.render.viewBox.height -\n      clamp(\n        getUserFriendlyScrollOffset(this.#scrollOffset.down),\n        getZoomedValue(this.MARGIN, this.render.options),\n        this.render.viewBox.height,\n      );\n    const length = Math.max(\n      maxY - minY,\n      getZoomedValue(this.MIN_LENGTH, this.render.options),\n    );\n\n    return {\n      x: minX,\n      y: minY,\n      width: getZoomedValue(this.WIDTH, this.render.options),\n      height: length,\n      r: getZoomedValue(this.RADIUS, this.render.options),\n    };\n  }\n\n  onDragMove(\n    _dx: number,\n    dy: number,\n    _x: number,\n    _y: number,\n    _event: MouseEvent,\n  ): void {\n    if (!this.viewBoxBeforeDrag) {\n      return;\n    }\n\n    this.render.setViewBox({\n      ...this.viewBoxBeforeDrag,\n      minY: this.viewBoxBeforeDrag.minY + getUserFriendlyViewBoxDelta(dy),\n    });\n  }\n}\n","import { clamp } from 'lodash';\nimport { Render } from '../raphaelRender';\nimport { ScrollOffset } from './scroll-offset';\nimport { Scrollbar } from './scrollbar';\nimport { RaphaelRectAttr } from './types';\nimport {\n  getUserFriendlyScrollOffset,\n  getUserFriendlyViewBoxDelta,\n  getZoomedValue,\n} from './utils';\n\nexport class HorizontalScrollbar extends Scrollbar {\n  #scrollOffset: ScrollOffset;\n\n  constructor(render: Render, scrollOffset: ScrollOffset) {\n    super(render);\n    this.#scrollOffset = scrollOffset;\n  }\n\n  hasOffset(): boolean {\n    return this.#scrollOffset.hasHorizontalOffset();\n  }\n\n  getDynamicAttr(): RaphaelRectAttr {\n    const minX =\n      this.render.viewBox.minX +\n      clamp(\n        getUserFriendlyScrollOffset(this.#scrollOffset.left),\n        getZoomedValue(this.MARGIN, this.render.options),\n        this.render.viewBox.width -\n          getZoomedValue(this.MIN_LENGTH + this.MARGIN, this.render.options),\n      );\n    const minY =\n      this.render.viewBox.minY +\n      this.render.viewBox.height -\n      getZoomedValue(this.DIST_TO_EDGE, this.render.options);\n    const maxX =\n      this.render.viewBox.minX +\n      this.render.viewBox.width -\n      clamp(\n        getUserFriendlyScrollOffset(this.#scrollOffset.right),\n        getZoomedValue(this.MARGIN, this.render.options),\n        this.render.viewBox.width,\n      );\n    const length = Math.max(\n      maxX - minX,\n      getZoomedValue(this.MIN_LENGTH, this.render.options),\n    );\n\n    return {\n      x: minX,\n      y: minY,\n      width: length,\n      height: getZoomedValue(this.WIDTH, this.render.options),\n      r: getZoomedValue(this.RADIUS, this.render.options),\n    };\n  }\n\n  onDragMove(\n    dx: number,\n    _dy: number,\n    _x: number,\n    _y: number,\n    _event: MouseEvent,\n  ): void {\n    if (!this.viewBoxBeforeDrag) {\n      return;\n    }\n\n    this.render.setViewBox({\n      ...this.viewBoxBeforeDrag,\n      minX: this.viewBoxBeforeDrag.minX + getUserFriendlyViewBoxDelta(dx),\n    });\n  }\n}\n","import { Render } from '../raphaelRender';\nimport { ScrollOffset } from './scroll-offset';\nimport { VerticalScrollbar } from './scrollbar-vertical';\nimport { HorizontalScrollbar } from './scrollbar-horizontal';\n\nexport class ScrollbarContainer {\n  #scrollOffset: ScrollOffset;\n  #verticalBar: VerticalScrollbar | null = null;\n  #horizontalBar: HorizontalScrollbar | null = null;\n\n  constructor(render: Render) {\n    this.#scrollOffset = new ScrollOffset(render);\n    this.#verticalBar = new VerticalScrollbar(render, this.#scrollOffset);\n    this.#horizontalBar = new HorizontalScrollbar(render, this.#scrollOffset);\n  }\n\n  update() {\n    this.#scrollOffset.update();\n    this.#verticalBar?.update();\n    this.#horizontalBar?.update();\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Box2Abs, Struct, Vec2 } from 'domain/entities';\nimport { RaphaelPaper } from 'raphael';\n\nimport Raphael from './raphael-ext';\nimport { ReStruct } from './restruct';\nimport { Scale } from 'domain/helpers';\nimport defaultOptions from './options';\nimport draw from './draw';\nimport { RenderOptions, ViewBox } from './render.types';\nimport { KetcherLogger } from 'utilities';\nimport { CoordinateTransformation } from './coordinateTransformation';\nimport { ScrollbarContainer } from './scrollbar';\nimport { notifyRenderComplete } from './notifyRenderComplete';\n\nexport class Render {\n  public skipRaphaelInitialization = false;\n  public readonly clientArea: HTMLElement;\n  public readonly paper: RaphaelPaper;\n  // TODO https://github.com/epam/ketcher/issues/2631\n  public sz: Vec2;\n  // TODO https://github.com/epam/ketcher/issues/2630\n  public ctab: ReStruct;\n  public options: RenderOptions;\n  public viewBox!: ViewBox;\n  private readonly userOpts: RenderOptions;\n  private oldCb: Box2Abs | null = null;\n  private scrollbar: ScrollbarContainer;\n  private resizeObserver: ResizeObserver | null = null;\n\n  constructor(\n    clientArea: HTMLElement,\n    options: RenderOptions,\n    reuseRestructIfExist?: boolean,\n  ) {\n    this.userOpts = options;\n    this.clientArea = clientArea;\n    this.paper = new Raphael(\n      clientArea,\n      options.width || '100%',\n      options.height || '100%',\n    );\n    this.sz = this.getCanvasSizeVector();\n    this.options = defaultOptions(this.userOpts);\n    if (reuseRestructIfExist && global.ketcher?.editor?.render?.ctab) {\n      this.ctab = global.ketcher?.editor?.render?.ctab;\n      this.ctab.render = this;\n      this.ctab.initLayers();\n      this.ctab.update(true);\n    } else {\n      this.ctab = new ReStruct(new Struct(), this);\n    }\n    this.scrollbar = new ScrollbarContainer(this);\n    this.setViewBox({\n      minX: 0,\n      minY: 0,\n      width: this.sz.x,\n      height: this.sz.y,\n    });\n  }\n\n  observeCanvasResize = () => {\n    this.resizeObserver = new ResizeObserver(() => {\n      this.sz = this.getCanvasSizeVector();\n      this.resizeViewBox();\n    });\n\n    this.resizeObserver.observe(this.paper.canvas);\n  };\n\n  unobserveCanvasResize = () => {\n    this.resizeObserver?.unobserve(this.paper.canvas);\n  };\n\n  updateOptions(opts: string) {\n    try {\n      const passedOptions = JSON.parse(opts);\n      if (passedOptions && typeof passedOptions === 'object') {\n        this.options = { ...this.options, ...passedOptions };\n        return this.options;\n      }\n    } catch (e) {\n      KetcherLogger.error('raphaelRenderer.ts::updateOptions', e);\n      console.log('Not a valid settings object');\n    }\n    return false;\n  }\n\n  selectionPolygon(polygon: Vec2[]) {\n    return draw.selectionPolygon(this.paper, polygon, this.options);\n  }\n\n  selectionLine(point0: Vec2, point1: Vec2) {\n    return draw.selectionLine(this.paper, point0, point1, this.options);\n  }\n\n  selectionRectangle(point0: Vec2, point1: Vec2) {\n    return draw.selectionRectangle(this.paper, point0, point1, this.options);\n  }\n\n  /** @deprecated recommend using `CoordinateTransformation.pageToModel` instead */\n  page2obj(event: MouseEvent | { clientX: number; clientY: number }) {\n    return CoordinateTransformation.pageToModel(event, this);\n  }\n\n  setZoom(zoom: number, event?: WheelEvent) {\n    const zoomedWidth = this.sz.x / zoom;\n    const zoomedHeight = this.sz.y / zoom;\n    const [viewBoxX, viewBoxY] = event\n      ? this.zoomOnMouse(event, zoomedWidth, zoomedHeight)\n      : this.zoomOnCanvasCenter(zoomedWidth, zoomedHeight);\n    this.setViewBox({\n      minX: viewBoxX,\n      minY: viewBoxY,\n      width: zoomedWidth,\n      height: zoomedHeight,\n    });\n\n    this.options.zoom = zoom;\n  }\n\n  private getCanvasSizeVector() {\n    return this.userOpts.width\n      ? new Vec2(this.userOpts.width, this.userOpts.height)\n      : new Vec2(this.clientArea.clientWidth, this.clientArea.clientHeight);\n  }\n\n  resizeViewBox() {\n    this.sz = this.getCanvasSizeVector();\n    const newWidth = this.sz.x / this.options.zoom;\n    const newHeight = this.sz.y / this.options.zoom;\n    this.setViewBox((prev) => ({\n      ...prev,\n      width: newWidth,\n      height: newHeight,\n    }));\n  }\n\n  private zoomOnCanvasCenter(zoomedWidth: number, zoomedHeight: number) {\n    const fixedPoint = new Vec2(\n      this.viewBox.minX + this.viewBox.width / 2,\n      this.viewBox.minY + this.viewBox.height / 2,\n    );\n    const viewBoxX = fixedPoint.x - zoomedWidth / 2;\n    const viewBoxY = fixedPoint.y - zoomedHeight / 2;\n    return [viewBoxX, viewBoxY];\n  }\n\n  private zoomOnMouse(\n    event: WheelEvent,\n    zoomedWidth: number,\n    zoomedHeight: number,\n  ) {\n    const fixedPoint = CoordinateTransformation.pageToCanvas(event, this);\n    const widthRatio = (fixedPoint.x - this.viewBox.minX) / this.viewBox.width;\n    const heightRatio =\n      (fixedPoint.y - this.viewBox.minY) / this.viewBox.height;\n    const viewBoxX = fixedPoint.x - zoomedWidth * widthRatio;\n    const viewBoxY = fixedPoint.y - zoomedHeight * heightRatio;\n    return [viewBoxX, viewBoxY];\n  }\n\n  /**\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute/viewBox\n   */\n  setViewBox(func: (viewBox: ViewBox) => ViewBox): void;\n  setViewBox(viewBox: ViewBox): void;\n  setViewBox(arg: ViewBox | ((viewBox: ViewBox) => ViewBox)): void {\n    const newViewBox = typeof arg === 'function' ? arg(this.viewBox) : arg;\n    this.viewBox = newViewBox;\n    this.paper.canvas.setAttribute(\n      'viewBox',\n      `${newViewBox.minX} ${newViewBox.minY} ${newViewBox.width} ${newViewBox.height}`,\n    );\n    this.scrollbar.update();\n  }\n\n  setMolecule(struct: Struct, forceUpdateWithTimeout = false) {\n    this.paper.clear();\n    this.ctab = new ReStruct(struct, this);\n    this.options.offset = new Vec2();\n    // need to use force update with timeout to have ability select bonds in case of usage:\n    // addFragment, setMolecule or \"Paste from clipboard\" with \"Open as New Project\" button\n    if (forceUpdateWithTimeout) {\n      setTimeout(() => {\n        this.update(true);\n      }, 0);\n    } else {\n      this.update(false);\n    }\n  }\n\n  update(force = false, viewSz: Vec2 | null = null) {\n    // eslint-disable-line max-statements\n    viewSz =\n      viewSz ||\n      new Vec2(\n        this.userOpts.width || this.clientArea.clientWidth || 100,\n        this.userOpts.height || this.clientArea.clientHeight || 100,\n      );\n\n    const changes = this.ctab.update(force);\n    this.ctab.setSelection(); // [MK] redraw the selection bits where necessary\n    if (changes) {\n      const bb = this.ctab\n        .getVBoxObj()\n        .transform(Scale.modelToCanvas, this.options)\n        .translate(this.options.offset || new Vec2());\n\n      if (this.options.downScale) {\n        this.ctab.molecule.rescale();\n      }\n\n      const isAutoScale = this.options.autoScale || this.options.downScale;\n      if (!isAutoScale) {\n        if (!this.oldCb) this.oldCb = new Box2Abs();\n        this.scrollbar.update();\n        this.options.offset = this.options.offset || new Vec2();\n      } else {\n        const sz1 = bb.sz();\n        const marg = this.options.autoScaleMargin;\n        const mv = new Vec2(marg, marg);\n        const csz = viewSz;\n        if (marg && (csz.x < 2 * marg + 1 || csz.y < 2 * marg + 1)) {\n          throw new Error('View box too small for the given margin');\n        }\n        let rescale =\n          this.options.rescaleAmount ||\n          Math.max(sz1.x / (csz.x - 2 * marg), sz1.y / (csz.y - 2 * marg));\n\n        const isForceDownscale = this.options.downScale && rescale < 1;\n        const isBondsLengthFit = this.options.maxBondLength / rescale > 1;\n        if (isBondsLengthFit || isForceDownscale) {\n          rescale = 1;\n        }\n        const sz2 = sz1.add(mv.scaled(2 * rescale));\n        this.paper.setViewBox(\n          bb.pos().x - marg * rescale - (csz.x * rescale - sz2.x) / 2,\n          bb.pos().y - marg * rescale - (csz.y * rescale - sz2.y) / 2,\n          csz.x * rescale,\n          csz.y * rescale,\n        );\n      }\n\n      notifyRenderComplete();\n    }\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\n// todo: rename file in another PR\nimport { ReStruct, StereLabelStyleType } from '../../render';\n\nimport { OperationType } from './OperationType';\n\ntype ValueOf<TObject extends object> = Readonly<TObject[keyof TObject]>;\ntype OperationType = ValueOf<typeof OperationType>;\n\nclass BaseOperation {\n  // eslint-disable-next-line no-use-before-define\n  private _inverted: BaseOperation | undefined;\n  type: OperationType;\n  priority: number;\n  data: any;\n\n  constructor(type: OperationType, priority = 0) {\n    this.type = type;\n    this.priority = priority;\n  }\n\n  execute(_restruct: ReStruct): void {\n    throw new Error('Operation.execute() is not implemented');\n  }\n\n  perform(restruct: ReStruct): BaseOperation {\n    this.execute(restruct);\n    if (!this._inverted) {\n      this._inverted = this.invert();\n      this._inverted._inverted = this;\n    }\n    return this._inverted;\n  }\n\n  invert(): BaseOperation {\n    throw new Error('Operation.invert() is not implemented');\n  }\n\n  isDummy(_restruct: ReStruct): boolean {\n    return false;\n  }\n\n  protected static invalidateAtom(restruct: ReStruct, atomId: number, level?) {\n    const atom = restruct.atoms.get(atomId);\n    if (!atom) {\n      return;\n    }\n\n    restruct.markAtom(atomId, level ? 1 : 0);\n\n    const halfBonds = restruct.molecule.halfBonds;\n\n    atom.a.neighbors.forEach((halfBondId) => {\n      if (!halfBonds.has(halfBondId)) {\n        return;\n      }\n\n      const halfBond = halfBonds.get(halfBondId);\n      if (!halfBond) {\n        return;\n      }\n\n      restruct.markBond(halfBond.bid, 1);\n      restruct.markAtom(halfBond.end, 0);\n\n      if (level) {\n        BaseOperation.invalidateLoop(restruct, halfBond.bid);\n      }\n    });\n\n    const fragment = atom.a.fragment;\n    const stereoLabelStyle = restruct.render.options.stereoLabelStyle;\n\n    restruct.atoms.forEach((atom, atomId) => {\n      if (\n        stereoLabelStyle === StereLabelStyleType.IUPAC ||\n        stereoLabelStyle === StereLabelStyleType.Classic\n      ) {\n        if (atom.a.fragment === fragment) restruct.markAtom(atomId, 0);\n      }\n    });\n  }\n\n  protected static invalidateLoop(restruct: ReStruct, bondId: number) {\n    const bond = restruct.bonds.get(bondId);\n    if (!bond || !bond.b.hb1 || !bond.b.hb2) {\n      return;\n    }\n\n    const halfBond1 = restruct.molecule.halfBonds.get(bond.b.hb1);\n    const halfBond2 = restruct.molecule.halfBonds.get(bond.b.hb2);\n\n    if (halfBond1 && halfBond1.loop >= 0) {\n      restruct.loopRemove(halfBond1.loop);\n    }\n\n    if (halfBond2 && halfBond2.loop >= 0) {\n      restruct.loopRemove(halfBond2.loop);\n    }\n  }\n\n  protected static invalidateBond(restruct: ReStruct, bondId: number) {\n    BaseOperation.invalidateLoop(restruct, bondId);\n\n    const bond = restruct.bonds.get(bondId);\n    if (!bond) {\n      return;\n    }\n    BaseOperation.invalidateAtom(restruct, bond.b.begin, 0);\n    BaseOperation.invalidateAtom(restruct, bond.b.end, 0);\n  }\n\n  protected static invalidateItem(\n    restruct: ReStruct,\n    mapName: keyof typeof ReStruct.maps,\n    id: number,\n    level?: any,\n  ) {\n    if (mapName === 'atoms') {\n      BaseOperation.invalidateAtom(restruct, id, level);\n      return;\n    }\n\n    if (mapName === 'bonds') {\n      BaseOperation.invalidateBond(restruct, id);\n\n      if (level > 0) {\n        BaseOperation.invalidateLoop(restruct, id);\n      }\n      return;\n    }\n\n    restruct.markItem(mapName, id, level);\n  }\n\n  protected static invalidateEnhancedFlag(\n    restruct: ReStruct,\n    fragmentId: number,\n  ) {\n    BaseOperation.invalidateItem(restruct, 'enhancedFlags', fragmentId, 1);\n  }\n}\n\nexport { BaseOperation };\nexport default BaseOperation;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nexport const OperationType = Object.freeze({\n  ATOM_ADD: 'Add atom',\n  ATOM_DELETE: 'Delete atom',\n  ATOM_ATTR: 'Set atom attribute',\n  ATOM_MOVE: 'Move atom',\n  CALC_IMPLICIT_H: 'Calculate implicit hydrogen',\n  BOND_ADD: 'Add bond',\n  BOND_DELETE: 'Delete bond',\n  BOND_ATTR: 'Set bond attribute',\n  BOND_MOVE: 'Move bond',\n  LOOP_MOVE: 'Move loop',\n  S_GROUP_ATTACHMENT_POINT_ADD: 'Add attachment point to s-group',\n  S_GROUP_ATTACHMENT_POINT_REMOVE: 'Remove attachment point from s-group',\n  S_GROUP_ATOM_ADD: 'Add atom to s-group',\n  S_GROUP_ATOM_REMOVE: 'Remove atom from s-group',\n  S_GROUP_ATTR: 'Set s-group attribute',\n  S_GROUP_CREATE: 'Create s-group',\n  S_GROUP_DELETE: 'Delete s-group',\n  S_GROUP_ADD_TO_HIERACHY: 'Add s-group to hierarchy',\n  S_GROUP_REMOVE_FROM_HIERACHY: 'Delete s-group from hierarchy',\n  R_GROUP_ATTR: 'Set r-group attribute',\n  R_GROUP_FRAGMENT: 'R-group fragment',\n  R_GROUP_ATTACHMENT_POINT_ADD: 'Add R-group attachment point',\n  R_GROUP_ATTACHMENT_POINT_REMOVE: 'Remove R-group attachment point',\n  UPDATE_IF_THEN: 'Update',\n  RESTORE_IF_THEN: 'Restore',\n  RXN_ARROW_ADD: 'Add rxn arrow',\n  RXN_ARROW_DELETE: 'Delete rxn arrow',\n  RXN_ARROW_MOVE: 'Move rxn arrow',\n  RXN_ARROW_ROTATE: 'Rotate rxn arrow',\n  RXN_ARROW_RESIZE: 'Resize rxn arrow',\n  RXN_PLUS_ADD: 'Add rxn plus',\n  RXN_PLUS_DELETE: 'Delete rxn plus',\n  RXN_PLUS_MOVE: 'Move rxn plus',\n  S_GROUP_DATA_MOVE: 'Move s-group data',\n  CANVAS_LOAD: 'Load canvas',\n  ALIGN_DESCRIPTORS: 'Align descriptors',\n  SIMPLE_OBJECT_ADD: 'Add simple object',\n  SIMPLE_OBJECT_DELETE: 'Delete simple object',\n  SIMPLE_OBJECT_MOVE: 'Move simple object',\n  SIMPLE_OBJECT_RESIZE: 'Resize simple object',\n  RESTORE_DESCRIPTORS_POSITION: 'Restore descriptors position',\n  FRAGMENT_ADD: 'Add fragment',\n  FRAGMENT_DELETE: 'Delete fragment',\n  FRAGMENT_SET_PROPERTIES: 'Set fragment properties',\n  FRAGMENT_STEREO_FLAG: 'Add fragment stereo flag',\n  FRAGMENT_ADD_STEREO_ATOM: 'Add stereo atom to fragment',\n  FRAGMENT_DELETE_STEREO_ATOM: 'Delete stereo atom from fragment',\n  ENHANCED_FLAG_MOVE: 'Move enhanced flag',\n  TEXT_CREATE: 'Add text',\n  TEXT_UPDATE: 'Edit text',\n  TEXT_DELETE: 'Delete text',\n  TEXT_MOVE: 'Move text',\n  ADD_HIGHLIGHT: 'Highlight',\n  UPDATE_HIGHLIGHT: 'Update highlight',\n  REMOVE_HIGHLIGHT: 'Remove highlight',\n  POLYMER_BOND_ADD: 'Add polymer bond',\n  POLYMER_BOND_DELETE: 'Remove polymer bond',\n  POLYMER_BOND_MOVE: 'Move polymer bond',\n  POLYMER_BOND_FINISH_CREATION: 'Finish polymer bond creation',\n  POLYMER_BOND_CANCEL_CREATION: 'Cancel polymer bond creation',\n  PEPTIDE_ADD: 'Add peptide',\n  PEPTIDE_REMOVE: 'Remove peptide',\n  PEPTIDE_MOVE: 'Move peptide',\n  PEPTIDE_HOVER: 'Hover peptide',\n  DRAWING_ENTITY_SELECT: 'Select drawing entity',\n  DRAWING_ENTITY_HOVER: 'Hover drawing entity',\n  SHOW_POLYMER_BOND_INFORMATION: 'Show polymer bond information',\n  IMAGE_UPSERT: 'Upsert image',\n  IMAGE_DELETE: 'Delete image',\n  IMAGE_MOVE: 'Move image',\n  IMAGE_RESIZE: 'Resize image',\n  MULTITAIL_ARROW_UPSERT: 'Upsert multitail arrow',\n  MULTITAIL_ARROW_DELETE: 'Delete multitail arrow',\n  MULTITAIL_ARROW_MOVE: 'Move multitail arrow',\n  MULTITAIL_ARROW_ADD_TAIL: 'Add multitail arrow tail',\n  MULTITAIL_ARROW_REMOVE_TAIL: 'Remove multitail arrow tail',\n  MULTITAIL_ARROW_RESIZE_HEAD_TAIL: 'Resize head tail',\n  MULTITAIL_ARROW_MOVE_HEAD_TAIL: 'Move head tail',\n});\n\nexport enum OperationPriority {\n  ATOM_ATTR = 1,\n  BOND_ADD = 1,\n  R_GROUP_ATTACHMENT_POINT_REMOVE = 1,\n  ATOM_MOVE = 2,\n  BOND_ATTR = 2,\n  BOND_MOVE = 2,\n  BOND_DELETE = 3,\n  S_GROUP_ATOM_ADD = 3,\n  S_GROUP_ATTACHMENT_POINT_ADD = 3,\n  R_GROUP_ATTACHMENT_POINT_ADD = 3,\n  S_GROUP_ATTR = 4,\n  ATOM_DELETE = 5,\n  FRAGMENT_STEREO_FLAG = 6,\n  CALC_IMPLICIT_H = 10,\n  FRAGMENT_DELETE_STEREO_ATOM = 90,\n  S_GROUP_DELETE = 95,\n  S_GROUP_ADD_TO_HIERACHY = 100,\n  FRAGMENT_ADD_STEREO_ATOM = 100,\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../base';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\n\ntype Data = {\n  aid?: any;\n  attribute?: any;\n  value?: any;\n};\n\nexport class AtomAttr extends BaseOperation {\n  data: Data | null;\n  data2: Data | null;\n\n  constructor(atomId?: any, attribute?: any, value?: any) {\n    super(OperationType.ATOM_ATTR, OperationPriority.ATOM_ATTR);\n    this.data = { aid: atomId, attribute, value };\n    this.data2 = null;\n  }\n\n  execute(restruct: ReStruct) {\n    if (this.data) {\n      const { aid, attribute, value } = this.data;\n\n      const atom = restruct.molecule.atoms.get(aid)!;\n      if (!this.data2) {\n        this.data2 = {\n          aid,\n          attribute,\n          value: atom[attribute],\n        };\n      }\n\n      atom[attribute] = value;\n      BaseOperation.invalidateAtom(restruct, aid);\n    }\n  }\n\n  invert() {\n    const inverted = new AtomAttr();\n    inverted.data = this.data2;\n    inverted.data2 = this.data;\n    return inverted;\n  }\n\n  isDummy(restruct: ReStruct) {\n    return (\n      restruct.molecule.atoms.get(this.data?.aid)![this.data?.attribute] ===\n      this.data?.value\n    );\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../base';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\nimport { Scale } from 'domain/helpers';\n\nexport class AtomMove extends BaseOperation {\n  data: {\n    aid: any;\n    d: any;\n    noinvalidate: any;\n  };\n\n  constructor(atomId?: any, d?: any, noinvalidate?: any) {\n    super(OperationType.ATOM_MOVE, OperationPriority.ATOM_MOVE);\n    this.data = { aid: atomId, d, noinvalidate };\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n    const { aid, d } = this.data;\n    const atom = struct.atoms.get(aid);\n    if (!atom) return;\n    atom!.pp.add_(d); // eslint-disable-line no-underscore-dangle\n    const reatom = restruct.atoms.get(aid);\n    if (reatom) {\n      const scaled = Scale.modelToCanvas(d, restruct.render.options);\n      reatom.visel.translate(scaled);\n    }\n\n    this.data.d = d.negated();\n\n    if (!this.data.noinvalidate) {\n      BaseOperation.invalidateAtom(restruct, aid, 1);\n    }\n  }\n\n  invert() {\n    const inverted = new AtomMove();\n    inverted.data = this.data;\n    return inverted;\n  }\n\n  isDummy() {\n    const { d } = this.data;\n    return d.x === 0 && d.y === 0;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { Atom, Pile, Vec2 } from 'domain/entities';\nimport { ReAtom, ReStruct } from '../../../render';\n\nimport { BaseOperation } from '../base';\nimport { OperationPriority, OperationType } from '../OperationType';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\ntype Data = {\n  aid: any;\n  atom: any;\n  pos: any;\n};\n\nclass AtomAdd extends BaseOperation {\n  data: Data;\n\n  constructor(atom?: any, pos?: any) {\n    super(OperationType.ATOM_ADD);\n    this.data = { atom, pos, aid: null };\n  }\n\n  execute(restruct: ReStruct) {\n    const { atom, pos } = this.data;\n\n    const struct = restruct.molecule;\n\n    const pp: { label: string } = { label: '' };\n    if (atom) {\n      Object.keys(atom).forEach((p) => {\n        pp[p] = atom[p];\n      });\n    }\n\n    pp.label = pp.label || 'C';\n    if (typeof this.data.aid !== 'number') {\n      this.data.aid = struct.atoms.add(new Atom(pp));\n    } else {\n      struct.atoms.set(this.data.aid, new Atom(pp));\n    }\n\n    const { aid } = this.data;\n\n    // notifyAtomAdded\n    const atomData = new ReAtom(struct.atoms.get(aid)!);\n\n    atomData.component = restruct.connectedComponents.add(new Pile([aid]));\n    restruct.atoms.set(aid, atomData);\n    restruct.markAtom(aid, 1);\n\n    struct.atomSetPos(aid, new Vec2(pos));\n\n    const arrow = struct.rxnArrows.get(0);\n    if (arrow) {\n      const atom = struct.atoms.get(aid)!;\n      atom.rxnFragmentType = struct.defineRxnFragmentTypeForAtomset(\n        new Pile([aid]),\n        arrow.pos[0].x,\n      );\n    }\n  }\n\n  invert() {\n    const inverted = new AtomDelete();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nclass AtomDelete extends BaseOperation {\n  data: Data;\n\n  constructor(atomId?: any) {\n    super(OperationType.ATOM_DELETE, OperationPriority.ATOM_DELETE);\n    this.data = { aid: atomId, atom: null, pos: null };\n  }\n\n  execute(restruct: ReStruct) {\n    const { aid } = this.data;\n\n    const struct = restruct.molecule;\n    if (!this.data.atom) {\n      this.data.atom = struct.atoms.get(aid);\n      this.data.pos = this.data.atom.pp;\n    }\n\n    // notifyAtomRemoved(aid);\n    const restructedAtom = restruct.atoms.get(aid);\n    if (!restructedAtom) {\n      return;\n    }\n\n    const set = restruct.connectedComponents.get(restructedAtom.component);\n    set.delete(aid);\n    if (set.size === 0) {\n      restruct.connectedComponents.delete(restructedAtom.component);\n    }\n\n    restruct.clearVisel(restructedAtom.visel);\n    restruct.atoms.delete(aid);\n    restruct.markItemRemoved();\n    struct.atoms.delete(aid);\n  }\n\n  invert() {\n    const inverted = new AtomAdd();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nexport { AtomAdd, AtomDelete };\nexport * from './AtomAttr';\nexport * from './AtomMove';\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../base';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\n\ntype Data = {\n  bid: any;\n  attribute: any;\n  value: any;\n  needInvalidateBond?: boolean;\n};\n\nexport class BondAttr extends BaseOperation {\n  data: Data | null;\n  data2: Data | null;\n\n  constructor(\n    bondId?: any,\n    attribute?: any,\n    value?: any,\n    needInvalidateBond = true,\n  ) {\n    super(OperationType.BOND_ATTR, OperationPriority.BOND_ATTR);\n    this.data = { bid: bondId, attribute, value, needInvalidateBond };\n    this.data2 = null;\n  }\n\n  execute(restruct: ReStruct) {\n    if (this.data) {\n      const { attribute, bid, value } = this.data;\n      const bond = restruct.molecule.bonds.get(bid)!;\n\n      if (!this.data2) {\n        this.data2 = {\n          bid,\n          attribute,\n          value: bond[attribute],\n        };\n      }\n\n      bond[attribute] = value;\n\n      if (this.data.needInvalidateBond) {\n        BaseOperation.invalidateBond(restruct, bid);\n      }\n      if (attribute === 'type') {\n        BaseOperation.invalidateLoop(restruct, bid);\n      }\n    }\n  }\n\n  isDummy(restruct: ReStruct) {\n    if (this.data) {\n      const { attribute, bid, value } = this.data;\n      const bond = restruct.molecule.bonds.get(bid)!;\n      return bond[attribute] === value;\n    }\n    return false;\n  }\n\n  invert() {\n    const inverted = new BondAttr();\n    inverted.data = this.data2;\n    inverted.data2 = this.data;\n    return inverted;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../base';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\nimport { Scale } from 'domain/helpers';\n\nexport class BondMove extends BaseOperation {\n  data: {\n    bid: any;\n    d: any;\n  };\n\n  constructor(bondId?: any, d?: any) {\n    super(OperationType.BOND_MOVE, OperationPriority.BOND_MOVE);\n    this.data = { bid: bondId, d };\n  }\n\n  execute(restruct: ReStruct) {\n    const { bid, d } = this.data;\n    const bond = restruct.bonds.get(bid);\n    if (!bond) return;\n\n    const scaled = Scale.modelToCanvas(d, restruct.render.options);\n    bond.visel.translate(scaled);\n    this.data.d = d.negated();\n  }\n\n  invert() {\n    const inverted = new BondMove();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { ReBond, ReStruct } from '../../../render';\n\nimport { BaseOperation } from '../base';\nimport { Bond } from 'domain/entities';\nimport { OperationPriority, OperationType } from '../OperationType';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\ntype Data = {\n  bond: any;\n  begin: any;\n  end: any;\n  bid: any;\n  needInvalidateAtoms?: boolean;\n};\n\nclass BondAdd extends BaseOperation {\n  data: Data;\n\n  constructor(begin?: any, end?: any, bond?: any, needInvalidateAtoms = true) {\n    super(OperationType.BOND_ADD, OperationPriority.BOND_ADD);\n    this.data = { bond, begin, end, bid: null, needInvalidateAtoms };\n  }\n\n  execute(restruct: ReStruct) {\n    const { begin, bond, end } = this.data;\n    // eslint-disable-line max-statements\n    const struct = restruct.molecule;\n\n    if (begin === end) {\n      throw new Error('Distinct atoms expected');\n    }\n\n    if (this.data.needInvalidateAtoms) {\n      BaseOperation.invalidateAtom(restruct, begin, 1);\n      BaseOperation.invalidateAtom(restruct, end, 1);\n    }\n\n    const pp: {\n      type: number;\n      begin: number;\n      end: number;\n    } = {\n      type: 0,\n      begin: 0,\n      end: 0,\n    };\n\n    if (bond) {\n      Object.keys(bond).forEach((p) => {\n        pp[p] = bond[p];\n      });\n    }\n\n    pp.type = pp.type || Bond.PATTERN.TYPE.SINGLE;\n    pp.begin = begin;\n    pp.end = end;\n\n    const newBond = new Bond(pp);\n    if (typeof this.data.bid === 'number') {\n      struct.bonds.set(this.data.bid, newBond);\n    } else {\n      this.data.bid = struct.bonds.add(newBond);\n    }\n\n    const { bid } = this.data;\n    const structBond = struct.bonds.get(bid)!;\n\n    struct.bondInitHalfBonds(bid);\n    struct.atomAddNeighbor(structBond.hb1);\n    struct.atomAddNeighbor(structBond.hb2);\n\n    // notifyBondAdded\n    restruct.bonds.set(bid, new ReBond(structBond));\n    restruct.markBond(bid, 1);\n  }\n\n  invert() {\n    const inverted = new BondDelete();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nclass BondDelete extends BaseOperation {\n  data: Data;\n\n  constructor(bondId?: any) {\n    super(OperationType.BOND_DELETE, OperationPriority.BOND_DELETE);\n    this.data = {\n      bid: bondId,\n      bond: null,\n      begin: null,\n      end: null,\n      needInvalidateAtoms: true,\n    };\n  }\n\n  execute(restruct: ReStruct) {\n    const { bid } = this.data;\n\n    // eslint-disable-line max-statements\n    const struct = restruct.molecule;\n    if (!this.data.bond) {\n      this.data.bond = struct.bonds.get(bid);\n      this.data.begin = this.data.bond.begin;\n      this.data.end = this.data.bond.end;\n    }\n\n    BaseOperation.invalidateBond(restruct, bid);\n\n    // notifyBondRemoved\n    const rebond = restruct.bonds.get(bid);\n    if (!rebond) return;\n    [rebond.b.hb1, rebond.b.hb2].forEach((hbid) => {\n      if (hbid === undefined) return;\n      const halfBond = restruct.molecule.halfBonds.get(hbid);\n      if (halfBond && halfBond.loop >= 0) {\n        restruct.loopRemove(halfBond.loop);\n      }\n    }, restruct);\n    restruct.clearVisel(rebond.visel);\n    restruct.bonds.delete(bid);\n    restruct.markItemRemoved();\n\n    const structBond = struct.bonds.get(bid)!;\n    [structBond.hb1, structBond.hb2].forEach((hbid) => {\n      const halfBond = struct.halfBonds.get(hbid!);\n      if (!halfBond) {\n        return;\n      }\n\n      const atom = struct.atoms.get(halfBond.begin)!;\n      const pos = atom.neighbors.indexOf(hbid!);\n      const prev = (pos + atom.neighbors.length - 1) % atom.neighbors.length;\n      const next = (pos + 1) % atom.neighbors.length;\n      struct.setHbNext(atom.neighbors[prev], atom.neighbors[next]);\n      atom.neighbors.splice(pos, 1);\n    });\n    struct.halfBonds.delete(structBond.hb1!);\n    struct.halfBonds.delete(structBond.hb2!);\n\n    struct.bonds.delete(bid);\n  }\n\n  invert() {\n    const inverted = new BondAdd();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nexport { BondAdd, BondDelete };\nexport * from './BondAttr';\nexport * from './BondMove';\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from './base';\nimport { OperationType } from './OperationType';\nimport { ReStruct } from '../../render';\nimport { Struct } from 'domain/entities';\n\nexport class CanvasLoad extends BaseOperation {\n  data: {\n    struct?: Struct;\n  };\n\n  constructor(struct?: Struct) {\n    super(OperationType.CANVAS_LOAD);\n    this.data = { struct };\n  }\n\n  execute(restruct: ReStruct) {\n    const oldStruct = restruct.molecule;\n    restruct.clearVisels(); // TODO: What is it?\n    if (this.data.struct) {\n      restruct.render.setMolecule(this.data.struct, true);\n    }\n\n    this.data.struct = oldStruct;\n  }\n\n  invert() {\n    const inverted = new CanvasLoad();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { BaseOperation } from './base';\nimport { OperationType } from './OperationType';\nimport { ReStruct } from '../../render';\nimport { Vec2 } from 'domain/entities';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\nclass AlignDescriptors extends BaseOperation {\n  history: any;\n\n  constructor() {\n    super(OperationType.ALIGN_DESCRIPTORS);\n    this.history = {};\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n    const sgroups: any[] = Array.from(struct.sgroups.values()).reverse();\n\n    const structBox: any = struct.getCoordBoundingBoxObj();\n    let alignPoint = new Vec2(structBox.max.x, structBox.min.y).add(\n      new Vec2(2.0, -1.0),\n    );\n\n    sgroups.forEach((sgroup) => {\n      this.history[sgroup.id] = new Vec2(sgroup.pp);\n      alignPoint = alignPoint.add(new Vec2(0.0, 0.5));\n      sgroup.pp = alignPoint;\n      struct.sgroups.set(sgroup.id, sgroup);\n      BaseOperation.invalidateItem(restruct, 'sgroupData', sgroup.id, 1);\n    });\n  }\n\n  invert() {\n    return new RestoreDescriptorsPosition(this.history);\n  }\n}\n\nclass RestoreDescriptorsPosition extends BaseOperation {\n  history: any;\n\n  constructor(history: any) {\n    super(OperationType.RESTORE_DESCRIPTORS_POSITION);\n    this.history = history;\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n    const sgroups: any[] = Array.from(struct.sgroups.values());\n\n    sgroups.forEach((sgroup) => {\n      sgroup.pp = this.history[sgroup.id];\n      struct.sgroups.set(sgroup.id, sgroup);\n      BaseOperation.invalidateItem(restruct, 'sgroupData', sgroup.id, 1);\n    });\n  }\n\n  invert() {\n    return new AlignDescriptors();\n  }\n}\n\nexport { AlignDescriptors, RestoreDescriptorsPosition };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Fragment, Vec2 } from 'domain/entities';\n\nimport { BaseOperation } from './base';\nimport { OperationType } from './OperationType';\nimport { ReStruct } from '../../render';\n\nexport class EnhancedFlagMove extends BaseOperation {\n  data: {\n    frid: any;\n    p: any;\n  };\n\n  constructor(fragmentId?: any, p?: any) {\n    super(OperationType.ENHANCED_FLAG_MOVE);\n    this.data = { frid: fragmentId, p };\n  }\n\n  execute(restruct: ReStruct) {\n    const { frid } = this.data;\n    const { p } = this.data;\n    const fragment = restruct.molecule.frags.get(frid);\n    if (!fragment) return;\n\n    const currentPosition = fragment.stereoFlagPosition\n      ? new Vec2(fragment.stereoFlagPosition.x, fragment.stereoFlagPosition.y)\n      : Fragment.getDefaultStereoFlagPosition(restruct.molecule, frid)!;\n\n    const newPosition = Vec2.sum(currentPosition, p);\n    fragment.stereoFlagPosition = newPosition;\n\n    this.data.p = p.negated();\n    BaseOperation.invalidateItem(restruct, 'enhancedFlags', frid, 1);\n  }\n\n  invert() {\n    const inverted = new EnhancedFlagMove();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { BaseOperation } from './base';\nimport { OperationType } from './OperationType';\nimport { ReStruct } from '../../render';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\nclass UpdateIfThen extends BaseOperation {\n  rgid_new: any;\n  rgid_old: any;\n  ifThenHistory: any;\n  skipRgids: any[];\n\n  constructor(rgNew: any, rgOld: any, skipRgids: any = []) {\n    super(OperationType.UPDATE_IF_THEN);\n    this.rgid_new = rgNew;\n    this.rgid_old = rgOld;\n    this.ifThenHistory = new Map();\n    this.skipRgids = skipRgids || [];\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n\n    struct.rgroups.forEach((rg, rgid) => {\n      if (rg.ifthen === this.rgid_old && !this.skipRgids.includes(rgid)) {\n        rg.ifthen = this.rgid_new;\n        this.ifThenHistory.set(rgid, this.rgid_old);\n        struct.rgroups.set(rgid, rg);\n      }\n    });\n  }\n\n  invert() {\n    return new RestoreIfThen(this.rgid_new, this.rgid_old, this.ifThenHistory);\n  }\n}\n\nclass RestoreIfThen extends BaseOperation {\n  rgid_new: any;\n  rgid_old: any;\n  ifThenHistory: any;\n\n  constructor(rgNew: any, rgOld: any, history: any) {\n    super(OperationType.RESTORE_IF_THEN);\n    this.rgid_new = rgNew;\n    this.rgid_old = rgOld;\n    this.ifThenHistory = history || new Map();\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n\n    this.ifThenHistory.forEach((rg, rgid) => {\n      const rgValue = struct.rgroups.get(rgid)!;\n      rgValue.ifthen = rg;\n      struct.rgroups.set(rgid, rgValue);\n    });\n  }\n\n  invert() {\n    return new UpdateIfThen(this.rgid_old, this.rgid_new);\n  }\n}\n\nexport { UpdateIfThen, RestoreIfThen };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { ReEnhancedFlag, ReFrag, ReStruct } from '../../render';\n\nimport { BaseOperation } from './base';\nimport { Fragment, StructProperty } from 'domain/entities';\nimport { OperationType } from './OperationType';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\nclass FragmentAdd extends BaseOperation {\n  frid: any;\n  properties?: Array<StructProperty>;\n\n  constructor(fragmentId?: any, properties?: Array<StructProperty>) {\n    super(OperationType.FRAGMENT_ADD);\n    this.frid = typeof fragmentId === 'undefined' ? null : fragmentId;\n    if (properties) {\n      this.properties = properties;\n    }\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n    const frag = new Fragment([], null, this.properties);\n\n    if (this.frid === null) {\n      this.frid = struct.frags.add(frag);\n    } else {\n      struct.frags.set(this.frid, frag);\n    }\n\n    restruct.frags.set(this.frid, new ReFrag(frag)); // TODO add restruct.notifyFragmentAdded\n    restruct.enhancedFlags.set(this.frid, new ReEnhancedFlag());\n  }\n\n  invert() {\n    return new FragmentDelete(this.frid);\n  }\n}\n\nclass FragmentSetProperties extends BaseOperation {\n  frid: any;\n  properties?: Array<StructProperty>;\n\n  constructor(fragmentId: any, properties?: Array<StructProperty>) {\n    super(OperationType.FRAGMENT_SET_PROPERTIES);\n    this.frid = fragmentId;\n    this.properties = properties;\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n    const frag = struct.frags.get(this.frid);\n\n    if (frag) {\n      if (this.properties) {\n        frag.properties = this.properties;\n      } else {\n        delete frag?.properties;\n      }\n    }\n  }\n\n  invert() {\n    return new FragmentSetProperties(this.frid, undefined);\n  }\n}\n\nclass FragmentDelete extends BaseOperation {\n  frid: any;\n\n  constructor(fragmentId: any) {\n    super(OperationType.FRAGMENT_DELETE, 100);\n    this.frid = fragmentId;\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n    if (!struct.frags.get(this.frid)) {\n      return;\n    }\n\n    BaseOperation.invalidateItem(restruct, 'frags', this.frid, 1);\n    restruct.frags.delete(this.frid);\n    struct.frags.delete(this.frid); // TODO add restruct.notifyFragmentRemoved\n\n    const enhancedFalg = restruct.enhancedFlags.get(this.frid);\n    if (!enhancedFalg) return;\n    restruct.clearVisel(enhancedFalg.visel);\n    restruct.enhancedFlags.delete(this.frid);\n  }\n\n  invert() {\n    return new FragmentAdd(this.frid);\n  }\n}\n\nexport { FragmentAdd, FragmentDelete, FragmentSetProperties };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { BaseOperation } from './base';\nimport { OperationPriority, OperationType } from './OperationType';\nimport { ReStruct } from '../../render';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\ntype Data = {\n  frid: any;\n  aid: any;\n};\n\n// todo : merge add and delete stereo atom\nclass FragmentAddStereoAtom extends BaseOperation {\n  data: Data;\n\n  constructor(fragmentId: any, atomId: any) {\n    super(\n      OperationType.FRAGMENT_ADD_STEREO_ATOM,\n      OperationPriority.FRAGMENT_ADD_STEREO_ATOM,\n    );\n    this.data = { frid: fragmentId, aid: atomId };\n  }\n\n  execute(restruct: ReStruct) {\n    const { aid, frid } = this.data;\n\n    const frag = restruct.molecule.frags.get(frid);\n    if (frag) {\n      frag.updateStereoAtom(restruct.molecule, aid, frid, true);\n\n      BaseOperation.invalidateEnhancedFlag(restruct, frid);\n    }\n  }\n\n  invert() {\n    return new FragmentDeleteStereoAtom(this.data.frid, this.data.aid);\n  }\n}\n\nclass FragmentDeleteStereoAtom extends BaseOperation {\n  data: Data;\n\n  constructor(fragmentId: any, atomId: any) {\n    super(\n      OperationType.FRAGMENT_DELETE_STEREO_ATOM,\n      OperationPriority.FRAGMENT_DELETE_STEREO_ATOM,\n    );\n    this.data = { frid: fragmentId, aid: atomId };\n  }\n\n  execute(restruct: ReStruct) {\n    const { aid, frid } = this.data;\n\n    const frag = restruct.molecule.frags.get(frid);\n    if (frag) {\n      frag.updateStereoAtom(restruct.molecule, aid, frid, false);\n\n      BaseOperation.invalidateEnhancedFlag(restruct, frid);\n    }\n  }\n\n  invert() {\n    const { aid, frid } = this.data;\n    return new FragmentAddStereoAtom(frid, aid);\n  }\n}\n\nexport { FragmentAddStereoAtom, FragmentDeleteStereoAtom };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from './base';\nimport { OperationPriority, OperationType } from './OperationType';\nimport { ReStruct } from '../../render';\n\nexport class FragmentStereoFlag extends BaseOperation {\n  frid: number;\n\n  constructor(fragmentId: number) {\n    super(\n      OperationType.FRAGMENT_STEREO_FLAG,\n      OperationPriority.FRAGMENT_STEREO_FLAG,\n    );\n    this.frid = fragmentId;\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n\n    const fragment = struct.frags.get(this.frid)!;\n    fragment.updateStereoFlag(struct);\n\n    BaseOperation.invalidateEnhancedFlag(restruct, this.frid);\n  }\n\n  invert() {\n    const inverted = new FragmentStereoFlag(this.frid);\n    return inverted;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from './base';\nimport { OperationPriority, OperationType } from './OperationType';\nimport { ReStruct } from '../../render';\n\nexport class CalcImplicitH extends BaseOperation {\n  atomIds: Array<number>;\n\n  constructor(aids: Array<number>) {\n    super(OperationType.CALC_IMPLICIT_H, OperationPriority.CALC_IMPLICIT_H);\n    this.atomIds = aids;\n  }\n\n  execute(restruct: ReStruct) {\n    const aIds = this.atomIds;\n\n    restruct.molecule.setImplicitHydrogen(aIds);\n  }\n\n  invert() {\n    return new CalcImplicitH(this.atomIds);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from './base';\nimport { OperationType } from './OperationType';\nimport { ReStruct } from '../../render';\nimport { Scale } from 'domain/helpers';\n\nexport class LoopMove extends BaseOperation {\n  data: {\n    id: any;\n    d: any;\n  };\n\n  constructor(id?: any, d?: any) {\n    super(OperationType.LOOP_MOVE);\n    this.data = { id, d };\n  }\n\n  execute(restruct: ReStruct) {\n    // not sure if there should be an action to move a loop in the first place\n    // but we have to somehow move the aromatic ring,\n    // which is associated with the loop, rather than with any of the bonds\n    const { id, d } = this.data;\n    const reloop = restruct.reloops.get(id);\n\n    if (reloop && reloop.visel) {\n      const scaled = Scale.modelToCanvas(d, restruct.render.options);\n      reloop.visel.translate(scaled);\n    }\n    this.data.d = d.negated();\n  }\n\n  invert() {\n    const inverted = new LoopMove();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n","import { BaseOperation } from 'application/editor/operations/base';\nimport { Vec2 } from 'domain/entities';\nimport { OperationType } from 'application/editor';\nimport { ReStruct } from 'application/render';\nimport { Scale } from 'domain/helpers';\n\nexport class ImageMove extends BaseOperation {\n  constructor(private id: number, private offset: Vec2) {\n    super(OperationType.IMAGE_MOVE);\n  }\n\n  execute(reStruct: ReStruct) {\n    const renderItem = reStruct.images.get(this.id);\n    const item = reStruct.molecule.images.get(this.id);\n\n    if (!item || !renderItem) {\n      return;\n    }\n    const scaledOffset = Scale.modelToCanvas(\n      this.offset,\n      reStruct.render.options,\n    );\n\n    renderItem.visel.translate(scaledOffset);\n    item.addPositionOffset(this.offset);\n  }\n\n  invert(): BaseOperation {\n    return new ImageMove(this.id, this.offset.negated());\n  }\n}\n","import { BaseOperation } from 'application/editor/operations/base';\nimport { ImageReferenceName, Vec2 } from 'domain/entities';\nimport { ReStruct } from 'application/render';\nimport { OperationType } from 'application/editor';\n\nconst moveLeftPositions: Array<ImageReferenceName> = [\n  'topLeftPosition',\n  'leftMiddlePosition',\n  'bottomLeftPosition',\n];\n\nconst moveRightPositions: Array<ImageReferenceName> = [\n  'topRightPosition',\n  'rightMiddlePosition',\n  'bottomRightPosition',\n];\n\nconst moveTopPositions: Array<ImageReferenceName> = [\n  'topLeftPosition',\n  'topMiddlePosition',\n  'topRightPosition',\n];\n\nconst moveBottomPositions: Array<ImageReferenceName> = [\n  'bottomLeftPosition',\n  'bottomMiddlePosition',\n  'bottomRightPosition',\n];\n\nexport class ImageResize extends BaseOperation {\n  private previousPosition: Vec2 | null = null;\n  constructor(\n    private id: number,\n    private position: Vec2,\n    private referencePositionName: ImageReferenceName,\n  ) {\n    super(OperationType.IMAGE_RESIZE);\n  }\n\n  execute(reStruct: ReStruct) {\n    const item = reStruct.molecule.images.get(this.id);\n    const renderItem = reStruct.images.get(this.id);\n\n    if (!item || !renderItem) {\n      return;\n    }\n    const referencePositions = item.getReferencePositions();\n    this.previousPosition = referencePositions[this.referencePositionName];\n    const diff = Vec2.diff(this.position, this.previousPosition);\n    const topLeftPosition = new Vec2(referencePositions.topLeftPosition);\n    const bottomRightPosition = new Vec2(\n      referencePositions.bottomRightPosition,\n    );\n\n    if (moveTopPositions.includes(this.referencePositionName)) {\n      topLeftPosition.add_(new Vec2(0, diff.y));\n    } else if (moveBottomPositions.includes(this.referencePositionName)) {\n      bottomRightPosition.add_(new Vec2(0, diff.y));\n    }\n    if (moveLeftPositions.includes(this.referencePositionName)) {\n      topLeftPosition.add_(new Vec2(diff.x, 0));\n    } else if (moveRightPositions.includes(this.referencePositionName)) {\n      bottomRightPosition.add_(new Vec2(diff.x, 0));\n    }\n\n    item.resize(topLeftPosition, bottomRightPosition);\n    const next = renderItem.visel.paths[0].next;\n    reStruct.clearVisel(renderItem.visel);\n    renderItem.show(reStruct, reStruct.render.options, next);\n  }\n\n  invert(): BaseOperation {\n    return new ImageResize(\n      this.id,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.previousPosition!,\n      this.referencePositionName,\n    );\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { BaseOperation } from 'application/editor/operations/base';\nimport { OperationType } from 'application/editor';\nimport { Image } from 'domain/entities/image';\nimport { ReStruct } from 'application/render';\nimport { ReImage } from 'application/render/restruct/reImage';\nimport { IMAGE_KEY } from 'domain/constants';\n\ninterface ImageUpsertData {\n  id?: number;\n}\n\ninterface ImageDeleteData {\n  id: number;\n}\n\nexport class ImageUpsert extends BaseOperation {\n  data: ImageUpsertData;\n  constructor(private readonly image: Image, id?: number) {\n    super(OperationType.IMAGE_UPSERT);\n    this.data = { id };\n  }\n\n  execute(reStruct: ReStruct) {\n    const struct = reStruct.molecule;\n\n    if (this.data.id === undefined) {\n      this.data.id = struct.images.newId();\n    }\n    const id = this.data.id;\n    const item = this.image.clone();\n    struct.images.set(id, item);\n    reStruct.images.set(id, new ReImage(item));\n\n    BaseOperation.invalidateItem(reStruct, IMAGE_KEY, id, 1);\n  }\n\n  invert(): BaseOperation {\n    return new ImageDelete(this.data.id!);\n  }\n}\n\nexport class ImageDelete extends BaseOperation {\n  private image?: Image;\n  data: ImageDeleteData;\n  constructor(id: number) {\n    super(OperationType.IMAGE_DELETE);\n    this.data = { id };\n  }\n\n  execute(reStruct: ReStruct) {\n    const reImage = reStruct.images.get(this.data.id);\n\n    if (!reImage) {\n      return;\n    }\n\n    this.image = reImage.image.clone();\n    reStruct.clearVisel(reImage.visel);\n    reStruct.markItemRemoved();\n    reStruct.images.delete(this.data.id);\n    reStruct.molecule.images.delete(this.data.id);\n  }\n\n  invert(): BaseOperation {\n    return new ImageUpsert(this.image!, this.data.id);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-use-before-define,@typescript-eslint/no-non-null-assertion */\nimport { BaseOperation } from 'application/editor/operations/base';\nimport { OperationType } from 'application/editor';\nimport { ReStruct } from 'application/render';\nimport { FixedPrecisionCoordinates } from 'domain/entities';\n\nexport class MultitailArrowAddTail extends BaseOperation {\n  constructor(\n    private itemId: number,\n    private tailId?: number,\n    private coordinate?: FixedPrecisionCoordinates,\n  ) {\n    super(OperationType.MULTITAIL_ARROW_ADD_TAIL);\n  }\n\n  execute(reStruct: ReStruct) {\n    const reMultitailArrow = reStruct.multitailArrows.get(this.itemId);\n    const multitailArrow = reStruct.molecule.multitailArrows.get(this.itemId);\n\n    if (!reMultitailArrow || !multitailArrow) {\n      return;\n    }\n    this.tailId = multitailArrow.addTail(this.tailId, this.coordinate);\n    BaseOperation.invalidateItem(reStruct, 'multitailArrows', this.itemId, 1);\n  }\n\n  invert() {\n    return new MultitailArrowRemoveTail(this.itemId, this.tailId!);\n  }\n}\n\nexport class MultitailArrowRemoveTail extends BaseOperation {\n  private coordinate?: FixedPrecisionCoordinates;\n  constructor(private itemId: number, private tailId: number) {\n    super(OperationType.MULTITAIL_ARROW_REMOVE_TAIL);\n  }\n\n  execute(reStruct: ReStruct) {\n    const reMultitailArrow = reStruct.multitailArrows.get(this.itemId);\n    const multitailArrow = reStruct.molecule.multitailArrows.get(this.itemId);\n    this.coordinate = multitailArrow?.getTailCoordinate(this.tailId);\n\n    if (!reMultitailArrow || !multitailArrow || !this.coordinate) {\n      return;\n    }\n\n    multitailArrow.removeTail(this.tailId);\n    BaseOperation.invalidateItem(reStruct, 'multitailArrows', this.itemId, 1);\n  }\n\n  invert(): BaseOperation {\n    return new MultitailArrowAddTail(this.itemId, this.tailId, this.coordinate);\n  }\n}\n","import { Vec2 } from 'domain/entities';\nimport { OperationType } from 'application/editor';\nimport { Scale } from 'domain/helpers';\nimport { ReStruct } from 'application/render';\nimport BaseOperation from 'application/editor/operations/base';\n\nexport class MultitailArrowMove extends BaseOperation {\n  constructor(private id: number, private offset: Vec2) {\n    super(OperationType.MULTITAIL_ARROW_MOVE);\n  }\n\n  execute(reStruct: ReStruct) {\n    const renderItem = reStruct.multitailArrows.get(this.id);\n    const item = reStruct.molecule.multitailArrows.get(this.id);\n\n    if (!item || !renderItem) {\n      return;\n    }\n    const scaledOffset = Scale.modelToCanvas(\n      this.offset,\n      reStruct.render.options,\n    );\n\n    renderItem.visel.translate(scaledOffset);\n    item.move(this.offset);\n  }\n\n  invert() {\n    return new MultitailArrowMove(this.id, this.offset.negated());\n  }\n}\n","import { BaseOperation } from 'application/editor/operations/base';\nimport { OperationType } from 'application/editor';\nimport { MultitailArrowRefName, ReStruct } from 'application/render';\nimport { MULTITAIL_ARROW_KEY } from 'domain/constants';\n\nexport class MultitailArrowMoveHeadTail extends BaseOperation {\n  constructor(\n    private id: number,\n    private offset: number,\n    private name: string,\n    private tailId: number | null,\n    private normalize?: true,\n  ) {\n    super(OperationType.MULTITAIL_ARROW_MOVE_HEAD_TAIL);\n  }\n\n  execute(reStruct: ReStruct) {\n    const reMultitailArrow = reStruct.multitailArrows.get(this.id);\n    const multitailArrow = reStruct.molecule.multitailArrows.get(this.id);\n    if (!multitailArrow || !reMultitailArrow) {\n      return;\n    }\n    switch (this.name) {\n      case MultitailArrowRefName.HEAD:\n        this.offset = multitailArrow.moveHead(this.offset);\n        break;\n      case MultitailArrowRefName.TOP_TAIL:\n        this.offset = multitailArrow.moveTail(this.offset, this.name);\n        break;\n      case MultitailArrowRefName.BOTTOM_TAIL:\n        this.offset = multitailArrow.moveTail(this.offset, this.name);\n        break;\n      default:\n        this.offset = multitailArrow.moveTail(\n          this.offset,\n          this.tailId as number,\n          this.normalize,\n        );\n    }\n    BaseOperation.invalidateItem(reStruct, MULTITAIL_ARROW_KEY, this.id, 1);\n  }\n\n  invert(): BaseOperation {\n    return new MultitailArrowMoveHeadTail(\n      this.id,\n      -this.offset,\n      this.name,\n      this.tailId,\n    );\n  }\n}\n","import { BaseOperation } from 'application/editor/operations/base';\nimport { OperationType } from 'application/editor';\nimport { ReStruct } from 'application/render';\nimport { MULTITAIL_ARROW_KEY } from 'domain/constants';\n\nexport class MultitailArrowResizeTailHead extends BaseOperation {\n  constructor(\n    private id: number,\n    private offset: number,\n    private isHead: boolean,\n  ) {\n    super(OperationType.MULTITAIL_ARROW_RESIZE_HEAD_TAIL);\n  }\n\n  execute(reStruct: ReStruct) {\n    const multitailArrow = reStruct.molecule.multitailArrows.get(this.id);\n    if (!multitailArrow) {\n      return;\n    }\n    this.offset = this.isHead\n      ? multitailArrow.resizeHead(this.offset)\n      : multitailArrow.resizeTails(this.offset);\n    BaseOperation.invalidateItem(reStruct, MULTITAIL_ARROW_KEY, this.id, 1);\n  }\n\n  invert(): BaseOperation {\n    return new MultitailArrowResizeTailHead(this.id, -this.offset, this.isHead);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-use-before-define */\nimport { BaseOperation } from 'application/editor/operations/base';\nimport { MultitailArrow } from 'domain/entities/multitailArrow';\nimport { OperationType } from 'application/editor';\nimport { ReStruct, ReMultitailArrow } from 'application/render';\nimport { MULTITAIL_ARROW_KEY } from 'domain/constants';\n\ninterface MultitailArrowUpsertData {\n  id?: number;\n}\n\ninterface MultitailArrowDeleteData {\n  id: number;\n}\n\nexport class MultitailArrowUpsert extends BaseOperation {\n  data: MultitailArrowUpsertData;\n  constructor(private readonly multitailArrow: MultitailArrow, id?: number) {\n    super(OperationType.MULTITAIL_ARROW_UPSERT);\n    this.data = { id };\n  }\n\n  execute(reStruct: ReStruct) {\n    const struct = reStruct.molecule;\n\n    if (this.data.id === undefined) {\n      this.data.id = struct.multitailArrows.newId();\n    }\n    const id = this.data.id;\n    const item = this.multitailArrow.clone();\n    struct.multitailArrows.set(id, item);\n    reStruct.multitailArrows.set(id, new ReMultitailArrow(item));\n\n    BaseOperation.invalidateItem(reStruct, MULTITAIL_ARROW_KEY, id, 1);\n  }\n\n  invert(): BaseOperation {\n    return new MultitailArrowDelete(this.data.id!);\n  }\n}\n\nexport class MultitailArrowDelete extends BaseOperation {\n  private multitailArrow?: MultitailArrow;\n  data: MultitailArrowDeleteData;\n  constructor(id: number) {\n    super(OperationType.MULTITAIL_ARROW_DELETE);\n    this.data = { id };\n  }\n\n  execute(reStruct: ReStruct) {\n    const reMultitailArrow = reStruct.multitailArrows.get(this.data.id);\n\n    if (!reMultitailArrow) {\n      return;\n    }\n\n    this.multitailArrow = reMultitailArrow.multitailArrow.clone();\n    reStruct.clearVisel(reMultitailArrow.visel);\n    reStruct.markItemRemoved();\n    reStruct.multitailArrows.delete(this.data.id);\n    reStruct.molecule.multitailArrows.delete(this.data.id);\n  }\n\n  invert(): BaseOperation {\n    return new MultitailArrowUpsert(this.multitailArrow!, this.data.id);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../base';\nimport { OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\n\ntype Data = {\n  rgid: any;\n  attribute: any;\n  value: any;\n};\n\nexport class RGroupAttr extends BaseOperation {\n  data: Data | null;\n  data2: Data | null;\n\n  constructor(rgroupId?: any, attribute?: any, value?: any) {\n    super(OperationType.R_GROUP_ATTR);\n    this.data = { rgid: rgroupId, attribute, value };\n    this.data2 = null;\n  }\n\n  execute(restruct: ReStruct) {\n    if (this.data) {\n      const { rgid, attribute, value } = this.data;\n\n      const rgp = restruct.molecule.rgroups.get(rgid)!;\n\n      if (!rgp) {\n        return;\n      }\n\n      if (!this.data2) {\n        this.data2 = {\n          rgid,\n          attribute,\n          value: rgp[attribute],\n        };\n      }\n\n      rgp[attribute] = value;\n\n      BaseOperation.invalidateItem(restruct, 'rgroups', rgid);\n    }\n  }\n\n  invert() {\n    const inverted = new RGroupAttr();\n    inverted.data = this.data2;\n    inverted.data2 = this.data;\n    return inverted;\n  }\n\n  isDummy(restruct: ReStruct) {\n    if (this.data) {\n      const { rgid, attribute, value } = this.data;\n      const rgroup = restruct.molecule.rgroups.get(rgid)!;\n      return rgroup[attribute] === value;\n    }\n    return false;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { ReRGroup, ReStruct } from '../../../render';\n\nimport { BaseOperation } from '../base';\nimport { OperationType } from '../OperationType';\nimport { RGroup } from 'domain/entities';\n\nexport class RGroupFragment extends BaseOperation {\n  rgid_new: any;\n  rg_new: any;\n  rgid_old: any;\n  rg_old: any;\n  frid: any;\n\n  constructor(rgroupId: any, fragmentId: any, rg?: any) {\n    super(OperationType.R_GROUP_FRAGMENT);\n    this.rgid_new = rgroupId;\n    this.rg_new = rg;\n    this.rgid_old = null;\n    this.rg_old = null;\n    this.frid = fragmentId;\n  }\n\n  execute(restruct: ReStruct) {\n    // eslint-disable-line max-statements\n    const struct = restruct.molecule;\n    this.rgid_old =\n      this.rgid_old || RGroup.findRGroupByFragment(struct.rgroups, this.frid);\n\n    this.rg_old = this.rgid_old ? struct.rgroups.get(this.rgid_old) : null;\n\n    this.removeOld(struct, restruct);\n    this.setNew(struct, restruct);\n  }\n\n  private removeOld(struct: any, restruct: any) {\n    if (!this.rg_old) {\n      return;\n    }\n\n    this.rg_old.frags.delete(this.frid);\n    restruct.clearVisel(restruct.rgroups.get(this.rgid_old).visel);\n\n    if (this.rg_old.frags.size === 0) {\n      restruct.rgroups.delete(this.rgid_old);\n      struct.rgroups.delete(this.rgid_old);\n      restruct.markItemRemoved();\n    } else {\n      restruct.markItem('rgroups', this.rgid_old, 1);\n    }\n  }\n\n  private setNew(struct: any, restruct: ReStruct) {\n    if (!this.rgid_new) {\n      return;\n    }\n\n    let rgNew = struct.rgroups.get(this.rgid_new);\n    if (!rgNew) {\n      rgNew = this.rg_new || new RGroup();\n      struct.rgroups.set(this.rgid_new, rgNew);\n      restruct.rgroups.set(this.rgid_new, new ReRGroup(rgNew));\n    } else {\n      restruct.markItem('rgroups', this.rgid_new, 1);\n    }\n\n    rgNew.frags.add(this.frid);\n  }\n\n  invert() {\n    return new RGroupFragment(this.rgid_old, this.frid, this.rg_old);\n  }\n}\n","import { ReStruct, ReRGroupAttachmentPoint } from 'application/render';\nimport assert from 'assert';\nimport {\n  RGroupAttachmentPoint,\n  RGroupAttachmentPointType,\n} from 'domain/entities';\nimport { RGroupAttachmentPointRemove } from '.';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport BaseOperation from '../base';\n\ntype Data = {\n  atomId: number;\n  attachmentPointType: RGroupAttachmentPointType;\n  attachmentPointId?: number;\n};\n\nclass RGroupAttachmentPointAdd extends BaseOperation {\n  data: Data;\n\n  constructor(data: Data) {\n    super(\n      OperationType.R_GROUP_ATTACHMENT_POINT_ADD,\n      OperationPriority.R_GROUP_ATTACHMENT_POINT_ADD,\n    );\n    this.data = data;\n  }\n\n  execute(restruct: ReStruct) {\n    const { atomId, attachmentPointType } = this.data;\n    const newAttachmentPoint = new RGroupAttachmentPoint(\n      atomId,\n      attachmentPointType,\n    );\n\n    const struct = restruct.molecule;\n    const revertedId = this.data.attachmentPointId;\n    let attachmentPointId = 0;\n    if (revertedId === undefined) {\n      const newId = struct.rgroupAttachmentPoints.add(newAttachmentPoint);\n      attachmentPointId = newId;\n    } else {\n      struct.rgroupAttachmentPoints.set(revertedId, newAttachmentPoint);\n      attachmentPointId = revertedId;\n    }\n    this.data.attachmentPointId = attachmentPointId;\n\n    const reAtom = restruct.atoms.get(atomId);\n    assert(reAtom != null);\n    restruct.rgroupAttachmentPoints.set(\n      attachmentPointId,\n      new ReRGroupAttachmentPoint(newAttachmentPoint, reAtom),\n    );\n  }\n\n  invert() {\n    if (this.data.attachmentPointId === undefined) {\n      throw Error(`Inverted attachmentPointId doesn't exist`);\n    }\n    return new RGroupAttachmentPointRemove(this.data.attachmentPointId);\n  }\n}\n\nexport { RGroupAttachmentPointAdd };\n","import { ReStruct } from 'application/render';\nimport assert from 'assert';\nimport { RGroupAttachmentPointAdd } from '.';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport BaseOperation from '../base';\n\ntype Data = { atomId: number; attachmentPointType; attachmentPointId: number };\n\nconst INITIAL_DATA = {\n  atomId: 0,\n  attachmentPointType: 1,\n  attachmentPointId: 0,\n};\n\nclass RGroupAttachmentPointRemove extends BaseOperation {\n  data: Data;\n\n  constructor(attachmentPointId: number) {\n    super(\n      OperationType.R_GROUP_ATTACHMENT_POINT_REMOVE,\n      OperationPriority.R_GROUP_ATTACHMENT_POINT_REMOVE,\n    );\n    this.data = {\n      ...INITIAL_DATA,\n      attachmentPointId,\n    };\n  }\n\n  execute(restruct: ReStruct) {\n    const { attachmentPointId } = this.data;\n    const struct = restruct.molecule;\n    const item = struct.rgroupAttachmentPoints.get(attachmentPointId);\n    const reItem = restruct.rgroupAttachmentPoints.get(attachmentPointId);\n    assert(item != null && reItem != null);\n\n    this.data.atomId = item.atomId;\n    this.data.attachmentPointType = item.type;\n\n    restruct.markItemRemoved();\n    restruct.clearVisel(reItem.visel);\n    restruct.rgroupAttachmentPoints.delete(attachmentPointId);\n\n    struct.rgroupAttachmentPoints.delete(attachmentPointId);\n  }\n\n  invert() {\n    return new RGroupAttachmentPointAdd(this.data);\n  }\n}\n\nexport { RGroupAttachmentPointRemove };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport Base from '../base';\nimport { OperationType } from '../OperationType';\nimport { Scale } from 'domain/helpers';\n\ninterface RxnArrowMoveData {\n  id: number;\n  d: any;\n  noinvalidate: boolean;\n}\n\nexport class RxnArrowMove extends Base {\n  data: RxnArrowMoveData;\n\n  constructor(id?: any, d?: any, noinvalidate?: any) {\n    super(OperationType.RXN_ARROW_MOVE);\n    this.data = { id, d, noinvalidate };\n  }\n\n  execute(restruct: any): void {\n    const struct = restruct.molecule;\n    const id = this.data.id;\n    const d = this.data.d;\n    const item = struct.rxnArrows.get(id);\n    item.pos.forEach((p) => p.add_(d));\n    restruct.rxnArrows\n      .get(id)\n      .visel.translate(Scale.modelToCanvas(d, restruct.render.options));\n    this.data.d = d.negated();\n    if (!this.data.noinvalidate) {\n      Base.invalidateItem(restruct, 'rxnArrows', id, 1);\n    }\n  }\n\n  invert() {\n    const move = new RxnArrowMove(\n      this.data.id,\n      this.data.d,\n      this.data.noinvalidate,\n    );\n    move.data = this.data;\n    return move;\n  }\n}\n","import utils from 'application/editor/shared/utils';\nimport { ReStruct } from 'application/render';\nimport { Vec2 } from 'domain/entities';\nimport { OperationType } from '../OperationType';\nimport Base from '../base';\n\ninterface RxnArrowRotateData {\n  id: number;\n  angle: number;\n  center: Vec2;\n  noinvalidate?: boolean;\n}\n\nexport class RxnArrowRotate extends Base {\n  data: RxnArrowRotateData;\n\n  constructor(id: number, angle: number, center: Vec2, noinvalidate?: boolean) {\n    super(OperationType.RXN_ARROW_ROTATE);\n    this.data = { id, angle, center, noinvalidate };\n  }\n\n  execute(reStruct: ReStruct) {\n    const degree = utils.degrees(this.data.angle);\n\n    const arrowId = this.data.id;\n    const arrow = reStruct.molecule.rxnArrows.get(arrowId);\n    if (arrow) {\n      // Note: Struct and ReStruct are in two different systems,\n      //       must manually update struct's position\n      arrow.pos = arrow.pos.map((p) =>\n        p.rotateAroundOrigin(degree, this.data.center),\n      );\n    }\n\n    const options = reStruct.render.options;\n    const drawingCenter = this.data.center\n      .scaled(options.microModeScale)\n      .add(options.offset);\n\n    reStruct.rxnArrows.get(arrowId)?.visel.rotate(degree, drawingCenter);\n\n    if (!this.data.noinvalidate) {\n      Base.invalidateItem(reStruct, 'rxnArrows', arrowId, 1);\n    }\n  }\n\n  invert() {\n    const move = new RxnArrowRotate(\n      this.data.id,\n      -this.data.angle,\n      this.data.center,\n      this.data.noinvalidate,\n    );\n    return move;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { ReStruct } from 'application/render';\nimport assert from 'assert';\nimport { RxnArrow, Vec2 } from 'domain/entities';\nimport { Scale } from 'domain/helpers';\nimport { tfx } from 'utilities';\nimport { OperationType } from '../OperationType';\nimport Base from '../base';\n\nexport const ARROW_MAX_SNAPPING_ANGLE = Math.PI / 12; // 15°\n\ninterface RxnArrowResizeData {\n  id: number;\n  d: Vec2;\n  current: Vec2;\n  anchor: Vec2 | null;\n  noinvalidate: boolean;\n}\nexport class RxnArrowResize extends Base {\n  data: RxnArrowResizeData;\n  isSnappingEnabled: boolean;\n\n  constructor(\n    id: number,\n    d: Vec2,\n    current: Vec2,\n    anchor: Vec2 | null,\n    noinvalidate: boolean,\n    isSnappingEnabled: boolean,\n  ) {\n    super(OperationType.RXN_ARROW_RESIZE);\n    this.data = { id, d, current, anchor, noinvalidate };\n    this.isSnappingEnabled = isSnappingEnabled;\n  }\n\n  execute(restruct: ReStruct): void {\n    const struct = restruct.molecule;\n    const id = this.data.id;\n    let d = this.data.d;\n    const current = this.data.current;\n    const item = struct.rxnArrows.get(id);\n    const reItem = restruct.rxnArrows.get(id);\n    assert(item != null && reItem != null);\n    const anchor = this.data.anchor;\n    if (anchor) {\n      const previousPos0 = item.pos[0].get_xy0();\n      const previousPos1 = item.pos[1].get_xy0();\n      let middlePoint;\n\n      if (RxnArrow.isElliptical(item)) {\n        [, , middlePoint] = reItem.getReferencePoints();\n      }\n\n      if (\n        /**\n         *          (anchor)\n         *   (pos[1])   ^\n         *              |  ↘ (d)\n         *   (pos[0])   o —— > (current)\n         *\n         * more details: ./RxnArrowResize.doc.png\n         */\n        tfx(anchor.x) === tfx(item.pos[1].x) &&\n        tfx(anchor.y) === tfx(item.pos[1].y)\n      ) {\n        if (this.isSnappingEnabled) {\n          const currentArrowVector = current.sub(item.pos[0]);\n          const snappedArrowVector = getSnappedArrowVector(currentArrowVector);\n          const snappedCurrent = item.pos[0].add(snappedArrowVector);\n          current.x = snappedCurrent.x;\n          current.y = snappedCurrent.y;\n        }\n        item.pos[1].x = anchor.x = current.x;\n        current.x = previousPos1.x;\n        item.pos[1].y = anchor.y = current.y;\n        current.y = previousPos1.y;\n      }\n\n      if (\n        /**\n         *          (anchor)\n         *   (pos[0])   o\n         *              |  ↘ (d)\n         *   (pos[1])   x —— o  (current)\n         *\n         * more details: ./RxnArrowResize.doc.png\n         */\n        tfx(anchor.x) === tfx(item.pos[0].x) &&\n        tfx(anchor.y) === tfx(item.pos[0].y)\n      ) {\n        if (this.isSnappingEnabled) {\n          const currentArrowVector = current.sub(item.pos[1]);\n          const snappedArrowVector = getSnappedArrowVector(currentArrowVector);\n          const snappedCurrent = item.pos[1].add(snappedArrowVector);\n          current.x = snappedCurrent.x;\n          current.y = snappedCurrent.y;\n        }\n        item.pos[0].x = anchor.x = current.x;\n        current.x = previousPos0.x;\n        item.pos[0].y = anchor.y = current.y;\n        current.y = previousPos0.y;\n      }\n\n      if (\n        tfx(anchor.x) === tfx(middlePoint?.x) &&\n        tfx(anchor.y) === tfx(middlePoint?.y)\n      ) {\n        const { angle } = reItem.getArrowParams(\n          item.pos[0].x,\n          item.pos[0].y,\n          item.pos[1].x,\n          item.pos[1].y,\n        );\n        const angleInRadians = (angle * Math.PI) / 180;\n        const cosAngle = Math.cos(angleInRadians);\n        const sinAngle = Math.sin(angleInRadians);\n\n        const diffX = current.x - anchor.x;\n        const diffY = current.y - anchor.y;\n\n        const diff = diffY * cosAngle - diffX * sinAngle;\n        if (item.height !== undefined) {\n          item.height -= diff;\n        }\n\n        const [, , newMiddlePoint] = reItem.getReferencePoints();\n\n        anchor.y = newMiddlePoint.y;\n        anchor.x = newMiddlePoint.x;\n      }\n    } else {\n      if (this.isSnappingEnabled) {\n        d = getSnappedArrowVector(d);\n      }\n      item.pos[1].add_(d);\n    }\n\n    reItem.visel.translate(Scale.modelToCanvas(d, restruct.render.options));\n    this.data.d = d.negated();\n\n    if (!this.data.noinvalidate) {\n      Base.invalidateItem(restruct, 'rxnArrows', id, 1);\n    }\n  }\n\n  invert(): Base {\n    return new RxnArrowResize(\n      this.data.id,\n      this.data.d,\n      this.data.current,\n      this.data.anchor,\n      this.data.noinvalidate,\n      this.isSnappingEnabled,\n    );\n  }\n}\n\nexport function getSnappedArrowVector(arrow: Vec2) {\n  const AXIS = {\n    POSITIVE_X: 0,\n    POSITIVE_Y: Math.PI / 2,\n    NEGATIVE_X: [Math.PI, -Math.PI],\n    NEGATIVE_Y: -Math.PI / 2,\n  };\n  const oxAngle = arrow.oxAngle();\n  const arrowLength = arrow.length();\n  const isSnappingToPositiveXAxis =\n    Math.abs(oxAngle - AXIS.POSITIVE_X) <= ARROW_MAX_SNAPPING_ANGLE;\n  if (isSnappingToPositiveXAxis) {\n    return new Vec2(arrowLength, 0);\n  }\n  const isSnappingToPositiveYAxis =\n    Math.abs(oxAngle - AXIS.POSITIVE_Y) <= ARROW_MAX_SNAPPING_ANGLE;\n  if (isSnappingToPositiveYAxis) {\n    return new Vec2(0, arrowLength);\n  }\n  const isSnappingToNegativeXAxis =\n    Math.abs(oxAngle - AXIS.NEGATIVE_X[0]) <= ARROW_MAX_SNAPPING_ANGLE ||\n    Math.abs(oxAngle - AXIS.NEGATIVE_X[1]) <= ARROW_MAX_SNAPPING_ANGLE;\n  if (isSnappingToNegativeXAxis) {\n    return new Vec2(-arrowLength, 0);\n  }\n  const isSnappingToNegativeYAxis =\n    Math.abs(oxAngle - AXIS.NEGATIVE_Y) <= ARROW_MAX_SNAPPING_ANGLE;\n  if (isSnappingToNegativeYAxis) {\n    return new Vec2(0, -arrowLength);\n  }\n  return arrow;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../../base';\nimport { OperationType } from '../../OperationType';\nimport { ReStruct } from '../../../../render';\nimport { Scale } from 'domain/helpers';\n\nexport class RxnPlusMove extends BaseOperation {\n  data: {\n    id: any;\n    d: any;\n    noinvalidate: any;\n  };\n\n  constructor(id?: any, d?: any, noinvalidate?: any) {\n    super(OperationType.RXN_PLUS_MOVE);\n    this.data = { id, d, noinvalidate };\n  }\n\n  execute(restruct: ReStruct) {\n    const { id, d, noinvalidate } = this.data;\n\n    const struct = restruct.molecule;\n    struct.rxnPluses.get(id)!.pp.add_(d); // eslint-disable-line no-underscore-dangle\n\n    const rxn = restruct.rxnPluses.get(id)!;\n    const scaled = Scale.modelToCanvas(d, restruct.render.options);\n    rxn.visel.translate(scaled);\n\n    this.data.d = d.negated();\n\n    if (!noinvalidate) {\n      BaseOperation.invalidateItem(restruct, 'rxnPluses', id, 1);\n    }\n  }\n\n  invert() {\n    const inverted = new RxnPlusMove();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { ReRxnPlus, ReStruct } from '../../../../render';\nimport { RxnPlus, Vec2 } from 'domain/entities';\n\nimport { BaseOperation } from '../../base';\nimport { OperationType } from '../../OperationType';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\ntype Data = {\n  plid: any;\n  pos: any;\n};\n\nclass RxnPlusAdd extends BaseOperation {\n  data: Data;\n\n  constructor(pos?: any) {\n    super(OperationType.RXN_PLUS_ADD);\n    this.data = { plid: null, pos };\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n\n    const newRxn = new RxnPlus();\n    if (typeof this.data.plid === 'number') {\n      struct.rxnPluses.set(this.data.plid, newRxn);\n    } else {\n      this.data.plid = struct.rxnPluses.add(newRxn);\n    }\n\n    const { pos, plid } = this.data;\n\n    const structRxn = struct.rxnPluses.get(plid);\n    // notifyRxnPlusAdded\n    restruct.rxnPluses.set(plid, new ReRxnPlus(structRxn));\n\n    struct.rxnPlusSetPos(plid, new Vec2(pos));\n\n    BaseOperation.invalidateItem(restruct, 'rxnPluses', plid, 1);\n  }\n\n  invert() {\n    const inverted = new RxnPlusDelete();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nclass RxnPlusDelete extends BaseOperation {\n  data: Data;\n\n  constructor(plid?: any) {\n    super(OperationType.RXN_PLUS_DELETE);\n    this.data = { plid, pos: null };\n  }\n\n  execute(restruct: ReStruct) {\n    const { plid } = this.data;\n\n    const struct = restruct.molecule;\n    if (!this.data.pos) {\n      this.data.pos = struct.rxnPluses.get(plid)!.pp;\n    }\n\n    // notifyRxnPlusRemoved\n    restruct.markItemRemoved();\n    const rxn = restruct.rxnPluses.get(plid);\n    if (!rxn) return;\n    restruct.clearVisel(rxn.visel);\n    restruct.rxnPluses.delete(plid);\n\n    struct.rxnPluses.delete(plid);\n  }\n\n  invert() {\n    const inverted = new RxnPlusAdd();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nexport { RxnPlusAdd, RxnPlusDelete };\nexport * from './RxnPlusMove';\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { RxnArrow, RxnArrowMode, Vec2 } from 'domain/entities';\n\nimport Base from '../base';\nimport { OperationType } from '../OperationType';\nimport { ReRxnArrow } from '../../../render';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\ntype RxnArrowAddData = {\n  id?: number;\n  pos: Array<Vec2>;\n  mode: RxnArrowMode;\n};\n\nclass RxnArrowAdd extends Base {\n  data: RxnArrowAddData;\n\n  constructor(\n    pos: Array<Vec2> = [],\n    mode: RxnArrowMode = RxnArrowMode.OpenAngle,\n    id?: number,\n  ) {\n    super(OperationType.RXN_ARROW_ADD);\n    this.data = { pos, mode, id };\n  }\n\n  execute(restruct: any): void {\n    const struct = restruct.molecule;\n    const item = new RxnArrow({ mode: this.data.mode });\n\n    if (this.data.id == null) {\n      const index = struct.rxnArrows.add(item);\n      this.data.id = index;\n    } else {\n      struct.rxnArrows.set(this.data.id!, item);\n    }\n\n    const itemId = this.data.id!;\n\n    restruct.rxnArrows.set(itemId, new ReRxnArrow(item));\n\n    const positions = [...this.data.pos];\n\n    struct.rxnArrowSetPos(\n      itemId,\n      positions.map((p) => new Vec2(p)),\n    );\n\n    Base.invalidateItem(restruct, 'rxnArrows', itemId, 1);\n  }\n\n  invert(): Base {\n    return new RxnArrowDelete(this.data.id!);\n  }\n}\n\ninterface RxnArrowDeleteData {\n  id: number;\n  pos?: Array<Vec2>;\n  mode?: RxnArrowMode;\n}\n\nclass RxnArrowDelete extends Base {\n  data: RxnArrowDeleteData;\n  performed: boolean;\n\n  constructor(id: number) {\n    super(OperationType.RXN_ARROW_DELETE);\n    this.data = { id, pos: [], mode: RxnArrowMode.OpenAngle };\n    this.performed = false;\n  }\n\n  execute(restruct: any): void {\n    const struct = restruct.molecule;\n    const item = struct.rxnArrows.get(this.data.id) as any;\n    this.data.pos = item.pos;\n    this.data.mode = item.mode;\n    this.performed = true;\n\n    restruct.markItemRemoved();\n    restruct.clearVisel(restruct.rxnArrows.get(this.data.id).visel);\n    restruct.rxnArrows.delete(this.data.id);\n\n    struct.rxnArrows.delete(this.data.id);\n  }\n\n  invert(): Base {\n    return new RxnArrowAdd(this.data.pos, this.data.mode, this.data.id);\n  }\n}\n\nexport { RxnArrowAdd, RxnArrowDelete };\nexport * from './RxnArrowMove';\nexport * from './RxnArrowRotate';\nexport * from './RxnArrowResize';\nexport * from './plus';\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { SimpleObject, SimpleObjectMode, Vec2 } from 'domain/entities';\n\nimport Base from './base';\nimport { OperationType } from './OperationType';\nimport { ReSimpleObject } from '../../render';\nimport { Scale } from 'domain/helpers';\nimport { tfx } from 'utilities';\n\ninterface SimpleObjectAddData {\n  id?: number;\n  pos: Array<Vec2>;\n  mode: SimpleObjectMode;\n  toCircle: boolean;\n}\nexport class SimpleObjectAdd extends Base {\n  data: SimpleObjectAddData;\n\n  constructor(\n    pos: Array<Vec2> = [],\n    mode: SimpleObjectMode = SimpleObjectMode.line,\n    toCircle = false,\n    id?: number,\n  ) {\n    super(OperationType.SIMPLE_OBJECT_ADD);\n    this.data = { pos, mode, toCircle, id };\n  }\n\n  execute(restruct: any): void {\n    const struct = restruct.molecule;\n    const item = new SimpleObject({ mode: this.data.mode });\n\n    if (this.data.id == null) {\n      const index = struct.simpleObjects.add(item);\n      this.data.id = index;\n    } else {\n      struct.simpleObjects.set(this.data.id!, item);\n    }\n\n    const itemId = this.data.id!;\n\n    restruct.simpleObjects.set(itemId, new ReSimpleObject(item));\n\n    const positions = [...this.data.pos];\n    if (this.data.toCircle) {\n      positions[1] = makeCircleFromEllipse(positions[0], positions[1]);\n    }\n    struct.simpleObjectSetPos(\n      itemId,\n      positions.map((p) => new Vec2(p)),\n    );\n\n    Base.invalidateItem(restruct, 'simpleObjects', itemId, 1);\n  }\n\n  invert(): Base {\n    return new SimpleObjectDelete(this.data.id!);\n  }\n}\n\ninterface SimpleObjectDeleteData {\n  id: number;\n  pos?: Array<Vec2>;\n  mode?: SimpleObjectMode;\n  toCircle?: boolean;\n}\n\nexport class SimpleObjectDelete extends Base {\n  data: SimpleObjectDeleteData;\n  performed: boolean;\n\n  constructor(id: number) {\n    super(OperationType.SIMPLE_OBJECT_DELETE);\n    this.data = { id, pos: [], mode: SimpleObjectMode.line, toCircle: false };\n    this.performed = false;\n  }\n\n  execute(restruct: any): void {\n    const struct = restruct.molecule;\n    const item = struct.simpleObjects.get(this.data.id) as any;\n    // save to data current values. In future they could be used in invert for restoring simple object\n    this.data.pos = item.pos;\n    this.data.mode = item.mode;\n    this.data.toCircle = item.toCircle;\n    this.performed = true;\n\n    restruct.markItemRemoved();\n    restruct.clearVisel(restruct.simpleObjects.get(this.data.id).visel);\n    restruct.simpleObjects.delete(this.data.id);\n\n    struct.simpleObjects.delete(this.data.id);\n  }\n\n  invert(): Base {\n    return new SimpleObjectAdd(\n      this.data.pos,\n      this.data.mode,\n      this.data.toCircle,\n      this.data.id,\n    );\n  }\n}\n\ninterface SimpleObjectMoveData {\n  id: number;\n  d: any;\n  noinvalidate: boolean;\n}\n\nexport class SimpleObjectMove extends Base {\n  data: SimpleObjectMoveData;\n\n  constructor(id: number, d: any, noinvalidate: boolean) {\n    super(OperationType.SIMPLE_OBJECT_MOVE);\n    this.data = { id, d, noinvalidate };\n  }\n\n  execute(restruct: any): void {\n    const struct = restruct.molecule;\n    const id = this.data.id;\n    const d = this.data.d;\n    const item = struct.simpleObjects.get(id);\n    item.pos.forEach((p) => p.add_(d));\n    restruct.simpleObjects\n      .get(id)\n      .visel.translate(Scale.modelToCanvas(d, restruct.render.options));\n    this.data.d = d.negated();\n    if (!this.data.noinvalidate) {\n      Base.invalidateItem(restruct, 'simpleObjects', id, 1);\n    }\n  }\n\n  invert(): Base {\n    const move = new SimpleObjectMove(\n      this.data.id,\n      this.data.d,\n      this.data.noinvalidate,\n    );\n    // todo Need further investigation on why this is needed?\n    move.data = this.data;\n    return move;\n  }\n}\n\ninterface SimpleObjectResizeData {\n  id: number;\n  d: any;\n  current: Vec2;\n  anchor: Vec2;\n  noinvalidate: boolean;\n  toCircle: boolean;\n}\n\nfunction handleRectangleChangeWithAnchor(item, anchor, current) {\n  const previousPos0 = item.pos[0].get_xy0();\n  const previousPos1 = item.pos[1].get_xy0();\n\n  if (tfx(anchor.x) === tfx(item.pos[1].x)) {\n    item.pos[1].x = anchor.x = current.x;\n    current.x = previousPos1.x;\n  }\n  if (tfx(anchor.y) === tfx(item.pos[1].y)) {\n    item.pos[1].y = anchor.y = current.y;\n    current.y = previousPos1.y;\n  }\n  if (tfx(anchor.x) === tfx(item.pos[0].x)) {\n    item.pos[0].x = anchor.x = current.x;\n    current.x = previousPos0.x;\n  }\n  if (tfx(anchor.y) === tfx(item.pos[0].y)) {\n    item.pos[0].y = anchor.y = current.y;\n    current.y = previousPos0.y;\n  }\n}\n\nexport class SimpleObjectResize extends Base {\n  data: SimpleObjectResizeData;\n\n  constructor(\n    id: number,\n    d: any,\n    current: Vec2,\n    anchor: any,\n    noinvalidate: boolean,\n    toCircle: boolean,\n  ) {\n    super(OperationType.SIMPLE_OBJECT_RESIZE);\n    this.data = { id, d, current, anchor, noinvalidate, toCircle };\n  }\n\n  execute(restruct: any): void {\n    const struct = restruct.molecule;\n    const id = this.data.id;\n    const d = this.data.d;\n    const current = this.data.current;\n    const item = struct.simpleObjects.get(id);\n    const anchor = this.data.anchor;\n    if (item.mode === SimpleObjectMode.ellipse) {\n      if (anchor) {\n        handleRectangleChangeWithAnchor(item, anchor, current);\n      } else if (this.data.toCircle) {\n        const previousPos1 = item.pos[1].get_xy0();\n        const circlePoint = makeCircleFromEllipse(item.pos[0], current);\n        item.pos[1].x = circlePoint.x;\n        item.pos[1].y = circlePoint.y;\n        this.data.current = previousPos1;\n      } else {\n        const previousPos1 = item.pos[1].get_xy0();\n        item.pos[1].x = current.x;\n        item.pos[1].y = current.y;\n        this.data.current = previousPos1;\n      }\n    } else if (item.mode === SimpleObjectMode.line && anchor) {\n      const previousPos0 = item.pos[0].get_xy0();\n      const previousPos1 = item.pos[1].get_xy0();\n\n      if (\n        tfx(anchor.x) === tfx(item.pos[1].x) &&\n        tfx(anchor.y) === tfx(item.pos[1].y)\n      ) {\n        item.pos[1].x = anchor.x = current.x;\n        current.x = previousPos1.x;\n        item.pos[1].y = anchor.y = current.y;\n        current.y = previousPos1.y;\n      }\n\n      if (\n        tfx(anchor.x) === tfx(item.pos[0].x) &&\n        tfx(anchor.y) === tfx(item.pos[0].y)\n      ) {\n        item.pos[0].x = anchor.x = current.x;\n        current.x = previousPos0.x;\n        item.pos[0].y = anchor.y = current.y;\n        current.y = previousPos0.y;\n      }\n    } else if (item.mode === SimpleObjectMode.rectangle && anchor) {\n      handleRectangleChangeWithAnchor(item, anchor, current);\n    } else item.pos[1].add_(d);\n\n    restruct.simpleObjects\n      .get(id)\n      .visel.translate(Scale.modelToCanvas(d, restruct.render.options));\n    this.data.d = d.negated();\n    if (!this.data.noinvalidate) {\n      Base.invalidateItem(restruct, 'simpleObjects', id, 1);\n    }\n  }\n\n  invert(): Base {\n    return new SimpleObjectResize(\n      this.data.id,\n      this.data.d,\n      this.data.current,\n      this.data.anchor,\n      this.data.noinvalidate,\n      this.data.toCircle,\n    );\n  }\n}\n\nexport function makeCircleFromEllipse(position0: Vec2, position1: Vec2): Vec2 {\n  const diff = Vec2.diff(position1, position0);\n  const min = Math.abs(diff.x) < Math.abs(diff.y) ? diff.x : diff.y;\n  return new Vec2(\n    position0.x + (diff.x > 0 ? 1 : -1) * Math.abs(min),\n    position0.y + (diff.y > 0 ? 1 : -1) * Math.abs(min),\n    0,\n  );\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { BaseOperation } from '../base';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\nimport { SGroup } from 'domain/entities';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\ntype Data = {\n  sgid: any;\n  aid: any;\n};\n\nclass SGroupAtomAdd extends BaseOperation {\n  data: Data;\n\n  constructor(sgroupId?: any, aid?: any) {\n    super(OperationType.S_GROUP_ATOM_ADD, OperationPriority.S_GROUP_ATOM_ADD);\n    this.data = { sgid: sgroupId, aid };\n  }\n\n  execute(restruct: ReStruct) {\n    const { aid, sgid } = this.data;\n\n    const struct = restruct.molecule;\n    const atom = struct.atoms.get(aid)!;\n    const sgroup = struct.sgroups.get(sgid)!;\n\n    if (sgroup.atoms.indexOf(aid) >= 0) {\n      return;\n    }\n\n    if (!atom) {\n      throw new Error('OpSGroupAtomAdd: Atom ' + aid + ' not found');\n    }\n\n    struct.atomAddToSGroup(sgid, aid);\n    BaseOperation.invalidateAtom(restruct, aid);\n  }\n\n  invert() {\n    const inverted = new SGroupAtomRemove();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nclass SGroupAtomRemove extends BaseOperation {\n  data: Data;\n\n  constructor(sgroupId?: any, aid?: any) {\n    super(OperationType.S_GROUP_ATOM_REMOVE, 4);\n    this.data = { sgid: sgroupId, aid };\n  }\n\n  execute(restruct: ReStruct) {\n    const { aid, sgid } = this.data;\n\n    const struct = restruct.molecule;\n    const atom = struct.atoms.get(aid)!;\n    const sgroup = struct.sgroups.get(sgid)!;\n\n    if (!atom || !sgroup) {\n      return;\n    }\n\n    SGroup.removeAtom(sgroup, aid);\n    atom.sgs.delete(sgid);\n    BaseOperation.invalidateAtom(restruct, aid);\n  }\n\n  invert() {\n    const inverted = new SGroupAtomAdd();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nexport { SGroupAtomAdd, SGroupAtomRemove };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../base';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\n\nexport class SGroupAttr extends BaseOperation {\n  data: {\n    sgid: any;\n    attr: any;\n    value: any;\n  };\n\n  constructor(sgroupId?: any, attribute?: any, value?: any) {\n    super(OperationType.S_GROUP_ATTR, OperationPriority.S_GROUP_ATTR);\n    this.data = {\n      sgid: sgroupId,\n      attr: attribute,\n      value,\n    };\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n    const sgroupId = this.data.sgid!;\n    const sgroup = struct.sgroups.get(sgroupId)!;\n\n    if (!sgroup) {\n      return;\n    }\n\n    const sgroupData = restruct.sgroupData.get(sgroupId);\n    if (sgroup.type === 'DAT' && sgroupData) {\n      // clean the stuff here, else it might be left behind if the sgroups is set to \"attached\"\n      restruct.clearVisel(sgroupData.visel);\n      restruct.sgroupData.delete(sgroupId);\n    }\n\n    this.data.value = sgroup.setAttr(this.data.attr, this.data.value);\n  }\n\n  invert() {\n    const inverted = new SGroupAttr();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../base';\nimport { OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\n\nexport class SGroupDataMove extends BaseOperation {\n  data: {\n    id: any;\n    d: any;\n  };\n\n  constructor(id?: any, d?: any) {\n    super(OperationType.S_GROUP_DATA_MOVE);\n    this.data = { id, d };\n  }\n\n  execute(restruct: ReStruct) {\n    const { d, id } = this.data;\n    const { sgroups } = restruct.molecule;\n\n    sgroups.get(id)!.pp?.add_(d); // eslint-disable-line no-underscore-dangle\n    this.data.d = d.negated();\n\n    // [MK] this currently does nothing since the DataSGroupData Visel only contains the highlighting/selection and SGroups are redrawn every time anyway\n    BaseOperation.invalidateItem(restruct, 'sgroupData', id, 1);\n  }\n\n  invert() {\n    const inverted = new SGroupDataMove();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { BaseOperation } from '../base';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\ntype Data = {\n  sgid: any;\n  parent?: any;\n  children?: any;\n};\n\nclass SGroupAddToHierarchy extends BaseOperation {\n  data: Data;\n\n  constructor(sgroupId?: any, parent?: any, children?: any) {\n    super(\n      OperationType.S_GROUP_ADD_TO_HIERACHY,\n      OperationPriority.S_GROUP_ADD_TO_HIERACHY,\n    );\n    this.data = { sgid: sgroupId, parent, children };\n  }\n\n  execute(restruct: ReStruct) {\n    const { sgid, parent, children } = this.data;\n\n    const struct = restruct.molecule;\n    const sgroup = struct.sgroups.get(sgid)!;\n    const relations = struct.sGroupForest.insert(sgroup, parent, children);\n\n    this.data.parent = relations.parent;\n    this.data.children = relations.children;\n  }\n\n  invert() {\n    const inverted = new SGroupRemoveFromHierarchy();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nclass SGroupRemoveFromHierarchy extends BaseOperation {\n  data: Data;\n\n  constructor(sgroupId?: any) {\n    super(OperationType.S_GROUP_REMOVE_FROM_HIERACHY, 110);\n    this.data = { sgid: sgroupId };\n  }\n\n  execute(restruct: any) {\n    const { sgid } = this.data;\n    const struct = restruct.molecule;\n\n    this.data.parent = struct.sGroupForest.parent.get(sgid);\n    this.data.children = struct.sGroupForest.children.get(sgid);\n    struct.sGroupForest.remove(sgid);\n  }\n\n  invert() {\n    const inverted = new SGroupAddToHierarchy();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nexport { SGroupAddToHierarchy, SGroupRemoveFromHierarchy };\n","import { BaseOperation } from '../base';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\nimport { SGroupAttachmentPoint } from 'domain/entities';\nimport assert from 'assert';\n\ntype Data = {\n  sGroupId: number;\n  attachmentPoint: SGroupAttachmentPoint;\n};\n\nexport class SGroupAttachmentPointAdd extends BaseOperation {\n  data: Data;\n\n  constructor(sGroupId: number, attachmentPoint: SGroupAttachmentPoint) {\n    super(\n      OperationType.S_GROUP_ATTACHMENT_POINT_ADD,\n      OperationPriority.S_GROUP_ATTACHMENT_POINT_ADD,\n    );\n    this.data = { sGroupId, attachmentPoint };\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n    const sgroup = struct.sgroups.get(this.data.sGroupId);\n\n    assert(sgroup != null);\n\n    const attachmentPoint = this.data.attachmentPoint;\n    const apAtom = struct.atoms.get(attachmentPoint.atomId);\n\n    if (!apAtom) {\n      throw new Error(\n        `attachmentPoint for Atom with id \"${attachmentPoint.atomId}\" is not found`,\n      );\n    }\n\n    sgroup.addAttachmentPoint(attachmentPoint);\n  }\n\n  invert() {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return new SGroupAttachmentPointRemove(\n      this.data.sGroupId,\n      this.data.attachmentPoint,\n    );\n  }\n}\n\nexport class SGroupAttachmentPointRemove extends BaseOperation {\n  data: Data;\n\n  constructor(sGroupId: number, attachmentPoint: SGroupAttachmentPoint) {\n    super(OperationType.S_GROUP_ATTACHMENT_POINT_REMOVE, 4);\n    this.data = { sGroupId, attachmentPoint };\n  }\n\n  execute(restruct: ReStruct) {\n    const { sGroupId, attachmentPoint } = this.data;\n    const struct = restruct.molecule;\n    const sgroup = struct.sgroups.get(sGroupId);\n    sgroup?.removeAttachmentPoint(attachmentPoint);\n  }\n\n  invert() {\n    return new SGroupAttachmentPointAdd(\n      this.data.sGroupId,\n      this.data.attachmentPoint,\n    );\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { FunctionalGroup, SGroup, Vec2 } from 'domain/entities';\nimport { ReSGroup, ReStruct } from '../../../render';\n\nimport { BaseOperation } from '../base';\nimport { OperationPriority, OperationType } from '../OperationType';\nimport { MonomerMicromolecule } from 'domain/entities/monomerMicromolecule';\n\n// todo: separate classes: now here is circular dependency in `invert` method\n\ntype Data = {\n  sgid: any;\n  type?: any;\n  pp?: any;\n  expanded?: boolean;\n  name?: string;\n  oldSgroup?: SGroup;\n};\n\nclass SGroupCreate extends BaseOperation {\n  data: Data;\n\n  constructor(\n    sgroupId?: any,\n    type?: any,\n    pp?: any,\n    expanded?: boolean,\n    name?: string,\n    oldSgroup?: SGroup,\n  ) {\n    super(OperationType.S_GROUP_CREATE);\n    this.data = {\n      sgid: sgroupId,\n      type,\n      pp,\n      expanded,\n      name,\n      oldSgroup,\n    };\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n    const { sgid, pp, expanded, name, oldSgroup } = this.data;\n    const sgroup =\n      oldSgroup instanceof MonomerMicromolecule\n        ? new MonomerMicromolecule(SGroup.TYPES.SUP, oldSgroup.monomer)\n        : new SGroup(this.data.type);\n\n    sgroup.id = sgid;\n    struct.sgroups.set(sgid, sgroup);\n\n    if (pp) {\n      sgroup!.pp = new Vec2(pp);\n    }\n\n    if (expanded) {\n      sgroup.data.expanded = expanded;\n    }\n\n    if (name) {\n      sgroup.data.name = name;\n    }\n\n    const existingSGroup = struct.sgroups.get(sgid);\n\n    if (existingSGroup) {\n      restruct.sgroups.set(sgid, new ReSGroup(existingSGroup));\n      if (\n        FunctionalGroup.isFunctionalGroup(sgroup) ||\n        SGroup.isSuperAtom(sgroup)\n      ) {\n        restruct.molecule.functionalGroups.add(new FunctionalGroup(sgroup));\n      }\n    }\n    this.data.sgid = sgid;\n  }\n\n  invert() {\n    const inverted = new SGroupDelete();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nclass SGroupDelete extends BaseOperation {\n  data: Data;\n\n  constructor(sgroupId?: any) {\n    super(OperationType.S_GROUP_DELETE, OperationPriority.S_GROUP_DELETE);\n    this.data = { sgid: sgroupId };\n  }\n\n  execute(restruct: ReStruct) {\n    const struct = restruct.molecule;\n    const { sgid } = this.data;\n    const sgroup = restruct.sgroups.get(sgid);\n    const sgroupData = restruct.sgroupData.get(sgid);\n    if (!sgroup) return;\n    this.data.type = sgroup?.item?.type;\n    this.data.pp = sgroup?.item?.pp;\n    this.data.oldSgroup = sgroup.item;\n\n    if (sgroup?.item?.type === 'DAT' && sgroupData) {\n      restruct.clearVisel(sgroupData.visel);\n      restruct.sgroupData.delete(sgid);\n    }\n\n    restruct.clearVisel(sgroup.visel);\n    if (sgroup?.item?.atoms?.length !== 0) {\n      throw new Error('S-Group not empty!');\n    }\n\n    if (\n      FunctionalGroup.isFunctionalGroup(sgroup.item) ||\n      SGroup.isSuperAtom(sgroup.item)\n    ) {\n      let relatedFGroupId;\n      this.data.name = sgroup.item.data.name;\n      this.data.expanded = (sgroup.item as SGroup).isExpanded();\n      restruct.molecule.functionalGroups.forEach((fg, fgid) => {\n        if (fg.relatedSGroupId === sgid) {\n          relatedFGroupId = fgid;\n        }\n      });\n      restruct.molecule.functionalGroups.delete(relatedFGroupId);\n    }\n\n    restruct.sgroups.delete(sgid);\n    struct.sgroups.delete(sgid);\n  }\n\n  invert() {\n    const inverted = new SGroupCreate();\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nexport { SGroupCreate, SGroupDelete };\nexport * from './sgroupAtom';\nexport * from './SGroupAttr';\nexport * from './SGroupDataMove';\nexport * from './sgroupHierarchy';\nexport * from './sgroupAttachmentPoints';\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { ReStruct, ReText } from '../../../render';\nimport { Text, Vec2 } from 'domain/entities';\n\nimport { BaseOperation } from '../base';\nimport { OperationType } from '../OperationType';\n\ninterface TextCreateData {\n  id?: number;\n  content: string;\n  pos: Array<Vec2>;\n  position: Vec2;\n}\n\nexport class TextCreate extends BaseOperation {\n  data: TextCreateData;\n\n  constructor(content: string, position: Vec2, pos: Array<Vec2>, id?: number) {\n    super(OperationType.TEXT_CREATE);\n    this.data = { content, position, pos, id };\n  }\n\n  execute(restruct: ReStruct): void {\n    const item = new Text(this.data);\n\n    if (this.data.id == null) {\n      const index = restruct.molecule.texts.add(item);\n      this.data.id = index;\n    } else {\n      restruct.molecule.texts.set(this.data.id!, item);\n    }\n\n    const itemId = this.data.id!;\n\n    restruct.texts.set(itemId, new ReText(item));\n\n    restruct.molecule.textSetPosition(itemId, new Vec2(this.data.position));\n    BaseOperation.invalidateItem(restruct, 'texts', itemId, 1);\n  }\n\n  invert(): BaseOperation {\n    return new TextDelete(this.data.id!);\n  }\n}\n\ninterface TextDeleteData {\n  id: number;\n  content?: string;\n  position?: Vec2;\n  pos?: Array<Vec2> | [];\n}\n\nexport class TextDelete extends BaseOperation {\n  data: TextDeleteData;\n\n  constructor(id: number) {\n    super(OperationType.TEXT_DELETE);\n    this.data = { id };\n  }\n\n  execute(restruct: ReStruct): void {\n    const struct = restruct.molecule;\n    const item = struct.texts.get(this.data.id)!;\n    if (!item) return;\n\n    this.data.content = item.content!;\n    this.data.position = item.position;\n\n    restruct.markItemRemoved();\n\n    restruct.clearVisel(restruct.texts.get(this.data.id)!.visel);\n    restruct.texts.delete(this.data.id);\n\n    struct.texts.delete(this.data.id);\n  }\n\n  invert(): BaseOperation {\n    return new TextCreate(\n      this.data.content!,\n      this.data.position!,\n      this.data.pos!,\n      this.data.id,\n    );\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../base';\nimport { OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\n\ninterface TextUpdateData {\n  id: number;\n  content: string;\n  previousContent?: string;\n}\n\nexport class TextUpdate extends BaseOperation {\n  data: TextUpdateData;\n\n  constructor(id: number, content: string) {\n    super(OperationType.TEXT_UPDATE);\n    this.data = { id, content };\n  }\n\n  execute(restruct: ReStruct) {\n    const { id, content } = this.data;\n    const text = restruct.molecule.texts.get(id);\n\n    if (text) {\n      this.data.previousContent = text.content!;\n      text.content = content;\n    }\n\n    BaseOperation.invalidateItem(restruct, 'texts', id, 1);\n  }\n\n  invert() {\n    const inverted = new TextUpdate(this.data.id, this.data.previousContent!);\n\n    inverted.data.previousContent = this.data.content;\n    return inverted;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../base';\nimport { OperationType } from '../OperationType';\nimport { ReStruct } from '../../../render';\nimport { Scale } from 'domain/helpers';\n\ninterface TextMoveData {\n  id: any;\n  d: any;\n  noinvalidate?: boolean;\n}\n\nexport class TextMove extends BaseOperation {\n  data: TextMoveData;\n\n  constructor(id: any, d: any, noinvalidate?: boolean) {\n    super(OperationType.TEXT_MOVE);\n    this.data = { id, d, noinvalidate };\n  }\n\n  execute(restruct: ReStruct): void {\n    const struct = restruct.molecule;\n    const id = this.data.id;\n    const difference = this.data.d;\n    const item = struct.texts.get(id);\n    const renderItem = restruct.texts.get(id);\n\n    if (!item || !renderItem) {\n      return;\n    }\n\n    item.position.add_(difference);\n    item.setPos(renderItem.getReferencePoints());\n\n    renderItem.visel.translate(\n      Scale.modelToCanvas(difference, restruct.render.options),\n    );\n\n    this.data.d = difference.negated();\n\n    if (!this.data.noinvalidate) {\n      BaseOperation.invalidateItem(restruct, 'texts', id, 1);\n    }\n  }\n\n  invert(): BaseOperation {\n    const move = new TextMove(\n      this.data.id,\n      this.data.d,\n      this.data.noinvalidate,\n    );\n\n    move.data = this.data;\n\n    return move;\n  }\n}\n","import { DrawingEntity } from 'domain/entities/DrawingEntity';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { provideEditorSettings } from 'application/editor/editorSettings';\nimport ZoomTool from 'application/editor/tools/Zoom';\nimport { select } from 'd3';\nimport {\n  canvasSelector,\n  drawnStructuresSelector,\n} from 'application/editor/constants';\n\nexport interface IBaseRenderer {\n  show(theme): void;\n  remove(): void;\n}\n\nexport abstract class BaseRenderer implements IBaseRenderer {\n  protected rootElement?: D3SvgElementSelection<SVGGElement, void>;\n\n  public bodyElement?:\n    | D3SvgElementSelection<SVGUseElement, this>\n    | D3SvgElementSelection<SVGLineElement, this>\n    | D3SvgElementSelection<SVGPathElement, this>\n    | D3SvgElementSelection<SVGCircleElement, this>;\n\n  protected hoverElement?:\n    | D3SvgElementSelection<SVGUseElement, void>\n    | D3SvgElementSelection<SVGGElement, void>\n    | D3SvgElementSelection<SVGCircleElement, void>\n    | D3SvgElementSelection<SVGRectElement, void>\n    | D3SvgElementSelection<SVGPathElement, void>;\n\n  protected hoverAreaElement?: D3SvgElementSelection<\n    SVGGElement | SVGLineElement,\n    void\n  >;\n\n  protected hoverCircleAreaElement?: D3SvgElementSelection<\n    SVGGElement | SVGCircleElement,\n    void\n  >;\n\n  protected canvasWrapper: D3SvgElementSelection<SVGSVGElement, void>;\n\n  protected canvas: D3SvgElementSelection<SVGSVGElement, void>;\n  protected constructor(public drawingEntity: DrawingEntity) {\n    this.canvasWrapper =\n      ZoomTool.instance?.canvasWrapper || select(canvasSelector);\n    this.canvas = ZoomTool.instance?.canvas || select(drawnStructuresSelector);\n  }\n\n  protected get editorSettings() {\n    return provideEditorSettings();\n  }\n\n  public get rootBBox() {\n    const rootNode = this.rootElement?.node();\n    if (!rootNode) return;\n\n    return rootNode.getBBox();\n  }\n\n  public get rootBoundingClientRect() {\n    const rootNode = this.rootElement?.node();\n    if (!rootNode) return;\n\n    return rootNode.getBoundingClientRect();\n  }\n\n  public get width() {\n    return this.rootBBox?.width || 0;\n  }\n\n  public get height() {\n    return this.rootBBox?.height || 0;\n  }\n\n  public get x() {\n    return this.rootBBox?.x || 0;\n  }\n\n  public get y() {\n    return this.rootBBox?.y || 0;\n  }\n\n  public abstract show(theme, force?: boolean): void;\n  public abstract drawSelection(): void;\n  public abstract moveSelection(): void;\n  protected abstract appendHover(\n    hoverArea,\n  ):\n    | D3SvgElementSelection<SVGGElement, void>\n    | D3SvgElementSelection<SVGUseElement, void>\n    | D3SvgElementSelection<SVGCircleElement, void>\n    | D3SvgElementSelection<SVGRectElement, void>\n    | D3SvgElementSelection<SVGPathElement, void>\n    | void;\n\n  protected abstract removeHover(): void;\n  protected abstract appendHoverAreaElement(): void;\n\n  public remove() {\n    this.rootElement?.remove();\n    this.rootElement = undefined;\n  }\n\n  public redrawHover() {\n    if (this.drawingEntity.hovered) {\n      const hoverElement = this.appendHover(this.hoverAreaElement);\n      if (hoverElement) {\n        this.hoverElement = hoverElement;\n      }\n    } else {\n      this.removeHover();\n      this.hoverElement = undefined;\n    }\n  }\n\n  move() {}\n}\n","import { BaseRenderer } from 'application/render/renderers/internal';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { Vec2 } from 'domain/entities/vec2';\n\nexport class BaseSequenceRenderer extends BaseRenderer {\n  protected appendHover(\n    _hoverArea,\n  ): D3SvgElementSelection<SVGUseElement, void> | void {\n    return undefined;\n  }\n\n  protected appendHoverAreaElement(): void {}\n\n  drawSelection(): void {}\n\n  moveSelection(): void {}\n\n  protected removeHover(): void {}\n\n  show(_theme?): void {}\n\n  get center() {\n    return new Vec2(0, 0, 0);\n  }\n}\n","import { Vec2 } from 'domain/entities/vec2';\nimport { BaseRenderer } from 'application/render/renderers/BaseRenderer';\nimport assert from 'assert';\nimport { Coordinates } from 'application/editor/shared/coordinates';\nimport { BaseSequenceRenderer } from 'application/render/renderers/sequence/BaseSequenceRenderer';\nlet id = 0;\n\nexport interface DrawingEntityConfig {\n  generateId: boolean;\n}\nexport abstract class DrawingEntity {\n  public selected = false;\n  public hovered = false;\n  public id = 0;\n  public baseRenderer?: BaseRenderer;\n\n  protected constructor(\n    private _position: Vec2 = new Vec2(0, 0),\n    private config: DrawingEntityConfig = {\n      generateId: true,\n    },\n  ) {\n    this._position = _position || new Vec2(0, 0);\n    if (this.config?.generateId === true) {\n      this.id = id;\n      id++;\n    }\n  }\n\n  moveRelative(position: Vec2) {\n    this._position.x += position.x;\n    this._position.y += position.y;\n  }\n\n  public moveAbsolute(position: Vec2) {\n    this._position = position;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  public turnOnHover() {\n    this.hovered = true;\n  }\n\n  public turnOffHover() {\n    this.hovered = false;\n  }\n\n  public turnOnSelection() {\n    this.selected = true;\n  }\n\n  public turnOffSelection() {\n    this.selected = false;\n  }\n\n  public abstract get center(): Vec2;\n\n  public selectIfLocatedInRectangle(\n    rectangleTopLeftPoint: Vec2,\n    rectangleBottomRightPoint: Vec2,\n    isPreviousSelected = false,\n    shiftKey = false,\n  ) {\n    assert(this.baseRenderer);\n    const prevSelectedValue = this.selected;\n    let center = Coordinates.modelToCanvas(this.center);\n    if (this.baseRenderer instanceof BaseSequenceRenderer) {\n      center = this.baseRenderer.center;\n    }\n    const locatedInRectangle =\n      rectangleBottomRightPoint.x > center.x &&\n      rectangleBottomRightPoint.y > center.y &&\n      rectangleTopLeftPoint.x < center.x &&\n      rectangleTopLeftPoint.y < center.y;\n    if ((shiftKey && !isPreviousSelected) || !shiftKey) {\n      if (locatedInRectangle) {\n        this.turnOnSelection();\n      } else {\n        this.turnOffSelection();\n      }\n    }\n\n    return prevSelectedValue !== this.selected;\n  }\n\n  public setBaseRenderer(renderer: BaseRenderer) {\n    this.baseRenderer = renderer;\n  }\n}\n","import { DrawingEntity } from './DrawingEntity';\nimport { Vec2 } from 'domain/entities/vec2';\n\nexport abstract class BaseBond extends DrawingEntity {\n  public endPosition: Vec2 = new Vec2();\n\n  abstract get firstEndEntity(): DrawingEntity;\n  abstract get secondEndEntity(): DrawingEntity | undefined;\n\n  public get finished() {\n    return Boolean(this.firstEndEntity && this.secondEndEntity);\n  }\n\n  public get center() {\n    return Vec2.centre(this.startPosition, this.endPosition);\n  }\n\n  public moveToLinkedEntities() {\n    const firstMonomerCenter = this.firstEndEntity.position;\n    const secondMonomerCenter = this.secondEndEntity?.position;\n    this.moveBondStartAbsolute(firstMonomerCenter.x, firstMonomerCenter.y);\n    if (secondMonomerCenter) {\n      this.moveBondEndAbsolute(secondMonomerCenter.x, secondMonomerCenter.y);\n    }\n  }\n\n  public moveBondStartAbsolute(x, y) {\n    this.moveAbsolute(new Vec2(x, y));\n  }\n\n  public moveBondEndAbsolute(x, y) {\n    this.endPosition = new Vec2(x, y);\n  }\n\n  public get startPosition() {\n    return this.position;\n  }\n\n  public getAnotherEntity(monomer: DrawingEntity): DrawingEntity | undefined {\n    return this.firstEndEntity === monomer\n      ? this.secondEndEntity\n      : this.firstEndEntity;\n  }\n}\n","import { Atom } from 'domain/entities/CoreAtom';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { BaseRenderer } from 'application/render';\nimport { MonomerToAtomBondRenderer } from 'application/render/renderers/MonomerToAtomBondRenderer';\nimport { MonomerToAtomBondSequenceRenderer } from 'application/render/renderers/sequence/MonomerToAtomBondSequenceRenderer';\nimport { BaseBond } from './BaseBond';\n\nexport class MonomerToAtomBond extends BaseBond {\n  public renderer?:\n    | MonomerToAtomBondRenderer\n    | MonomerToAtomBondSequenceRenderer = undefined;\n\n  constructor(public monomer: BaseMonomer, public atom: Atom) {\n    super();\n  }\n\n  public setRenderer(\n    renderer: MonomerToAtomBondRenderer | MonomerToAtomBondSequenceRenderer,\n  ): void {\n    super.setBaseRenderer(renderer as BaseRenderer);\n    this.renderer = renderer;\n  }\n\n  get firstEndEntity(): BaseMonomer {\n    return this.monomer;\n  }\n\n  get secondEndEntity(): Atom {\n    return this.atom;\n  }\n}\n","import { Vec2 } from 'domain/entities/vec2';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { Selection, line } from 'd3';\nimport { BaseMonomer } from './entities/BaseMonomer';\nimport assert from 'assert';\nimport {\n  canvasToMonomerCoordinates,\n  findLabelPoint,\n  Coordinates,\n  getSearchFunction,\n} from './helpers/attachmentPointCalculations';\nimport { editorEvents } from 'application/editor/editorEvents';\nimport { AttachmentPointConstructorParams, AttachmentPointName } from './types';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\n\nexport class AttachmentPoint {\n  static attachmentPointVector = 6;\n  static attachmentPointLength = Math.hypot(\n    AttachmentPoint.attachmentPointVector,\n    AttachmentPoint.attachmentPointVector,\n  );\n\n  static labelOffset = 3.5;\n  static radius = 3;\n  static labelSize = { x: 3.5, y: 2.5 };\n  static colors = {\n    fillUsed: '#0097A8',\n    fill: 'white',\n    fillPotentially: '#167782',\n    strokeUsed: '#0097A8',\n    stroke: '#167782',\n    strokePotentially: '#167782',\n  };\n\n  protected rootElement: D3SvgElementSelection<SVGGElement, void>;\n  protected attachmentPoint: D3SvgElementSelection<SVGGElement, this> | null;\n  public monomer: BaseMonomer;\n  protected bodyWidth: number;\n  protected bodyHeight: number;\n  protected attachmentPointName: AttachmentPointName;\n  protected canvasOffset: Coordinates;\n  protected centerOfMonomer: Coordinates;\n  protected element:\n    | Selection<SVGGElement, this, HTMLElement, never>\n    | undefined;\n\n  private hoverableArea:\n    | Selection<SVGGElement, this, HTMLElement, never>\n    | undefined;\n\n  protected initialAngle = 0;\n  private isUsed: boolean;\n  private isSnake;\n  private editorEvents: typeof editorEvents;\n  private applyZoomForPositionCalculation: boolean;\n\n  constructor(\n    constructorParams: AttachmentPointConstructorParams,\n    skipInit?: boolean,\n  ) {\n    this.rootElement = constructorParams.rootElement;\n    this.monomer = constructorParams.monomer;\n    this.bodyWidth = constructorParams.bodyWidth;\n    this.bodyHeight = constructorParams.bodyHeight;\n    this.canvasOffset =\n      constructorParams.canvas.node()?.getBoundingClientRect() ||\n      new DOMRect(0, 0, 0, 0);\n    this.attachmentPointName = constructorParams.attachmentPointName;\n    this.centerOfMonomer =\n      constructorParams.monomer.renderer?.center || new Vec2(0, 0, 0);\n    this.isSnake = constructorParams.isSnake;\n    this.isUsed = constructorParams.isUsed;\n    this.initialAngle = constructorParams.angle;\n    this.applyZoomForPositionCalculation =\n      constructorParams.applyZoomForPositionCalculation;\n    this.editorEvents = editorEvents;\n    this.attachmentPoint = null;\n\n    if (!skipInit) {\n      this.appendAttachmentPoint();\n    }\n  }\n\n  private get fill() {\n    if (\n      this.monomer.isAttachmentPointPotentiallyUsed(this.attachmentPointName)\n    ) {\n      return AttachmentPoint.colors.fillPotentially;\n    } else if (this.monomer.isAttachmentPointUsed(this.attachmentPointName)) {\n      return AttachmentPoint.colors.fillUsed;\n    } else {\n      return AttachmentPoint.colors.fill;\n    }\n  }\n\n  protected get stroke() {\n    if (\n      this.monomer.isAttachmentPointPotentiallyUsed(this.attachmentPointName)\n    ) {\n      return AttachmentPoint.colors.strokePotentially;\n    } else if (this.monomer.isAttachmentPointUsed(this.attachmentPointName)) {\n      return AttachmentPoint.colors.strokeUsed;\n    } else {\n      return AttachmentPoint.colors.stroke;\n    }\n  }\n\n  public removeAttachmentPoint() {\n    this.element?.remove();\n  }\n\n  protected renderAttachmentPointByCoordinates(\n    attachmentOnBorder: Coordinates,\n    attachmentPointCoordinates: Coordinates,\n    labelCoordinatesOnMonomer: Coordinates,\n  ) {\n    const fill = this.fill;\n    const stroke = this.stroke;\n\n    this.attachmentPoint = this.rootElement\n      .insert('g', ':first-child')\n      .data([this])\n      .style('pointer-events', 'none')\n      .style('cursor', 'pointer')\n      .attr('class', 'dynamic-element');\n\n    const attachmentPointElement = this.attachmentPoint.append('g');\n\n    attachmentPointElement\n      .append('line')\n      .attr('x1', attachmentOnBorder.x)\n      .attr('y1', attachmentOnBorder.y)\n      .attr('x2', attachmentPointCoordinates.x)\n      .attr('y2', attachmentPointCoordinates.y)\n      .attr('stroke', stroke)\n      .attr('stroke-linecap', 'round')\n      .attr('stroke-width', '1px');\n\n    attachmentPointElement\n      .append('circle')\n      .attr('r', AttachmentPoint.radius)\n      .attr('cx', attachmentPointCoordinates.x)\n      .attr('cy', attachmentPointCoordinates.y)\n      .attr('stroke', fill === 'white' ? '#0097A8' : 'white')\n      .attr('stroke-width', '1px')\n      .attr('fill', fill);\n\n    const labelGroup = this.attachmentPoint.append('text');\n\n    labelGroup\n      .text(this.attachmentPointName)\n      .attr('x', labelCoordinatesOnMonomer.x)\n      .attr('y', labelCoordinatesOnMonomer.y)\n      .style('font-size', '6px')\n      .style('fill', '#585858')\n      .style('user-select', 'none');\n\n    return this.attachmentPoint;\n  }\n\n  private renderHoverableArea(\n    monomerCenter: Coordinates,\n    attachmentPointCenter: Coordinates,\n    angleDegrees: number,\n    hasBond: boolean,\n  ) {\n    if (!this.element) {\n      return;\n    }\n\n    const rotation = angleDegrees + 90;\n    const halfWidth = 8;\n\n    const areaHeight = Math.sqrt(\n      (monomerCenter.x - attachmentPointCenter.x) ** 2 +\n        (monomerCenter.y - attachmentPointCenter.y) ** 2,\n    );\n\n    const points: Coordinates[] = [\n      { x: -AttachmentPoint.radius, y: AttachmentPoint.radius + 2 },\n      { x: AttachmentPoint.radius, y: AttachmentPoint.radius + 2 },\n      {\n        x: halfWidth,\n        y: -areaHeight + 10,\n      },\n      {\n        x: -halfWidth,\n        y: -areaHeight + 10,\n      },\n      { x: -AttachmentPoint.radius, y: AttachmentPoint.radius + 2 },\n    ];\n\n    const lineFunction = line<Coordinates>()\n      .x(({ x }) => x)\n      .y(({ y }) => y);\n\n    const hoverableAreaElement = this.element.append('g');\n\n    hoverableAreaElement\n      .append('path')\n      .attr('d', lineFunction(points) + 'z')\n      .attr('stroke', 'black')\n      .attr('stroke-width', '1px')\n      .attr('fill', '#0097A8')\n      .style('opacity', '0')\n      .style('pointer-events', hasBond ? 'none' : 'auto')\n      .attr(\n        'transform',\n        `translate(${attachmentPointCenter.x},${attachmentPointCenter.y})rotate(${rotation})`,\n      );\n\n    hoverableAreaElement\n      .on('mouseover', (event) => {\n        event.attachmentPointName = this.attachmentPointName;\n        this.editorEvents.mouseOverAttachmentPoint.dispatch(event);\n      })\n      .on('mouseleave', (event) => {\n        this.editorEvents.mouseLeaveAttachmentPoint.dispatch(event);\n      })\n      .on('mousedown', (event) => {\n        event.attachmentPointName = this.attachmentPointName;\n        this.editorEvents.mouseDownAttachmentPoint.dispatch(event);\n      })\n      .on('mouseup', (event) => {\n        event.attachmentPointName = this.attachmentPointName;\n        this.editorEvents.mouseUpAttachmentPoint.dispatch(event);\n      });\n\n    return hoverableAreaElement;\n  }\n\n  public appendAttachmentPoint() {\n    let angleDegrees;\n    let angleRadians: number;\n    const polymerBond =\n      this.monomer.attachmentPointsToBonds[this.attachmentPointName];\n\n    const firstMonomer =\n      polymerBond instanceof MonomerToAtomBond\n        ? polymerBond.monomer\n        : polymerBond?.firstMonomer;\n    const flip = this.monomer.id === firstMonomer?.id;\n    const isAttachmentpointR1 = this.attachmentPointName === 'R1';\n    if (!polymerBond) {\n      angleDegrees = this.initialAngle;\n    } else if (\n      !(polymerBond instanceof MonomerToAtomBond) &&\n      this.isSnake &&\n      !polymerBond?.renderer?.isMonomersOnSameHorizontalLine()\n    ) {\n      angleRadians = isAttachmentpointR1 ? 0 : Math.PI;\n      angleDegrees = Vec2.radiansToDegrees(angleRadians);\n    } else {\n      angleRadians = this.rotateToAngle(polymerBond, flip);\n\n      angleDegrees = Vec2.radiansToDegrees(angleRadians);\n    }\n\n    const [\n      attachmentToBorderCoordinates,\n      attachmentPointCoordinates,\n      labelCoordinates,\n    ] = this.getCoordinates(angleDegrees);\n\n    const attachmentToCenterCoordinates = canvasToMonomerCoordinates(\n      this.centerOfMonomer,\n      this.centerOfMonomer,\n      this.bodyWidth,\n      this.bodyHeight,\n    );\n\n    const attachmentPoint = this.renderAttachmentPointByCoordinates(\n      attachmentToBorderCoordinates,\n      attachmentPointCoordinates,\n      labelCoordinates,\n    );\n\n    this.element = attachmentPoint;\n\n    const hoverableArea = this.renderHoverableArea(\n      attachmentToCenterCoordinates,\n      attachmentPointCoordinates,\n      angleDegrees,\n      Boolean(polymerBond),\n    );\n\n    this.hoverableArea = hoverableArea;\n\n    return attachmentPoint;\n  }\n\n  public updateAttachmentPointStyleForHover() {\n    this.attachmentPoint?.select('line').style('stroke', this.stroke);\n    this.attachmentPoint\n      ?.select('circle')\n      .style('fill', this.fill)\n      .attr('stroke', this.fill === 'white' ? '#0097A8' : 'white');\n  }\n\n  public rotateToAngle(\n    polymerBond: PolymerBond | MonomerToAtomBond,\n    flip = false,\n  ) {\n    let angleRadians = 0;\n    if (flip) {\n      angleRadians = Vec2.oxAngleForVector(\n        polymerBond.endPosition,\n        polymerBond.position,\n      );\n    } else {\n      angleRadians = Vec2.oxAngleForVector(\n        polymerBond.position,\n        polymerBond.endPosition,\n      );\n    }\n\n    return angleRadians;\n  }\n\n  protected getCoordinates(angleDegrees) {\n    const [pointOnBorder, pointOfAttachment, labelPoint] =\n      this.catchThePoint(angleDegrees);\n\n    const attachmentToBorderCoordinates = canvasToMonomerCoordinates(\n      pointOnBorder,\n      this.centerOfMonomer,\n      this.bodyWidth,\n      this.bodyHeight,\n    );\n\n    const attachmentPointCoordinates = canvasToMonomerCoordinates(\n      pointOfAttachment,\n      this.centerOfMonomer,\n      this.bodyWidth,\n      this.bodyHeight,\n    );\n\n    const labelCoordinates = canvasToMonomerCoordinates(\n      labelPoint,\n      this.centerOfMonomer,\n      this.bodyWidth,\n      this.bodyHeight,\n    );\n\n    return [\n      attachmentToBorderCoordinates,\n      attachmentPointCoordinates,\n      labelCoordinates,\n    ];\n  }\n\n  public updateCoords() {\n    const polymerBond =\n      this.monomer.attachmentPointsToBonds[this.attachmentPointName];\n\n    if (!polymerBond || polymerBond instanceof MonomerToAtomBond) {\n      return;\n    }\n\n    const flip = this.monomer.id === polymerBond?.firstMonomer?.id;\n\n    const angleRadians = this.rotateToAngle(polymerBond, flip);\n    const angleDegrees = Vec2.radiansToDegrees(angleRadians);\n\n    const [\n      attachmentToBorderCoordinates,\n      attachmentPointCoordinates,\n      labelCoordinates,\n    ] = this.getCoordinates(angleDegrees);\n\n    this.attachmentPoint\n      ?.select('line')\n      .attr('x1', attachmentToBorderCoordinates.x)\n      .attr('y1', attachmentToBorderCoordinates.y)\n      .attr('x2', attachmentPointCoordinates.x)\n      .attr('y2', attachmentPointCoordinates.y);\n\n    this.attachmentPoint\n      ?.select('circle')\n      .attr('cx', attachmentPointCoordinates.x)\n      .attr('cy', attachmentPointCoordinates.y)\n      .attr('stroke', 'white')\n      .attr('fill', AttachmentPoint.colors.fillPotentially);\n\n    this.attachmentPoint\n      ?.select('text')\n      .attr('x', labelCoordinates.x)\n      .attr('y', labelCoordinates.y);\n  }\n\n  private catchThePoint(rotationAngle: number): Coordinates[] {\n    assert(this.monomer.renderer);\n\n    const currentMonomerCenter = {\n      x: this.monomer.renderer.center.x,\n      y: this.monomer.renderer.center.y,\n    };\n\n    this.initialAngle = rotationAngle;\n\n    const findPointOnMonomerBorder = getSearchFunction(\n      this.initialAngle - 180,\n      this.canvasOffset,\n      this.monomer,\n    );\n\n    const applyZoomForPositionCalculation =\n      this.applyZoomForPositionCalculation;\n\n    const pointOnBorder = findPointOnMonomerBorder(\n      currentMonomerCenter,\n      (this.bodyWidth + this.bodyHeight) / 2,\n      applyZoomForPositionCalculation,\n    );\n\n    const [labelPoint, pointOfAttachment] = findLabelPoint(\n      pointOnBorder,\n      this.initialAngle - 180,\n      AttachmentPoint.attachmentPointLength,\n      AttachmentPoint.labelOffset,\n      AttachmentPoint.labelSize,\n      this.isUsed,\n    );\n\n    return [pointOnBorder, pointOfAttachment, labelPoint];\n  }\n\n  public getElement() {\n    return this.element;\n  }\n\n  public getAttachmentPointName() {\n    return this.attachmentPointName;\n  }\n\n  public getHoverableArea() {\n    return this.hoverableArea;\n  }\n\n  public getAngle() {\n    if (this.initialAngle < 0 && this.isUsed) {\n      return this.initialAngle + 360;\n    }\n    return this.initialAngle;\n  }\n}\n","import { editorEvents } from 'application/editor/editorEvents';\nimport { CoreEditor, SelectRectangle } from 'application/editor/internal';\nimport { Coordinates } from 'application/editor/shared/coordinates';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport assert from 'assert';\nimport { AttachmentPoint } from 'domain/AttachmentPoint';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { DrawingEntity } from 'domain/entities/DrawingEntity';\nimport { Vec2 } from 'domain/entities/vec2';\nimport {\n  anglesToSector,\n  attachmentPointNumberToAngle,\n  checkFor0and360,\n  sectorsList,\n} from 'domain/helpers/attachmentPointCalculations';\nimport {\n  AttachmentPointConstructorParams,\n  AttachmentPointName,\n} from 'domain/types';\nimport { BaseRenderer } from './BaseRenderer';\n\nconst labelPositions: { [key: string]: { x: number; y: number } | undefined } =\n  {};\nexport const MONOMER_CSS_CLASS = 'monomer';\n\nexport abstract class BaseMonomerRenderer extends BaseRenderer {\n  private editorEvents: typeof editorEvents;\n  private editor: CoreEditor;\n  private selectionCircle?: D3SvgElementSelection<SVGCircleElement, void>;\n  private selectionBorder?: D3SvgElementSelection<SVGUseElement, void>;\n  public declare bodyElement?: D3SvgElementSelection<SVGUseElement, this>;\n\n  private freeSectorsList: number[] = sectorsList;\n\n  private attachmentPoints: AttachmentPoint[] | [] = [];\n  private hoveredAttachmentPoint: AttachmentPointName | null = null;\n\n  private monomerSymbolElement?: SVGUseElement | SVGRectElement;\n  public monomerSize: { width: number; height: number };\n\n  private enumerationElement?: D3SvgElementSelection<SVGTextElement, void>;\n  public enumeration: number | null = null;\n\n  private beginningElement?: D3SvgElementSelection<SVGTextElement, void>;\n  public beginning: string | null = null;\n\n  public CHAIN_BEGINNING = '';\n\n  static isSelectable() {\n    return true;\n  }\n\n  protected constructor(\n    public monomer: BaseMonomer,\n    private monomerSelectedElementId: string,\n    private monomerHoveredElementId: string,\n    monomerSymbolElementId: string,\n    private scale?: number,\n  ) {\n    super(monomer as DrawingEntity);\n    this.monomer.setRenderer(this);\n    this.editorEvents = editorEvents;\n    this.editor = CoreEditor?.provideEditorInstance();\n    this.monomerSymbolElement = document.querySelector(\n      `${monomerSymbolElementId} .monomer-body`,\n    ) as SVGUseElement | SVGRectElement;\n    // Cross-browser width and height detection via getAttribute()\n    // as getBoundingClientRect() and getBBox() return 0 values in Firefox\n    // in this case (<path> inside <symbol>, <defs>)\n    this.monomerSize = {\n      width: +(\n        this.monomerSymbolElement?.getAttribute('data-actual-width') || 0\n      ),\n      height: +(\n        this.monomerSymbolElement?.getAttribute('data-actual-height') || 0\n      ),\n    };\n  }\n\n  // FIXME: `BaseMonomerRenderer` should not know about `isSnake`.\n  private isSnakeBondForAttachmentPoint(\n    attachmentPointName: AttachmentPointName,\n  ): boolean {\n    const renderer =\n      this.monomer.attachmentPointsToBonds[attachmentPointName]?.renderer;\n    if (!renderer) return false;\n    if ('isSnake' in renderer) {\n      return renderer.isSnake && !renderer.isMonomersOnSameHorizontalLine();\n    }\n    return false;\n  }\n\n  public get center() {\n    return new Vec2(\n      this.scaledMonomerPosition.x + this.monomerSize.width / 2,\n      this.scaledMonomerPosition.y + this.monomerSize.height / 2,\n    );\n  }\n\n  public get textColor() {\n    const WHITE = 'white';\n    const colorsMap = {\n      D: WHITE,\n      F: WHITE,\n      K: WHITE,\n      Q: WHITE,\n      R: WHITE,\n      W: WHITE,\n      Y: WHITE,\n    };\n    return (\n      colorsMap[this.monomer.monomerItem.props.MonomerNaturalAnalogCode] ||\n      'black'\n    );\n  }\n\n  protected getMonomerColor(theme) {\n    return (\n      theme.monomer.color[\n        this.monomer.monomerItem.props.MonomerNaturalAnalogCode\n      ]?.regular || theme.monomer.color.X.regular\n    );\n  }\n\n  public redrawAttachmentPoints(): void {\n    this.hoveredAttachmentPoint = null;\n    if (!this.rootElement) return;\n    if (this.monomer.attachmentPointsVisible) {\n      this.removeAttachmentPoints();\n      this.drawAttachmentPoints();\n    } else {\n      this.removeAttachmentPoints();\n    }\n  }\n\n  public updateAttachmentPoints(): void {\n    this.hoveredAttachmentPoint = null;\n    if (!this.rootElement) return;\n    if (this.attachmentPoints.length > 0) {\n      this.attachmentPoints.forEach((point) => {\n        point.updateAttachmentPointStyleForHover();\n      });\n    } else {\n      this.drawAttachmentPoints();\n    }\n  }\n\n  public redrawAttachmentPointsCoordinates() {\n    const chosenAttachmentPointName =\n      this.monomer.chosenFirstAttachmentPointForBond;\n    const chosenAttachmentPoint = this.attachmentPoints.find(\n      (item) => item.getAttachmentPointName() === chosenAttachmentPointName,\n    );\n    const angle = chosenAttachmentPoint?.getAngle();\n    const allAngles = this.attachmentPoints.map((item) => {\n      return item.getAngle();\n    });\n    const isSectorOccupied = allAngles.some((item) => {\n      if (angle !== item && typeof angle === 'number') {\n        return Math.abs(angle - item) < 20 || Math.abs(angle - item) > 340;\n      }\n      return false;\n    });\n\n    if (isSectorOccupied) {\n      this.redrawAttachmentPoints();\n      return;\n    }\n\n    const attachmentPoint = this.attachmentPoints.find(\n      (item) => item.getAttachmentPointName() === chosenAttachmentPointName,\n    );\n\n    assert(attachmentPoint);\n    attachmentPoint.updateCoords();\n  }\n\n  public drawAttachmentPoints(\n    appendFn?: (\n      apName: AttachmentPointName,\n      customAngle?: number,\n    ) => AttachmentPoint,\n  ) {\n    if (this.attachmentPoints.length) {\n      return;\n    }\n\n    const appendFnToUse = appendFn || this.appendAttachmentPoint.bind(this);\n\n    // draw used attachment points\n    this.monomer.usedAttachmentPointsNamesList.forEach((item) => {\n      const attachmentPoint = appendFnToUse(item);\n      const angle: number = attachmentPoint.getAngle();\n\n      this.attachmentPoints.push(attachmentPoint as never);\n\n      // remove this sector from list of free sectors\n      const newList = this.freeSectorsList.filter((item) => {\n        return (\n          anglesToSector[item].min > angle || anglesToSector[item].max <= angle\n        );\n      });\n      this.freeSectorsList = checkFor0and360(newList);\n    });\n\n    const unrenderedAtPoints: AttachmentPointName[] = [];\n\n    // draw free attachment points\n    this.monomer.unUsedAttachmentPointsNamesList.forEach((item) => {\n      const properAngleForFreeAttachmentPoint =\n        attachmentPointNumberToAngle[item];\n\n      // if this angle is free for unused att point, draw it\n      if (this.freeSectorsList.includes(properAngleForFreeAttachmentPoint)) {\n        const attachmentPoint = appendFnToUse(\n          item,\n          properAngleForFreeAttachmentPoint,\n        );\n        this.attachmentPoints.push(attachmentPoint as never);\n\n        // remove this sector from list\n        const newList = this.freeSectorsList.filter((item) => {\n          return item !== properAngleForFreeAttachmentPoint;\n        });\n        this.freeSectorsList = checkFor0and360(newList);\n      } else {\n        // if this sector is already taken - add name to unrendered list\n        unrenderedAtPoints.push(item);\n      }\n    });\n\n    unrenderedAtPoints.forEach((item) => {\n      const customAngle = this.freeSectorsList.shift();\n      const attachmentPoint = appendFnToUse(item, customAngle);\n      this.attachmentPoints.push(attachmentPoint as never);\n    });\n  }\n\n  protected prepareAttachmentPointsParams(\n    attachmentPointName: AttachmentPointName,\n    customAngle?: number,\n  ): AttachmentPointConstructorParams {\n    let rotation;\n\n    if (!this.monomer.isAttachmentPointUsed(attachmentPointName)) {\n      rotation = attachmentPointNumberToAngle[attachmentPointName];\n    }\n\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      rootElement: this.rootElement!,\n      monomer: this.monomer,\n      bodyWidth: this.monomerSize.width,\n      bodyHeight: this.monomerSize.height,\n      canvas: this.canvasWrapper,\n      attachmentPointName,\n      isUsed: this.monomer.isAttachmentPointUsed(attachmentPointName),\n      isPotentiallyUsed:\n        this.monomer.isAttachmentPointPotentiallyUsed(attachmentPointName) ||\n        this.hoveredAttachmentPoint === attachmentPointName,\n      angle: customAngle ?? rotation,\n      applyZoomForPositionCalculation: true,\n      // FIXME: `BaseMonomerRenderer` should not know about `isSnake`.\n      isSnake: this.isSnakeBondForAttachmentPoint(attachmentPointName),\n    };\n  }\n\n  public appendAttachmentPoint(\n    attachmentPointName: AttachmentPointName,\n    customAngle?: number,\n  ) {\n    const attachmentPointParams = this.prepareAttachmentPointsParams(\n      attachmentPointName,\n      customAngle,\n    );\n\n    return new AttachmentPoint(attachmentPointParams);\n  }\n\n  public removeAttachmentPoints() {\n    this.attachmentPoints.forEach((item) => {\n      item.removeAttachmentPoint();\n    });\n    this.attachmentPoints = [];\n    this.freeSectorsList = sectorsList;\n  }\n\n  public hoverAttachmentPoint(attachmentPointName: AttachmentPointName): void {\n    this.hoveredAttachmentPoint = attachmentPointName;\n  }\n\n  protected appendRootElement(\n    canvas: D3SvgElementSelection<SVGSVGElement, void>,\n  ) {\n    return canvas\n      .append('g')\n      .data([this])\n      .attr('class', MONOMER_CSS_CLASS)\n      .attr('transition', 'transform 0.2s')\n      .attr(\n        'transform',\n        `translate(${this.scaledMonomerPosition.x}, ${\n          this.scaledMonomerPosition.y\n        }) scale(${this.scale || 1})`,\n      ) as never as D3SvgElementSelection<SVGGElement, void>;\n  }\n\n  protected appendLabel(rootElement: D3SvgElementSelection<SVGGElement, void>) {\n    const fontSize = 6;\n    const textElement = rootElement\n      .append('text')\n      .text(this.monomer.label)\n      .attr('fill', this.textColor)\n      .attr('font-size', `${fontSize}px`)\n      .attr('line-height', `${fontSize}px`)\n      .attr('font-weight', '700')\n      .style('cursor', 'pointer')\n      .style('user-select', 'none')\n      .attr('pointer-events', 'none');\n\n    // cache label position to reuse it form other monomers with same label\n    // need to improve performance for large amount of monomers\n    // getBBox triggers reflow\n    const monomerUniqueKey =\n      this.monomer.label + this.monomer.monomerItem.props.MonomerType;\n\n    if (!labelPositions[monomerUniqueKey]) {\n      const textBBox = (textElement.node() as SVGTextElement).getBBox();\n      labelPositions[monomerUniqueKey] = {\n        x: this.width / 2 - textBBox.width / 2,\n        y: this.height / 2,\n      };\n    }\n    textElement\n      .attr('x', labelPositions[monomerUniqueKey]?.x || 0)\n      .attr('y', labelPositions[monomerUniqueKey]?.y || 0);\n\n    if (this.scale && this.scale !== 1) {\n      labelPositions[monomerUniqueKey] = undefined;\n    }\n  }\n\n  public appendHover(\n    hoverAreaElement: D3SvgElementSelection<SVGGElement, void>,\n  ) {\n    let cursor = 'default';\n\n    if (this.hoverElement) this.hoverElement.remove();\n    if (this.editor.selectedTool instanceof SelectRectangle) cursor = 'move';\n\n    return hoverAreaElement\n      .style('cursor', cursor)\n      .append('use')\n      .attr('href', this.monomerHoveredElementId)\n      .attr('pointer-events', 'none')\n      .attr('class', 'dynamic-element');\n  }\n\n  public removeHover() {\n    if (!this.hoverElement) return;\n    this.hoverElement.remove();\n  }\n\n  public static getScaledMonomerPosition(\n    positionInAngstoms: Vec2,\n    monomerSize: { width: number; height: number } = { width: 0, height: 0 },\n  ) {\n    // we need to convert monomer coordinates(stored in angstroms) to pixels.\n    // it needs to be done in view layer of application (like renderers)\n    const monomerPositionInPixels =\n      Coordinates.modelToCanvas(positionInAngstoms);\n\n    return new Vec2(\n      monomerPositionInPixels.x - monomerSize.width / 2,\n      monomerPositionInPixels.y - monomerSize.height / 2,\n    );\n  }\n\n  public get scaledMonomerPosition() {\n    return BaseMonomerRenderer.getScaledMonomerPosition(\n      this.monomer.position,\n      this.monomerSize,\n    );\n  }\n\n  public appendSelection() {\n    if (this.selectionCircle) {\n      this.selectionCircle.attr('cx', this.center.x).attr('cy', this.center.y);\n    } else {\n      this.selectionBorder = this.rootElement\n        ?.append('use')\n        .attr('href', this.monomerSelectedElementId)\n        .attr('stroke', '#57FF8F')\n        .attr('pointer-events', 'none')\n        .attr('class', 'dynamic-element');\n\n      this.selectionCircle = this.canvas\n        ?.insert('circle', ':first-child')\n        .attr('r', '21px')\n        .attr('opacity', '0.7')\n        .attr('cx', this.center.x)\n        .attr('cy', this.center.y)\n        .attr('fill', '#57FF8F')\n        .attr('class', 'dynamic-element');\n    }\n  }\n\n  public removeSelection() {\n    this.selectionCircle?.remove();\n    this.selectionBorder?.remove();\n    this.selectionCircle = undefined;\n    this.selectionBorder = undefined;\n  }\n\n  protected abstract appendBody(\n    rootElement: D3SvgElementSelection<SVGGElement, void>,\n    theme?,\n  );\n\n  protected appendHoverAreaElement() {\n    this.hoverAreaElement = this.rootElement;\n  }\n\n  private appendEvents() {\n    if (!this.bodyElement) {\n      return;\n    }\n\n    this.bodyElement\n      .on('mouseover', (event) => {\n        this.editorEvents.mouseOverDrawingEntity.dispatch(event);\n        this.editorEvents.mouseOverMonomer.dispatch(event);\n      })\n      .on('mousemove', (event) => {\n        this.editorEvents.mouseOnMoveMonomer.dispatch(event);\n      })\n      .on('mouseleave', (event) => {\n        this.editorEvents.mouseLeaveDrawingEntity.dispatch(event);\n        this.editorEvents.mouseLeaveMonomer.dispatch(event);\n      })\n      .on('mouseup', (event) => {\n        this.editorEvents.mouseUpMonomer.dispatch(event);\n      });\n  }\n\n  public abstract get enumerationElementPosition(): {\n    x: number;\n    y: number;\n  } | void;\n\n  public abstract get beginningElementPosition(): {\n    x: number;\n    y: number;\n  } | void;\n\n  public setEnumeration(enumeration: number | null) {\n    this.enumeration = enumeration;\n  }\n\n  protected appendEnumeration() {\n    assert(this.rootElement);\n    assert(this.enumerationElementPosition);\n    this.enumerationElement = this.rootElement\n      .append('text')\n      .attr('direction', 'rtl')\n      .attr('fill', '#7C7C7F')\n      .attr('font-size', '6px')\n      .attr('line-height', '7px')\n      .attr('font-weight', '500')\n      .attr('text-align', 'right')\n      .attr('style', 'user-select: none;')\n      .attr('x', this.enumerationElementPosition.x)\n      .attr('y', this.enumerationElementPosition.y)\n      .text(this.enumeration);\n  }\n\n  public redrawEnumeration() {\n    if (!this.enumerationElement) return;\n\n    this.enumerationElement.text(this.enumeration);\n  }\n\n  public setBeginning(beginning: string | null) {\n    this.beginning = beginning;\n  }\n\n  protected appendChainBeginning() {\n    assert(this.rootElement);\n    assert(this.beginningElementPosition);\n    this.beginningElement = this.rootElement\n      .append('text')\n      .attr('direction', 'rtl')\n      .attr('fill', '#0097A8')\n      .attr('font-size', '6px')\n      .attr('line-height', '7px')\n      .attr('font-weight', '700')\n      .attr('text-align', 'right')\n      .attr('style', 'user-select: none;')\n      .attr('x', this.beginningElementPosition.x)\n      .attr('y', this.beginningElementPosition.y)\n      .text(this.beginning);\n  }\n\n  public reDrawChainBeginning() {\n    assert(this.beginningElement);\n    assert(this.beginningElementPosition);\n    this.beginningElement\n      .attr('x', this.beginningElementPosition.x)\n      .attr('y', this.beginningElementPosition.y)\n      .text(this.beginning);\n  }\n\n  public show(theme?) {\n    this.rootElement =\n      this.rootElement ||\n      this.appendRootElement(this.scale ? this.canvasWrapper : this.canvas);\n    this.bodyElement = this.appendBody(this.rootElement, theme);\n    this.appendEvents();\n\n    this.appendLabel(this.rootElement);\n    this.appendHoverAreaElement();\n    if (this.monomer.selected) {\n      this.drawSelection();\n    }\n    this.redrawAttachmentPoints();\n  }\n\n  public drawSelection() {\n    if (!this.rootElement) {\n      return;\n    }\n    if (this.monomer.selected) {\n      this.appendSelection();\n      this.raiseElement();\n    } else {\n      this.removeSelection();\n    }\n  }\n\n  private raiseElement() {\n    this.selectionCircle?.raise();\n    this.rootElement?.raise();\n  }\n\n  public moveSelection() {\n    assert(this.rootElement);\n    this.appendSelection();\n    this.move();\n  }\n\n  public move() {\n    this.rootElement?.attr(\n      'transform',\n      `translate(${this.scaledMonomerPosition.x}, ${\n        this.scaledMonomerPosition.y\n      }) scale(${this.scale || 1})`,\n    );\n  }\n\n  public remove() {\n    this.rootElement?.remove();\n    this.rootElement = undefined;\n    this.removeSelection();\n    if (this.monomer.hovered) {\n      this.editorEvents.mouseLeaveMonomer.dispatch();\n    }\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { ChemicalMimeType } from 'domain/services';\n\nexport class SupportedFormatProperties {\n  name: string;\n  mime: ChemicalMimeType;\n  extensions: string[];\n  supportsCoords?: boolean;\n  options?: any;\n\n  constructor(\n    name: string,\n    mime: ChemicalMimeType,\n    extensions: string[],\n    supportsCoords?: boolean,\n    options?: any,\n  ) {\n    this.name = name;\n    this.mime = mime;\n    this.extensions = extensions;\n    this.supportsCoords = supportsCoords || false;\n    this.options = options || {};\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { ChemicalMimeType } from 'domain/services';\nimport { SupportedFormat } from './structFormatter.types';\nimport { SupportedFormatProperties } from './supportedFormatProperties';\n\ntype FormatPropertiesMap = {\n  [key in SupportedFormat]: SupportedFormatProperties;\n};\n\nconst formatProperties: FormatPropertiesMap = {\n  molAuto: new SupportedFormatProperties(\n    // TODO: is it a valid name?\n    'MDL Molfile Auto Format detect',\n    ChemicalMimeType.Mol,\n    ['.mol'],\n    true,\n    { 'molfile-saving-mode': 'auto' },\n  ),\n  mol: new SupportedFormatProperties(\n    'MDL Molfile V2000',\n    ChemicalMimeType.Mol,\n    ['.mol'],\n    true,\n  ),\n  molV3000: new SupportedFormatProperties(\n    'MDL Molfile V3000',\n    ChemicalMimeType.Mol,\n    ['.mol'],\n    true,\n    { 'molfile-saving-mode': '3000' },\n  ),\n  rxn: new SupportedFormatProperties(\n    'MDL Rxnfile V2000',\n    ChemicalMimeType.Rxn,\n    ['.rxn'],\n    true,\n  ),\n  rxnV3000: new SupportedFormatProperties(\n    'MDL Rxnfile V3000',\n    ChemicalMimeType.Rxn,\n    ['.rxn'],\n    true,\n    { 'molfile-saving-mode': '3000' },\n  ),\n  smiles: new SupportedFormatProperties(\n    'Daylight SMILES',\n    ChemicalMimeType.DaylightSmiles,\n    ['.smi', '.smiles'],\n    true,\n  ),\n  smilesExt: new SupportedFormatProperties(\n    'Extended SMILES',\n    ChemicalMimeType.ExtendedSmiles,\n    ['.cxsmi', '.cxsmiles'],\n  ),\n  smarts: new SupportedFormatProperties(\n    'Daylight SMARTS',\n    ChemicalMimeType.DaylightSmarts,\n    ['.smarts'],\n  ),\n  inChI: new SupportedFormatProperties('InChI', ChemicalMimeType.InChI, [\n    '.inchi',\n  ]),\n  inChIAuxInfo: new SupportedFormatProperties(\n    'InChI AuxInfo',\n    ChemicalMimeType.InChIAuxInfo,\n    ['.inchi'],\n  ),\n  inChIKey: new SupportedFormatProperties(\n    'InChIKey',\n    ChemicalMimeType.InChIKey,\n    ['.inchikey'],\n  ),\n  cml: new SupportedFormatProperties(\n    'CML',\n    ChemicalMimeType.CML,\n    ['.cml', '.mrv'],\n    true,\n  ),\n  ket: new SupportedFormatProperties('Ket Format', ChemicalMimeType.KET, [\n    '.ket',\n  ]),\n  cdxml: new SupportedFormatProperties(\n    'CDXML',\n    ChemicalMimeType.CDXML,\n    ['.cdxml'],\n    true,\n  ),\n  cdx: new SupportedFormatProperties(\n    'Base64 CDX',\n    ChemicalMimeType.CDX,\n    ['.b64cdx'],\n    true,\n  ),\n  binaryCdx: new SupportedFormatProperties(\n    'CDX',\n    ChemicalMimeType.CDX,\n    ['.cdx'],\n    true,\n  ),\n  sdf: new SupportedFormatProperties(\n    'SDF V2000',\n    ChemicalMimeType.SDF,\n    ['.sdf'],\n    true,\n  ),\n  sdfV3000: new SupportedFormatProperties(\n    'SDF V3000',\n    ChemicalMimeType.SDF,\n    ['.sdf'],\n    true,\n    { 'molfile-saving-mode': '3000' },\n  ),\n  fasta: new SupportedFormatProperties(\n    'FASTA',\n    ChemicalMimeType.FASTA,\n    ['.fasta'],\n    true,\n  ),\n  idt: new SupportedFormatProperties(\n    'IDT',\n    ChemicalMimeType.IDT,\n    ['.idt'],\n    false,\n  ),\n  helm: new SupportedFormatProperties(\n    'HELM',\n    ChemicalMimeType.HELM,\n    ['.helm'],\n    true,\n  ),\n  sequence: new SupportedFormatProperties(\n    'SEQUENCE',\n    ChemicalMimeType.SEQUENCE,\n    ['.seq'],\n    false,\n    {},\n  ),\n  unknown: new SupportedFormatProperties(\n    'Unknown',\n    ChemicalMimeType.UNKNOWN,\n    ['.'],\n    true,\n  ),\n  rdf: new SupportedFormatProperties(\n    'RDF V2000',\n    ChemicalMimeType.RDF,\n    ['.rdf'],\n    true,\n  ),\n  rdfV3000: new SupportedFormatProperties(\n    'RDF V3000',\n    ChemicalMimeType.RDF,\n    ['.rdf'],\n    true,\n    { 'molfile-saving-mode': '3000' },\n  ),\n};\n\nconst imgFormatProperties = {\n  svg: { extension: '.svg', name: 'SVG Document' },\n  png: { extension: '.png', name: 'PNG Image' },\n};\n\nfunction getPropertiesByImgFormat(format) {\n  return imgFormatProperties[format];\n}\n\nfunction getPropertiesByFormat(format: SupportedFormat) {\n  return formatProperties[format];\n}\n\nfunction getFormatMimeTypeByFileName(fileName: string) {\n  const fileExtension = '.' + fileName.split('.').pop();\n  const format = Object.values(formatProperties).find((properties) => {\n    return properties.extensions.includes(fileExtension);\n  });\n  return format?.mime;\n}\n\nexport {\n  formatProperties,\n  getPropertiesByFormat,\n  getPropertiesByImgFormat,\n  getFormatMimeTypeByFileName,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { MolSerializerOptions } from 'domain/serializers';\nimport { Struct } from 'domain/entities';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport { StructServiceOptions } from 'domain/services';\nimport { EditorSelection } from 'application/editor';\n\nexport interface StructFormatter {\n  getStructureFromStructAsync: (\n    struct: Struct,\n    drawingEntitiesManager?: DrawingEntitiesManager,\n    selection?: EditorSelection,\n  ) => Promise<string>;\n  getStructureFromStringAsync: (stringifiedStruct: string) => Promise<Struct>;\n  parseMacromoleculeString?: (stringifiedStruct: string) => void;\n}\n\nexport enum SupportedFormat {\n  mol = 'mol',\n  molV3000 = 'molV3000',\n  molAuto = 'molAuto',\n  rxn = 'rxn',\n  rxnV3000 = 'rxnV3000',\n  smiles = 'smiles',\n  smilesExt = 'smilesExt',\n  smarts = 'smarts',\n  inChI = 'inChI',\n  inChIAuxInfo = 'inChIAuxInfo',\n  inChIKey = 'inChIKey',\n  cml = 'cml',\n  ket = 'ket',\n  cdxml = 'cdxml',\n  cdx = 'cdx',\n  binaryCdx = 'binaryCdx',\n  sdf = 'sdf',\n  sdfV3000 = 'sdfV3000',\n  fasta = 'fasta',\n  sequence = 'sequence',\n  idt = 'idt',\n  helm = 'helm',\n  unknown = 'unknown',\n  rdf = 'rdf',\n  rdfV3000 = 'rdfV3000',\n}\n\nexport type FormatterFactoryOptions = Partial<\n  MolSerializerOptions & StructServiceOptions\n>;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { KetSerializer } from 'domain/serializers';\nimport { Struct } from 'domain/entities';\nimport { StructFormatter } from './structFormatter.types';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport { EditorSelection } from 'application/editor';\n\nexport class KetFormatter implements StructFormatter {\n  #ketSerializer: KetSerializer;\n\n  constructor(serializer: KetSerializer) {\n    this.#ketSerializer = serializer;\n  }\n\n  async getStructureFromStructAsync(\n    struct: Struct,\n    drawingEntitiesManager?: DrawingEntitiesManager,\n    selection?: EditorSelection,\n  ): Promise<string> {\n    const ket = this.#ketSerializer.serialize(\n      struct,\n      drawingEntitiesManager,\n      selection,\n    );\n    return ket;\n  }\n\n  async getStructureFromStringAsync(content: string): Promise<Struct> {\n    return this.#ketSerializer.deserialize(content);\n  }\n\n  parseMacromoleculeString(content: string): void {\n    this.#ketSerializer.deserializeMicromolecules(content);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { KetSerializer, SmiSerializer } from 'domain/serializers';\nimport { StructFormatter, SupportedFormat } from './structFormatter.types';\nimport { StructService, StructServiceOptions } from 'domain/services';\n\nimport { ServerFormatter } from './serverFormatter';\nimport { Struct } from 'domain/entities';\n\nexport class SmilesFormatter implements StructFormatter {\n  #smiSerializer: SmiSerializer;\n  #structService: StructService;\n  #ketSerializer: KetSerializer;\n  #format: SupportedFormat;\n  #options?: StructServiceOptions;\n\n  constructor(\n    smiSerializer: SmiSerializer,\n    structService: StructService,\n    ketSerializer: KetSerializer,\n    format: SupportedFormat,\n    options?: StructServiceOptions,\n  ) {\n    this.#smiSerializer = smiSerializer;\n    this.#ketSerializer = ketSerializer;\n    this.#structService = structService;\n    this.#format = format;\n    this.#options = options;\n  }\n\n  async getStructureFromStructAsync(struct: Struct): Promise<string> {\n    const stringifiedMolfile = this.#smiSerializer.serialize(struct);\n    return stringifiedMolfile;\n  }\n\n  getStructureFromStringAsync(stringifiedStruct: string): Promise<Struct> {\n    const serverFormatter = new ServerFormatter(\n      this.#structService,\n      this.#ketSerializer,\n      this.#format,\n      this.#options,\n    );\n\n    return serverFormatter.getStructureFromStringAsync(stringifiedStruct);\n  }\n\n  static isContainsCoordinates(smiles: string) {\n    return /\\([\\d.,;-]+\\)/.test(smiles);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  ConvertData,\n  ConvertResult,\n  LayoutData,\n  LayoutResult,\n  StructService,\n  StructServiceOptions,\n} from 'domain/services';\nimport { StructFormatter, SupportedFormat } from './structFormatter.types';\n\nimport { KetSerializer } from 'domain/serializers';\nimport { Struct } from 'domain/entities';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport { getPropertiesByFormat } from './formatProperties';\nimport { KetcherLogger } from 'utilities';\nimport { SmilesFormatter } from './smilesFormatter';\n\ntype ConvertPromise = (\n  data: ConvertData,\n  options?: StructServiceOptions,\n) => Promise<ConvertResult>;\n\ntype LayoutPromise = (\n  data: LayoutData,\n  options?: StructServiceOptions,\n) => Promise<LayoutResult>;\n\nexport class ServerFormatter implements StructFormatter {\n  #structService: StructService;\n  #ketSerializer: KetSerializer;\n  #format: SupportedFormat;\n  #options?: StructServiceOptions;\n\n  constructor(\n    structService: StructService,\n    ketSerializer: KetSerializer,\n    format: SupportedFormat,\n    options?: StructServiceOptions,\n  ) {\n    this.#structService = structService;\n    this.#ketSerializer = ketSerializer;\n    this.#format = format;\n    this.#options = options;\n  }\n\n  async getStructureFromStructAsync(\n    struct: Struct,\n    drawingEntitiesManager?: DrawingEntitiesManager,\n  ): Promise<string> {\n    const formatProperties = getPropertiesByFormat(this.#format);\n\n    try {\n      const stringifiedStruct = this.#ketSerializer.serialize(\n        struct,\n        drawingEntitiesManager,\n      );\n      const convertResult = await this.#structService.convert(\n        {\n          struct: stringifiedStruct,\n          output_format: formatProperties.mime,\n        },\n        { ...this.#options, ...formatProperties.options },\n      );\n\n      return convertResult.struct;\n    } catch (e: any) {\n      let message;\n      if (e.message === 'Server is not compatible') {\n        message = `${formatProperties.name} is not supported.`;\n      } else {\n        message = `Convert error!\\n${e.message || e}`;\n      }\n      KetcherLogger.error('serverFormatter.ts::getStructureFromStructAsync', e);\n      throw new Error(message);\n    }\n  }\n\n  getCallingMethod(\n    stringifiedStruct: string,\n    format: SupportedFormat,\n  ): {\n    method: LayoutPromise | ConvertPromise;\n    struct: string;\n  } {\n    if (this.#format === SupportedFormat.smiles) {\n      return {\n        method: SmilesFormatter.isContainsCoordinates(stringifiedStruct)\n          ? this.#structService.convert\n          : this.#structService.layout,\n        struct: stringifiedStruct,\n      };\n    }\n    const withCoords = getPropertiesByFormat(format).supportsCoords;\n    if (withCoords) {\n      return {\n        method: this.#structService.convert,\n        struct: stringifiedStruct,\n      };\n    }\n    return {\n      method: this.#structService.layout,\n      struct: stringifiedStruct.trim(),\n    };\n  }\n\n  async getStructureFromStringAsync(\n    stringifiedStruct: string,\n  ): Promise<Struct> {\n    const data: ConvertData | LayoutData = {\n      struct: undefined as any,\n      output_format: getPropertiesByFormat(SupportedFormat.ket).mime,\n    };\n\n    const { method, struct } = this.getCallingMethod(\n      stringifiedStruct,\n      this.#format,\n    );\n    data.struct = struct;\n\n    try {\n      const result = await method(data, this.#options);\n      const parsedStruct = this.#ketSerializer.deserialize(result.struct);\n      if (method === this.#structService.layout) {\n        parsedStruct.rescale();\n      }\n      return parsedStruct;\n    } catch (e: any) {\n      if (e.message !== 'Server is not compatible') {\n        KetcherLogger.error(\n          'serverFormatter.ts::getStructureFromStringAsync',\n          e,\n        );\n        throw Error(`Convert error!\\n${e.message || e}`);\n      }\n\n      const formatError =\n        this.#format === 'smiles'\n          ? `${\n              getPropertiesByFormat(SupportedFormat.smilesExt).name\n            } and opening of ${\n              getPropertiesByFormat(SupportedFormat.smiles).name\n            }`\n          : getPropertiesByFormat(this.#format).name;\n\n      throw Error(`${formatError} is not supported in standalone mode.`);\n    }\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { MolSerializer } from 'domain/serializers';\nimport { Struct } from 'domain/entities';\nimport { StructFormatter } from './structFormatter.types';\n\nexport class MolfileV2000Formatter implements StructFormatter {\n  #molSerializer: MolSerializer;\n\n  constructor(molSerializer: MolSerializer) {\n    this.#molSerializer = molSerializer;\n  }\n\n  async getStructureFromStructAsync(struct: Struct): Promise<string> {\n    const stringifiedMolfile = this.#molSerializer.serialize(struct);\n    return stringifiedMolfile;\n  }\n\n  async getStructureFromStringAsync(\n    stringifiedStruct: string,\n  ): Promise<Struct> {\n    const struct = this.#molSerializer.deserialize(stringifiedStruct);\n    return struct;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  FormatterFactoryOptions,\n  StructFormatter,\n  SupportedFormat,\n} from './structFormatter.types';\nimport {\n  KetSerializer,\n  MolSerializer,\n  MolSerializerOptions,\n} from 'domain/serializers';\nimport { StructService, StructServiceOptions } from 'domain/services';\nimport { KetFormatter } from './ketFormatter';\nimport { ServerFormatter } from './serverFormatter';\nimport { MolfileV2000Formatter } from './molfileV2000Formatter';\n\nexport class FormatterFactory {\n  #structService: StructService;\n\n  constructor(structService: StructService) {\n    this.#structService = structService;\n  }\n\n  private separateOptions(\n    options?: FormatterFactoryOptions,\n  ): [Partial<MolSerializerOptions>, Partial<StructServiceOptions>] {\n    if (!options) {\n      return [{}, {}];\n    }\n\n    const {\n      reactionRelayout,\n      badHeaderRecover,\n      ignoreChiralFlag,\n      ...structServiceOptions\n    } = options;\n\n    const molfileParseOptions: Partial<MolSerializerOptions> = {};\n\n    if (typeof reactionRelayout === 'boolean') {\n      molfileParseOptions.reactionRelayout = reactionRelayout;\n    }\n    if (typeof badHeaderRecover === 'boolean') {\n      molfileParseOptions.badHeaderRecover = badHeaderRecover;\n    }\n\n    if (typeof ignoreChiralFlag === 'boolean') {\n      molfileParseOptions.ignoreChiralFlag = ignoreChiralFlag;\n      structServiceOptions['ignore-no-chiral-flag'] = ignoreChiralFlag;\n    }\n\n    return [molfileParseOptions, structServiceOptions];\n  }\n\n  create(\n    format: SupportedFormat,\n    options?: FormatterFactoryOptions,\n    queryPropertiesAreUsed?: boolean,\n  ): StructFormatter {\n    const [molSerializerOptions, structServiceOptions] =\n      this.separateOptions(options);\n\n    let formatter: StructFormatter;\n    switch (format) {\n      case SupportedFormat.ket:\n        formatter = new KetFormatter(new KetSerializer());\n        break;\n\n      case SupportedFormat.mol:\n        if (queryPropertiesAreUsed) {\n          formatter = new ServerFormatter(\n            this.#structService,\n            new KetSerializer(),\n            format,\n            structServiceOptions,\n          );\n        } else {\n          formatter = new MolfileV2000Formatter(\n            new MolSerializer(molSerializerOptions),\n          );\n        }\n        break;\n\n      case SupportedFormat.cml:\n      case SupportedFormat.inChIAuxInfo:\n      case SupportedFormat.inChI:\n      case SupportedFormat.inChIKey:\n      case SupportedFormat.molV3000:\n      case SupportedFormat.smiles:\n      case SupportedFormat.rxnV3000:\n      case SupportedFormat.smilesExt:\n      case SupportedFormat.smarts:\n      case SupportedFormat.cdxml:\n      case SupportedFormat.cdx:\n      case SupportedFormat.binaryCdx:\n      case SupportedFormat.unknown:\n      case SupportedFormat.rxn:\n      default:\n        formatter = new ServerFormatter(\n          this.#structService,\n          new KetSerializer(),\n          format,\n          structServiceOptions,\n        );\n    }\n\n    return formatter;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { KetcherLogger } from 'utilities';\nimport { SupportedFormat } from './structFormatter.types';\n\nexport function identifyStructFormat(\n  stringifiedStruct: string,\n  isMacromolecules = false,\n): SupportedFormat {\n  // Mimic Indigo/molecule_auto_loader.cpp as much as possible\n  const sanitizedString = stringifiedStruct.trim();\n\n  try {\n    if (JSON.parse(sanitizedString)) {\n      return SupportedFormat.ket;\n    }\n  } catch (e) {\n    KetcherLogger.error('identifyStructFormat.ts::identifyStructFromat', e);\n  } // eslint-disable-line\n\n  const isRXN = sanitizedString.includes('$RXN');\n  const isSDF = sanitizedString.includes('\\n$$$$');\n  const isV2000 = sanitizedString.includes('V2000');\n  const isV3000 = sanitizedString.includes('V3000');\n\n  if (isRXN) {\n    return SupportedFormat.rxn;\n  }\n\n  if (isSDF) {\n    if (isV2000) {\n      return SupportedFormat.sdf;\n    } else {\n      return SupportedFormat.sdfV3000;\n    }\n  }\n\n  if (isV2000) {\n    return SupportedFormat.mol;\n  }\n\n  if (isV3000) {\n    return SupportedFormat.molV3000;\n  }\n\n  const match = sanitizedString.match(/^(M {2}END|\\$END MOL)$/m);\n\n  if (match) {\n    const end = (match.index || 0) + match[0].length;\n    if (\n      end === sanitizedString.length ||\n      sanitizedString.slice(end, end + 20).search(/^\\$(MOL|END CTAB)$/m) !== -1\n    ) {\n      return SupportedFormat.mol;\n    }\n  }\n\n  if (\n    sanitizedString[0] === '<' &&\n    sanitizedString.indexOf('<molecule') !== -1\n  ) {\n    return SupportedFormat.cml;\n  }\n\n  const clearStr = sanitizedString\n    .replace(/\\s/g, '')\n    .replace(/(\\\\r)|(\\\\n)/g, '');\n  const isBase64String =\n    /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n  const cdxHeader = 'VjCD0100';\n  if (\n    clearStr.length % 4 === 0 &&\n    isBase64String.test(clearStr) &&\n    window.atob(clearStr).startsWith(cdxHeader)\n  ) {\n    return SupportedFormat.cdx;\n  }\n\n  if (sanitizedString.slice(0, 5) === 'InChI') {\n    return SupportedFormat.inChI;\n  }\n\n  if (sanitizedString.indexOf('\\n') === -1 && !isMacromolecules) {\n    // TODO: smiles regexp\n    return SupportedFormat.smiles;\n  }\n\n  if (sanitizedString.indexOf('<CDXML') !== -1) {\n    return SupportedFormat.cdxml;\n  }\n\n  if (sanitizedString[0] === '>') {\n    return SupportedFormat.fasta;\n  }\n\n  if (/^[a-zA-Z\\s\\n]*$/.test(sanitizedString)) {\n    return SupportedFormat.sequence;\n  }\n\n  return SupportedFormat.unknown;\n}\n","export const macromoleculesFilesInputFormats = {\n  ket: 'chemical/x-indigo-ket',\n  mol: 'chemical/x-mdl-molfile',\n  seq: {\n    rna: 'chemical/x-rna-sequence',\n    dna: 'chemical/x-dna-sequence',\n    peptide: 'chemical/x-peptide-sequence',\n    peptide3Letter: 'chemical/x-peptide-sequence-3-letter',\n  },\n  fasta: {\n    rna: 'chemical/x-rna-fasta',\n    dna: 'chemical/x-dna-fasta',\n    peptide: 'chemical/x-peptide-fasta',\n  },\n  idt: 'chemical/x-idt',\n  helm: 'chemical/x-helm',\n};\n","import { KetMonomerClass } from 'application/formatters';\n\nexport const MONOMER_SYMBOLS_IDS = {\n  [KetMonomerClass.AminoAcid]: {\n    hover: '#peptide-hover',\n    selected: '#peptide-selection',\n    body: '#peptide',\n  },\n  [KetMonomerClass.CHEM]: {\n    hover: '#chem-selection',\n    selected: '#chem-selection',\n    body: '#chem',\n  },\n  [KetMonomerClass.Sugar]: {\n    hover: '#sugar-selection',\n    selected: '#sugar-selection',\n    body: '#sugar',\n    variant: '#sugar-variant',\n  },\n  [KetMonomerClass.Base]: {\n    hover: '#rna-base-selection',\n    selected: '#rna-base-selection',\n    body: '#rna-base',\n    variant: '#rna-base-variant',\n  },\n  [KetMonomerClass.Phosphate]: {\n    hover: '#phosphate-selection',\n    selected: '#phosphate-selection',\n    body: '#phosphate',\n    variant: '#phosphate-variant',\n  },\n  [KetMonomerClass.RNA]: {\n    hover: '#nucleotide-hover',\n    selected: '#nucleotide-selection',\n    body: '#nucleotide',\n  },\n};\n","import { BaseMonomer } from 'domain/entities';\n\nexport function isMonomerSgroupWithAttachmentPoints(monomer: BaseMonomer) {\n  const sgroups = monomer.monomerItem.struct.sgroups;\n\n  return (\n    monomer.monomerItem.props.isMicromoleculeFragment &&\n    sgroups.some((sgroup) => sgroup.isSuperatomWithoutLabel)\n  );\n}\n","import { Selection } from 'd3';\nimport { Chem } from 'domain/entities/Chem';\nimport { BaseMonomerRenderer } from 'application/render/renderers/BaseMonomerRenderer';\nimport { MONOMER_SYMBOLS_IDS } from 'application/render/renderers/constants';\nimport { KetMonomerClass } from 'application/formatters';\nimport { isMonomerSgroupWithAttachmentPoints } from '../../../utilities/monomers';\n\nconst CHEM_SELECTED_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.CHEM].selected;\nconst CHEM_SYMBOL_ELEMENT_ID = MONOMER_SYMBOLS_IDS[KetMonomerClass.CHEM].body;\n\nexport class ChemRenderer extends BaseMonomerRenderer {\n  constructor(public monomer: Chem, scale?: number) {\n    super(\n      monomer,\n      CHEM_SELECTED_ELEMENT_ID,\n      CHEM_SELECTED_ELEMENT_ID,\n      CHEM_SYMBOL_ELEMENT_ID,\n      scale,\n    );\n  }\n\n  protected appendBody(\n    rootElement: Selection<SVGGElement, void, HTMLElement, never>,\n    theme,\n  ) {\n    return rootElement\n      .append('use')\n      .data([this])\n      .attr('href', CHEM_SYMBOL_ELEMENT_ID)\n      .attr('stroke', theme.monomer.color.CHEM.regular);\n  }\n\n  public get enumerationElementPosition() {\n    return undefined;\n  }\n\n  public get beginningElementPosition() {\n    return undefined;\n  }\n\n  public show(theme?) {\n    if (\n      this.monomer.monomerItem.props.isMicromoleculeFragment &&\n      !isMonomerSgroupWithAttachmentPoints(this.monomer)\n    ) {\n      return;\n    }\n\n    super.show(theme);\n  }\n}\n","import { Selection } from 'd3';\nimport { Peptide } from 'domain/entities/Peptide';\nimport { BaseMonomerRenderer } from 'application/render/renderers/BaseMonomerRenderer';\nimport { MONOMER_SYMBOLS_IDS } from 'application/render/renderers/constants';\nimport { KetMonomerClass } from 'application/formatters';\n\nconst PEPTIDE_SELECTED_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.AminoAcid].selected;\nconst PEPTIDE_HOVERED_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.AminoAcid].hover;\nconst PEPTIDE_SYMBOL_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.AminoAcid].body;\n\nexport class PeptideRenderer extends BaseMonomerRenderer {\n  public CHAIN_BEGINNING = 'N';\n\n  constructor(public monomer: Peptide, scale?: number) {\n    super(\n      monomer,\n      PEPTIDE_SELECTED_ELEMENT_ID,\n      PEPTIDE_HOVERED_ELEMENT_ID,\n      PEPTIDE_SYMBOL_ELEMENT_ID,\n      scale,\n    );\n  }\n\n  protected appendBody(\n    rootElement: Selection<SVGGElement, void, HTMLElement, never>,\n    theme,\n  ) {\n    return rootElement\n      .append('use')\n      .data([this])\n      .attr('href', PEPTIDE_SYMBOL_ELEMENT_ID)\n      .attr('fill', this.getMonomerColor(theme));\n  }\n\n  show(theme) {\n    super.show(theme);\n    this.appendEnumeration();\n    this.appendChainBeginning();\n  }\n\n  public get enumerationElementPosition() {\n    return { x: 10, y: -1 };\n  }\n\n  public get beginningElementPosition() {\n    return { x: -6, y: 10 };\n  }\n}\n","import { BaseRenderer } from 'application/render/renderers/BaseRenderer';\nimport { SnakeModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/SnakeModePolymerBondRenderer';\nimport { BaseMonomer } from './BaseMonomer';\nimport { BaseBond } from './BaseBond';\n\nexport class HydrogenBond extends BaseBond {\n  public secondMonomer?: BaseMonomer;\n  public renderer?: SnakeModePolymerBondRenderer = undefined;\n\n  constructor(public firstMonomer: BaseMonomer, secondMonomer?: BaseMonomer) {\n    super();\n    this.firstMonomer = firstMonomer;\n    this.secondMonomer = secondMonomer;\n  }\n\n  public setFirstMonomer(monomer: BaseMonomer) {\n    this.firstMonomer = monomer;\n  }\n\n  public setSecondMonomer(monomer: BaseMonomer) {\n    this.secondMonomer = monomer;\n  }\n\n  public setRenderer(renderer: SnakeModePolymerBondRenderer): void {\n    super.setBaseRenderer(renderer as BaseRenderer);\n    this.renderer = renderer;\n  }\n\n  public get isBackBoneChainConnection() {\n    return false;\n  }\n\n  public get firstMonomerAttachmentPoint() {\n    return this.firstMonomer.getAttachmentPointByBond(this);\n  }\n\n  public get secondMonomerAttachmentPoint() {\n    return this.secondMonomer?.getAttachmentPointByBond(this);\n  }\n\n  public get isSideChainConnection() {\n    return true;\n  }\n\n  get firstEndEntity(): BaseMonomer {\n    return this.firstMonomer;\n  }\n\n  get secondEndEntity(): BaseMonomer | undefined {\n    return this.secondMonomer;\n  }\n\n  public getAnotherMonomer(monomer: BaseMonomer): BaseMonomer | undefined {\n    return super.getAnotherEntity(monomer) as BaseMonomer;\n  }\n}\n","import { DrawingEntity, DrawingEntityConfig } from './DrawingEntity';\nimport { Vec2 } from 'domain/entities/vec2';\nimport {\n  AttachmentPointName,\n  AttachmentPointsToBonds,\n  MonomerItemType,\n} from 'domain/types';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { BaseMonomerRenderer } from 'application/render/renderers/BaseMonomerRenderer';\nimport { BaseRenderer } from 'application/render/renderers/BaseRenderer';\nimport { getAttachmentPointLabel } from 'domain/helpers/attachmentPointCalculations';\nimport assert from 'assert';\nimport {\n  IKetAttachmentPoint,\n  IKetAttachmentPointType,\n} from 'application/formatters/types/ket';\nimport { RnaSubChain } from 'domain/entities/monomer-chains/RnaSubChain';\nimport { ChemSubChain } from 'domain/entities/monomer-chains/ChemSubChain';\nimport { PeptideSubChain } from 'domain/entities/monomer-chains/PeptideSubChain';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { PhosphateSubChain } from 'domain/entities/monomer-chains/PhosphateSubChain';\nimport { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\nimport { isNumber } from 'lodash';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\nimport { HydrogenBond } from 'domain/entities/HydrogenBond';\n\nexport type BaseMonomerConfig = DrawingEntityConfig;\nexport const HYDROGEN_BOND_ATTACHMENT_POINT = 'hydrogen';\n\nexport abstract class BaseMonomer extends DrawingEntity {\n  public renderer?: BaseMonomerRenderer | BaseSequenceItemRenderer = undefined;\n  public attachmentPointsToBonds: AttachmentPointsToBonds = {};\n\n  public chosenFirstAttachmentPointForBond: AttachmentPointName | null;\n  public potentialSecondAttachmentPointForBond: AttachmentPointName | null;\n  public chosenSecondAttachmentPointForBond: AttachmentPointName | null;\n\n  public potentialAttachmentPointsToBonds: AttachmentPointsToBonds = {};\n\n  public attachmentPointsVisible = false;\n  public monomerItem: MonomerItemType;\n  public isMonomerInRnaChainRow = false;\n\n  constructor(\n    monomerItem: MonomerItemType,\n    _position?: Vec2,\n    config?: BaseMonomerConfig,\n  ) {\n    super(_position, config);\n\n    this.monomerItem = { ...monomerItem };\n    this.attachmentPointsToBonds = this.getAttachmentPointDict();\n    this.potentialAttachmentPointsToBonds = this.getAttachmentPointDict();\n    this.monomerItem.attachmentPoints =\n      this.monomerItem.attachmentPoints ||\n      this.getMonomerDefinitionAttachmentPoints();\n    this.chosenFirstAttachmentPointForBond = null;\n    this.potentialSecondAttachmentPointForBond = null;\n    this.chosenSecondAttachmentPointForBond = null;\n  }\n\n  public get label() {\n    return this.monomerItem.label;\n  }\n\n  public get center() {\n    return this.position;\n  }\n\n  public get listOfAttachmentPoints() {\n    const maxAttachmentPointNumber = this.getMaxAttachmentPointNumber();\n    const attachmentPointList: AttachmentPointName[] = [];\n    for (let i = 1; i <= maxAttachmentPointNumber; i++) {\n      const attachmentPointLabel = getAttachmentPointLabel(i);\n\n      if (this.attachmentPointsToBonds[attachmentPointLabel] !== undefined) {\n        attachmentPointList.push(attachmentPointLabel);\n      }\n    }\n    return attachmentPointList;\n  }\n\n  public turnOnAttachmentPointsVisibility() {\n    this.attachmentPointsVisible = true;\n  }\n\n  public turnOffAttachmentPointsVisibility() {\n    this.attachmentPointsVisible = false;\n  }\n\n  public setChosenFirstAttachmentPoint(\n    attachmentPoint: AttachmentPointName | null,\n  ) {\n    this.chosenFirstAttachmentPointForBond = attachmentPoint;\n  }\n\n  public setChosenSecondAttachmentPoint(\n    attachmentPoint: AttachmentPointName | null,\n  ) {\n    this.chosenSecondAttachmentPointForBond = attachmentPoint;\n  }\n\n  public setPotentialSecondAttachmentPoint(\n    attachmentPoint: AttachmentPointName | null,\n  ) {\n    this.potentialSecondAttachmentPointForBond = attachmentPoint;\n  }\n\n  public setPotentialBond(\n    attachmentPoint: string | undefined,\n    potentialBond?: PolymerBond | null,\n  ) {\n    if (attachmentPoint !== undefined) {\n      this.potentialAttachmentPointsToBonds[attachmentPoint] = potentialBond;\n    }\n  }\n\n  public getAttachmentPointByBond(\n    bond: PolymerBond | MonomerToAtomBond,\n  ): AttachmentPointName | undefined {\n    for (const attachmentPointName in this.attachmentPointsToBonds) {\n      if (this.attachmentPointsToBonds[attachmentPointName] === bond) {\n        return attachmentPointName as AttachmentPointName;\n      }\n    }\n\n    return undefined;\n  }\n\n  public abstract getValidSourcePoint(\n    monomer?: BaseMonomer,\n  ): AttachmentPointName | undefined;\n\n  public abstract getValidTargetPoint(monomer: BaseMonomer): string | undefined;\n\n  public getPotentialAttachmentPointByBond(bond: PolymerBond) {\n    for (const attachmentPointName in this.potentialAttachmentPointsToBonds) {\n      if (this.potentialAttachmentPointsToBonds[attachmentPointName] === bond) {\n        return attachmentPointName as AttachmentPointName;\n      }\n    }\n\n    return undefined;\n  }\n\n  public get firstFreeAttachmentPoint() {\n    const maxAttachmentPointNumber = this.getMaxAttachmentPointNumber();\n    for (let i = 1; i <= maxAttachmentPointNumber; i++) {\n      const attachmentPoint = `R${i}` as AttachmentPointName;\n      if (\n        this.hasAttachmentPoint(attachmentPoint) &&\n        this.attachmentPointsToBonds[attachmentPoint] === null\n      ) {\n        return attachmentPoint;\n      }\n    }\n\n    return undefined;\n  }\n\n  private getMaxAttachmentPointNumber() {\n    let maxAttachmentPointNumber = 1;\n    for (const attachmentPoint in this.attachmentPointsToBonds) {\n      const match = attachmentPoint.match(/R(\\d+)/);\n      if (match) {\n        const pointNumber = parseInt(match[1]);\n        if (!isNaN(pointNumber) && pointNumber > maxAttachmentPointNumber) {\n          maxAttachmentPointNumber = pointNumber;\n        }\n      }\n    }\n    return maxAttachmentPointNumber;\n  }\n\n  public get R1AttachmentPoint(): AttachmentPointName | undefined {\n    if (this.attachmentPointsToBonds.R1 === null) {\n      return AttachmentPointName.R1;\n    }\n\n    return undefined;\n  }\n\n  public get R2AttachmentPoint(): AttachmentPointName | undefined {\n    if (this.attachmentPointsToBonds.R2 === null) {\n      return AttachmentPointName.R2;\n    }\n\n    return undefined;\n  }\n\n  public get hasFreeAttachmentPoint() {\n    return Boolean(this.firstFreeAttachmentPoint);\n  }\n\n  public isAttachmentPointExistAndFree(attachmentPoint: AttachmentPointName) {\n    return (\n      this.hasAttachmentPoint(attachmentPoint) &&\n      !this.isAttachmentPointUsed(attachmentPoint)\n    );\n  }\n\n  public setRenderer(renderer: BaseMonomerRenderer) {\n    super.setBaseRenderer(renderer as BaseRenderer);\n    this.renderer = renderer;\n  }\n\n  public forEachBond(\n    callback: (\n      polymerBond: PolymerBond | MonomerToAtomBond,\n      attachmentPointName: AttachmentPointName,\n    ) => void,\n  ) {\n    for (const attachmentPointName in this.attachmentPointsToBonds) {\n      if (this.attachmentPointsToBonds[attachmentPointName]) {\n        callback(\n          this.attachmentPointsToBonds[attachmentPointName],\n          attachmentPointName as AttachmentPointName,\n        );\n      }\n    }\n  }\n\n  public setBond(\n    attachmentPointName: AttachmentPointName,\n    bond: PolymerBond | MonomerToAtomBond | HydrogenBond,\n  ) {\n    this.attachmentPointsToBonds[\n      bond instanceof HydrogenBond\n        ? AttachmentPointName.HYDROGEN\n        : attachmentPointName\n    ] = bond;\n  }\n\n  public unsetBond(attachmentPointName: AttachmentPointName) {\n    this.attachmentPointsToBonds[attachmentPointName] = null;\n  }\n\n  public get hasBonds() {\n    let hasBonds = false;\n    for (const bondName in this.attachmentPointsToBonds) {\n      if (this.attachmentPointsToBonds[bondName]) {\n        hasBonds = true;\n      }\n    }\n    return hasBonds;\n  }\n\n  public hasPotentialBonds() {\n    return Object.values(this.potentialAttachmentPointsToBonds).some(\n      (bond) => !!bond,\n    );\n  }\n\n  public getPotentialBond(attachmentPointName: string) {\n    return this.potentialAttachmentPointsToBonds[attachmentPointName];\n  }\n\n  public removeBond(polymerBond: PolymerBond) {\n    const attachmentPointName = this.getAttachmentPointByBond(polymerBond);\n    if (!attachmentPointName) return;\n    this.unsetBond(attachmentPointName);\n  }\n\n  public removePotentialBonds(clearSelectedPoints = false) {\n    if (clearSelectedPoints) {\n      this.chosenFirstAttachmentPointForBond = null;\n      this.chosenSecondAttachmentPointForBond = null;\n      this.potentialSecondAttachmentPointForBond = null;\n    }\n\n    for (const attachmentPointName in this.potentialAttachmentPointsToBonds) {\n      this.potentialAttachmentPointsToBonds[attachmentPointName] = null;\n    }\n  }\n\n  public get availableAttachmentPointForBondEnd() {\n    if (this.chosenSecondAttachmentPointForBond) {\n      return this.chosenSecondAttachmentPointForBond;\n    }\n    return this.firstFreeAttachmentPoint;\n  }\n\n  public hasAttachmentPoint(attachmentPointName: AttachmentPointName) {\n    return this.attachmentPointsToBonds[attachmentPointName] !== undefined;\n  }\n\n  public get usedAttachmentPointsNamesList() {\n    const list: AttachmentPointName[] = [];\n\n    this.listOfAttachmentPoints.forEach((attachmentPointName) => {\n      if (this.isAttachmentPointUsed(attachmentPointName)) {\n        list.push(attachmentPointName);\n      }\n    });\n\n    return list;\n  }\n\n  public get unUsedAttachmentPointsNamesList() {\n    const list: AttachmentPointName[] = [];\n\n    this.listOfAttachmentPoints.forEach((attachmentPointName) => {\n      if (!this.isAttachmentPointUsed(attachmentPointName)) {\n        list.push(attachmentPointName);\n      }\n    });\n\n    return list;\n  }\n\n  public getBondByAttachmentPoint(attachmentPointName: AttachmentPointName) {\n    return this.attachmentPointsToBonds[attachmentPointName];\n  }\n\n  public getPotentialBondByAttachmentPoint(\n    attachmentPointName: AttachmentPointName,\n  ) {\n    return this.potentialAttachmentPointsToBonds[attachmentPointName];\n  }\n\n  public isAttachmentPointUsed(attachmentPointName: AttachmentPointName) {\n    return Boolean(this.getBondByAttachmentPoint(attachmentPointName));\n  }\n\n  public isAttachmentPointPotentiallyUsed(\n    attachmentPointName: AttachmentPointName,\n  ) {\n    return Boolean(this.getPotentialBondByAttachmentPoint(attachmentPointName));\n  }\n\n  private getAttachmentPointDict(): AttachmentPointsToBonds {\n    if (this.monomerItem.attachmentPoints) {\n      const { attachmentPointDictionary } =\n        BaseMonomer.getAttachmentPointDictFromMonomerDefinition(\n          this.monomerItem.attachmentPoints,\n        );\n      return attachmentPointDictionary;\n    } else {\n      return this.getAttachmentPointDictFromAtoms();\n    }\n  }\n\n  public static getAttachmentPointDictFromMonomerDefinition(\n    attachmentPoints: IKetAttachmentPoint[],\n  ): {\n    attachmentPointDictionary: AttachmentPointsToBonds;\n    attachmentPointsList: AttachmentPointName[];\n  } {\n    const attachmentPointDictionary = {};\n    const attachmentPointsList: AttachmentPointName[] = [];\n    const attachmentPointTypeToNumber: {\n      [key in IKetAttachmentPointType]: (\n        attachmentPointNumber?: number,\n      ) => number;\n    } = {\n      left: () => 1,\n      right: () => 2,\n      side: (attachmentPointNumber) => {\n        assert(attachmentPointNumber);\n        return (\n          attachmentPointNumber +\n          Number(!('R1' in attachmentPointDictionary)) +\n          Number(!('R2' in attachmentPointDictionary))\n        );\n      },\n    };\n    attachmentPoints.forEach((attachmentPoint, attachmentPointIndex) => {\n      const attachmentPointNumber = attachmentPointIndex + 1;\n      let calculatedAttachmentPointNumber;\n      if (attachmentPoint.type) {\n        const getLabelByTypeAction =\n          attachmentPointTypeToNumber[attachmentPoint.type];\n        calculatedAttachmentPointNumber =\n          typeof getLabelByTypeAction === 'function'\n            ? attachmentPointTypeToNumber[attachmentPoint.type](\n                attachmentPointNumber,\n              )\n            : attachmentPointNumber;\n      } else {\n        calculatedAttachmentPointNumber = attachmentPointNumber;\n      }\n      const calculatedLabel =\n        attachmentPoint.label || `R${calculatedAttachmentPointNumber}`;\n      attachmentPointDictionary[calculatedLabel] = null;\n      attachmentPointsList.push(calculatedLabel as AttachmentPointName);\n    });\n    return { attachmentPointDictionary, attachmentPointsList };\n  }\n\n  public get attachmentPointNumberToType() {\n    return {\n      1: 'left',\n      2: 'right',\n      moreThanTwo: 'side',\n    };\n  }\n\n  private getMonomerDefinitionAttachmentPoints() {\n    const monomerDefinitionAttachmentPoints: IKetAttachmentPoint[] = [];\n    this.superatomAttachmentPoints.forEach((superatomAttachmentPoint) => {\n      if (!isNumber(superatomAttachmentPoint.attachmentPointNumber)) {\n        return;\n      }\n\n      const bondsToLeavingGroupAtom = this.monomerItem.struct.bonds.filter(\n        (_, bond) => {\n          return (\n            bond.begin === superatomAttachmentPoint.leaveAtomId ||\n            bond.end === superatomAttachmentPoint.leaveAtomId\n          );\n        },\n      );\n\n      if (bondsToLeavingGroupAtom.size > 1) {\n        return;\n      }\n\n      monomerDefinitionAttachmentPoints.push({\n        attachmentAtom: superatomAttachmentPoint.atomId,\n        leavingGroup: {\n          atoms:\n            superatomAttachmentPoint.leaveAtomId === 0 ||\n            superatomAttachmentPoint.leaveAtomId\n              ? [superatomAttachmentPoint.leaveAtomId]\n              : [],\n        },\n        type:\n          this.attachmentPointNumberToType[\n            superatomAttachmentPoint.attachmentPointNumber\n          ] || this.attachmentPointNumberToType.moreThanTwo,\n      });\n    });\n    return monomerDefinitionAttachmentPoints;\n  }\n\n  get superatomAttachmentPoints() {\n    const struct = this.monomerItem.struct;\n    const superatomWithoutLabel = struct.sgroups\n      .filter((_, sgroup) => sgroup.isSuperatomWithoutLabel)\n      ?.get(0);\n\n    if (!superatomWithoutLabel) {\n      return [];\n    }\n\n    return superatomWithoutLabel.getAttachmentPoints();\n  }\n\n  public getAttachmentPointDictFromAtoms(): AttachmentPointsToBonds {\n    const attachmentPointNameToBond = {};\n\n    this.superatomAttachmentPoints.forEach((superatomAttachmentPoint) => {\n      if (!isNumber(superatomAttachmentPoint.attachmentPointNumber)) {\n        return;\n      }\n\n      const label = getAttachmentPointLabel(\n        superatomAttachmentPoint.attachmentPointNumber,\n      );\n      const leavingGroupAtomId = superatomAttachmentPoint.leaveAtomId;\n      const bondsToLeavingGroupAtom = this.monomerItem.struct.bonds.filter(\n        (_, bond) => {\n          return (\n            bond.begin === leavingGroupAtomId || bond.end === leavingGroupAtomId\n          );\n        },\n      );\n\n      if (bondsToLeavingGroupAtom.size > 1) {\n        return;\n      }\n\n      attachmentPointNameToBond[label] = null;\n    });\n\n    return attachmentPointNameToBond;\n  }\n\n  public get startBondAttachmentPoint() {\n    if (this.chosenFirstAttachmentPointForBond) {\n      return this.chosenFirstAttachmentPointForBond;\n    }\n    if (this.attachmentPointsToBonds.R2 === null) {\n      return 'R2';\n    }\n\n    if (this.attachmentPointsToBonds.R1 === null) {\n      return 'R1';\n    }\n\n    return this.firstFreeAttachmentPoint;\n  }\n\n  abstract get SubChainConstructor():\n    | typeof RnaSubChain\n    | typeof ChemSubChain\n    | typeof PhosphateSubChain\n    | typeof PeptideSubChain;\n\n  public isMonomerTypeDifferentForChaining(\n    monomerToChain: SubChainNode | BaseMonomer,\n  ) {\n    return this.SubChainConstructor !== monomerToChain.SubChainConstructor;\n  }\n\n  public get isModification() {\n    return this.monomerItem.props.MonomerNaturalAnalogCode !== this.label;\n  }\n\n  public get sideConnections() {\n    const sideConnections: PolymerBond[] = [];\n    this.forEachBond((bond) => {\n      if (!(bond instanceof MonomerToAtomBond) && bond.isSideChainConnection) {\n        sideConnections.push(bond);\n      }\n    });\n    return sideConnections;\n  }\n\n  public get monomerCaps() {\n    return this.monomerItem.props.MonomerCaps;\n  }\n}\n","import { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { PolymerBond } from '../PolymerBond';\n\nexport class BaseSubChain {\n  public nodes: Array<SubChainNode> = [];\n  public bonds: Array<PolymerBond> = [];\n\n  constructor() {}\n\n  public get lastNode() {\n    return this.nodes[this.nodes.length - 1];\n  }\n\n  public get firstNode() {\n    return this.nodes[0];\n  }\n\n  public add(node: SubChainNode) {\n    this.nodes.push(node);\n  }\n\n  public get length() {\n    return this.nodes.length;\n  }\n}\n","import { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\n\nexport class ChemSubChain extends BaseSubChain {}\n","import { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\n\nexport class PhosphateSubChain extends BaseSubChain {}\n","import { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\n\nexport class RnaSubChain extends BaseSubChain {}\n","import { BaseMonomer } from './BaseMonomer';\nimport { AttachmentPointName, MonomerItemType } from 'domain/types';\nimport { Vec2 } from './vec2';\nimport { Sugar } from './Sugar';\nimport { PhosphateSubChain } from 'domain/entities/monomer-chains/PhosphateSubChain';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { RnaSubChain } from 'domain/entities/monomer-chains/RnaSubChain';\n\nexport class Phosphate extends BaseMonomer {\n  constructor(monomerItem: MonomerItemType, _position?: Vec2) {\n    super(monomerItem, _position);\n  }\n\n  public getValidSourcePoint(secondMonomer: BaseMonomer) {\n    if (!secondMonomer) {\n      return this.firstFreeAttachmentPoint;\n    }\n\n    return this.getValidPoint(\n      secondMonomer,\n      secondMonomer.potentialSecondAttachmentPointForBond,\n    );\n  }\n\n  public getValidTargetPoint(firstMonomer: BaseMonomer) {\n    if (!firstMonomer) {\n      return this.firstFreeAttachmentPoint;\n    }\n\n    // same implementation for both source and target attachment points\n    return this.getValidPoint(\n      firstMonomer,\n      firstMonomer.chosenFirstAttachmentPointForBond,\n    );\n  }\n\n  private getValidPoint(\n    otherMonomer: BaseMonomer,\n    potentialPointOnOther: string | null,\n  ) {\n    // If we chose specific start AP on this monomer, return it\n    if (this.chosenFirstAttachmentPointForBond) {\n      return this.chosenFirstAttachmentPointForBond;\n    }\n\n    // If we want to choose specific end AP on this monomer, return it\n    if (this.potentialSecondAttachmentPointForBond) {\n      return this.potentialSecondAttachmentPointForBond;\n    }\n\n    // If this is the only available AP on this monomer, return it\n    if (this.unUsedAttachmentPointsNamesList.length === 1) {\n      return this.unUsedAttachmentPointsNamesList[0];\n    }\n\n    // If other monomer is not a Sugar, we want to open modal\n    if (!(otherMonomer instanceof Sugar)) {\n      return;\n    }\n    // If we chose a specific AP on other monomer, we want to determine the correct AP on this one\n    if (potentialPointOnOther) {\n      if (\n        potentialPointOnOther === AttachmentPointName.R2 &&\n        this.isAttachmentPointExistAndFree(AttachmentPointName.R1)\n      ) {\n        return AttachmentPointName.R1;\n      } else if (\n        potentialPointOnOther !== AttachmentPointName.R2 &&\n        this.isAttachmentPointExistAndFree(AttachmentPointName.R2)\n      ) {\n        return AttachmentPointName.R2;\n      } else {\n        return;\n      }\n    }\n\n    if (\n      otherMonomer.isAttachmentPointExistAndFree(AttachmentPointName.R2) &&\n      this.isAttachmentPointExistAndFree(AttachmentPointName.R1)\n    ) {\n      return AttachmentPointName.R1;\n    }\n\n    if (\n      !otherMonomer.isAttachmentPointExistAndFree(AttachmentPointName.R2) &&\n      this.isAttachmentPointExistAndFree(AttachmentPointName.R2)\n    ) {\n      return AttachmentPointName.R2;\n    }\n\n    return undefined;\n  }\n\n  public isMonomerTypeDifferentForChaining(monomerToChain: SubChainNode) {\n    return ![PhosphateSubChain, RnaSubChain].includes(\n      monomerToChain.SubChainConstructor,\n    );\n  }\n\n  public get SubChainConstructor() {\n    return PhosphateSubChain;\n  }\n}\n","import { BaseMonomer } from './BaseMonomer';\nimport { RNABase } from './RNABase';\nimport { Phosphate } from './Phosphate';\nimport { AttachmentPointName } from 'domain/types';\nimport { RnaSubChain } from 'domain/entities/monomer-chains/RnaSubChain';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { PhosphateSubChain } from 'domain/entities/monomer-chains/PhosphateSubChain';\nimport { isRnaBaseOrAmbiguousRnaBase } from 'domain/helpers/monomers';\nimport { IVariantMonomer } from 'domain/entities/types';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\n\nexport class Sugar extends BaseMonomer {\n  public getValidSourcePoint(secondMonomer?: BaseMonomer & IVariantMonomer) {\n    if (!secondMonomer) {\n      return this.firstFreeAttachmentPoint;\n    }\n\n    return this.getValidPoint(\n      secondMonomer,\n      secondMonomer.potentialSecondAttachmentPointForBond,\n    );\n  }\n\n  public getValidTargetPoint(firstMonomer: BaseMonomer & IVariantMonomer) {\n    if (!firstMonomer) {\n      return this.firstFreeAttachmentPoint;\n    }\n\n    // same implementation for both source and target attachment points\n    return this.getValidPoint(\n      firstMonomer,\n      firstMonomer.chosenFirstAttachmentPointForBond,\n    );\n  }\n\n  private getValidPoint(\n    otherMonomer: BaseMonomer & IVariantMonomer,\n    potentialPointOnOther: string | null,\n  ) {\n    // If we chose specific start AP on this monomer, return it\n    if (this.chosenFirstAttachmentPointForBond) {\n      return this.chosenFirstAttachmentPointForBond;\n    }\n    // If we want to choose specific end AP on this monomer, return it\n    if (this.potentialSecondAttachmentPointForBond) {\n      return this.potentialSecondAttachmentPointForBond;\n    }\n    // If this is the only available AP on this monomer, return it\n    if (this.unUsedAttachmentPointsNamesList.length === 1) {\n      return this.unUsedAttachmentPointsNamesList[0];\n    }\n\n    // If other monomer is neither a Phosphate nor RNABase, open modal\n    if (\n      !(otherMonomer instanceof Phosphate) &&\n      !isRnaBaseOrAmbiguousRnaBase(otherMonomer)\n    ) {\n      return;\n    }\n\n    // If other monomer is RNABase, attach it to R3 or open modal\n    if (isRnaBaseOrAmbiguousRnaBase(otherMonomer)) {\n      if (this.isAttachmentPointExistAndFree(AttachmentPointName.R3)) {\n        return AttachmentPointName.R3;\n      } else return;\n    }\n\n    // If we chose a specific AP on some Phosphate, we want to determine the correct AP on this Sugar\n    if (potentialPointOnOther) {\n      if (\n        potentialPointOnOther === AttachmentPointName.R1 &&\n        this.isAttachmentPointExistAndFree(AttachmentPointName.R2)\n      ) {\n        return AttachmentPointName.R2;\n      } else if (\n        potentialPointOnOther !== AttachmentPointName.R1 &&\n        this.isAttachmentPointExistAndFree(AttachmentPointName.R1)\n      ) {\n        return AttachmentPointName.R1;\n      } else {\n        return;\n      }\n    }\n\n    if (\n      otherMonomer.isAttachmentPointExistAndFree(AttachmentPointName.R1) &&\n      this.isAttachmentPointExistAndFree(AttachmentPointName.R2)\n    ) {\n      return AttachmentPointName.R2;\n    }\n\n    if (\n      otherMonomer.isAttachmentPointExistAndFree(AttachmentPointName.R2) &&\n      this.isAttachmentPointExistAndFree(AttachmentPointName.R1)\n    ) {\n      return AttachmentPointName.R1;\n    }\n\n    if (\n      !otherMonomer.isAttachmentPointExistAndFree(AttachmentPointName.R1) &&\n      this.isAttachmentPointExistAndFree(AttachmentPointName.R1)\n    ) {\n      return AttachmentPointName.R1;\n    }\n\n    return undefined;\n  }\n\n  public get SubChainConstructor() {\n    return RnaSubChain;\n  }\n\n  public isMonomerTypeDifferentForChaining(monomerToChain: SubChainNode) {\n    return ![PhosphateSubChain, RnaSubChain].includes(\n      monomerToChain.SubChainConstructor,\n    );\n  }\n\n  public get isPartOfRNA(): boolean {\n    const r3PolymerBond = this.attachmentPointsToBonds.R3;\n\n    return (\n      r3PolymerBond instanceof PolymerBond &&\n      r3PolymerBond?.getAnotherMonomer(this) instanceof RNABase\n    );\n  }\n}\n","import { BaseRenderer } from 'application/render/renderers/BaseRenderer';\nimport { FlexModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/FlexModePolymerBondRenderer';\nimport { SnakeModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/SnakeModePolymerBondRenderer';\nimport { BackBoneBondSequenceRenderer } from 'application/render/renderers/sequence/BackBoneBondSequenceRenderer';\nimport { PolymerBondSequenceRenderer } from 'application/render/renderers/sequence/PolymerBondSequenceRenderer';\nimport { Sugar } from 'domain/entities/Sugar';\nimport {\n  isMonomerConnectedToR2RnaBase,\n  isRnaBaseOrAmbiguousRnaBase,\n} from 'domain/helpers/monomers';\nimport { AttachmentPointName } from 'domain/types';\nimport { BaseMonomer } from './BaseMonomer';\nimport { BaseBond } from 'domain/entities/BaseBond';\n\ntype FlexOrSequenceOrSnakeModePolymerBondRenderer =\n  | BackBoneBondSequenceRenderer\n  | FlexModePolymerBondRenderer\n  | PolymerBondSequenceRenderer\n  | SnakeModePolymerBondRenderer;\n\nexport class PolymerBond extends BaseBond {\n  public secondMonomer?: BaseMonomer;\n  public renderer?: FlexOrSequenceOrSnakeModePolymerBondRenderer = undefined;\n\n  constructor(public firstMonomer: BaseMonomer, secondMonomer?: BaseMonomer) {\n    super();\n    this.firstMonomer = firstMonomer;\n    this.secondMonomer = secondMonomer;\n  }\n\n  public setFirstMonomer(monomer: BaseMonomer) {\n    this.firstMonomer = monomer;\n  }\n\n  public setSecondMonomer(monomer: BaseMonomer) {\n    this.secondMonomer = monomer;\n  }\n\n  public setRenderer(\n    renderer: FlexOrSequenceOrSnakeModePolymerBondRenderer,\n  ): void {\n    super.setBaseRenderer(renderer as BaseRenderer);\n    this.renderer = renderer;\n  }\n\n  public static get backBoneChainAttachmentPoints() {\n    return [AttachmentPointName.R1, AttachmentPointName.R2];\n  }\n\n  public get isBackBoneChainConnection() {\n    return !this.isSideChainConnection;\n  }\n\n  public get firstMonomerAttachmentPoint() {\n    return this.firstMonomer.getAttachmentPointByBond(this);\n  }\n\n  public get secondMonomerAttachmentPoint() {\n    return this.secondMonomer?.getAttachmentPointByBond(this);\n  }\n\n  public get isSideChainConnection() {\n    const firstMonomerAttachmentPoint = this.firstMonomerAttachmentPoint;\n    const secondMonomerAttachmentPoint = this.secondMonomerAttachmentPoint;\n\n    if (!firstMonomerAttachmentPoint || !secondMonomerAttachmentPoint) {\n      return false;\n    }\n\n    return (\n      (!(\n        PolymerBond.backBoneChainAttachmentPoints.includes(\n          firstMonomerAttachmentPoint,\n        ) &&\n        PolymerBond.backBoneChainAttachmentPoints.includes(\n          secondMonomerAttachmentPoint,\n        )\n      ) ||\n        (isMonomerConnectedToR2RnaBase(this.firstMonomer) &&\n          isRnaBaseOrAmbiguousRnaBase(this.secondMonomer)) ||\n        (isMonomerConnectedToR2RnaBase(this.secondMonomer) &&\n          isRnaBaseOrAmbiguousRnaBase(this.firstMonomer)) ||\n        firstMonomerAttachmentPoint === secondMonomerAttachmentPoint) &&\n      !(\n        (firstMonomerAttachmentPoint === AttachmentPointName.R1 &&\n          isRnaBaseOrAmbiguousRnaBase(this.firstMonomer) &&\n          secondMonomerAttachmentPoint === AttachmentPointName.R3 &&\n          this.secondMonomer instanceof Sugar) ||\n        (firstMonomerAttachmentPoint === AttachmentPointName.R3 &&\n          this.firstMonomer instanceof Sugar &&\n          secondMonomerAttachmentPoint === AttachmentPointName.R1 &&\n          isRnaBaseOrAmbiguousRnaBase(this.secondMonomer))\n      )\n    );\n  }\n\n  get firstEndEntity(): BaseMonomer {\n    return this.firstMonomer;\n  }\n\n  get secondEndEntity(): BaseMonomer | undefined {\n    return this.secondMonomer;\n  }\n\n  public getAnotherMonomer(monomer: BaseMonomer): BaseMonomer | undefined {\n    return super.getAnotherEntity(monomer) as BaseMonomer;\n  }\n}\n","import {\n  AmbiguousMonomer,\n  BaseMonomer,\n  Peptide,\n  Phosphate,\n  RNABase,\n  Sugar,\n  UnsplitNucleotide,\n} from 'domain/entities';\nimport {\n  AttachmentPointName,\n  MonomerItemType,\n  MonomerOrAmbiguousType,\n  AmbiguousMonomerType,\n} from 'domain/types';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { IVariantMonomer } from 'domain/entities/types';\nimport { KetMonomerClass } from 'application/formatters';\nimport { MONOMER_CLASS_TO_CONSTRUCTOR } from 'domain/constants/monomers';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\n\nexport function getMonomerUniqueKey(monomer: MonomerItemType) {\n  return `${monomer.props.MonomerName}___${monomer.props.Name}`;\n}\n\nexport function checkIsR2R1Connection(\n  monomer: BaseMonomer,\n  nextMonomer: BaseMonomer,\n) {\n  const r1PolymerBond = nextMonomer.attachmentPointsToBonds.R1;\n\n  return (\n    r1PolymerBond instanceof PolymerBond &&\n    r1PolymerBond?.getAnotherMonomer(nextMonomer) === monomer\n  );\n}\n\nexport function isR2R1ConnectionFromRnaBase(polymerBond: PolymerBond) {\n  const firstMonomerAttachmentPoint =\n    polymerBond.firstMonomer.getAttachmentPointByBond(polymerBond);\n  const secondMonomerAttachmentPoint =\n    polymerBond.secondMonomer?.getAttachmentPointByBond(polymerBond);\n\n  return (\n    (isRnaBaseOrAmbiguousRnaBase(polymerBond.firstMonomer) &&\n      firstMonomerAttachmentPoint === AttachmentPointName.R2 &&\n      secondMonomerAttachmentPoint === AttachmentPointName.R1) ||\n    (isRnaBaseOrAmbiguousRnaBase(polymerBond.secondMonomer) &&\n      secondMonomerAttachmentPoint === AttachmentPointName.R2 &&\n      firstMonomerAttachmentPoint === AttachmentPointName.R1)\n  );\n}\n\nexport function isMonomerConnectedToR2RnaBase(monomer?: BaseMonomer) {\n  if (!monomer) {\n    return false;\n  }\n\n  const R1PolymerBond = monomer.attachmentPointsToBonds.R1;\n\n  if (R1PolymerBond instanceof MonomerToAtomBond) {\n    return false;\n  }\n\n  const R1ConnectedMonomer = R1PolymerBond?.getAnotherMonomer(monomer);\n  const r2PolymerBond = R1ConnectedMonomer?.attachmentPointsToBonds.R2;\n\n  return (\n    isRnaBaseOrAmbiguousRnaBase(R1ConnectedMonomer) &&\n    getSugarFromRnaBase(R1ConnectedMonomer) &&\n    r2PolymerBond instanceof PolymerBond &&\n    r2PolymerBond?.getAnotherMonomer(R1ConnectedMonomer) === monomer\n  );\n}\n\nexport function getNextMonomerInChain(\n  monomer?: BaseMonomer,\n  firstMonomer?: BaseMonomer | null,\n) {\n  if (!monomer) return undefined;\n\n  const r2PolymerBond = monomer.attachmentPointsToBonds.R2;\n  const nextMonomer =\n    r2PolymerBond instanceof PolymerBond\n      ? r2PolymerBond?.getAnotherMonomer?.(monomer)\n      : undefined;\n\n  if (\n    !nextMonomer ||\n    (nextMonomer === firstMonomer && r2PolymerBond) ||\n    isMonomerConnectedToR2RnaBase(nextMonomer)\n  )\n    return undefined;\n\n  return r2PolymerBond &&\n    nextMonomer?.getAttachmentPointByBond(r2PolymerBond) ===\n      AttachmentPointName.R1\n    ? nextMonomer\n    : undefined;\n}\n\nexport function getRnaBaseFromSugar(monomer?: BaseMonomer) {\n  if (!monomer || !(monomer instanceof Sugar)) return undefined;\n  const r3PolymerBond = monomer.attachmentPointsToBonds.R3;\n  const r3ConnectedMonomer =\n    r3PolymerBond instanceof PolymerBond\n      ? r3PolymerBond?.getAnotherMonomer(monomer)\n      : undefined;\n\n  if (!r3ConnectedMonomer) {\n    return undefined;\n  }\n\n  const r1PolymerBondOfConnectedMonomer =\n    r3ConnectedMonomer?.attachmentPointsToBonds.R1;\n  const r1ConnectedMonomer =\n    r1PolymerBondOfConnectedMonomer instanceof PolymerBond\n      ? r1PolymerBondOfConnectedMonomer?.getAnotherMonomer(r3ConnectedMonomer)\n      : undefined;\n\n  return isRnaBaseOrAmbiguousRnaBase(r3ConnectedMonomer) &&\n    r1ConnectedMonomer === monomer\n    ? r3ConnectedMonomer\n    : undefined;\n}\n\nexport function getSugarFromRnaBase(monomer?: BaseMonomer) {\n  if (!monomer || !isRnaBaseOrAmbiguousRnaBase(monomer)) return undefined;\n  const r1PolymerBond = monomer.attachmentPointsToBonds.R1;\n  const r1ConnectedMonomer =\n    r1PolymerBond instanceof PolymerBond\n      ? r1PolymerBond?.getAnotherMonomer(monomer)\n      : undefined;\n\n  if (!r1ConnectedMonomer) {\n    return undefined;\n  }\n\n  const r3PolymerBondOfConnectedMonomer =\n    r1ConnectedMonomer?.attachmentPointsToBonds.R3;\n  const r3ConnectedMonomer =\n    r3PolymerBondOfConnectedMonomer instanceof PolymerBond\n      ? r3PolymerBondOfConnectedMonomer?.getAnotherMonomer(r1ConnectedMonomer)\n      : undefined;\n\n  return r1ConnectedMonomer instanceof Sugar && r3ConnectedMonomer === monomer\n    ? r1ConnectedMonomer\n    : undefined;\n}\n\nexport function getPhosphateFromSugar(monomer?: BaseMonomer) {\n  if (!monomer) return undefined;\n  const nextMonomerInChain = getNextMonomerInChain(monomer);\n\n  return nextMonomerInChain instanceof Phosphate\n    ? nextMonomerInChain\n    : undefined;\n}\n\nexport function isMonomerBeginningOfChain(\n  monomer: BaseMonomer,\n  MonomerTypes: Array<\n    typeof Peptide | typeof Phosphate | typeof Sugar | typeof UnsplitNucleotide\n  >,\n) {\n  const r1PolymerBond = monomer.attachmentPointsToBonds.R1;\n\n  if (r1PolymerBond instanceof MonomerToAtomBond) {\n    return true;\n  }\n\n  const previousMonomer = r1PolymerBond?.getAnotherMonomer(monomer);\n  const isPreviousMonomerPartOfChain =\n    previousMonomer &&\n    !MonomerTypes.some(\n      (MonomerType) =>\n        previousMonomer instanceof MonomerType ||\n        (previousMonomer instanceof AmbiguousMonomer &&\n          MONOMER_CLASS_TO_CONSTRUCTOR[previousMonomer.monomerClass] ===\n            MonomerType),\n    );\n  const previousConnectionNotR2 =\n    r1PolymerBond &&\n    previousMonomer?.getAttachmentPointByBond(r1PolymerBond) !== 'R2';\n\n  // For single monomers we check that monomer has bonds, but for UnsplitNucleotide we don't\n  // to be consistent with rna triplets (we show enumeration for single triplet)\n  return (\n    ((monomer.isAttachmentPointExistAndFree(AttachmentPointName.R1) ||\n      !monomer.hasAttachmentPoint(AttachmentPointName.R1)) &&\n      (monomer.hasBonds || monomer instanceof UnsplitNucleotide)) ||\n    previousConnectionNotR2 ||\n    isPreviousMonomerPartOfChain\n  );\n}\n\nexport function isValidNucleotide(\n  sugar: Sugar,\n  firstMonomerInCyclicChain?: BaseMonomer,\n): boolean {\n  if (!getRnaBaseFromSugar(sugar)) {\n    return false;\n  }\n\n  const phosphate = getPhosphateFromSugar(sugar);\n  if (!phosphate || phosphate === firstMonomerInCyclicChain) {\n    return false;\n  }\n\n  const nextMonomerAfterPhosphate = getNextMonomerInChain(phosphate);\n  return !!nextMonomerAfterPhosphate;\n}\n\nexport function isValidNucleoside(\n  sugar: Sugar,\n  firstMonomerInCyclicChain?: BaseMonomer,\n): boolean {\n  if (!getRnaBaseFromSugar(sugar)) {\n    return false;\n  }\n\n  const phosphate = getPhosphateFromSugar(sugar);\n  if (!phosphate || phosphate === firstMonomerInCyclicChain) {\n    return true;\n  }\n\n  const nextMonomerAfterPhosphate = getNextMonomerInChain(phosphate);\n  return !nextMonomerAfterPhosphate;\n}\n\nexport const isRnaBaseVariantMonomer = (\n  monomer: BaseMonomer & IVariantMonomer,\n) => monomer.monomerClass === KetMonomerClass.Base;\n\nexport function isAmbiguousMonomerLibraryItem(\n  monomer?: MonomerOrAmbiguousType,\n): monomer is AmbiguousMonomerType {\n  return Boolean(monomer && monomer.isAmbiguous);\n}\n\nexport function isPeptideOrAmbiguousPeptide(\n  monomer?: BaseMonomer,\n): monomer is Peptide | AmbiguousMonomer {\n  return (\n    monomer instanceof Peptide ||\n    (monomer instanceof AmbiguousMonomer &&\n      monomer.monomerClass === KetMonomerClass.AminoAcid)\n  );\n}\n\nexport function isRnaBaseOrAmbiguousRnaBase(\n  monomer?: BaseMonomer,\n): monomer is RNABase | AmbiguousMonomer {\n  return (\n    monomer instanceof RNABase ||\n    (monomer instanceof AmbiguousMonomer &&\n      monomer.monomerClass === KetMonomerClass.Base)\n  );\n}\n","import { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { ChemSubChain } from 'domain/entities/monomer-chains/ChemSubChain';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { AttachmentPointName } from 'domain/types';\nimport { getSugarFromRnaBase } from 'domain/helpers/monomers';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\n\nexport class RNABase extends BaseMonomer {\n  public getValidSourcePoint() {\n    if (this.chosenFirstAttachmentPointForBond) {\n      return this.chosenFirstAttachmentPointForBond;\n    }\n    return this.firstFreeAttachmentPoint;\n  }\n\n  public getValidTargetPoint() {\n    if (this.potentialSecondAttachmentPointForBond) {\n      return this.potentialSecondAttachmentPointForBond;\n    }\n    return this.firstFreeAttachmentPoint;\n  }\n\n  public get SubChainConstructor() {\n    return ChemSubChain;\n  }\n\n  public override get sideConnections() {\n    const sideConnections: PolymerBond[] = [];\n    this.forEachBond((polymerBond, attachmentPointName) => {\n      if (\n        !(polymerBond instanceof MonomerToAtomBond) &&\n        (attachmentPointName !== AttachmentPointName.R1 ||\n          !getSugarFromRnaBase(this))\n      ) {\n        sideConnections.push(polymerBond);\n      }\n    });\n\n    return sideConnections;\n  }\n}\n","import { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\n\nexport class PeptideSubChain extends BaseSubChain {}\n","import { BaseMonomer } from './BaseMonomer';\nimport { AttachmentPointName } from 'domain/types';\nimport { PeptideSubChain } from 'domain/entities/monomer-chains/PeptideSubChain';\nimport { ChemSubChain } from 'domain/entities/monomer-chains/ChemSubChain';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\n\nexport class Peptide extends BaseMonomer {\n  public getValidSourcePoint(secondMonomer?: BaseMonomer) {\n    if (this.chosenFirstAttachmentPointForBond) {\n      return this.chosenFirstAttachmentPointForBond;\n    }\n    if (this.unUsedAttachmentPointsNamesList.length === 1) {\n      return this.unUsedAttachmentPointsNamesList[0];\n    }\n    if (secondMonomer?.potentialSecondAttachmentPointForBond) {\n      if (\n        secondMonomer?.potentialSecondAttachmentPointForBond ===\n          AttachmentPointName.R1 &&\n        this.isAttachmentPointExistAndFree(AttachmentPointName.R2)\n      ) {\n        return AttachmentPointName.R2;\n      }\n      if (\n        secondMonomer?.potentialSecondAttachmentPointForBond ===\n          AttachmentPointName.R2 &&\n        this.isAttachmentPointExistAndFree(AttachmentPointName.R1)\n      ) {\n        return AttachmentPointName.R1;\n      }\n      return;\n    }\n    if (\n      (!secondMonomer ||\n        secondMonomer.isAttachmentPointExistAndFree(AttachmentPointName.R1)) &&\n      this.isAttachmentPointExistAndFree(AttachmentPointName.R2)\n    ) {\n      return AttachmentPointName.R2;\n    }\n    if (\n      this.isAttachmentPointExistAndFree(AttachmentPointName.R1) &&\n      secondMonomer?.isAttachmentPointExistAndFree(AttachmentPointName.R2)\n    ) {\n      return AttachmentPointName.R1;\n    }\n\n    return undefined;\n  }\n\n  public getValidTargetPoint(firstMonomer: BaseMonomer) {\n    if (this.potentialSecondAttachmentPointForBond) {\n      return this.potentialSecondAttachmentPointForBond;\n    }\n    if (this.unUsedAttachmentPointsNamesList.length === 1) {\n      return this.unUsedAttachmentPointsNamesList[0];\n    }\n    if (firstMonomer?.chosenFirstAttachmentPointForBond) {\n      if (\n        firstMonomer?.chosenFirstAttachmentPointForBond ===\n          AttachmentPointName.R1 &&\n        this.isAttachmentPointExistAndFree(AttachmentPointName.R2)\n      ) {\n        return AttachmentPointName.R2;\n      }\n      if (\n        firstMonomer?.chosenFirstAttachmentPointForBond ===\n          AttachmentPointName.R2 &&\n        this.isAttachmentPointExistAndFree(AttachmentPointName.R1)\n      ) {\n        return AttachmentPointName.R1;\n      }\n      return;\n    }\n    if (\n      this.isAttachmentPointExistAndFree(AttachmentPointName.R1) &&\n      firstMonomer.isAttachmentPointExistAndFree(AttachmentPointName.R2)\n    ) {\n      return AttachmentPointName.R1;\n    }\n    if (\n      firstMonomer.isAttachmentPointExistAndFree(AttachmentPointName.R1) &&\n      this.isAttachmentPointExistAndFree(AttachmentPointName.R2)\n    ) {\n      return AttachmentPointName.R2;\n    }\n\n    return undefined;\n  }\n\n  public get SubChainConstructor() {\n    return PeptideSubChain;\n  }\n\n  public isMonomerTypeDifferentForChaining(monomerToChain: SubChainNode) {\n    return ![PeptideSubChain, ChemSubChain].includes(\n      monomerToChain.SubChainConstructor,\n    );\n  }\n}\n","import { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { Peptide } from 'domain/entities/Peptide';\nimport { ChemSubChain } from 'domain/entities/monomer-chains/ChemSubChain';\nimport { PeptideSubChain } from 'domain/entities/monomer-chains/PeptideSubChain';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\n\nexport class Chem extends BaseMonomer {\n  public getValidSourcePoint(monomer?: BaseMonomer) {\n    return Peptide.prototype.getValidSourcePoint.call(this, monomer);\n  }\n\n  public getValidTargetPoint(monomer: BaseMonomer) {\n    return Peptide.prototype.getValidTargetPoint.call(this, monomer);\n  }\n\n  public get SubChainConstructor() {\n    return ChemSubChain;\n  }\n\n  public isMonomerTypeDifferentForChaining(monomerToChain: SubChainNode) {\n    return ![PeptideSubChain, ChemSubChain].includes(\n      monomerToChain.SubChainConstructor,\n    );\n  }\n}\n","import { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { Peptide } from 'domain/entities/Peptide';\nimport { ChemSubChain } from 'domain/entities/monomer-chains/ChemSubChain';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { PeptideSubChain } from 'domain/entities/monomer-chains/PeptideSubChain';\n\nexport class UnsplitNucleotide extends BaseMonomer {\n  public getValidSourcePoint(monomer?: BaseMonomer) {\n    return Peptide.prototype.getValidSourcePoint.call(this, monomer);\n  }\n\n  public getValidTargetPoint(monomer: BaseMonomer) {\n    return Peptide.prototype.getValidTargetPoint.call(this, monomer);\n  }\n\n  public get SubChainConstructor() {\n    return ChemSubChain;\n  }\n\n  public isMonomerTypeDifferentForChaining(monomerToChain: SubChainNode) {\n    return ![PeptideSubChain, ChemSubChain].includes(\n      monomerToChain.SubChainConstructor,\n    );\n  }\n}\n","import { BaseMonomer } from './BaseMonomer';\nimport { ChemSubChain } from 'domain/entities/monomer-chains/ChemSubChain';\nimport { PeptideSubChain } from 'domain/entities/monomer-chains/PeptideSubChain';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { Peptide } from 'domain/entities/Peptide';\n\nexport class UnresolvedMonomer extends BaseMonomer {\n  public getValidSourcePoint(secondMonomer?: BaseMonomer) {\n    if (!secondMonomer) {\n      return this.firstFreeAttachmentPoint;\n    }\n\n    return Peptide.prototype.getValidSourcePoint.call(this, secondMonomer);\n  }\n\n  public getValidTargetPoint(firstMonomer: BaseMonomer) {\n    if (!firstMonomer) {\n      return this.firstFreeAttachmentPoint;\n    }\n\n    return Peptide.prototype.getValidTargetPoint.call(this, firstMonomer);\n  }\n\n  public get SubChainConstructor() {\n    return ChemSubChain;\n  }\n\n  public isMonomerTypeDifferentForChaining(monomerToChain: SubChainNode) {\n    return ![PeptideSubChain, ChemSubChain].includes(\n      monomerToChain.SubChainConstructor,\n    );\n  }\n}\n","import { KetMonomerClass } from 'application/formatters';\nimport {\n  Sugar,\n  UnsplitNucleotide,\n  RNABase,\n  Phosphate,\n  Peptide,\n  Chem,\n} from 'domain/entities/internal';\n\nexport enum RNA_DNA_NON_MODIFIED_PART {\n  SUGAR_RNA = 'R',\n  SUGAR_DNA = 'dR',\n  PHOSPHATE = 'P',\n}\n\nexport const rnaDnaNaturalAnalogues = ['A', 'T', 'G', 'C', 'U'];\nexport const unknownNaturalAnalogues = ['.', 'X'];\nexport const peptideNaturalAnalogues = [\n  'A',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'V',\n  'U',\n  'W',\n  'Y',\n];\n\nexport const NO_NATURAL_ANALOGUE = 'X';\n\nexport const MONOMER_CLASS_TO_CONSTRUCTOR = {\n  [KetMonomerClass.CHEM]: Chem,\n  [KetMonomerClass.AminoAcid]: Peptide,\n  [KetMonomerClass.Phosphate]: Phosphate,\n  [KetMonomerClass.Sugar]: Sugar,\n  [KetMonomerClass.Base]: RNABase,\n  [KetMonomerClass.RNA]: UnsplitNucleotide,\n};\n","import { Selection } from 'd3';\nimport { Phosphate } from 'domain/entities/Phosphate';\nimport { BaseMonomerRenderer } from 'application/render/renderers/BaseMonomerRenderer';\nimport { MONOMER_SYMBOLS_IDS } from 'application/render/renderers/constants';\nimport { KetMonomerClass } from 'application/formatters';\nimport { RNA_DNA_NON_MODIFIED_PART } from 'domain/constants/monomers';\n\nconst PHOSPHATE_SELECTED_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.Phosphate].selected;\nconst PHOSPHATE_SYMBOL_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.Phosphate].body;\n\nexport class PhosphateRenderer extends BaseMonomerRenderer {\n  constructor(public monomer: Phosphate, scale?: number) {\n    super(\n      monomer,\n      PHOSPHATE_SELECTED_ELEMENT_ID,\n      PHOSPHATE_SELECTED_ELEMENT_ID,\n      PHOSPHATE_SYMBOL_ELEMENT_ID,\n      scale,\n    );\n  }\n\n  protected getMonomerColor(theme) {\n    return theme.monomer.color[RNA_DNA_NON_MODIFIED_PART.PHOSPHATE].regular;\n  }\n\n  protected appendBody(\n    rootElement: Selection<SVGGElement, void, HTMLElement, never>,\n    theme,\n  ) {\n    return rootElement\n      .append('use')\n      .data([this])\n      .attr('href', PHOSPHATE_SYMBOL_ELEMENT_ID)\n      .attr('fill', this.getMonomerColor(theme));\n  }\n\n  public get enumerationElementPosition() {\n    return undefined;\n  }\n\n  public get beginningElementPosition() {\n    return undefined;\n  }\n}\n","import { Selection } from 'd3';\nimport { Sugar } from 'domain/entities/Sugar';\nimport { BaseMonomerRenderer } from 'application/render/renderers/BaseMonomerRenderer';\nimport { MONOMER_SYMBOLS_IDS } from 'application/render/renderers/constants';\nimport { KetMonomerClass } from 'application/formatters';\nimport { RNA_DNA_NON_MODIFIED_PART } from 'domain/constants/monomers';\n\nconst SUGAR_SELECTED_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.Sugar].selected;\nconst SUGAR_SYMBOL_ELEMENT_ID = MONOMER_SYMBOLS_IDS[KetMonomerClass.Sugar].body;\n\nexport class SugarRenderer extends BaseMonomerRenderer {\n  public CHAIN_BEGINNING = '’5';\n\n  constructor(public monomer: Sugar, scale?: number) {\n    super(\n      monomer,\n      SUGAR_SELECTED_ELEMENT_ID,\n      SUGAR_SELECTED_ELEMENT_ID,\n      SUGAR_SYMBOL_ELEMENT_ID,\n      scale,\n    );\n  }\n\n  public get textColor() {\n    return '#fff';\n  }\n\n  protected getMonomerColor(theme) {\n    return theme.monomer.color[RNA_DNA_NON_MODIFIED_PART.SUGAR_RNA].regular;\n  }\n\n  protected appendBody(\n    rootElement: Selection<SVGGElement, void, HTMLElement, never>,\n    theme,\n  ) {\n    return rootElement\n      .append('use')\n      .data([this])\n      .attr('href', SUGAR_SYMBOL_ELEMENT_ID)\n      .attr('fill', this.getMonomerColor(theme));\n  }\n\n  show(theme) {\n    super.show(theme);\n    this.appendChainBeginning();\n  }\n\n  public get enumerationElementPosition() {\n    return undefined;\n  }\n\n  public get beginningElementPosition() {\n    return { x: -5, y: 7 };\n  }\n}\n","import { Selection } from 'd3';\nimport { RNABase } from 'domain/entities/RNABase';\nimport { BaseMonomerRenderer } from 'application/render/renderers/BaseMonomerRenderer';\nimport { MONOMER_SYMBOLS_IDS } from 'application/render/renderers/constants';\nimport { KetMonomerClass } from 'application/formatters';\n\nconst RNABASE_SELECTED_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.Base].selected;\nconst RNABASE_SYMBOL_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.Base].body;\n\nexport class RNABaseRenderer extends BaseMonomerRenderer {\n  constructor(public monomer: RNABase, scale?: number) {\n    super(\n      monomer,\n      RNABASE_SELECTED_ELEMENT_ID,\n      RNABASE_SELECTED_ELEMENT_ID,\n      RNABASE_SYMBOL_ELEMENT_ID,\n      scale,\n    );\n  }\n\n  protected appendBody(\n    rootElement: Selection<SVGGElement, void, HTMLElement, never>,\n    theme,\n  ) {\n    return rootElement\n      .append('use')\n      .data([this])\n      .attr('href', RNABASE_SYMBOL_ELEMENT_ID)\n      .attr('fill', this.getMonomerColor(theme));\n  }\n\n  show(theme) {\n    super.show(theme);\n    this.appendEnumeration();\n  }\n\n  public get enumerationElementPosition() {\n    return { x: 11, y: 5 };\n  }\n\n  public get beginningElementPosition() {\n    return undefined;\n  }\n}\n","import { BaseMonomerRenderer } from 'application/render/renderers/BaseMonomerRenderer';\nimport { UnresolvedMonomer } from 'domain/entities';\nimport { Selection } from 'd3';\n\nconst UNRESOLVED_MONOMER_SELECTED_ELEMENT_ID = '#unresolved-monomer-selection';\nconst UNRESOLVED_MONOMER_HOVERED_ELEMENT_ID = '#unresolved-monomer-hover';\nconst UNRESOLVED_MONOMER_SYMBOL_ELEMENT_ID = '#unresolved-monomer';\n\nexport class UnresolvedMonomerRenderer extends BaseMonomerRenderer {\n  constructor(public monomer: UnresolvedMonomer, scale?: number) {\n    super(\n      monomer,\n      UNRESOLVED_MONOMER_SELECTED_ELEMENT_ID,\n      UNRESOLVED_MONOMER_HOVERED_ELEMENT_ID,\n      UNRESOLVED_MONOMER_SYMBOL_ELEMENT_ID,\n      scale,\n    );\n  }\n\n  public get textColor() {\n    return 'white';\n  }\n\n  protected appendBody(\n    rootElement: Selection<SVGGElement, void, HTMLElement, never>,\n  ) {\n    return rootElement\n      .append('use')\n      .data([this])\n      .attr('href', UNRESOLVED_MONOMER_SYMBOL_ELEMENT_ID);\n  }\n\n  show(theme) {\n    super.show(theme);\n  }\n\n  public get enumerationElementPosition() {\n    return undefined;\n  }\n\n  public get beginningElementPosition() {\n    return undefined;\n  }\n}\n","import { Selection } from 'd3';\nimport { BaseMonomerRenderer } from 'application/render/renderers/BaseMonomerRenderer';\nimport { UnsplitNucleotide } from 'domain/entities';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { MONOMER_SYMBOLS_IDS } from 'application/render/renderers/constants';\nimport { KetMonomerClass } from 'application/formatters';\n\nconst NUCLEOTIDE_SELECTED_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.RNA].selected;\nconst NUCLEOTIDE_HOVERED_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.RNA].hover;\nconst NUCLEOTIDE_SYMBOL_ELEMENT_ID =\n  MONOMER_SYMBOLS_IDS[KetMonomerClass.RNA].body;\n\nexport class UnsplitNucleotideRenderer extends BaseMonomerRenderer {\n  constructor(public monomer: UnsplitNucleotide, scale?: number) {\n    super(\n      monomer,\n      NUCLEOTIDE_SELECTED_ELEMENT_ID,\n      NUCLEOTIDE_HOVERED_ELEMENT_ID,\n      NUCLEOTIDE_SYMBOL_ELEMENT_ID,\n      scale,\n    );\n  }\n\n  protected appendBody(\n    rootElement: Selection<SVGGElement, void, HTMLElement, never>,\n    theme,\n  ) {\n    return rootElement\n      .append('use')\n      .data([this])\n      .attr('href', NUCLEOTIDE_SYMBOL_ELEMENT_ID)\n      .attr('fill', this.getMonomerColor(theme));\n  }\n\n  show(theme) {\n    super.show(theme);\n    this.appendEnumeration();\n  }\n\n  protected appendLabel(rootElement: D3SvgElementSelection<SVGGElement, void>) {\n    const fontSize = 6;\n    const Y_OFFSET_FROM_MIDDLE = -2;\n\n    rootElement\n      .append('foreignObject')\n      .attr('width', this.width)\n      .attr('height', this.height - this.height / 3)\n      .html(\n        `\n        <div style=\"\n            padding: 0 4px;\n            text-align: center;\n            color: ${this.textColor};\n            display: flex;\n            height: 100%;\n            align-items: center;\n            justify-content: center;\n        \">\n          ${this.monomer.label}\n        </div>\n      `,\n      )\n      .attr('font-size', `${fontSize}px`)\n      .attr('line-height', `${fontSize}px`)\n      .attr('font-weight', '700')\n      .style('cursor', 'pointer')\n      .style('user-select', 'none')\n      .attr('pointer-events', 'none')\n      .attr('x', '4px')\n      .attr('y', this.height / 2 + Y_OFFSET_FROM_MIDDLE);\n  }\n\n  public get enumerationElementPosition() {\n    return { x: 7, y: 7 };\n  }\n\n  public get beginningElementPosition() {\n    return undefined;\n  }\n}\n","import { BaseMonomer } from './BaseMonomer';\nimport { ChemSubChain } from 'domain/entities/monomer-chains/ChemSubChain';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { Struct } from 'domain/entities/struct';\nimport { monomerFactory } from 'application/editor/operations/monomer/monomerFactory';\nimport {\n  KetAmbiguousMonomerTemplateSubType,\n  KetMonomerClass,\n} from 'application/formatters';\nimport { MONOMER_CLASS_TO_CONSTRUCTOR } from 'domain/constants/monomers';\nimport { IVariantMonomer } from 'domain/entities/types';\nimport { AmbiguousMonomerType, AttachmentPointName } from 'domain/types';\n\nexport const DEFAULT_VARIANT_MONOMER_LABEL = '%';\n\nexport class AmbiguousMonomer extends BaseMonomer implements IVariantMonomer {\n  public monomers: BaseMonomer[];\n  public monomerClass: KetMonomerClass;\n  constructor(\n    public variantMonomerItem: AmbiguousMonomerType,\n    position?: Vec2,\n    generateId = true,\n  ) {\n    const variantMonomerLabel =\n      variantMonomerItem.subtype ===\n        KetAmbiguousMonomerTemplateSubType.MIXTURE ||\n      variantMonomerItem.label?.length > 1\n        ? DEFAULT_VARIANT_MONOMER_LABEL\n        : variantMonomerItem.label;\n\n    super(\n      {\n        label: variantMonomerLabel,\n        props: {\n          MonomerNaturalAnalogCode: '',\n          MonomerName: variantMonomerLabel,\n          Name: variantMonomerLabel,\n        },\n        attachmentPoints: AmbiguousMonomer.getAttachmentPoints(\n          variantMonomerItem.monomers,\n        ),\n        struct: new Struct(),\n        isAmbiguous: true,\n      },\n      position,\n      { generateId },\n    );\n    this.monomers = variantMonomerItem.monomers;\n    this.monomerClass = AmbiguousMonomer.getMonomerClass(\n      variantMonomerItem.monomers,\n    );\n  }\n\n  public static getMonomerClass(monomers: BaseMonomer[]) {\n    const [, , monomerClass] = monomerFactory(monomers[0].monomerItem);\n\n    const containDifferentMonomerTypes = monomers.some((monomer) => {\n      const [, , MonomerClassToCompare] = monomerFactory(monomer.monomerItem);\n\n      return monomerClass !== MonomerClassToCompare;\n    });\n\n    if (containDifferentMonomerTypes) {\n      return KetMonomerClass.CHEM;\n    }\n\n    return monomerClass;\n  }\n\n  private static getAttachmentPoints(monomers: BaseMonomer[]) {\n    const monomersAttachmentPoints = monomers.map(\n      (monomer) => monomer.listOfAttachmentPoints,\n    );\n    const possibleAttachmentPoints = monomersAttachmentPoints.flat();\n    const attachmentPoints = possibleAttachmentPoints.filter(\n      (attachmentPointName) => {\n        return monomersAttachmentPoints.every((monomerAttachmentPoints) =>\n          monomerAttachmentPoints.includes(attachmentPointName),\n        );\n      },\n    );\n\n    return attachmentPoints.map((attachmentPointName) => {\n      return {\n        label: attachmentPointName,\n        leavingGroup: {\n          atoms: [],\n        },\n        attachmentAtom: -1,\n      };\n    });\n  }\n\n  public get monomerCaps() {\n    let monomerCaps: Partial<Record<AttachmentPointName, string>> | undefined;\n\n    this.monomers.forEach((monomer) => {\n      if (monomer.monomerItem.props.MonomerCaps) {\n        if (!monomerCaps) {\n          monomerCaps = { ...monomer.monomerItem.props.MonomerCaps };\n        } else {\n          for (const [attachmentPointName, label] of Object.entries(\n            monomer.monomerItem.props.MonomerCaps,\n          )) {\n            if (!monomerCaps[attachmentPointName]) {\n              delete monomerCaps[attachmentPointName];\n            } else if (monomerCaps[attachmentPointName] !== label) {\n              monomerCaps[attachmentPointName] = '';\n            }\n          }\n        }\n      }\n    });\n\n    return monomerCaps;\n  }\n\n  public getValidSourcePoint(_secondMonomer?: BaseMonomer) {\n    return MONOMER_CLASS_TO_CONSTRUCTOR[\n      this.monomerClass\n    ].prototype.getValidSourcePoint.call(this, _secondMonomer);\n  }\n\n  public getValidTargetPoint(_firstMonomer: BaseMonomer) {\n    return MONOMER_CLASS_TO_CONSTRUCTOR[\n      this.monomerClass\n    ].prototype.getValidTargetPoint.call(this, _firstMonomer);\n  }\n\n  public get SubChainConstructor() {\n    return ChemSubChain;\n  }\n\n  public isMonomerTypeDifferentForChaining(monomerToChain: SubChainNode) {\n    return ![ChemSubChain].includes(monomerToChain.SubChainConstructor);\n  }\n}\n","import { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\n\nexport class EmptySubChain extends BaseSubChain {}\n","import { BaseMonomer } from './BaseMonomer';\nimport { EmptySubChain } from 'domain/entities/monomer-chains/EmptySubChain';\nimport { Struct } from 'domain/entities/struct';\n\nfunction getEmptyMonomerItem() {\n  return {\n    label: '',\n    struct: new Struct(),\n    props: {\n      MonomerNaturalAnalogCode: '',\n      MonomerName: '',\n      Name: '',\n    },\n  };\n}\n\nexport class EmptyMonomer extends BaseMonomer {\n  constructor() {\n    super(getEmptyMonomerItem(), undefined, { generateId: false });\n  }\n\n  public getValidSourcePoint() {\n    return undefined;\n  }\n\n  public getValidTargetPoint() {\n    return undefined;\n  }\n\n  public get SubChainConstructor() {\n    return EmptySubChain;\n  }\n\n  public isMonomerTypeDifferentForChaining() {\n    return true;\n  }\n}\n","import { AttachmentPoint } from './AttachmentPoint';\nimport { Coordinates } from 'domain/helpers/attachmentPointCalculations';\nimport { PreviewAttachmentPointConstructorParams } from 'domain/types';\nimport { UsageInMacromolecule } from 'application/render';\nimport util from 'application/render/util';\nimport { Vec2 } from 'domain/entities';\n\nexport class PreviewAttachmentPoint extends AttachmentPoint {\n  private connected: boolean;\n  private selected: boolean;\n  private usage: UsageInMacromolecule;\n\n  constructor(constructorParams: PreviewAttachmentPointConstructorParams) {\n    super(constructorParams, true);\n\n    this.connected = constructorParams.connected;\n    this.selected = constructorParams.selected;\n    this.usage = constructorParams.usage;\n\n    this.appendAttachmentPoint();\n  }\n\n  protected renderAttachmentPointByCoordinates(\n    attachmentOnBorder: Coordinates,\n    attachmentPointCoordinates: Coordinates,\n  ) {\n    this.attachmentPoint = this.rootElement\n      .insert('g', ':first-child')\n      .data([this])\n      .style('pointer-events', 'none')\n      .style('cursor', 'pointer')\n      .attr('class', 'dynamic-element');\n\n    const attachmentPointElement = this.attachmentPoint.append('g');\n\n    attachmentPointElement\n      .append('line')\n      .attr('x1', attachmentOnBorder.x)\n      .attr('y1', attachmentOnBorder.y)\n      .attr('x2', attachmentPointCoordinates.x)\n      .attr('y2', attachmentPointCoordinates.y)\n      .attr('stroke', this.stroke)\n      .attr('stroke-linecap', 'round')\n      .attr('stroke-width', '1px');\n\n    const { color, stroke, fill } = util.useLabelStyles(\n      this.selected,\n      this.connected,\n      this.usage,\n    );\n\n    const labelGroup = this.attachmentPoint?.append('g');\n\n    const angleInRadians = Vec2.degrees_to_radians(this.initialAngle);\n    const cos = Math.cos(angleInRadians);\n    const sin = Math.sin(angleInRadians);\n\n    const centerX = attachmentPointCoordinates.x - 10;\n    const centerY = attachmentPointCoordinates.y - 8;\n    const rectX = centerX - 10 * cos;\n    const rectY = centerY - 10 * sin;\n    const labelX = attachmentPointCoordinates.x - 10 * cos;\n    const labelY = attachmentPointCoordinates.y - 10 * sin;\n\n    labelGroup\n      .append('rect')\n      .attr('x', rectX)\n      .attr('y', rectY)\n      .attr('rx', 4)\n      .attr('ry', 4)\n      .attr('width', 20)\n      .attr('height', 16)\n      .attr('fill', fill)\n      .attr('stroke', stroke)\n      .attr('stroke-width', '1px');\n\n    labelGroup\n      .append('text')\n      .attr('x', labelX)\n      .attr('y', labelY)\n      .attr('fill', color)\n      .attr('font-size', '10px')\n      .attr('text-anchor', 'middle')\n      .attr('alignment-baseline', 'middle')\n      .text(this.attachmentPointName);\n\n    return this.attachmentPoint;\n  }\n\n  public appendAttachmentPoint() {\n    const [attachmentToBorderCoordinates, attachmentPointCoordinates] =\n      this.getCoordinates(this.initialAngle);\n\n    const attachmentPoint = this.renderAttachmentPointByCoordinates(\n      attachmentToBorderCoordinates,\n      attachmentPointCoordinates,\n    );\n\n    this.element = attachmentPoint;\n\n    return attachmentPoint;\n  }\n}\n","import { Selection } from 'd3';\nimport { BaseMonomerRenderer } from 'application/render/renderers';\nimport { AmbiguousMonomer } from 'domain/entities/AmbiguousMonomer';\nimport { MONOMER_SYMBOLS_IDS } from 'application/render/renderers/constants';\nimport { monomerFactory } from 'application/editor';\nimport { EmptyMonomer } from 'domain/entities/EmptyMonomer';\nimport { AttachmentPointName } from 'domain/types';\nimport { PreviewAttachmentPoint } from 'domain/PreviewAttachmentPoint';\nimport { UsageInMacromolecule } from 'application/render';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { KetMonomerClass } from 'application/formatters';\n\ntype PreviewAttachmentPointParams = {\n  canvas: D3SvgElementSelection<SVGSVGElement, void>;\n  usage: UsageInMacromolecule;\n  selectedAttachmentPoint: string | null | undefined;\n  connectedAttachmentPoints: string[] | undefined;\n};\n\nexport class AmbiguousMonomerRenderer extends BaseMonomerRenderer {\n  private monomerRenderer: BaseMonomerRenderer;\n  private monomerSymbolElementsIds: {\n    selected: string;\n    hover: string;\n    body: string;\n    variant?: string;\n  };\n\n  constructor(public monomer: AmbiguousMonomer, scale?: number) {\n    const monomerClass = AmbiguousMonomer.getMonomerClass(monomer.monomers);\n    const monomerSymbolElementsIds = MONOMER_SYMBOLS_IDS[monomerClass];\n\n    super(\n      monomer,\n      monomerSymbolElementsIds.selected,\n      monomerSymbolElementsIds.hover,\n      monomerSymbolElementsIds.body,\n      scale,\n    );\n\n    const [, MonomerRenderer] = monomerFactory(\n      this.monomer.monomers[0].monomerItem,\n    );\n\n    this.monomerRenderer = new MonomerRenderer(new EmptyMonomer());\n    this.monomerSymbolElementsIds = monomerSymbolElementsIds;\n    this.CHAIN_BEGINNING = this.monomerRenderer.CHAIN_BEGINNING;\n  }\n\n  protected appendBody(\n    rootElement: Selection<SVGGElement, void, HTMLElement, never>,\n  ) {\n    return rootElement\n      .append('use')\n      .data([this])\n      .attr(\n        'href',\n        this.monomerSymbolElementsIds.variant ||\n          this.monomerSymbolElementsIds.body,\n      )\n      .attr('fill', '#fff')\n      .attr('stroke', '#585858')\n      .attr('stroke-width', '1px')\n      .attr('paint-order', 'fill');\n  }\n\n  public get enumerationElementPosition() {\n    return this.monomerRenderer.enumerationElementPosition;\n  }\n\n  public get beginningElementPosition() {\n    return this.monomerRenderer.beginningElementPosition;\n  }\n\n  private appendNumberOfMonomers() {\n    const isMonomersAmountTenOrMore = this.monomer.monomers.length >= 10;\n    const numberOfMonomersElement = this.rootElement\n      ?.append('g')\n      .attr(\n        'transform',\n        `translate(${\n          this.center.x -\n          this.scaledMonomerPosition.x -\n          (isMonomersAmountTenOrMore ? 2 : 0)\n        }, ${\n          this.center.y -\n          this.scaledMonomerPosition.y +\n          (this.monomer.monomerClass === KetMonomerClass.Base ? 7 : 8)\n        })`,\n      )\n      .attr('pointer-events', 'none');\n\n    numberOfMonomersElement\n      ?.append('foreignObject')\n      .attr('width', '20px')\n      .attr('height', '20px')\n      .attr('x', isMonomersAmountTenOrMore ? '-3' : '-4')\n      .attr('y', '-4')\n      .append('xhtml:div')\n      .attr(\n        'style',\n        `\n        width: ${isMonomersAmountTenOrMore ? '10px' : '8px'};\n        height: 8px;\n        border-radius: ${isMonomersAmountTenOrMore ? '20px' : '50%'};\n        border: 0.5px solid #cceaee;\n      `,\n      );\n\n    numberOfMonomersElement\n      ?.append('text')\n      .attr('x', -1.6)\n      .attr('y', 2.1)\n      .attr('font-size', '6px')\n      .attr('font-weight', 300)\n      .text(this.monomer.monomers.length);\n  }\n\n  public show(theme) {\n    super.show(theme);\n    this.appendNumberOfMonomers();\n    if (this.enumerationElementPosition) {\n      this.appendEnumeration();\n    }\n    if (this.CHAIN_BEGINNING) {\n      this.appendChainBeginning();\n    }\n  }\n\n  private appendPreviewAttachmentPoint(\n    params: PreviewAttachmentPointParams,\n    attachmentPointName: AttachmentPointName,\n    customAngle?: number,\n  ) {\n    const { selectedAttachmentPoint, connectedAttachmentPoints, usage } =\n      params;\n    const attachmentPointParams = this.prepareAttachmentPointsParams(\n      attachmentPointName,\n      customAngle,\n    );\n\n    return new PreviewAttachmentPoint({\n      ...attachmentPointParams,\n      connected:\n        connectedAttachmentPoints?.includes(attachmentPointName) ?? false,\n      selected: selectedAttachmentPoint === attachmentPointName,\n      usage,\n      canvas: params.canvas,\n      applyZoomForPositionCalculation: false,\n    });\n  }\n\n  public showExternal(params: PreviewAttachmentPointParams) {\n    this.rootElement = this.appendRootElement(params.canvas);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.bodyElement = this.appendBody(this.rootElement);\n    this.appendLabel(this.rootElement);\n    this.appendNumberOfMonomers();\n    this.drawAttachmentPoints(\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this.appendPreviewAttachmentPoint.bind(this, params),\n    );\n  }\n}\n","import { AmbiguousMonomer } from 'domain/entities/AmbiguousMonomer';\n\nexport class AmbiguousMonomerSequenceNode {\n  constructor(public monomer: AmbiguousMonomer) {}\n\n  public get SubChainConstructor() {\n    return this.monomer.SubChainConstructor;\n  }\n\n  public get firstMonomerInNode() {\n    return this.monomer;\n  }\n\n  public get lastMonomerInNode() {\n    return this.monomer;\n  }\n\n  public get monomers() {\n    return [this.monomer];\n  }\n\n  public get renderer() {\n    return this.monomer.renderer;\n  }\n\n  public get modified() {\n    return this.monomer.isModification;\n  }\n}\n","import { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\nimport {\n  BaseMonomer,\n  Peptide,\n  Phosphate,\n  SubChainNode,\n  Sugar,\n  UnresolvedMonomer,\n  UnsplitNucleotide,\n  Nucleoside,\n  Nucleotide,\n  MonomerSequenceNode,\n  EmptySequenceNode,\n  LinkerSequenceNode,\n  AmbiguousMonomer,\n} from 'domain/entities';\nimport {\n  getNextMonomerInChain,\n  isValidNucleoside,\n  isValidNucleotide,\n} from 'domain/helpers/monomers';\nimport { EmptySubChain } from 'domain/entities/monomer-chains/EmptySubChain';\nimport { AmbiguousMonomerSequenceNode } from 'domain/entities/AmbiguousMonomerSequenceNode';\n\nexport class Chain {\n  public subChains: BaseSubChain[] = [];\n\n  public firstMonomer?: BaseMonomer;\n\n  public isCyclic = false;\n\n  constructor(firstMonomer?: BaseMonomer, isCyclic?: boolean) {\n    if (firstMonomer) {\n      this.firstMonomer = firstMonomer;\n\n      this.fillSubChains(firstMonomer);\n    }\n\n    if (isCyclic) {\n      this.isCyclic = isCyclic;\n    }\n  }\n\n  private createSubChainIfNeed(monomer) {\n    const needCreateNewSubchain =\n      !this.lastNode?.monomer ||\n      monomer.isMonomerTypeDifferentForChaining(this.lastNode.monomer);\n\n    if (needCreateNewSubchain) {\n      this.subChains.push(new monomer.SubChainConstructor());\n    }\n  }\n\n  public add(monomer: BaseMonomer) {\n    this.createSubChainIfNeed(monomer);\n\n    if (\n      monomer instanceof Peptide ||\n      monomer instanceof UnsplitNucleotide ||\n      monomer instanceof UnresolvedMonomer\n    ) {\n      this.lastSubChain.add(new MonomerSequenceNode(monomer));\n      return;\n    }\n\n    if (monomer instanceof AmbiguousMonomer) {\n      this.lastSubChain.add(new AmbiguousMonomerSequenceNode(monomer));\n      return;\n    }\n\n    if (monomer instanceof Sugar) {\n      if (isValidNucleoside(monomer, this.firstMonomer)) {\n        this.lastSubChain.add(Nucleoside.fromSugar(monomer, false));\n        return;\n      }\n      if (isValidNucleotide(monomer, this.firstMonomer)) {\n        this.lastSubChain.add(Nucleotide.fromSugar(monomer, false));\n        return;\n      }\n    }\n\n    const nextMonomer = getNextMonomerInChain(monomer);\n    const isNextMonomerNucleosideOrNucleotideOrPeptide = () => {\n      const isNucleosideOrNucleotide =\n        nextMonomer instanceof Sugar &&\n        (isValidNucleotide(nextMonomer) || isValidNucleoside(nextMonomer));\n      return isNucleosideOrNucleotide || nextMonomer instanceof Peptide;\n    };\n    if (\n      monomer instanceof Phosphate &&\n      (!this.lastNode || this.lastNode instanceof Nucleoside) &&\n      (!nextMonomer || isNextMonomerNucleosideOrNucleotideOrPeptide())\n    ) {\n      this.lastSubChain.add(new MonomerSequenceNode(monomer));\n      return;\n    }\n    this.lastSubChain.add(new LinkerSequenceNode(monomer));\n  }\n\n  public addNode(node: SubChainNode) {\n    this.createSubChainIfNeed(node.monomer);\n\n    this.lastSubChain.add(node);\n\n    return this;\n  }\n\n  private fillSubChains(monomer?: BaseMonomer) {\n    if (!monomer) return;\n\n    this.add(monomer);\n\n    this.fillSubChains(\n      getNextMonomerInChain(\n        this.lastNode?.lastMonomerInNode,\n        this.firstMonomer,\n      ),\n    );\n  }\n\n  public get lastSubChain() {\n    return this.subChains[this.subChains.length - 1];\n  }\n\n  public get nodes() {\n    const nodes: SubChainNode[] = [];\n    this.subChains.forEach((subChain) => {\n      nodes.push(...subChain.nodes);\n    });\n\n    return nodes;\n  }\n\n  public get lastNode():\n    | EmptySequenceNode\n    | MonomerSequenceNode\n    | Nucleoside\n    | Nucleotide\n    | undefined {\n    return this.lastSubChain?.lastNode;\n  }\n\n  public get lastNonEmptyNode() {\n    if (this.lastNode instanceof EmptySequenceNode) {\n      const nodes = this.nodes;\n\n      return nodes[nodes.length - 2];\n    } else {\n      return this.lastNode;\n    }\n  }\n\n  public get firstSubChain() {\n    return this.subChains[0];\n  }\n\n  public get firstNode() {\n    return this.firstSubChain?.firstNode;\n  }\n\n  public get length() {\n    let length = 0;\n    this.subChains.forEach((subChain) => {\n      length += subChain.length;\n    });\n\n    return length;\n  }\n\n  public get isEmpty() {\n    return (\n      this.subChains.length === 1 &&\n      this.subChains[0].nodes.length === 1 &&\n      this.subChains[0].nodes[0] instanceof EmptySequenceNode\n    );\n  }\n\n  public forEachNode(\n    callback: ({\n      node,\n      subChain,\n    }: {\n      node: SubChainNode;\n      subChain: BaseSubChain;\n    }) => void,\n  ) {\n    this.subChains.forEach((subChain) => {\n      subChain.nodes.forEach((node) => {\n        callback({ node, subChain });\n      });\n    });\n  }\n\n  public static createChainWithEmptyNode() {\n    const emptyChain = new Chain();\n    const emptySequenceNode = new EmptySequenceNode();\n    const emptySubChain = new EmptySubChain();\n\n    emptySubChain.add(emptySequenceNode);\n    emptyChain.subChains.push(emptySubChain);\n\n    return { emptyChain, emptySubChain, emptySequenceNode };\n  }\n\n  public get isNewSequenceChain() {\n    return this.length === 1 && this.firstNode instanceof EmptySequenceNode;\n  }\n}\n","import { Chain } from 'domain/entities/monomer-chains/Chain';\nimport {\n  AmbiguousMonomer,\n  BaseMonomer,\n  Chem,\n  IsChainCycled,\n  Peptide,\n  Phosphate,\n  RNABase,\n  SubChainNode,\n  Sugar,\n  UnresolvedMonomer,\n  UnsplitNucleotide,\n} from 'domain/entities';\nimport {\n  getNextMonomerInChain,\n  getRnaBaseFromSugar,\n  isMonomerConnectedToR2RnaBase,\n  isRnaBaseOrAmbiguousRnaBase,\n} from 'domain/helpers/monomers';\nimport { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\nimport { isMonomerSgroupWithAttachmentPoints } from '../../../utilities/monomers';\n\nexport class ChainsCollection {\n  public chains: Chain[] = [];\n\n  private get monomerToChain() {\n    const monomerToChain = new Map<BaseMonomer, Chain>();\n\n    this.chains.forEach((chain) => {\n      chain.forEachNode(({ node }) => {\n        node.monomers.forEach((monomer) => {\n          monomerToChain.set(monomer, chain);\n        });\n      });\n    });\n\n    return monomerToChain;\n  }\n\n  public get monomerToNode() {\n    const monomerToNode = new Map<BaseMonomer, SubChainNode>();\n\n    this.forEachNode(({ node }) => {\n      node.monomers.forEach((monomer) => {\n        monomerToNode.set(monomer, node);\n      });\n    });\n\n    return monomerToNode;\n  }\n\n  public rearrange() {\n    this.chains.sort((chain1, chain2) => {\n      // The factor is used to reduce the influence of the X coordinate on the sorting\n      // to make the sorting more oriented to Y coordinate\n      const X_COORDINATE_REDUCTION_FACTOR = 0.01;\n      if (\n        chain2.firstNode?.monomer.position.x * X_COORDINATE_REDUCTION_FACTOR +\n          chain2.firstNode?.monomer.position.y >\n        chain1.firstNode?.monomer.position.x * X_COORDINATE_REDUCTION_FACTOR +\n          chain1.firstNode?.monomer.position.y\n      ) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n\n    const reorderedChains = new Set<Chain>();\n    const monomerToChain = this.monomerToChain;\n    this.chains.forEach((chain) => {\n      reorderedChains.add(chain);\n\n      chain.forEachNode(({ node }) => {\n        node.monomers.forEach((monomer) => {\n          const sideConnections = monomer.sideConnections;\n          if (sideConnections.length) {\n            sideConnections.forEach((sideConnection) => {\n              const anotherMonomer = sideConnection.getAnotherMonomer(monomer);\n              const anotherChain =\n                anotherMonomer && monomerToChain.get(anotherMonomer);\n              if (anotherChain && !reorderedChains.has(anotherChain)) {\n                reorderedChains.add(anotherChain);\n              }\n            });\n          }\n        });\n      });\n    });\n    this.chains = [...reorderedChains.values()];\n  }\n\n  public add(chain: Chain) {\n    this.chains.push(chain);\n\n    return this;\n  }\n\n  public static fromMonomers(monomers: BaseMonomer[]) {\n    const chainsCollection = new ChainsCollection();\n    const filteredMonomers = monomers.filter(\n      (monomer) =>\n        !monomer.monomerItem.props.isMicromoleculeFragment ||\n        isMonomerSgroupWithAttachmentPoints(monomer),\n    );\n    const [firstMonomersInRegularChains, firstMonomersInCycledChains] =\n      this.getFirstMonomersInChains(filteredMonomers);\n\n    firstMonomersInRegularChains.forEach((monomer) => {\n      chainsCollection.add(new Chain(monomer));\n    });\n\n    firstMonomersInCycledChains.forEach((monomer) => {\n      chainsCollection.add(new Chain(monomer, !!IsChainCycled.CYCLED));\n    });\n\n    return chainsCollection;\n  }\n\n  public static getFirstMonomersInChains(\n    monomers: BaseMonomer[],\n    MonomerTypes: Array<\n      | typeof Peptide\n      | typeof Chem\n      | typeof Phosphate\n      | typeof Sugar\n      | typeof RNABase\n      | typeof UnresolvedMonomer\n      | typeof UnsplitNucleotide\n      | typeof AmbiguousMonomer\n    > = [\n      Peptide,\n      Chem,\n      Phosphate,\n      Sugar,\n      RNABase,\n      UnresolvedMonomer,\n      UnsplitNucleotide,\n      AmbiguousMonomer,\n    ],\n  ) {\n    const monomersList = monomers.filter((monomer) =>\n      MonomerTypes.some((MonomerType) => monomer instanceof MonomerType),\n    );\n\n    const firstMonomersInChains: BaseMonomer[][] = [];\n\n    const firstMonomersInRegularChains =\n      this.getFirstMonomersInRegularChains(monomersList);\n\n    const firstMonomersInCycledChains =\n      this.getFirstMonomersInCycledChains(monomersList);\n\n    firstMonomersInChains.push(\n      firstMonomersInRegularChains,\n      firstMonomersInCycledChains,\n    );\n\n    return firstMonomersInChains;\n  }\n\n  public get firstNode() {\n    return this.chains[0]?.subChains[0]?.nodes[0];\n  }\n\n  private static getFirstMonomersInRegularChains(\n    monomersList: BaseMonomer[],\n  ): BaseMonomer[] {\n    const firstMonomersInRegularChains = monomersList.filter((monomer) => {\n      const R1PolymerBond = monomer.attachmentPointsToBonds.R1;\n\n      if (R1PolymerBond instanceof MonomerToAtomBond) {\n        return true;\n      }\n\n      const isFirstMonomerWithR2R1connection =\n        !R1PolymerBond || R1PolymerBond.isSideChainConnection;\n\n      const R1ConnectedMonomer = R1PolymerBond?.getAnotherMonomer(monomer);\n      const isRnaBaseConnectedToSugar =\n        isRnaBaseOrAmbiguousRnaBase(monomer) &&\n        R1ConnectedMonomer instanceof Sugar &&\n        getRnaBaseFromSugar(R1ConnectedMonomer) === monomer;\n\n      return (\n        (isFirstMonomerWithR2R1connection ||\n          isMonomerConnectedToR2RnaBase(monomer)) &&\n        !isRnaBaseConnectedToSugar\n      );\n    });\n\n    return firstMonomersInRegularChains;\n  }\n\n  private static getFirstMonomersInCycledChains(\n    monomersList: BaseMonomer[],\n  ): BaseMonomer[] {\n    const handledMonomers = new Set<BaseMonomer>();\n    const cyclicChains: BaseMonomer[][] = [];\n\n    monomersList.forEach((monomer) => {\n      if (handledMonomers.has(monomer)) {\n        return;\n      }\n\n      const monomersInSameChain = new Set<BaseMonomer>();\n      monomersInSameChain.add(monomer);\n      handledMonomers.add(monomer);\n      let nextMonomerInChain = getNextMonomerInChain(monomer);\n\n      while (nextMonomerInChain && !handledMonomers.has(nextMonomerInChain)) {\n        monomersInSameChain.add(nextMonomerInChain);\n        handledMonomers.add(nextMonomerInChain);\n        nextMonomerInChain = getNextMonomerInChain(nextMonomerInChain);\n      }\n\n      if (monomer === nextMonomerInChain) {\n        cyclicChains.push(Array.from(monomersInSameChain));\n      }\n    });\n\n    const firstMonomersOfCycledChainsSet = cyclicChains.map((cyclicChain) =>\n      this.getMonomerWithLowerCoordsFromMonomerList(cyclicChain),\n    );\n\n    return firstMonomersOfCycledChainsSet;\n  }\n\n  private static getMonomerWithLowerCoordsFromMonomerList(\n    monomerList: BaseMonomer[],\n  ): BaseMonomer {\n    const monomerListShallowCopy = monomerList.slice();\n\n    monomerListShallowCopy.sort((monomer1, monomer2) => {\n      if (\n        monomer2.position.x + monomer2.position.y >\n        monomer1.position.x + monomer1.position.y\n      ) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n\n    const monomerWithLowerCoords = monomerListShallowCopy[0];\n\n    return monomerWithLowerCoords;\n  }\n\n  public get lastNode() {\n    return this.chains[0].lastSubChain.lastNode;\n  }\n\n  public get length() {\n    return this.chains.reduce((length, chain) => length + chain.length, 0);\n  }\n\n  public forEachNode(\n    forEachCallback: (params: {\n      chainIndex: number;\n      subChainIndex: number;\n      nodeIndex: number;\n      nodeIndexOverall: number;\n      node: SubChainNode;\n      subChain: BaseSubChain;\n      chain: Chain;\n    }) => void,\n  ) {\n    let nodeIndexOverall = 0;\n\n    this.chains.forEach((chain, chainIndex) => {\n      chain.subChains.forEach((subChain, subChainIndex) => {\n        subChain.nodes.forEach((node, nodeIndex) => {\n          forEachCallback({\n            chainIndex,\n            subChainIndex,\n            nodeIndex,\n            nodeIndexOverall,\n            node,\n            subChain,\n            chain,\n          });\n          nodeIndexOverall++;\n        });\n      });\n    });\n  }\n}\n","import { EmptySubChain } from 'domain/entities/monomer-chains/EmptySubChain';\nimport { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\nimport { EmptyMonomer } from 'domain/entities/EmptyMonomer';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\n\nexport class EmptySequenceNode {\n  public renderer?: BaseSequenceItemRenderer = undefined;\n  public monomer = new EmptyMonomer();\n  constructor() {}\n\n  public get SubChainConstructor() {\n    return EmptySubChain;\n  }\n\n  public get firstMonomerInNode() {\n    return this.monomer;\n  }\n\n  public get lastMonomerInNode() {\n    return this.monomer;\n  }\n\n  public get hovered() {\n    return false;\n  }\n\n  public get selected() {\n    return false;\n  }\n\n  public get monomerItem() {\n    return { props: { MonomerNaturalAnalogCode: null } };\n  }\n\n  public get monomers(): BaseMonomer[] {\n    return [];\n  }\n\n  public setRenderer(renderer) {\n    this.renderer = renderer;\n    this.monomer.setRenderer(renderer);\n  }\n\n  public get modified() {\n    return false;\n  }\n}\n","import { D3SvgElementSelection } from 'application/render/types';\nimport { Vec2 } from 'domain/entities';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { BaseSequenceRenderer } from 'application/render/renderers/sequence/BaseSequenceRenderer';\nimport { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\nimport { CoreEditor } from 'application/editor/internal';\nimport { EmptySequenceNode } from 'domain/entities/EmptySequenceNode';\nimport { editorEvents } from 'application/editor/editorEvents';\nimport assert from 'assert';\nimport { SequenceRenderer } from 'application/render';\n\nconst CHAIN_START_ARROW_SYMBOL_ID = 'sequence-start-arrow';\n\nexport abstract class BaseSequenceItemRenderer extends BaseSequenceRenderer {\n  private editorEvents: typeof editorEvents;\n  public textElement?: D3SvgElementSelection<SVGTextElement, void>;\n  public counterElement?: D3SvgElementSelection<SVGTextElement, void>;\n  private selectionRectangle?: D3SvgElementSelection<SVGRectElement, void>;\n  public spacerElement?: D3SvgElementSelection<SVGGElement, void>;\n  public backgroundElement?: D3SvgElementSelection<SVGRectElement, void>;\n  public caretElement?: D3SvgElementSelection<SVGLineElement, void>;\n\n  constructor(\n    public node: SubChainNode,\n    private firstNodeInChainPosition: Vec2,\n    private monomerIndexInChain: number,\n    private isLastMonomerInChain: boolean,\n    private subChain: BaseSubChain,\n    private _isEditingSymbol: boolean,\n    public monomerSize: { width: number; height: number },\n    public scaledMonomerPosition: Vec2,\n  ) {\n    super(node.monomer);\n    this.editorEvents = editorEvents;\n  }\n\n  abstract get symbolToDisplay(): string;\n\n  public get isEditingSymbol() {\n    return this._isEditingSymbol;\n  }\n\n  public set isEditingSymbol(isEditingSymbol: boolean) {\n    this._isEditingSymbol = isEditingSymbol;\n  }\n\n  private get isSingleEmptyNode() {\n    return (\n      SequenceRenderer.chainsCollection.length === 1 &&\n      this.node instanceof EmptySequenceNode\n    );\n  }\n\n  protected abstract drawModification(): void;\n\n  protected appendHover(): D3SvgElementSelection<SVGUseElement, void> | void {\n    return undefined;\n  }\n\n  protected appendHoverAreaElement(): void {}\n  moveSelection(): void {}\n\n  public get currentSubChain() {\n    return this.subChain;\n  }\n\n  public get scaledMonomerPositionForSequence() {\n    const indexInRow = this.monomerIndexInChain % this.symbolsInRow;\n    const rowIndex = Math.floor(this.monomerIndexInChain / this.symbolsInRow);\n\n    return new Vec2(\n      this.firstNodeInChainPosition.x +\n        indexInRow * 20 +\n        Math.floor(indexInRow / this.nthSeparationInRow) * 10,\n      this.firstNodeInChainPosition.y + 47 * rowIndex,\n    );\n  }\n\n  public get center() {\n    return this.scaledMonomerPositionForSequence.add(new Vec2(4.5, 0, 0));\n  }\n\n  protected get isSequenceEditModeTurnedOn() {\n    return CoreEditor.provideEditorInstance().isSequenceEditMode;\n  }\n\n  protected get isSequenceEditInRnaBuilderModeTurnedOn() {\n    return CoreEditor.provideEditorInstance().isSequenceEditInRNABuilderMode;\n  }\n\n  private appendRootElement() {\n    const rootElement = this.canvas\n      .append('g')\n      .data([this])\n      .attr('transition', 'transform 0.2s')\n      .attr(\n        'transform',\n        `translate(${this.scaledMonomerPositionForSequence.x}, ${this.scaledMonomerPositionForSequence.y})`,\n      ) as never as D3SvgElementSelection<SVGGElement, void>;\n\n    if (this.isSequenceEditModeTurnedOn || this.isSingleEmptyNode) {\n      rootElement.attr('pointer-events', 'all').attr('cursor', 'text');\n    }\n\n    return rootElement;\n  }\n\n  private appendBackgroundElement() {\n    const backgroundElement = this.rootElement\n      ?.append('rect')\n      .attr('width', 16)\n      .attr('height', 20)\n      .attr('y', -16)\n      .attr('x', -2)\n      .attr('rx', 2)\n      .attr(\n        'cursor',\n        this.isSequenceEditModeTurnedOn || this.isSingleEmptyNode\n          ? 'text'\n          : 'default',\n      );\n\n    backgroundElement?.attr('fill', 'transparent');\n\n    return backgroundElement;\n  }\n\n  private appendSpacerElement() {\n    const spacerGroupElement = this.rootElement\n      ?.append('g')\n      .attr('transform', 'translate(14, -16)');\n\n    spacerGroupElement\n      ?.append('rect')\n      .attr('width', 4)\n      .attr('height', 20)\n      .attr(\n        'cursor',\n        this.isSequenceEditInRnaBuilderModeTurnedOn ? 'default' : 'text',\n      )\n      .attr('fill', 'transparent');\n\n    return spacerGroupElement;\n  }\n\n  private get nthSeparationInRow() {\n    return 10;\n  }\n\n  private get symbolsInRow() {\n    return 30;\n  }\n\n  private appendCounterElement(\n    rootElement: D3SvgElementSelection<SVGGElement, void>,\n  ) {\n    return rootElement\n      .append('text')\n      .attr('x', '2')\n      .attr('y', '-24')\n      .text(this.monomerIndexInChain + 1)\n      .attr('font-family', 'Courier New')\n      .attr('font-size', '12px')\n      .attr('font-weight', '700')\n      .attr('style', 'user-select: none')\n      .attr('fill', '#7C7C7F');\n  }\n\n  private get needDisplayCounter() {\n    return (\n      ((this.monomerIndexInChain + 1) % this.nthSeparationInRow === 0 ||\n        this.isLastMonomerInChain) &&\n      !(this.node instanceof EmptySequenceNode)\n    );\n  }\n\n  private get isBeginningOfChain() {\n    return this.monomerIndexInChain === 0;\n  }\n\n  public showCaret() {\n    this.caretElement = this.spacerElement\n      ?.append('line')\n      .attr('x1', -17)\n      .attr('y1', -1)\n      .attr('x2', -17)\n      .attr('y2', 21)\n      .attr('stroke', '#333')\n      .attr('class', 'blinking');\n  }\n\n  public removeCaret() {\n    this.caretElement?.remove();\n    this.caretElement = undefined;\n  }\n\n  protected redrawBackgroundElementColor() {\n    this.backgroundElement?.attr(\n      'fill',\n      this.isSequenceEditModeTurnedOn || this.isSingleEmptyNode\n        ? '#FF7A001A'\n        : 'transparent',\n    );\n  }\n\n  private appendChainStartArrow() {\n    this.rootElement\n      ?.append('use')\n      .attr('x', -17)\n      .attr('y', -27)\n      .attr('href', `#${CHAIN_START_ARROW_SYMBOL_ID}`);\n  }\n\n  private drawGreyOverlay() {\n    this.rootElement?.attr('opacity', '0.2');\n  }\n\n  show(): void {\n    this.rootElement = this.appendRootElement();\n    if (\n      (this.isBeginningOfChain && this.isSequenceEditModeTurnedOn) ||\n      this.isSingleEmptyNode\n    ) {\n      this.appendChainStartArrow();\n    }\n    this.spacerElement = this.appendSpacerElement();\n    this.backgroundElement = this.appendBackgroundElement();\n\n    if (\n      (this.isSequenceEditModeTurnedOn && this.isEditingSymbol) ||\n      this.isSingleEmptyNode\n    ) {\n      this.showCaret();\n    }\n\n    this.textElement = this.rootElement\n      .append('text')\n      .text(this.symbolToDisplay)\n      .attr('font-family', 'Courier New')\n      .attr('font-size', '20px')\n      .attr('font-weight', '700')\n      .attr(\n        'fill',\n        this.isSequenceEditInRnaBuilderModeTurnedOn ? '24545A' : '#333333',\n      )\n      .attr('style', 'user-select: none;')\n      .attr(\n        'cursor',\n        this.isSequenceEditModeTurnedOn || this.isSingleEmptyNode\n          ? 'text'\n          : 'default',\n      );\n\n    this.appendEvents();\n    if (this.needDisplayCounter) {\n      this.counterElement = this.appendCounterElement(this.rootElement);\n    }\n\n    this.drawSelection();\n\n    if (\n      this.isSequenceEditInRnaBuilderModeTurnedOn &&\n      !this.node.monomer.selected\n    ) {\n      this.drawGreyOverlay();\n    }\n  }\n\n  drawSelection(): void {\n    if (!this.rootElement) {\n      return;\n    }\n    if (this.node.monomer.selected && !this.isSingleEmptyNode) {\n      this.appendSelection();\n      this.raiseElement();\n    } else {\n      this.removeSelection();\n    }\n\n    if (this.node.modified) {\n      this.drawModification();\n    }\n  }\n\n  public appendSelection() {\n    this.selectionRectangle =\n      this.selectionRectangle ||\n      this.rootElement?.insert('rect', ':first-child');\n\n    if (this.isSequenceEditInRnaBuilderModeTurnedOn) {\n      this.selectionRectangle\n        ?.attr('fill', '#99D6DC')\n        .attr('x', -3)\n        .attr('y', -21)\n        .attr('width', 18)\n        .attr('height', 30)\n        .attr('rx', 3)\n        .attr('class', 'dynamic-element');\n    } else {\n      this.selectionRectangle\n        ?.attr('fill', '#57FF8F')\n        .attr('x', -4)\n        .attr('y', -16)\n        .attr('width', 20)\n        .attr('height', 20)\n        .attr('class', 'dynamic-element');\n    }\n    this.backgroundElement?.attr('fill', 'none');\n  }\n\n  public removeSelection() {\n    this.selectionRectangle?.remove();\n    this.selectionRectangle = undefined;\n  }\n\n  private raiseElement() {\n    this.selectionRectangle?.lower();\n  }\n\n  public remove() {\n    this.rootElement?.remove();\n    this.rootElement = undefined;\n    this.removeSelection();\n  }\n\n  public setEnumeration() {}\n  public redrawEnumeration() {}\n  public redrawAttachmentPoints() {}\n  public redrawAttachmentPointsCoordinates() {}\n  public get enumeration() {\n    return null;\n  }\n\n  public hoverAttachmentPoint(): void {}\n  public updateAttachmentPoints() {}\n\n  private drawBackgroundElementHover() {\n    if (this.isSequenceEditModeTurnedOn || this.isSingleEmptyNode) {\n      return;\n    }\n\n    this.backgroundElement?.attr(\n      'fill',\n      this.node.monomer.selected ? 'none' : '#E1E8E9',\n    );\n\n    if (this.node.modified) {\n      this.drawModification();\n    }\n  }\n\n  private removeBackgroundElementHover() {\n    this.backgroundElement?.attr('fill', 'none');\n\n    if (this.node.modified) {\n      this.drawModification();\n    }\n  }\n\n  private appendEvents() {\n    assert(this.textElement);\n\n    this.textElement.on('mouseover', (event) => {\n      this.drawBackgroundElementHover();\n      this.editorEvents.mouseOverSequenceItem.dispatch(event);\n    });\n    this.textElement.on('mousemove', (event) => {\n      this.editorEvents.mouseOnMoveSequenceItem.dispatch(event);\n    });\n    this.textElement.on('mouseleave', (event) => {\n      this.removeBackgroundElementHover();\n      this.editorEvents.mouseLeaveSequenceItem.dispatch(event);\n    });\n    this.spacerElement?.on('mousedown', (event) => {\n      this.editorEvents.mousedownBetweenSequenceItems.dispatch(event);\n    });\n    this.backgroundElement?.on('click', (event) => {\n      this.editorEvents.clickOnSequenceItem.dispatch(event);\n    });\n    this.backgroundElement?.on('mousedown', (event) => {\n      this.editorEvents.mouseDownOnSequenceItem.dispatch(event);\n    });\n    this.backgroundElement?.on('dblclick', (event) => {\n      this.editorEvents.doubleClickOnSequenceItem.dispatch(event);\n    });\n    this.textElement.on('dblclick', (event) => {\n      this.editorEvents.doubleClickOnSequenceItem.dispatch(event);\n    });\n    this.backgroundElement?.on('mouseover', () => {\n      this.drawBackgroundElementHover();\n    });\n    this.backgroundElement?.on('mouseleave', () => {\n      this.removeBackgroundElementHover();\n    });\n  }\n}\n","import { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\n\nexport class AmbiguousSequenceItemRenderer extends BaseSequenceItemRenderer {\n  get symbolToDisplay(): string {\n    return this.node.monomer.label;\n  }\n\n  protected drawModification() {}\n}\n","import {\n  Chem,\n  Peptide,\n  Phosphate,\n  Vec2,\n  Nucleotide,\n  Nucleoside,\n  EmptySequenceNode,\n  LinkerSequenceNode,\n  UnresolvedMonomer,\n  UnsplitNucleotide,\n} from 'domain/entities';\nimport {\n  PeptideSequenceItemRenderer,\n  ChemSequenceItemRenderer,\n  PhosphateSequenceItemRenderer,\n  NucleotideSequenceItemRenderer,\n  EmptySequenceItemRenderer,\n  BaseMonomerRenderer,\n  BaseSequenceItemRenderer,\n  NucleosideSequenceItemRenderer,\n  UnresolvedMonomerSequenceItemRenderer,\n  UnsplitNucleotideSequenceItemRenderer,\n} from 'application/render';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\nimport { AmbiguousMonomerSequenceNode } from 'domain/entities/AmbiguousMonomerSequenceNode';\nimport { AmbiguousSequenceItemRenderer } from 'application/render/renderers/sequence/AmbiguousSequenceItemRenderer';\n\nexport class SequenceNodeRendererFactory {\n  static fromNode(\n    node: SubChainNode,\n    firstMonomerInChainPosition: Vec2,\n    monomerIndexInChain: number,\n    isLastMonomerInChain: boolean,\n    subChain: BaseSubChain,\n    isEditingSymbol: boolean,\n    renderer?: BaseMonomerRenderer | BaseSequenceItemRenderer,\n  ) {\n    let RendererClass;\n\n    switch (node.constructor) {\n      case Nucleotide:\n        RendererClass = NucleotideSequenceItemRenderer;\n        break;\n      case Nucleoside:\n        RendererClass = NucleosideSequenceItemRenderer;\n        break;\n      case EmptySequenceNode:\n        RendererClass = EmptySequenceItemRenderer;\n        break;\n      case LinkerSequenceNode:\n        RendererClass = ChemSequenceItemRenderer;\n        break;\n      case AmbiguousMonomerSequenceNode:\n        RendererClass = AmbiguousSequenceItemRenderer;\n        break;\n      default:\n        switch (node.monomer.constructor) {\n          case Phosphate:\n            RendererClass = PhosphateSequenceItemRenderer;\n            break;\n          case Peptide:\n            RendererClass = PeptideSequenceItemRenderer;\n            break;\n          case Chem:\n            RendererClass = ChemSequenceItemRenderer;\n            break;\n          case UnresolvedMonomer:\n            RendererClass = UnresolvedMonomerSequenceItemRenderer;\n            break;\n          case UnsplitNucleotide:\n            RendererClass = UnsplitNucleotideSequenceItemRenderer;\n            break;\n          default:\n            RendererClass = ChemSequenceItemRenderer;\n            break;\n        }\n    }\n\n    return new RendererClass(\n      node,\n      firstMonomerInChainPosition,\n      monomerIndexInChain,\n      isLastMonomerInChain,\n      subChain,\n      isEditingSymbol,\n      renderer?.monomerSize,\n      renderer?.scaledMonomerPosition,\n    );\n  }\n}\n","import { PolymerBond } from 'domain/entities/PolymerBond';\nimport assert from 'assert';\nimport { BaseSequenceRenderer } from 'application/render/renderers/sequence/BaseSequenceRenderer';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { SubChainNode, Vec2 } from 'domain/entities';\nimport { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\nimport { HydrogenBond } from 'domain/entities/HydrogenBond';\n\nexport class PolymerBondSequenceRenderer extends BaseSequenceRenderer {\n  private selectionElement:\n    | D3SvgElementSelection<SVGPathElement, void>\n    | undefined;\n\n  constructor(\n    public polymerBond: PolymerBond,\n    private firstNode?: SubChainNode,\n    private secondNode?: SubChainNode,\n  ) {\n    super(polymerBond);\n  }\n\n  private get isHydrogenBond() {\n    return this.polymerBond instanceof HydrogenBond;\n  }\n\n  private get firstMonomer() {\n    return this.firstNode?.monomer || this.polymerBond.firstMonomer;\n  }\n\n  private get secondMonomer() {\n    return this.secondNode?.monomer || this.polymerBond.secondMonomer;\n  }\n\n  private get areMonomersOnSameRow() {\n    assert(this.firstMonomer.renderer instanceof BaseSequenceItemRenderer);\n    assert(this.secondMonomer?.renderer instanceof BaseSequenceItemRenderer);\n\n    return (\n      this.firstMonomer.renderer?.scaledMonomerPositionForSequence.y ===\n      this.secondMonomer?.renderer?.scaledMonomerPositionForSequence.y\n    );\n  }\n\n  public get scaledPosition() {\n    assert(this.firstMonomer.renderer instanceof BaseSequenceItemRenderer);\n    assert(this.secondMonomer?.renderer instanceof BaseSequenceItemRenderer);\n    const firstMonomerY =\n      this.firstMonomer.renderer.scaledMonomerPositionForSequence.y;\n    const firstMonomerX =\n      this.firstMonomer.renderer.scaledMonomerPositionForSequence.x;\n    const secondMonomerY =\n      this.secondMonomer.renderer.scaledMonomerPositionForSequence.y;\n    const secondMonomerX =\n      this.secondMonomer.renderer.scaledMonomerPositionForSequence.x;\n\n    return {\n      startPosition: new Vec2(firstMonomerX, firstMonomerY),\n      endPosition: new Vec2(secondMonomerX, secondMonomerY),\n    };\n  }\n\n  public get center() {\n    return Vec2.centre(\n      new Vec2(\n        this.scaledPosition.startPosition.x + 6,\n        this.mainLineY.mainLineY1,\n      ),\n      new Vec2(\n        this.scaledPosition.startPosition.x + 6,\n        this.mainLineY.mainLineY2,\n      ),\n    );\n  }\n\n  private get mainLineY() {\n    const mainLineY1 =\n      this.scaledPosition.startPosition.y -\n      (this.scaledPosition.startPosition.y > this.scaledPosition.endPosition.y\n        ? 15\n        : -3) +\n      (this.areMonomersOnSameRow ? -25 : 0);\n\n    const mainLineY2 =\n      this.scaledPosition.endPosition.y -\n      (this.scaledPosition.endPosition.y > this.scaledPosition.startPosition.y\n        ? 15\n        : -3) +\n      (this.areMonomersOnSameRow ? -25 : 0);\n    return { mainLineY1, mainLineY2 };\n  }\n\n  public show() {\n    this.rootElement = this.canvas\n      .insert('g', `:first-child`)\n      .data([this]) as never as D3SvgElementSelection<SVGGElement, void>;\n\n    this.rootElement\n      ?.append('path')\n      .attr('stroke', 'black')\n      .attr('fill', 'none')\n      .attr('d', this.getBondPath())\n      .attr('stroke-dasharray', this.isHydrogenBond ? '2' : '0');\n  }\n\n  public drawSelection() {\n    assert(this.rootElement);\n    if (this.polymerBond.selected) {\n      this.selectionElement?.remove();\n      this.selectionElement = this.rootElement\n        ?.insert('path', ':first-child')\n        .attr('stroke', '#57FF8F')\n        .attr('stroke-width', '6')\n        .attr('fill', 'none');\n\n      this.selectionElement.attr('d', this.getBondPath());\n    } else {\n      this.selectionElement?.remove();\n    }\n  }\n\n  private getBondPath() {\n    let path = '';\n    if (this.areMonomersOnSameRow) {\n      path = `M ${this.scaledPosition.startPosition.x + 6},\n      ${this.mainLineY.mainLineY1 + 5} \n      L ${this.scaledPosition.startPosition.x + 6}, ${\n        this.mainLineY.mainLineY1\n      } \n      L ${this.scaledPosition.endPosition.x + 6}, ${this.mainLineY.mainLineY2}\n      L ${this.scaledPosition.endPosition.x + 6}, ${\n        this.mainLineY.mainLineY2 + 5\n      }`;\n    } else {\n      path = `M ${this.scaledPosition.startPosition.x + 6}, ${\n        this.mainLineY.mainLineY1\n      } L ${this.scaledPosition.endPosition.x + 6}, ${\n        this.mainLineY.mainLineY2\n      }`;\n    }\n    return path;\n  }\n\n  public moveStart(): void {}\n\n  public moveEnd(): void {}\n\n  public get isSnake(): false {\n    return false;\n  }\n\n  public isMonomersOnSameHorizontalLine(): false {\n    return false;\n  }\n}\n","import { CoreEditor } from 'application/editor/internal';\nimport { SequenceType } from 'domain/entities';\nimport { RNA_DNA_NON_MODIFIED_PART } from 'domain/constants/monomers';\nimport { MONOMER_CONST } from 'application/editor';\n\nexport function getRnaPartLibraryItem(editor: CoreEditor, rnaBaseName: string) {\n  return editor.monomersLibrary.find(\n    (libraryItem) =>\n      libraryItem.props.MonomerType === MONOMER_CONST.RNA &&\n      libraryItem.props.MonomerName === rnaBaseName,\n  );\n}\n\nexport function getPeptideLibraryItem(editor: CoreEditor, peptideName: string) {\n  return editor.monomersLibrary.find(\n    (libraryItem) =>\n      libraryItem.props.MonomerType === MONOMER_CONST.PEPTIDE &&\n      libraryItem.props.MonomerName === peptideName,\n  );\n}\n\nexport function getSugarBySequenceType(sequenceType: SequenceType) {\n  switch (sequenceType) {\n    case SequenceType.DNA:\n      return RNA_DNA_NON_MODIFIED_PART.SUGAR_DNA;\n    case SequenceType.RNA:\n      return RNA_DNA_NON_MODIFIED_PART.SUGAR_RNA;\n    default:\n      return undefined;\n  }\n}\n","import { RNABase } from 'domain/entities/RNABase';\nimport { Sugar } from 'domain/entities/Sugar';\nimport assert from 'assert';\nimport {\n  getNextMonomerInChain,\n  getRnaBaseFromSugar,\n  isValidNucleoside,\n  isValidNucleotide,\n} from 'domain/helpers/monomers';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { CoreEditor } from 'application/editor/internal';\nimport { AttachmentPointName } from 'domain/types';\nimport { Command } from 'domain/entities/Command';\nimport {\n  getRnaPartLibraryItem,\n  getSugarBySequenceType,\n} from 'domain/helpers/rna';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { AmbiguousMonomer } from 'domain/entities/AmbiguousMonomer';\n\nexport class Nucleoside {\n  constructor(\n    public sugar: Sugar,\n    public rnaBase: RNABase | AmbiguousMonomer,\n  ) {}\n\n  static fromSugar(sugar: Sugar, needValidation = true) {\n    if (needValidation) {\n      assert(\n        isValidNucleoside(sugar),\n        'Created nucleoside is not valid. Please check nucleotide parts connections.',\n      );\n\n      const isNucleotide = isValidNucleotide(sugar);\n      assert(!isNucleotide, 'Created nucleoside is nucleotide.');\n    }\n\n    return new Nucleoside(sugar, getRnaBaseFromSugar(sugar) as RNABase);\n  }\n\n  static createOnCanvas(rnaBaseName: string, position: Vec2) {\n    const editor = CoreEditor.provideEditorInstance();\n    const rnaBaseLibraryItem = getRnaPartLibraryItem(editor, rnaBaseName);\n    const sugarName = getSugarBySequenceType(editor.sequenceTypeEnterMode);\n    assert(sugarName);\n\n    const sugarLibraryItem = getRnaPartLibraryItem(editor, sugarName);\n\n    assert(sugarLibraryItem);\n    assert(rnaBaseLibraryItem);\n\n    const modelChanges = new Command();\n\n    modelChanges.merge(\n      editor.drawingEntitiesManager.addMonomer(sugarLibraryItem, position),\n    );\n    modelChanges.merge(\n      editor.drawingEntitiesManager.addMonomer(rnaBaseLibraryItem, position),\n    );\n\n    const sugar = modelChanges.operations[0].monomer as Sugar;\n    const rnaBase = modelChanges.operations[1].monomer as RNABase;\n\n    modelChanges.merge(\n      editor.drawingEntitiesManager.createPolymerBond(\n        sugar,\n        rnaBase,\n        AttachmentPointName.R3,\n        AttachmentPointName.R1,\n      ),\n    );\n\n    return { modelChanges, node: Nucleoside.fromSugar(sugar, false) };\n  }\n\n  public isMonomerTypeDifferentForChaining(monomerToChain: SubChainNode) {\n    return this.sugar.isMonomerTypeDifferentForChaining(monomerToChain);\n  }\n\n  public get SubChainConstructor() {\n    return this.sugar.SubChainConstructor;\n  }\n\n  public get monomer() {\n    return this.sugar;\n  }\n\n  public get monomers(): BaseMonomer[] {\n    return [this.sugar, this.rnaBase];\n  }\n\n  public get firstMonomerInNode() {\n    return this.sugar;\n  }\n\n  public get lastMonomerInNode() {\n    return this.sugar;\n  }\n\n  public get renderer() {\n    return this.monomer.renderer;\n  }\n\n  public get modified() {\n    // TODO move isNotLastNode to separate getter because it is not modification\n    //  It was added here because it needs to show similar icon as for phosphates modifications\n    const isNotLastNode = !!getNextMonomerInChain(this.sugar);\n\n    return (\n      this.rnaBase.isModification || this.sugar.isModification || isNotLastNode\n    );\n  }\n}\n","import { BaseSequenceRenderer } from 'application/render/renderers/sequence/BaseSequenceRenderer';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\n\nexport class BackBoneBondSequenceRenderer extends BaseSequenceRenderer {\n  constructor(polymerBond: PolymerBond) {\n    super(polymerBond);\n  }\n\n  public get isSnake(): false {\n    return false;\n  }\n\n  public isMonomersOnSameHorizontalLine(): false {\n    return false;\n  }\n\n  public moveStart(): void {}\n\n  public moveEnd(): void {}\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { RenderersManager } from 'application/render/renderers/RenderersManager';\nimport { Operation } from 'domain/entities/Operation';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\n\nexport class PolymerBondAddOperation implements Operation {\n  public polymerBond;\n  public priority = 1;\n  constructor(\n    private addPolymerBondChangeModel: (\n      polymerBond?: PolymerBond,\n    ) => PolymerBond,\n    private deletePolymerBondChangeModel: (polymerBond) => void,\n  ) {\n    this.polymerBond = this.addPolymerBondChangeModel();\n  }\n\n  public execute(renderersManager: RenderersManager) {\n    this.polymerBond = this.addPolymerBondChangeModel(this.polymerBond);\n    renderersManager.addPolymerBond(this.polymerBond);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.deletePolymerBondChangeModel(this.polymerBond);\n    renderersManager.deletePolymerBond(this.polymerBond);\n  }\n}\n\nexport class PolymerBondDeleteOperation implements Operation {\n  public priority = -1;\n  constructor(\n    public polymerBond: PolymerBond,\n    private deletePolymerBondChangeModel: () => void,\n    private finishPolymerBondCreationModelChange: (\n      polymerBond?: PolymerBond,\n    ) => PolymerBond,\n  ) {\n    this.deletePolymerBondChangeModel();\n  }\n\n  public execute(renderersManager: RenderersManager) {\n    this.deletePolymerBondChangeModel();\n    renderersManager.deletePolymerBond(this.polymerBond);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.polymerBond = this.finishPolymerBondCreationModelChange(\n      this.polymerBond,\n    );\n    renderersManager.addPolymerBond(this.polymerBond);\n  }\n}\n\nexport class PolymerBondMoveOperation implements Operation {\n  constructor(public polymerBond: PolymerBond) {}\n\n  public execute(renderersManager: RenderersManager) {\n    renderersManager.movePolymerBond(this.polymerBond);\n  }\n\n  public invert() {}\n}\n\nexport class PolymerBondShowInfoOperation implements Operation {\n  constructor(public polymerBond: PolymerBond) {}\n\n  public execute(renderersManager: RenderersManager) {\n    renderersManager.showPolymerBondInformation(this.polymerBond);\n  }\n\n  public invert() {}\n}\n\nexport class PolymerBondCancelCreationOperation implements Operation {\n  constructor(\n    public polymerBond: PolymerBond,\n    private secondMonomer?: BaseMonomer,\n  ) {}\n\n  public execute(renderersManager: RenderersManager) {\n    renderersManager.cancelPolymerBondCreation(\n      this.polymerBond,\n      this.secondMonomer,\n    );\n  }\n\n  public invert() {}\n}\n\nexport class PolymerBondFinishCreationOperation implements Operation {\n  public polymerBond;\n  public priority = 1;\n  constructor(\n    private finishPolymerBondCreationModelChange: (\n      polymerBond?: PolymerBond,\n    ) => PolymerBond,\n    private deletePolymerBondCreationModelChange: (polymerBond) => void,\n  ) {\n    this.polymerBond = this.finishPolymerBondCreationModelChange();\n  }\n\n  public execute(renderersManager: RenderersManager) {\n    this.polymerBond = this.finishPolymerBondCreationModelChange(\n      this.polymerBond,\n    );\n    renderersManager.finishPolymerBondCreation(this.polymerBond);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.deletePolymerBondCreationModelChange(this.polymerBond);\n    renderersManager.deletePolymerBond(this.polymerBond);\n  }\n}\n\nexport class SelectLayoutModeOperation implements Operation {\n  private onExecute;\n  private onInvert;\n\n  constructor(\n    public _onExecute: () => void,\n    public _onInvert: () => void,\n    public mode,\n    public prevMode,\n  ) {\n    this.onExecute = _onExecute;\n    this.onInvert = _onInvert;\n  }\n\n  public execute(): void {\n    this.onExecute();\n  }\n\n  public invert(): void {\n    this.onInvert();\n  }\n}\n\nexport class ReconnectPolymerBondOperation implements Operation {\n  public polymerBond;\n  constructor(\n    private reconnectPolymerBondModelChange: () => PolymerBond,\n    private revertReconnectPolymerBondModelChange: () => PolymerBond,\n  ) {}\n\n  public execute(renderersManager: RenderersManager) {\n    this.polymerBond = this.reconnectPolymerBondModelChange();\n    renderersManager.redrawDrawingEntity(this.polymerBond);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.polymerBond = this.revertReconnectPolymerBondModelChange();\n    renderersManager.redrawDrawingEntity(this.polymerBond);\n  }\n}\n","import { Struct } from 'domain/entities';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport {\n  FormatterFactory,\n  SupportedFormat,\n  identifyStructFormat,\n} from './formatters';\nimport { Ketcher } from './ketcher';\nimport { ChemicalMimeType, StructService } from 'domain/services';\nimport { CoreEditor, EditorHistory } from './editor/internal';\nimport { KetSerializer } from 'domain/serializers';\nimport assert from 'assert';\nimport { EditorSelection } from './editor/editor.types';\n\nclass KetcherProvider {\n  private ketcherInstance: Ketcher | undefined;\n\n  setKetcherInstance(ketcherInstance: Ketcher) {\n    this.ketcherInstance = ketcherInstance;\n  }\n\n  getKetcher() {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.ketcherInstance!;\n  }\n}\n\nconst ketcherProvider = new KetcherProvider();\n\nexport { ketcherProvider };\n\nexport function getStructure(\n  structureFormat = SupportedFormat.rxn,\n  formatterFactory: FormatterFactory,\n  struct: Struct,\n  drawingEntitiesManager?: DrawingEntitiesManager,\n  selection?: EditorSelection,\n): Promise<string> {\n  const serverSettings = ketcherProvider.getKetcher().editor.serverSettings;\n  const formatter = formatterFactory.create(structureFormat, serverSettings);\n\n  return formatter.getStructureFromStructAsync(\n    struct,\n    drawingEntitiesManager,\n    selection,\n  );\n}\n\nexport async function prepareStructToRender(\n  structStr: string,\n  structService: StructService,\n  ketcherInstance: Ketcher,\n): Promise<Struct> {\n  const struct: Struct = await parseStruct(\n    structStr,\n    structService,\n    ketcherInstance,\n  );\n  struct.initHalfBonds();\n  struct.initNeighbors();\n  struct.setImplicitHydrogen();\n  struct.setStereoLabelsToAtoms();\n  struct.markFragments();\n\n  return struct;\n}\n\nexport function parseStruct(\n  structStr: string,\n  structService: StructService,\n  ketcherInstance: Ketcher,\n) {\n  const format = identifyStructFormat(structStr);\n  const factory = new FormatterFactory(structService);\n  const options = ketcherInstance.editor.options();\n\n  const service = factory.create(format, {\n    'dearomatize-on-load': options['dearomatize-on-load'],\n    'ignore-no-chiral-flag': options.ignoreChiralFlag,\n  });\n  return service.getStructureFromStringAsync(structStr);\n}\n\nexport function deleteAllEntitiesOnCanvas() {\n  const editor = CoreEditor.provideEditorInstance();\n  const modelChanges = editor.drawingEntitiesManager.deleteAllEntities();\n  editor.renderersContainer.update(modelChanges);\n}\n\nexport async function parseAndAddMacromoleculesOnCanvas(\n  struct: string,\n  structService: StructService,\n) {\n  const editor = CoreEditor.provideEditorInstance();\n  const ketSerializer = new KetSerializer();\n  const format = identifyStructFormat(struct);\n  let ketStruct = struct;\n  if (format !== SupportedFormat.ket) {\n    ketStruct = (\n      await structService.convert({\n        struct,\n        output_format: ChemicalMimeType.KET,\n      })\n    ).struct;\n  }\n\n  const deserialisedKet = ketSerializer.deserializeToDrawingEntities(ketStruct);\n  assert(deserialisedKet);\n  const { command: modelChanges } =\n    deserialisedKet.drawingEntitiesManager.mergeInto(\n      editor.drawingEntitiesManager,\n    );\n\n  new EditorHistory(editor).update(modelChanges);\n  editor.renderersContainer.update(modelChanges);\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { RenderersManager } from 'application/render/renderers/RenderersManager';\nimport { Operation } from 'domain/entities/Operation';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { AttachmentPointName } from 'domain/types';\n\nexport class MonomerAddOperation implements Operation {\n  public monomer: BaseMonomer;\n  public priority = 1;\n  constructor(\n    public addMonomerChangeModel: (monomer?: BaseMonomer) => BaseMonomer,\n    public deleteMonomerChangeModel: (monomer: BaseMonomer) => void,\n    private callback?: () => void,\n  ) {\n    this.monomer = this.addMonomerChangeModel();\n  }\n\n  public execute(renderersManager: RenderersManager) {\n    this.monomer = this.addMonomerChangeModel(this.monomer);\n    renderersManager.addMonomer(this.monomer, this.callback);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    if (this.monomer) {\n      this.deleteMonomerChangeModel(this.monomer);\n      renderersManager.deleteMonomer(this.monomer);\n    }\n  }\n}\n\nexport class MonomerMoveOperation implements Operation {\n  public monomer: BaseMonomer;\n  constructor(\n    private monomerMoveModelChange: () => BaseMonomer,\n    private invertMonomerMoveModelChange: () => BaseMonomer,\n  ) {\n    this.monomer = this.monomerMoveModelChange();\n  }\n\n  public execute(renderersManager: RenderersManager) {\n    this.monomer = this.monomerMoveModelChange();\n    renderersManager.moveMonomer(this.monomer);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.monomer = this.invertMonomerMoveModelChange();\n    renderersManager.moveMonomer(this.monomer);\n  }\n}\n\nexport class MonomerHoverOperation implements Operation {\n  constructor(\n    private peptide: BaseMonomer,\n    private needRedrawAttachmentPoints: boolean,\n  ) {}\n\n  public execute(renderersManager: RenderersManager) {\n    renderersManager.hoverMonomer(\n      this.peptide,\n      this.needRedrawAttachmentPoints,\n    );\n  }\n\n  public invert() {}\n}\n\nexport class AttachmentPointHoverOperation implements Operation {\n  constructor(\n    private peptide: BaseMonomer,\n    private attachmentPointName: AttachmentPointName,\n  ) {}\n\n  public execute(renderersManager: RenderersManager) {\n    renderersManager.hoverAttachmentPoint(\n      this.peptide,\n      this.attachmentPointName,\n    );\n  }\n\n  public invert() {}\n}\n\nexport class MonomerDeleteOperation implements Operation {\n  monomer: BaseMonomer;\n  public priority = -1;\n  constructor(\n    monomer: BaseMonomer,\n    public addMonomerChangeModel: (monomer: BaseMonomer) => BaseMonomer,\n    public deleteMonomerChangeModel: (monomer: BaseMonomer) => void,\n    private callback?: () => void,\n  ) {\n    this.monomer = monomer;\n  }\n\n  public execute(renderersManager: RenderersManager) {\n    this.deleteMonomerChangeModel(this.monomer);\n    renderersManager.deleteMonomer(this.monomer);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.monomer = this.addMonomerChangeModel(this.monomer);\n    renderersManager.addMonomer(this.monomer, this.callback);\n  }\n}\n\nexport class MonomerItemModifyOperation implements Operation {\n  monomer: BaseMonomer;\n  constructor(\n    monomer: BaseMonomer,\n    public updateMonomerItem: () => BaseMonomer,\n    public revertMonomerItem: () => BaseMonomer,\n  ) {\n    this.monomer = monomer;\n  }\n\n  public execute() {\n    this.monomer = this.updateMonomerItem();\n  }\n\n  public invert() {\n    this.monomer = this.revertMonomerItem();\n  }\n}\n","import { RenderersManager } from 'application/render/renderers/RenderersManager';\nimport { Operation } from 'domain/entities/Operation';\nimport { DrawingEntity } from 'domain/entities/DrawingEntity';\nimport { BaseBond } from 'domain/entities/BaseBond';\nexport class DrawingEntityHoverOperation implements Operation {\n  constructor(private drawingEntity: DrawingEntity) {}\n\n  public execute(renderersManager: RenderersManager) {\n    renderersManager.hoverDrawingEntity(this.drawingEntity);\n  }\n\n  public invert() {}\n}\n\nexport class DrawingEntitySelectOperation implements Operation {\n  constructor(private drawingEntity: DrawingEntity) {}\n\n  public execute(renderersManager: RenderersManager) {\n    renderersManager.selectDrawingEntity(this.drawingEntity);\n  }\n\n  public invert() {}\n}\nexport class DrawingEntityMoveOperation implements Operation {\n  private wasInverted = false;\n  constructor(\n    private moveDrawingEntityChangeModel: () => void,\n    private invertMoveDrawingEntityChangeModel: () => void,\n    private redoDrawingEntityChangeModel: () => void,\n    private drawingEntity: DrawingEntity,\n  ) {}\n\n  public execute() {\n    this.wasInverted\n      ? this.redoDrawingEntityChangeModel()\n      : this.moveDrawingEntityChangeModel();\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.invertMoveDrawingEntityChangeModel();\n\n    if (this.drawingEntity instanceof BaseBond) {\n      renderersManager.redrawDrawingEntity(this.drawingEntity);\n    } else {\n      renderersManager.moveDrawingEntity(this.drawingEntity);\n    }\n\n    this.wasInverted = true;\n  }\n\n  public executeAfterAllOperations(renderersManager: RenderersManager) {\n    // Redraw Polymer bonds instead of moving needed here because\n    // they have two drawing modes: straight and curved.\n    // During switching snake/flex layout modes and undo/redo\n    // we need to redraw them to apply the correct drawing mode.\n    if (this.drawingEntity instanceof BaseBond) {\n      renderersManager.redrawDrawingEntity(this.drawingEntity);\n    } else {\n      renderersManager.moveDrawingEntity(this.drawingEntity);\n    }\n  }\n}\n\nexport class DrawingEntityRedrawOperation implements Operation {\n  constructor(\n    private drawingEntityRedrawModelChange: () => DrawingEntity,\n    private invertDrawingEntityRedrawModelChange: () => DrawingEntity,\n  ) {}\n\n  public execute(renderersManager: RenderersManager) {\n    const drawingEntity = this.drawingEntityRedrawModelChange();\n    renderersManager.redrawDrawingEntity(drawingEntity, true);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    const drawingEntity = this.invertDrawingEntityRedrawModelChange();\n    renderersManager.redrawDrawingEntity(drawingEntity, true);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { Tool, IRnaPreset } from 'application/editor/tools/Tool';\nimport { Sugar } from 'domain/entities/Sugar';\nimport { Vec2 } from 'domain/entities';\n\nimport { CoreEditor, EditorHistory } from 'application/editor/internal';\nimport { BaseMonomerRenderer } from 'application/render/renderers';\nimport { MonomerItemType } from 'domain/types';\nimport { monomerFactory } from '../operations/monomer/monomerFactory';\nimport { RNABase } from 'domain/entities/RNABase';\nimport { Phosphate } from 'domain/entities/Phosphate';\nimport { Coordinates } from '../shared/coordinates';\n\nexport const RNA_MONOMER_DISTANCE = 22.5;\nclass RnaPresetTool implements Tool {\n  rnaBase: MonomerItemType | undefined;\n  sugar: MonomerItemType | undefined;\n  phosphate: MonomerItemType | undefined;\n\n  private rnaBasePreview: RNABase | undefined;\n  private phosphatePreview: Phosphate | undefined;\n  private sugarPreview: Sugar | undefined;\n  private rnaBasePreviewRenderer: BaseMonomerRenderer | undefined;\n  private phosphatePreviewRenderer: BaseMonomerRenderer | undefined;\n  private sugarPreviewRenderer: BaseMonomerRenderer | undefined;\n  readonly MONOMER_PREVIEW_SCALE_FACTOR = 0.5;\n  readonly MONOMER_PREVIEW_OFFSET_X = 30;\n  readonly MONOMER_PREVIEW_OFFSET_Y = 30;\n  readonly RNA_BASE_PREVIEW_OFFSET_X = 1;\n  readonly RNA_BASE_PREVIEW_OFFSET_Y = 20;\n  readonly PHOSPHATE_PREVIEW_OFFSET_X = 18;\n  history: EditorHistory;\n\n  constructor(private editor: CoreEditor, preset: IRnaPreset) {\n    this.editor = editor;\n    if (preset?.base) {\n      this.rnaBase = preset?.base;\n    }\n    if (preset?.phosphate) {\n      this.phosphate = preset?.phosphate;\n    }\n    if (preset?.sugar) {\n      this.sugar = preset?.sugar;\n    }\n    this.history = new EditorHistory(this.editor);\n  }\n\n  mousedown() {\n    if (!this.sugar || !this.sugarPreviewRenderer) {\n      this.editor.events.error.dispatch('No sugar in RNA preset found');\n      return;\n    }\n\n    const { command: modelChanges } =\n      this.editor.drawingEntitiesManager.addRnaPreset({\n        sugar: this.sugar,\n        sugarPosition: Coordinates.canvasToModel(\n          new Vec2(\n            this.editor.lastCursorPositionOfCanvas.x,\n            this.editor.lastCursorPositionOfCanvas.y,\n          ),\n        ),\n        phosphate: this.phosphate,\n        phosphatePosition: this.phosphatePreviewRenderer\n          ? Coordinates.canvasToModel(\n              new Vec2(\n                this.editor.lastCursorPositionOfCanvas.x +\n                  this.sugarPreviewRenderer?.width +\n                  RNA_MONOMER_DISTANCE,\n                this.editor.lastCursorPositionOfCanvas.y,\n              ),\n            )\n          : undefined,\n        rnaBase: this.rnaBase,\n        rnaBasePosition: this.rnaBasePreviewRenderer\n          ? Coordinates.canvasToModel(\n              new Vec2(\n                this.editor.lastCursorPositionOfCanvas.x,\n                this.editor.lastCursorPositionOfCanvas.y +\n                  this.sugarPreviewRenderer.height +\n                  RNA_MONOMER_DISTANCE,\n              ),\n            )\n          : undefined,\n      });\n\n    this.history.update(modelChanges);\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  mousemove() {\n    this.sugarPreview?.moveAbsolute(\n      Coordinates.canvasToModel(\n        new Vec2(\n          this.editor.lastCursorPosition.x + this.MONOMER_PREVIEW_OFFSET_X,\n          this.editor.lastCursorPosition.y + this.MONOMER_PREVIEW_OFFSET_Y,\n        ),\n      ),\n    );\n\n    this.rnaBasePreview?.moveAbsolute(\n      Coordinates.canvasToModel(\n        new Vec2(\n          this.editor.lastCursorPosition.x +\n            this.MONOMER_PREVIEW_OFFSET_X +\n            this.RNA_BASE_PREVIEW_OFFSET_X,\n          this.editor.lastCursorPosition.y +\n            this.MONOMER_PREVIEW_OFFSET_Y +\n            this.RNA_BASE_PREVIEW_OFFSET_Y,\n        ),\n      ),\n    );\n\n    this.phosphatePreview?.moveAbsolute(\n      Coordinates.canvasToModel(\n        new Vec2(\n          this.editor.lastCursorPosition.x +\n            this.MONOMER_PREVIEW_OFFSET_X +\n            this.PHOSPHATE_PREVIEW_OFFSET_X,\n          this.editor.lastCursorPosition.y + this.MONOMER_PREVIEW_OFFSET_Y,\n        ),\n      ),\n    );\n\n    this.rnaBasePreviewRenderer?.move();\n    this.phosphatePreviewRenderer?.move();\n    this.sugarPreviewRenderer?.move();\n  }\n\n  public mouseLeaveClientArea() {\n    this.sugarPreviewRenderer?.remove();\n    this.sugarPreviewRenderer = undefined;\n    this.sugarPreview = undefined;\n    this.phosphatePreviewRenderer?.remove();\n    this.phosphatePreviewRenderer = undefined;\n    this.phosphatePreview = undefined;\n    this.rnaBasePreviewRenderer?.remove();\n    this.rnaBasePreviewRenderer = undefined;\n    this.rnaBasePreview = undefined;\n  }\n\n  public mouseover() {\n    if (!this.sugar) {\n      this.editor.events.error.dispatch('No sugar in RNA preset found');\n      return;\n    }\n\n    if (this.sugarPreview) {\n      return;\n    }\n\n    const [Sugar, SugarRenderer] = monomerFactory(this.sugar);\n    this.sugarPreview = new Sugar(this.sugar) as Sugar;\n\n    this.sugarPreviewRenderer = new SugarRenderer(\n      this.sugarPreview,\n      this.MONOMER_PREVIEW_SCALE_FACTOR,\n    );\n\n    this.sugarPreviewRenderer?.show(this.editor.theme);\n\n    if (this.rnaBase) {\n      const [RNABase, RNABaseRenderer] = monomerFactory(this.rnaBase);\n      this.rnaBasePreview = new RNABase(this.rnaBase) as RNABase;\n      this.rnaBasePreviewRenderer = new RNABaseRenderer(\n        this.rnaBasePreview,\n        this.MONOMER_PREVIEW_SCALE_FACTOR,\n      );\n\n      this.rnaBasePreviewRenderer?.show(this.editor.theme);\n    }\n\n    if (this.phosphate) {\n      const [Phosphate, PhosphateRenderer] = monomerFactory(this.phosphate);\n\n      this.phosphatePreview = new Phosphate(this.phosphate) as Phosphate;\n\n      this.phosphatePreviewRenderer = new PhosphateRenderer(\n        this.phosphatePreview,\n        this.MONOMER_PREVIEW_SCALE_FACTOR,\n      );\n\n      this.phosphatePreviewRenderer?.show(this.editor.theme);\n    }\n  }\n\n  hidePreview() {\n    this.rnaBasePreviewRenderer?.remove();\n    this.phosphatePreviewRenderer?.remove();\n    this.sugarPreviewRenderer?.remove();\n  }\n\n  destroy(): void {\n    this.hidePreview();\n  }\n}\n\nexport { RnaPresetTool };\n","import { RNABase } from 'domain/entities/RNABase';\nimport { Phosphate } from 'domain/entities/Phosphate';\nimport { Sugar } from 'domain/entities/Sugar';\nimport assert from 'assert';\nimport {\n  getPhosphateFromSugar,\n  getRnaBaseFromSugar,\n  isValidNucleoside,\n  isValidNucleotide,\n} from 'domain/helpers/monomers';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { CoreEditor } from 'application/editor/internal';\nimport { Vec2 } from 'domain/entities/vec2';\nimport {\n  getRnaPartLibraryItem,\n  getSugarBySequenceType,\n} from 'domain/helpers/rna';\nimport { RNA_DNA_NON_MODIFIED_PART } from 'domain/constants/monomers';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { AmbiguousMonomer } from 'domain/entities/AmbiguousMonomer';\n\nexport class Nucleotide {\n  constructor(\n    public sugar: Sugar,\n    public rnaBase: RNABase | AmbiguousMonomer,\n    public phosphate: Phosphate,\n  ) {}\n\n  static fromSugar(sugar: Sugar, needValidation = true) {\n    if (needValidation) {\n      assert(\n        isValidNucleotide(sugar),\n        'Nucleotide is not valid. Please check nucleotide parts connections.',\n      );\n\n      const isNucleoside = isValidNucleoside(sugar);\n      assert(\n        !isNucleoside,\n        'Nucleotide is nucleoside because it is a last sugar+base of rna chain',\n      );\n    }\n\n    return new Nucleotide(\n      sugar,\n      getRnaBaseFromSugar(sugar) as RNABase,\n      getPhosphateFromSugar(sugar) as Phosphate,\n    );\n  }\n\n  static createOnCanvas(rnaBaseName: string, position: Vec2) {\n    const editor = CoreEditor.provideEditorInstance();\n    const rnaBaseLibraryItem = getRnaPartLibraryItem(editor, rnaBaseName);\n    const phosphateLibraryItem = getRnaPartLibraryItem(\n      editor,\n      RNA_DNA_NON_MODIFIED_PART.PHOSPHATE,\n    );\n    const sugarName = getSugarBySequenceType(editor.sequenceTypeEnterMode);\n    assert(sugarName);\n\n    const sugarLibraryItem = getRnaPartLibraryItem(editor, sugarName);\n\n    assert(sugarLibraryItem);\n    assert(rnaBaseLibraryItem);\n    assert(phosphateLibraryItem);\n\n    const { command: modelChanges, monomers } =\n      editor.drawingEntitiesManager.addRnaPreset({\n        sugar: sugarLibraryItem,\n        sugarPosition: position,\n        rnaBase: rnaBaseLibraryItem,\n        rnaBasePosition: position,\n        phosphate: phosphateLibraryItem,\n        phosphatePosition: position,\n      });\n\n    const sugar = monomers.find((monomer) => monomer instanceof Sugar) as Sugar;\n\n    return { modelChanges, node: Nucleotide.fromSugar(sugar, false) };\n  }\n\n  public isMonomerTypeDifferentForChaining(monomerToChain: SubChainNode) {\n    return this.sugar.isMonomerTypeDifferentForChaining(monomerToChain);\n  }\n\n  public get SubChainConstructor() {\n    return this.sugar.SubChainConstructor;\n  }\n\n  public get monomer() {\n    return this.sugar;\n  }\n\n  public get monomers(): BaseMonomer[] {\n    return [this.sugar, this.rnaBase, this.phosphate];\n  }\n\n  public get firstMonomerInNode() {\n    return this.sugar;\n  }\n\n  public get lastMonomerInNode() {\n    return this.phosphate;\n  }\n\n  public get renderer() {\n    return this.monomer.renderer;\n  }\n\n  public get modified() {\n    return (\n      this.rnaBase.isModification ||\n      this.sugar.isModification ||\n      this.phosphate.isModification\n    );\n  }\n}\n","export class Matrix<T> {\n  private matrix: T[][];\n\n  constructor() {\n    this.matrix = [];\n  }\n\n  get(x: number, y: number): T | undefined {\n    if (!this.matrix[x]) {\n      return undefined;\n    }\n    return this.matrix[x][y];\n  }\n\n  getRow(x: number) {\n    return this.matrix[x];\n  }\n\n  set(x: number, y: number, value: T) {\n    if (!this.matrix[x]) {\n      this.matrix[x] = [];\n    }\n    this.matrix[x][y] = value;\n  }\n\n  public get height() {\n    return this.matrix.length;\n  }\n\n  public get width() {\n    return this.matrix.reduce((max, row) => Math.max(max, row.length), 0);\n  }\n\n  forEach(callback: (value: T, x: number, y: number) => void): void {\n    for (let x = 0; x < this.matrix.length; x++) {\n      for (let y = 0; y < this.matrix[x]?.length; y++) {\n        const value = this.matrix[x][y];\n        if (value) {\n          callback(value, x, y);\n        }\n      }\n    }\n  }\n\n  forEachRightToLeft(callback: (value: T, x: number, y: number) => void): void {\n    for (let x = this.matrix.length - 1; x >= 0; x--) {\n      for (let y = this.matrix[x]?.length - 1; y >= 0; y--) {\n        const value = this.matrix[x][y];\n        if (value) {\n          callback(value, x, y);\n        }\n      }\n    }\n  }\n\n  forEachBottomToTop(callback: (value: T, x: number, y: number) => void): void {\n    for (let y = this.matrix[0]?.length - 1; y >= 0; y--) {\n      for (let x = this.matrix.length - 1; x >= 0; x--) {\n        const value = this.matrix[x][y];\n        if (value) {\n          callback(value, x, y);\n        }\n      }\n    }\n  }\n}\n","import { PolymerBond } from 'domain/entities/PolymerBond';\nimport { SubChainNode } from 'domain/entities';\n\nexport type ConnectionDirectionInDegrees = 0 | 90 | 180 | 270;\nexport type ConnectionDirectionOfLastCell = {\n  readonly x: number;\n  readonly y: number;\n};\n\nexport class Connection {\n  constructor(\n    public readonly connectedNode: SubChainNode | null,\n    public readonly direction:\n      | ConnectionDirectionInDegrees\n      | ConnectionDirectionOfLastCell,\n    public readonly isVertical: boolean,\n    public readonly polymerBond: PolymerBond,\n    public xOffset: number,\n    public yOffset: number,\n  ) {}\n}\n","import { BaseMonomer, SubChainNode } from 'domain/entities';\nimport { Connection } from 'domain/entities/canvas-matrix/Connection';\n\nexport class Cell {\n  constructor(\n    public node: SubChainNode | null,\n    public connections: Connection[],\n    public x: number,\n    public y: number,\n    public monomer?: BaseMonomer,\n  ) {}\n}\n","import {\n  BaseMonomer,\n  MonomerToAtomBond,\n  Nucleoside,\n  Nucleotide,\n  SubChainNode,\n} from 'domain/entities';\nimport { ChainsCollection } from 'domain/entities/monomer-chains/ChainsCollection';\nimport { Matrix } from 'domain/entities/canvas-matrix/Matrix';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { Connection } from 'domain/entities/canvas-matrix/Connection';\nimport { Cell } from 'domain/entities/canvas-matrix/Cell';\nimport { isNumber } from 'lodash';\nimport { isRnaBaseOrAmbiguousRnaBase } from 'domain/helpers/monomers';\n\ninterface MatrixConfig {\n  initialMatrix: Matrix<Cell>;\n}\n\nexport class CanvasMatrix {\n  private matrix: Matrix<Cell>;\n  private initialMatrixWidth: number;\n  private monomerToCell: Map<BaseMonomer, Cell> = new Map();\n  public polymerBondToCells: Map<PolymerBond, Cell[]> = new Map();\n  public polymerBondToConnections: Map<PolymerBond, Connection[]> = new Map();\n\n  constructor(\n    public chainsCollection: ChainsCollection,\n    private matrixConfig: MatrixConfig = {\n      initialMatrix: new Matrix<Cell>(),\n    },\n  ) {\n    this.matrix = new Matrix<Cell>();\n    this.initialMatrixWidth = this.matrixConfig.initialMatrix.width;\n    this.fillCells();\n  }\n\n  private get chains() {\n    return this.chainsCollection.chains;\n  }\n\n  private fillConnectionsOffset(\n    direction: number,\n    increaseOffset = (connection: Connection, increaseValue?: number) => {\n      if (isNumber(increaseValue)) {\n        connection.xOffset = increaseValue;\n      } else {\n        connection.xOffset++;\n      }\n    },\n    getOffset = (connection: Connection): number => connection.xOffset,\n  ): void {\n    // set offsets for connections with overlappings\n    const currentConnections = new Map<PolymerBond, Set<Connection>>();\n    const iterationMethod =\n      direction === 180\n        ? this.matrix.forEach.bind(this.matrix)\n        : direction === 0\n        ? this.matrix.forEachRightToLeft.bind(this.matrix)\n        : this.matrix.forEachBottomToTop.bind(this.matrix);\n\n    iterationMethod((cell) => {\n      const biggestOffsetInCell = cell.connections.reduce(\n        (biggestOffset: number, connection: Connection): number => {\n          return getOffset(connection) > biggestOffset\n            ? getOffset(connection)\n            : biggestOffset;\n        },\n        0,\n      );\n      cell.connections.forEach((connection: Connection): void => {\n        if (connection.direction !== direction || connection.connectedNode) {\n          return;\n        }\n        if (!currentConnections.has(connection.polymerBond)) {\n          const polymerBondConnections = this.polymerBondToConnections.get(\n            connection.polymerBond,\n          );\n          polymerBondConnections?.forEach(\n            (polymerBondConnection: Connection): void => {\n              increaseOffset(polymerBondConnection, biggestOffsetInCell);\n            },\n          );\n          currentConnections.set(\n            connection.polymerBond,\n            new Set(polymerBondConnections),\n          );\n        }\n      });\n      cell.connections.forEach((connection: Connection): void => {\n        if (\n          !connection.connectedNode ||\n          (connection.direction !== direction &&\n            !currentConnections.has(connection.polymerBond))\n        ) {\n          return;\n        }\n        if (currentConnections.has(connection.polymerBond)) {\n          currentConnections.delete(connection.polymerBond);\n          currentConnections.forEach((connections: Set<Connection>): void => {\n            Array.from(connections.values()).forEach(\n              (currentConnection: Connection): void => {\n                increaseOffset(currentConnection);\n              },\n            );\n          });\n        } else {\n          currentConnections.set(\n            connection.polymerBond,\n            new Set(this.polymerBondToConnections.get(connection.polymerBond)),\n          );\n        }\n      });\n      if (\n        (cell.x === 0 && direction !== 90) ||\n        (cell.y === 0 && direction === 90)\n      ) {\n        currentConnections.clear();\n      }\n      Array.from(currentConnections.keys()).forEach((polymerBond) => {\n        const polymerBondConnections =\n          this.polymerBondToConnections.get(polymerBond);\n        if (\n          polymerBondConnections?.every(\n            (connection: Connection): boolean =>\n              !cell.connections.includes(connection),\n          )\n        ) {\n          currentConnections.delete(polymerBond);\n        }\n      });\n    });\n  }\n\n  private fillRightConnectionsOffset() {\n    const direction = 0;\n    const handledConnections = new Set<PolymerBond>();\n\n    this.matrix.forEach((cell) => {\n      const biggestOffsetInCell = cell.connections.reduce(\n        (biggestOffset: number, connection: Connection): number => {\n          return connection.xOffset > biggestOffset\n            ? connection.xOffset\n            : biggestOffset;\n        },\n        0,\n      );\n\n      cell.connections.forEach((connection: Connection): void => {\n        if (connection.direction !== direction) {\n          return;\n        }\n        if (connection.xOffset <= biggestOffsetInCell) {\n          const polymerBondConnections = this.polymerBondToConnections.get(\n            connection.polymerBond,\n          );\n          polymerBondConnections?.forEach(\n            (polymerBondConnection: Connection): void => {\n              polymerBondConnection.xOffset = biggestOffsetInCell;\n            },\n          );\n          handledConnections.add(connection.polymerBond);\n        }\n      });\n    });\n\n    handledConnections.forEach((polymerBond) => {\n      const polymerBondConnections =\n        this.polymerBondToConnections.get(polymerBond);\n      polymerBondConnections?.forEach((polymerBondConnection) => {\n        if (polymerBondConnection.direction !== direction) {\n          return;\n        }\n\n        polymerBondConnection.xOffset++;\n      });\n    });\n  }\n\n  private fillCells() {\n    // iterate over each chain and fill matrix with cells\n    let rowNumber = 0;\n    let columnNumber = 0;\n    let rowsWithRnaBases = 0;\n    let wereBasesInRow = false;\n    this.chains.forEach((chain) => {\n      chain.forEachNode(({ node }) => {\n        node.monomers.forEach((monomer) => {\n          if (\n            (node instanceof Nucleotide || node instanceof Nucleoside) &&\n            isRnaBaseOrAmbiguousRnaBase(monomer)\n          ) {\n            const cell = new Cell(\n              node,\n              [],\n              columnNumber - 1,\n              rowNumber + rowsWithRnaBases + 1,\n              monomer,\n            );\n            this.matrix.set(\n              rowNumber + rowsWithRnaBases + 1,\n              columnNumber - 1,\n              cell,\n            );\n            this.monomerToCell.set(monomer, cell);\n            wereBasesInRow = true;\n\n            return;\n          }\n\n          const initialMatrixRowLength =\n            this.matrixConfig.initialMatrix?.getRow(rowNumber)?.length || 0;\n\n          if (columnNumber >= initialMatrixRowLength) {\n            let emptyCellsAmount = this.initialMatrixWidth - columnNumber;\n            while (emptyCellsAmount > 0) {\n              this.matrix.set(\n                rowNumber + rowsWithRnaBases,\n                columnNumber,\n                new Cell(null, [], columnNumber, rowNumber + rowsWithRnaBases),\n              );\n              columnNumber++;\n              emptyCellsAmount--;\n            }\n\n            if (wereBasesInRow) {\n              rowsWithRnaBases++;\n              wereBasesInRow = false;\n              let index = 0;\n              while (index < this.initialMatrixWidth) {\n                const cellWithPotentialRnaBase = this.matrix.get(\n                  rowNumber + rowsWithRnaBases,\n                  index,\n                );\n                if (cellWithPotentialRnaBase) {\n                  index++;\n                  continue;\n                }\n                this.matrix.set(\n                  rowNumber + rowsWithRnaBases,\n                  index,\n                  new Cell(null, [], index, rowNumber + rowsWithRnaBases + 1),\n                );\n                index++;\n              }\n            }\n\n            rowNumber++;\n            columnNumber = 0;\n          }\n\n          const cell = new Cell(\n            node,\n            [],\n            columnNumber,\n            rowNumber + rowsWithRnaBases,\n            monomer,\n          );\n          this.matrix.set(rowNumber + rowsWithRnaBases, columnNumber, cell);\n          this.monomerToCell.set(monomer, cell);\n          columnNumber++;\n        });\n      });\n    });\n\n    const monomerToNode = this.chainsCollection.monomerToNode;\n    const handledConnections = new Set<PolymerBond>();\n\n    this.matrix.forEach((cell) => {\n      const monomer = cell.monomer;\n\n      monomer?.forEachBond((polymerBond) => {\n        if (polymerBond instanceof MonomerToAtomBond) {\n          return;\n        }\n\n        if (\n          polymerBond.isSideChainConnection &&\n          !handledConnections.has(polymerBond)\n        ) {\n          const anotherMonomer = polymerBond.getAnotherMonomer(\n            monomer,\n          ) as BaseMonomer;\n          const connectedNode = monomerToNode.get(\n            anotherMonomer,\n          ) as SubChainNode;\n          const connectedCell = this.monomerToCell.get(anotherMonomer) as Cell;\n          const xDistance = connectedCell.x - cell.x;\n          const yDistance = connectedCell.y - cell.y;\n          const xDirection = xDistance > 0 ? 0 : 180;\n          const yDirection = yDistance > 0 ? 90 : 270;\n          let xDistanceAbsolute = Math.abs(xDistance);\n          let yDistanceAbsolute = Math.abs(yDistance);\n          const isVertical = xDistanceAbsolute === 0;\n\n          // fill start cell by connection with direction\n          let connection = new Connection(\n            connectedNode,\n            isVertical ? 90 : xDirection,\n            isVertical,\n            polymerBond,\n            0,\n            0,\n          );\n\n          cell.connections.push(connection);\n          this.polymerBondToCells.set(polymerBond, [cell]);\n          this.polymerBondToConnections.set(polymerBond, [connection]);\n\n          let nextCellX = cell.x;\n          let nextCellY = cell.y;\n\n          // fill x cells by connection with direction\n          while (xDistanceAbsolute > 1) {\n            nextCellX += Math.sign(xDistance);\n            const nextCellToHandle = this.matrix.get(\n              nextCellY,\n              nextCellX,\n            ) as Cell;\n            connection = new Connection(\n              null,\n              xDirection,\n              isVertical,\n              polymerBond,\n              0,\n              0,\n            );\n            nextCellToHandle.connections.push(connection);\n            this.polymerBondToCells.get(polymerBond)?.push(nextCellToHandle);\n            this.polymerBondToConnections.get(polymerBond)?.push(connection);\n\n            xDistanceAbsolute--;\n          }\n\n          // fill y cells by connection with direction\n          while (yDistanceAbsolute > 1) {\n            nextCellY += Math.sign(yDistance);\n            const nextCellToHandle = this.matrix.get(\n              nextCellY,\n              nextCellX,\n            ) as Cell;\n            connection = new Connection(\n              null,\n              yDirection,\n              isVertical,\n              polymerBond,\n              0,\n              0,\n            );\n            nextCellToHandle.connections.push(connection);\n            this.polymerBondToCells.get(polymerBond)?.push(nextCellToHandle);\n            this.polymerBondToConnections.get(polymerBond)?.push(connection);\n\n            yDistanceAbsolute--;\n          }\n\n          // fill last cell by connection\n          nextCellX += Math.sign(xDistance);\n          nextCellY += Math.sign(yDistance);\n\n          const lastCellToHandle = this.matrix.get(\n            nextCellY,\n            nextCellX,\n          ) as Cell;\n          connection = new Connection(\n            connectedNode,\n            isVertical\n              ? yDirection\n              : { x: xDistance === 0 ? 0 : xDirection, y: yDirection },\n            isVertical,\n            polymerBond,\n            0,\n            0,\n          );\n          lastCellToHandle.connections.push(connection);\n          this.polymerBondToCells.get(polymerBond)?.push(lastCellToHandle);\n          this.polymerBondToConnections.get(polymerBond)?.push(connection);\n\n          handledConnections.add(polymerBond);\n        }\n      });\n    });\n\n    this.fillConnectionsOffset(180);\n    this.fillRightConnectionsOffset();\n    this.fillConnectionsOffset(0);\n    this.fillConnectionsOffset(\n      90,\n      (connection: Connection, increaseValue: number | undefined): void => {\n        if (isNumber(increaseValue)) {\n          connection.yOffset = increaseValue;\n        } else {\n          connection.yOffset++;\n        }\n      },\n      (connection: Connection): number => connection.yOffset,\n    );\n  }\n}\n","import { Operation } from 'domain/entities/Operation';\nimport { RenderersManager } from 'application/render/renderers/RenderersManager';\n\nexport class RecalculateCanvasMatrixOperation implements Operation {\n  constructor(\n    private recalculateCanvasMatrixModelChange: () => void,\n    private invertRecalculateCanvasMatrixModelChange: () => void,\n  ) {}\n\n  public execute(renderersManager: RenderersManager) {\n    this.recalculateCanvasMatrixModelChange();\n    renderersManager.rerenderSideConnectionPolymerBonds();\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.invertRecalculateCanvasMatrixModelChange();\n    renderersManager.rerenderSideConnectionPolymerBonds();\n  }\n}\n","import { DrawingEntity } from 'domain/entities/DrawingEntity';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { Bond } from 'domain/entities/CoreBond';\nimport { Bond as MicromoleculesBond } from 'domain/entities/bond';\nimport { BaseRenderer } from 'application/render';\nimport { AtomLabel, Elements } from 'domain/constants';\nimport { AtomRenderer } from 'application/render/renderers/AtomRenderer';\n\nexport class Atom extends DrawingEntity {\n  public bonds: Bond[] = [];\n  public renderer: AtomRenderer | undefined = undefined;\n  constructor(\n    position: Vec2,\n    public monomer: BaseMonomer,\n    public atomIdInMicroMode,\n    public label: AtomLabel,\n  ) {\n    super(position);\n  }\n\n  public get center() {\n    return this.position;\n  }\n\n  public addBond(bond: Bond) {\n    this.bonds.push(bond);\n  }\n\n  public setRenderer(renderer: AtomRenderer) {\n    this.renderer = renderer;\n    super.setBaseRenderer(renderer as BaseRenderer);\n  }\n\n  private calculateConnections() {\n    let connectionsAmount = 0;\n\n    for (let i = 0; i < this.bonds.length; i++) {\n      switch (this.bonds[i].type) {\n        case MicromoleculesBond.PATTERN.TYPE.SINGLE:\n          connectionsAmount += 1;\n          break;\n        case MicromoleculesBond.PATTERN.TYPE.DOUBLE:\n          connectionsAmount += 2;\n          break;\n        case MicromoleculesBond.PATTERN.TYPE.TRIPLE:\n          connectionsAmount += 3;\n          break;\n        case MicromoleculesBond.PATTERN.TYPE.DATIVE:\n          break;\n        case MicromoleculesBond.PATTERN.TYPE.HYDROGEN:\n          break;\n        case MicromoleculesBond.PATTERN.TYPE.AROMATIC:\n          if (this.bonds.length === 1) return 0;\n          return this.bonds.length;\n        default:\n          return 0;\n      }\n    }\n\n    return connectionsAmount;\n  }\n\n  private calculateCharge() {\n    return 0;\n  }\n\n  private calculateRadicalAmount() {\n    return 0;\n  }\n\n  calculateValence() {\n    const label = this.label;\n    const element = Elements.get(label);\n    const elementGroupNumber = element?.group;\n    const connectionAmount = this.calculateConnections();\n    const radicalAmount = this.calculateRadicalAmount();\n    const absCharge = 0;\n    const charge = this.calculateCharge();\n    let valence = this.calculateConnections();\n    let hydrogenAmount = 0;\n\n    if (elementGroupNumber === undefined) {\n      if (label === AtomLabel.D || label === AtomLabel.T) {\n        valence = 1;\n        hydrogenAmount = 1 - radicalAmount - connectionAmount - absCharge;\n      } else {\n        // this.implicitH = 0;\n        // return true;\n      }\n    } else if (elementGroupNumber === 1) {\n      if (\n        label === AtomLabel.H ||\n        label === AtomLabel.Li ||\n        label === AtomLabel.Na ||\n        label === AtomLabel.K ||\n        label === AtomLabel.Rb ||\n        label === AtomLabel.Cs ||\n        label === AtomLabel.Fr\n      ) {\n        valence = 1;\n        hydrogenAmount = 1 - radicalAmount - connectionAmount - absCharge;\n      }\n    } else if (elementGroupNumber === 2) {\n      if (\n        connectionAmount + radicalAmount + absCharge === 2 ||\n        connectionAmount + radicalAmount + absCharge === 0\n      ) {\n        valence = 2;\n      } else hydrogenAmount = -1;\n    } else if (elementGroupNumber === 3) {\n      if (\n        label === AtomLabel.B ||\n        label === AtomLabel.Al ||\n        label === AtomLabel.Ga ||\n        label === AtomLabel.In\n      ) {\n        if (charge === -1) {\n          valence = 4;\n          hydrogenAmount = 4 - radicalAmount - connectionAmount;\n        } else {\n          valence = 3;\n          hydrogenAmount = 3 - radicalAmount - connectionAmount - absCharge;\n        }\n      } else if (label === AtomLabel.Tl) {\n        if (charge === -1) {\n          if (radicalAmount + connectionAmount <= 2) {\n            valence = 2;\n            hydrogenAmount = 2 - radicalAmount - connectionAmount;\n          } else {\n            valence = 4;\n            hydrogenAmount = 4 - radicalAmount - connectionAmount;\n          }\n        } else if (charge === -2) {\n          if (radicalAmount + connectionAmount <= 3) {\n            valence = 3;\n            hydrogenAmount = 3 - radicalAmount - connectionAmount;\n          } else {\n            valence = 5;\n            hydrogenAmount = 5 - radicalAmount - connectionAmount;\n          }\n        } else if (radicalAmount + connectionAmount + absCharge <= 1) {\n          valence = 1;\n          hydrogenAmount = 1 - radicalAmount - connectionAmount - absCharge;\n        } else {\n          valence = 3;\n          hydrogenAmount = 3 - radicalAmount - connectionAmount - absCharge;\n        }\n      }\n    } else if (elementGroupNumber === 4) {\n      if (\n        label === AtomLabel.C ||\n        label === AtomLabel.Si ||\n        label === AtomLabel.Ge\n      ) {\n        valence = 4;\n        hydrogenAmount = 4 - radicalAmount - connectionAmount - absCharge;\n      } else if (label === AtomLabel.Sn || label === AtomLabel.Pb) {\n        if (connectionAmount + radicalAmount + absCharge <= 2) {\n          valence = 2;\n          hydrogenAmount = 2 - radicalAmount - connectionAmount - absCharge;\n        } else {\n          valence = 4;\n          hydrogenAmount = 4 - radicalAmount - connectionAmount - absCharge;\n        }\n      }\n    } else if (elementGroupNumber === 5) {\n      if (label === AtomLabel.N || label === AtomLabel.P) {\n        if (charge === 1) {\n          valence = 4;\n          hydrogenAmount = 4 - radicalAmount - connectionAmount;\n        } else if (charge === 2) {\n          valence = 3;\n          hydrogenAmount = 3 - radicalAmount - connectionAmount;\n        } else if (\n          label === AtomLabel.N ||\n          radicalAmount + connectionAmount + absCharge <= 3\n        ) {\n          valence = 3;\n          hydrogenAmount = 3 - radicalAmount - connectionAmount - absCharge;\n        } else {\n          // ELEM_P && rad + conn + absCharge > 3\n          valence = 5;\n          hydrogenAmount = 5 - radicalAmount - connectionAmount - absCharge;\n        }\n      } else if (\n        label === AtomLabel.Bi ||\n        label === AtomLabel.Sb ||\n        label === AtomLabel.As\n      ) {\n        if (charge === 1) {\n          if (radicalAmount + connectionAmount <= 2 && label !== AtomLabel.As) {\n            valence = 2;\n            hydrogenAmount = 2 - radicalAmount - connectionAmount;\n          } else {\n            valence = 4;\n            hydrogenAmount = 4 - radicalAmount - connectionAmount;\n          }\n        } else if (charge === 2) {\n          valence = 3;\n          hydrogenAmount = 3 - radicalAmount - connectionAmount;\n        } else if (radicalAmount + connectionAmount <= 3) {\n          valence = 3;\n          hydrogenAmount = 3 - radicalAmount - connectionAmount - absCharge;\n        } else {\n          valence = 5;\n          hydrogenAmount = 5 - radicalAmount - connectionAmount - absCharge;\n        }\n      }\n    } else if (elementGroupNumber === 6) {\n      if (label === AtomLabel.O) {\n        if (charge >= 1) {\n          valence = 3;\n          hydrogenAmount = 3 - radicalAmount - connectionAmount;\n        } else {\n          valence = 2;\n          hydrogenAmount = 2 - radicalAmount - connectionAmount - absCharge;\n        }\n      } else if (\n        label === AtomLabel.S ||\n        label === AtomLabel.Se ||\n        label === AtomLabel.Po\n      ) {\n        if (charge === 1) {\n          if (connectionAmount <= 3) {\n            valence = 3;\n            hydrogenAmount = 3 - radicalAmount - connectionAmount;\n          } else {\n            valence = 5;\n            hydrogenAmount = 5 - radicalAmount - connectionAmount;\n          }\n        } else if (connectionAmount + radicalAmount + absCharge <= 2) {\n          valence = 2;\n          hydrogenAmount = 2 - radicalAmount - connectionAmount - absCharge;\n        } else if (connectionAmount + radicalAmount + absCharge <= 4) {\n          // See examples in PubChem\n          // [S] : CID 16684216\n          // [Se]: CID 5242252\n          // [Po]: no example, just following ISIS/Draw logic here\n          valence = 4;\n          hydrogenAmount = 4 - radicalAmount - connectionAmount - absCharge;\n        } else {\n          // See examples in PubChem\n          // [S] : CID 46937044\n          // [Se]: CID 59786\n          // [Po]: no example, just following ISIS/Draw logic here\n          valence = 6;\n          hydrogenAmount = 6 - radicalAmount - connectionAmount - absCharge;\n        }\n      } else if (label === AtomLabel.Te) {\n        if (charge === -1) {\n          if (connectionAmount <= 2) {\n            valence = 2;\n            hydrogenAmount = 2 - radicalAmount - connectionAmount - absCharge;\n          }\n        } else if (charge === 0 || charge === 2) {\n          if (connectionAmount <= 2) {\n            valence = 2;\n            hydrogenAmount = 2 - radicalAmount - connectionAmount - absCharge;\n          } else if (connectionAmount <= 4) {\n            valence = 4;\n            hydrogenAmount = 4 - radicalAmount - connectionAmount - absCharge;\n          } else if (charge === 0 && connectionAmount <= 6) {\n            valence = 6;\n            hydrogenAmount = 6 - radicalAmount - connectionAmount - absCharge;\n          } else {\n            hydrogenAmount = -1;\n          }\n        }\n      }\n    } else if (elementGroupNumber === 7) {\n      if (label === AtomLabel.F) {\n        valence = 1;\n        hydrogenAmount = 1 - radicalAmount - connectionAmount - absCharge;\n      } else if (\n        label === AtomLabel.Cl ||\n        label === AtomLabel.Br ||\n        label === AtomLabel.I ||\n        label === AtomLabel.At\n      ) {\n        if (charge === 1) {\n          if (connectionAmount <= 2) {\n            valence = 2;\n            hydrogenAmount = 2 - radicalAmount - connectionAmount;\n          } else if (\n            connectionAmount === 3 ||\n            connectionAmount === 5 ||\n            connectionAmount >= 7\n          ) {\n            hydrogenAmount = -1;\n          }\n        } else if (charge === 0) {\n          if (connectionAmount <= 1) {\n            valence = 1;\n            hydrogenAmount = 1 - radicalAmount - connectionAmount;\n            // While the halogens can have valence 3, they can not have\n            // hydrogens in that case.\n          } else if (\n            connectionAmount === 2 ||\n            connectionAmount === 4 ||\n            connectionAmount === 6\n          ) {\n            if (radicalAmount === 1) {\n              valence = connectionAmount;\n              hydrogenAmount = 0;\n            } else {\n              hydrogenAmount = -1; // will throw an error in the end\n            }\n          } else if (connectionAmount > 7) {\n            hydrogenAmount = -1; // will throw an error in the end\n          }\n        }\n      }\n    } else if (elementGroupNumber === 8) {\n      if (connectionAmount + radicalAmount + absCharge === 0) valence = 1;\n      else hydrogenAmount = -1;\n    }\n    // if (Atom.isHeteroAtom(label) && this.implicitHCount !== null) {\n    //   hydrogenAmount = this.implicitHCount;\n    // }\n    // this.valence = valence;\n    // this.implicitH = hydrogenAmount;\n    // if (this.implicitH < 0) {\n    //   this.valence = connectionAmount;\n    //   this.implicitH = 0;\n    //   this.badConn = true;\n    //   return false;\n    // }\n\n    return {\n      valence,\n      hydrogenAmount,\n    };\n  }\n}\n","import { DrawingEntity } from 'domain/entities/DrawingEntity';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { Atom } from 'domain/entities/CoreAtom';\nimport { BaseRenderer } from 'application/render';\nimport { BondRenderer } from 'application/render/renderers/BondRenderer';\n\nexport class Bond extends DrawingEntity {\n  public endPosition: Vec2 = new Vec2();\n  public renderer: BondRenderer | undefined = undefined;\n  public cycles = [];\n  constructor(\n    public firstAtom: Atom,\n    public secondAtom: Atom,\n    public type = 1,\n    public stereo = 0,\n  ) {\n    super(firstAtom.position);\n    this.endPosition = secondAtom.position;\n  }\n\n  public setRenderer(renderer: BondRenderer): void {\n    super.setBaseRenderer(renderer as BaseRenderer);\n    this.renderer = renderer;\n  }\n\n  public get startPosition() {\n    return this.position;\n  }\n\n  public get center() {\n    return this.position;\n  }\n\n  public moveBondStartAbsolute(x, y) {\n    this.moveAbsolute(new Vec2(x, y));\n  }\n\n  public moveBondEndAbsolute(x, y) {\n    this.endPosition = new Vec2(x, y);\n  }\n\n  public moveToLinkedAtoms() {\n    const firstAtomCenter = this.firstAtom.position;\n    const secondAtomCenter = this.secondAtom.position;\n    this.moveBondStartAbsolute(firstAtomCenter.x, firstAtomCenter.y);\n    if (secondAtomCenter) {\n      this.moveBondEndAbsolute(secondAtomCenter.x, secondAtomCenter.y);\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { RenderersManager } from 'application/render/renderers/RenderersManager';\nimport { Operation } from 'domain/entities/Operation';\nimport { Atom } from 'domain/entities/CoreAtom';\n\nexport class AtomAddOperation implements Operation {\n  public atom: Atom;\n  constructor(\n    public addAtomChangeModel: (atom?: Atom) => Atom,\n    public deleteAtomChangeModel: () => void,\n  ) {\n    this.atom = this.addAtomChangeModel();\n  }\n\n  public execute(renderersManager: RenderersManager) {\n    this.atom = this.addAtomChangeModel(this.atom);\n    renderersManager.addAtom(this.atom);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    if (this.atom) {\n      this.deleteAtomChangeModel();\n      renderersManager.deleteAtom(this.atom);\n    }\n  }\n}\n\nexport class AtomDeleteOperation implements Operation {\n  constructor(\n    public atom: Atom,\n    public deleteAtomChangeModel: () => void,\n    public addAtomChangeModel: (atom?: Atom) => Atom,\n  ) {}\n\n  public execute(renderersManager: RenderersManager) {\n    this.deleteAtomChangeModel();\n    renderersManager.deleteAtom(this.atom);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.addAtomChangeModel(this.atom);\n    renderersManager.addAtom(this.atom);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { RenderersManager } from 'application/render/renderers/RenderersManager';\nimport { Operation } from 'domain/entities/Operation';\nimport { Bond } from 'domain/entities/CoreBond';\n\nexport class BondAddOperation implements Operation {\n  public bond: Bond;\n  constructor(\n    public addBondChangeModel: (bond?: Bond) => Bond,\n    public deleteBondChangeModel: (bond?: Bond) => void,\n  ) {\n    this.bond = this.addBondChangeModel();\n  }\n\n  public execute(renderersManager: RenderersManager) {\n    this.bond = this.addBondChangeModel(this.bond);\n    renderersManager.addBond(this.bond);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    if (this.bond) {\n      this.deleteBondChangeModel(this.bond);\n      renderersManager.deleteBond(this.bond);\n    }\n  }\n}\n\nexport class BondDeleteOperation implements Operation {\n  constructor(\n    public bond: Bond,\n    public deleteBondChangeModel: (bond?: Bond) => void,\n    public addBondChangeModel: (bond?: Bond) => Bond,\n  ) {}\n\n  public execute(renderersManager: RenderersManager) {\n    this.deleteBondChangeModel(this.bond);\n    renderersManager.deleteBond(this.bond);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.addBondChangeModel(this.bond);\n    renderersManager.addBond(this.bond);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { RenderersManager } from 'application/render/renderers/RenderersManager';\nimport { Operation } from 'domain/entities/Operation';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\n\nexport class MonomerToAtomBondAddOperation implements Operation {\n  public monomerToAtomBond: MonomerToAtomBond;\n  constructor(\n    public addMonomerToAtomBondChangeModel: (\n      monomerToAtomBond?: MonomerToAtomBond,\n    ) => MonomerToAtomBond,\n    public deleteMonomerToAtomBondChangeModel: (\n      monomerToAtomBond: MonomerToAtomBond,\n    ) => void,\n  ) {\n    this.monomerToAtomBond = this.addMonomerToAtomBondChangeModel();\n  }\n\n  public execute(renderersManager: RenderersManager) {\n    this.monomerToAtomBond = this.addMonomerToAtomBondChangeModel(\n      this.monomerToAtomBond,\n    );\n    renderersManager.addMonomerToAtomBond(this.monomerToAtomBond);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    if (this.monomerToAtomBond) {\n      this.deleteMonomerToAtomBondChangeModel(this.monomerToAtomBond);\n      renderersManager.deleteMonomerToAtomBond(this.monomerToAtomBond);\n    }\n  }\n}\n\nexport class MonomerToAtomBondDeleteOperation implements Operation {\n  constructor(\n    public monomerToAtomBond: MonomerToAtomBond,\n    public deleteMonomerToAtomBondChangeModel: (\n      monomerToAtomBond?: MonomerToAtomBond,\n    ) => void,\n    public addMonomerToAtomBondChangeModel: (\n      monomerToAtomBond?: MonomerToAtomBond,\n    ) => MonomerToAtomBond,\n  ) {}\n\n  public execute(renderersManager: RenderersManager) {\n    this.deleteMonomerToAtomBondChangeModel(this.monomerToAtomBond);\n    renderersManager.deleteMonomerToAtomBond(this.monomerToAtomBond);\n  }\n\n  public invert(renderersManager: RenderersManager) {\n    this.addMonomerToAtomBondChangeModel(this.monomerToAtomBond);\n    renderersManager.addMonomerToAtomBond(this.monomerToAtomBond);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { CoreEditor, EditorHistory } from 'application/editor/internal';\nimport { BaseTool } from 'application/editor/tools/Tool';\nimport { BaseMonomerRenderer } from 'application/render/renderers/BaseMonomerRenderer';\nimport { FlexModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/FlexModePolymerBondRenderer';\nimport { SnakeModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/SnakeModePolymerBondRenderer';\nimport assert from 'assert';\nimport { AttachmentPoint } from 'domain/AttachmentPoint';\nimport { UnresolvedMonomer } from 'domain/entities';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { Chem } from 'domain/entities/Chem';\nimport { Command } from 'domain/entities/Command';\nimport { Peptide } from 'domain/entities/Peptide';\nimport { Phosphate } from 'domain/entities/Phosphate';\nimport { RNABase } from 'domain/entities/RNABase';\nimport { Sugar } from 'domain/entities/Sugar';\nimport { AttachmentPointName } from 'domain/types';\n// FIXME: If we replace '../shared/coordinates' by 'application/editor' to make it shorter,\n//  we get `Uncaught ReferenceError: Cannot access 'PolymerBond' before initialization`,\n//  which probably due to a circular dependency\n//  because of using uncontrolled `index.ts` files.\nimport { Coordinates } from '../shared/coordinates';\nimport { AtomRenderer } from 'application/render/renderers/AtomRenderer';\nimport { ToolName } from 'application/editor';\n\ntype FlexModeOrSnakeModePolymerBondRenderer =\n  | FlexModePolymerBondRenderer\n  | SnakeModePolymerBondRenderer;\n\nexport enum MACROMOLECULES_BOND_TYPES {\n  SINGLE = 'single',\n  HYDROGEN = 'hydrogen',\n}\n\nclass PolymerBond implements BaseTool {\n  private bondRenderer?: FlexModeOrSnakeModePolymerBondRenderer;\n  private isBondConnectionModalOpen = false;\n  private history: EditorHistory;\n  private bondType: MACROMOLECULES_BOND_TYPES;\n\n  constructor(private editor: CoreEditor, options: { toolName: ToolName }) {\n    this.editor = editor;\n    this.history = new EditorHistory(this.editor);\n    this.bondType =\n      options.toolName === ToolName.bondSingle\n        ? MACROMOLECULES_BOND_TYPES.SINGLE\n        : MACROMOLECULES_BOND_TYPES.HYDROGEN;\n  }\n\n  get isHydrogenBond() {\n    return this.bondType === MACROMOLECULES_BOND_TYPES.HYDROGEN;\n  }\n\n  public mouseDownAttachmentPoint(event) {\n    if (this.isHydrogenBond) {\n      return;\n    }\n\n    const selectedRenderer = event.target.__data__;\n    if (\n      selectedRenderer instanceof AttachmentPoint &&\n      !selectedRenderer.monomer.isAttachmentPointUsed(event.attachmentPointName)\n    ) {\n      selectedRenderer.monomer.setChosenFirstAttachmentPoint(\n        event.attachmentPointName,\n      );\n    }\n  }\n\n  private removeBond() {\n    if (this.bondRenderer) {\n      const modelChanges =\n        this.editor.drawingEntitiesManager.cancelPolymerBondCreation(\n          this.bondRenderer.polymerBond,\n        );\n      this.bondRenderer = undefined;\n\n      return modelChanges;\n    } else {\n      return new Command();\n    }\n  }\n\n  public mousedown(event) {\n    const selectedRenderer = event.target.__data__;\n    if (\n      selectedRenderer instanceof BaseMonomerRenderer ||\n      selectedRenderer instanceof AttachmentPoint\n    ) {\n      const startAttachmentPoint =\n        selectedRenderer.monomer.startBondAttachmentPoint;\n\n      if (!startAttachmentPoint) {\n        this.editor.events.error.dispatch(\n          \"Selected monomer doesn't have any free attachment points\",\n        );\n        return;\n      }\n      const { polymerBond, command: modelChanges } =\n        this.editor.drawingEntitiesManager.startPolymerBondCreation(\n          selectedRenderer.monomer,\n          selectedRenderer.monomer.position,\n          Coordinates.canvasToModel(this.editor.lastCursorPositionOfCanvas),\n          this.bondType,\n        );\n\n      this.editor.renderersContainer.update(modelChanges);\n      this.bondRenderer = polymerBond.renderer;\n    }\n  }\n\n  public mousemove() {\n    if (this.bondRenderer) {\n      const modelChanges = this.editor.drawingEntitiesManager.movePolymerBond(\n        this.bondRenderer.polymerBond,\n        Coordinates.canvasToModel(this.editor.lastCursorPositionOfCanvas),\n      );\n      this.editor.renderersContainer.update(modelChanges);\n    }\n  }\n\n  // FIXME: Specify the types.\n  public mouseLeavePolymerBond(event): void {\n    const renderer: FlexModeOrSnakeModePolymerBondRenderer =\n      event.target.__data__;\n    if (this.bondRenderer || !renderer.polymerBond) return;\n\n    const modelChanges =\n      this.editor.drawingEntitiesManager.hidePolymerBondInformation(\n        renderer.polymerBond,\n      );\n    this.editor.renderersContainer.markForRecalculateBegin();\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  // FIXME: Specify the types.\n  public mouseOverPolymerBond(event) {\n    if (this.bondRenderer) return;\n\n    const renderer: FlexModeOrSnakeModePolymerBondRenderer =\n      event.target.__data__;\n    const modelChanges =\n      this.editor.drawingEntitiesManager.showPolymerBondInformation(\n        renderer.polymerBond,\n      );\n    this.editor.renderersContainer.markForRecalculateBegin();\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  public mouseOverMonomer(event) {\n    const renderer: BaseMonomerRenderer = event.target.__data__;\n    let modelChanges;\n\n    if (this.bondRenderer) {\n      // Don't need to do anything if we hover over the first monomer of the bond\n      if (this.bondRenderer?.polymerBond.firstMonomer === renderer.monomer) {\n        return;\n      }\n      const shouldCalculateBonds = !this.shouldInvokeModal(\n        this.bondRenderer?.polymerBond.firstMonomer,\n        renderer.monomer,\n        false,\n      );\n      modelChanges =\n        this.editor.drawingEntitiesManager.intendToFinishBondCreation(\n          renderer.monomer,\n          this.bondRenderer?.polymerBond,\n          this.isHydrogenBond ? false : shouldCalculateBonds,\n        );\n    } else {\n      modelChanges =\n        this.editor.drawingEntitiesManager.intendToStartBondCreation(\n          renderer.monomer,\n        );\n    }\n\n    this.editor.renderersContainer.markForRecalculateBegin();\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  public mouseOverAttachmentPoint(event) {\n    if (this.isHydrogenBond) {\n      return;\n    }\n\n    const renderer: AttachmentPoint = event.target.__data__;\n    let modelChanges;\n\n    if (renderer.monomer.isAttachmentPointUsed(event.attachmentPointName)) {\n      return;\n    }\n\n    if (this.bondRenderer) {\n      // Don't need to do anything if we hover over the first monomer of the bond\n      if (this.bondRenderer?.polymerBond.firstMonomer === renderer.monomer) {\n        return;\n      }\n      const shouldCalculateBonds = !this.shouldInvokeModal(\n        this.bondRenderer?.polymerBond.firstMonomer,\n        renderer.monomer,\n        false,\n      );\n      modelChanges =\n        this.editor.drawingEntitiesManager.intendToFinishAttachmenPointBondCreation(\n          renderer.monomer,\n          this.bondRenderer?.polymerBond,\n          event.attachmentPointName,\n          shouldCalculateBonds,\n        );\n    } else {\n      modelChanges =\n        this.editor.drawingEntitiesManager.intendToStartAttachmenPointBondCreation(\n          renderer.monomer,\n          event.attachmentPointName,\n        );\n    }\n\n    this.editor.renderersContainer.markForRecalculateBegin();\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  public mouseLeaveMonomer(event) {\n    const eventToElementData = event.toElement?.__data__;\n    const eventFromElementData = event.fromElement?.__data__;\n    if (\n      eventToElementData instanceof AttachmentPoint &&\n      eventToElementData.monomer === eventFromElementData.monomer\n    ) {\n      eventToElementData.monomer.removePotentialBonds();\n\n      return;\n    }\n\n    const renderer: BaseMonomerRenderer = event.target.__data__;\n\n    if (\n      renderer !== this.bondRenderer?.polymerBond?.firstMonomer?.renderer &&\n      !this.isBondConnectionModalOpen\n    ) {\n      const modelChanges =\n        this.editor.drawingEntitiesManager.cancelIntentionToFinishBondCreation(\n          renderer.monomer,\n          this.bondRenderer?.polymerBond,\n        );\n\n      this.editor.renderersContainer.markForRecalculateBegin();\n      this.editor.renderersContainer.update(modelChanges);\n    }\n  }\n\n  public mouseLeaveAttachmentPoint(event) {\n    if (this.isBondConnectionModalOpen) {\n      return;\n    }\n    const attachmentPointRenderer: AttachmentPoint = event.target.__data__;\n    if (\n      attachmentPointRenderer.monomer.renderer !==\n      this.bondRenderer?.polymerBond?.firstMonomer?.renderer\n    ) {\n      const modelChanges =\n        this.editor.drawingEntitiesManager.cancelIntentionToFinishBondCreation(\n          attachmentPointRenderer.monomer,\n          this.bondRenderer?.polymerBond,\n        );\n      this.editor.renderersContainer.markForRecalculateBegin();\n      this.editor.renderersContainer.update(modelChanges);\n    }\n  }\n\n  public mouseUpAttachmentPoint(event) {\n    const renderer = event.target.__data__ as AttachmentPoint;\n    const isFirstMonomerHovered =\n      renderer.monomer.renderer ===\n      this.bondRenderer?.polymerBond?.firstMonomer?.renderer;\n\n    if (this.bondRenderer && !isFirstMonomerHovered) {\n      const firstMonomer = this.bondRenderer?.polymerBond?.firstMonomer;\n      const secondMonomer = renderer.monomer;\n\n      if (secondMonomer.isAttachmentPointUsed(event.attachmentPointName)) {\n        this.mouseup();\n        return;\n      }\n\n      for (const attachmentPoint in secondMonomer.attachmentPointsToBonds) {\n        const bond = secondMonomer.attachmentPointsToBonds[attachmentPoint];\n        if (!bond) {\n          continue;\n        }\n        const alreadyHasBond =\n          (bond.firstMonomer === firstMonomer &&\n            bond.secondMonomer === secondMonomer) ||\n          (bond.firstMonomer === secondMonomer &&\n            bond.secondMonomer === firstMonomer);\n        if (alreadyHasBond) {\n          this.editor.events.error.dispatch(\n            \"There can't be more than 1 bond between the first and the second monomer\",\n          );\n          return;\n        }\n      }\n      secondMonomer.setChosenSecondAttachmentPoint(event.attachmentPointName);\n      const showModal = this.shouldInvokeModal(firstMonomer, secondMonomer);\n      if (showModal) {\n        this.isBondConnectionModalOpen = true;\n\n        this.editor.events.openMonomerConnectionModal.dispatch({\n          firstMonomer,\n          secondMonomer,\n        });\n        return;\n      }\n      const modelChanges = this.finishBondCreation(renderer.monomer);\n      this.history.update(modelChanges);\n      this.editor.renderersContainer.update(modelChanges);\n      this.editor.renderersContainer.deletePolymerBond(\n        this.bondRenderer.polymerBond,\n        false,\n        false,\n      );\n      this.bondRenderer = undefined;\n      event.stopPropagation();\n    }\n  }\n\n  private finishBondCreation(secondMonomer: BaseMonomer) {\n    assert(this.bondRenderer);\n    if (!secondMonomer.hasFreeAttachmentPoint) {\n      this.editor.events.error.dispatch(\n        \"Monomers don't have any connection point available\",\n      );\n      return this.editor.drawingEntitiesManager.cancelPolymerBondCreation(\n        this.bondRenderer.polymerBond,\n      );\n    }\n    const firstMonomerAttachmentPoint = this.isHydrogenBond\n      ? AttachmentPointName.HYDROGEN\n      : this.bondRenderer.polymerBond.firstMonomer.getPotentialAttachmentPointByBond(\n          this.bondRenderer.polymerBond,\n        );\n    const secondMonomerAttachmentPoint = this.isHydrogenBond\n      ? AttachmentPointName.HYDROGEN\n      : secondMonomer.getPotentialAttachmentPointByBond(\n          this.bondRenderer.polymerBond,\n        );\n    assert(firstMonomerAttachmentPoint);\n    assert(secondMonomerAttachmentPoint);\n    if (\n      firstMonomerAttachmentPoint === secondMonomerAttachmentPoint &&\n      !this.isHydrogenBond\n    ) {\n      this.editor.events.error.dispatch(\n        'You have connected monomers with attachment points of the same group',\n      );\n    }\n    return this.editor.drawingEntitiesManager.finishPolymerBondCreation(\n      this.bondRenderer.polymerBond,\n      secondMonomer,\n      firstMonomerAttachmentPoint,\n      this.isHydrogenBond\n        ? AttachmentPointName.HYDROGEN\n        : secondMonomerAttachmentPoint,\n      this.bondType,\n    );\n  }\n\n  public mouseup() {\n    if (this.isBondConnectionModalOpen) {\n      return;\n    }\n\n    const modelChanges = this.removeBond();\n\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  public mouseUpMonomer(event) {\n    const renderer = event.target.__data__;\n    const isFirstMonomerHovered =\n      renderer === this.bondRenderer?.polymerBond?.firstMonomer?.renderer;\n\n    if (this.bondRenderer && !isFirstMonomerHovered) {\n      const firstMonomer = this.bondRenderer?.polymerBond?.firstMonomer;\n      const secondMonomer = renderer.monomer;\n\n      for (const attachmentPoint in secondMonomer.attachmentPointsToBonds) {\n        const bond = secondMonomer.attachmentPointsToBonds[attachmentPoint];\n        if (!bond) {\n          continue;\n        }\n        const alreadyHasBond =\n          (bond.firstMonomer === firstMonomer &&\n            bond.secondMonomer === secondMonomer) ||\n          (bond.firstMonomer === secondMonomer &&\n            bond.secondMonomer === firstMonomer);\n        if (alreadyHasBond) {\n          this.editor.events.error.dispatch(\n            \"There can't be more than 1 bond between the first and the second monomer\",\n          );\n          return;\n        }\n      }\n      const showModal = this.shouldInvokeModal(firstMonomer, secondMonomer);\n      if (showModal) {\n        this.isBondConnectionModalOpen = true;\n\n        this.editor.events.openMonomerConnectionModal.dispatch({\n          firstMonomer,\n          secondMonomer,\n        });\n        return;\n      }\n\n      // This logic so far is only for no-modal connections. Maybe then we can chain it after modal invoke\n      const modelChanges = this.finishBondCreation(renderer.monomer);\n      this.editor.renderersContainer.update(modelChanges);\n      this.editor.renderersContainer.deletePolymerBond(\n        this.bondRenderer.polymerBond,\n        false,\n        false,\n      );\n      this.bondRenderer = undefined;\n      this.history.update(modelChanges);\n      event.stopPropagation();\n    }\n  }\n\n  public mouseUpAtom(event) {\n    if (!this.bondRenderer || this.isHydrogenBond) {\n      return;\n    }\n\n    const atomRenderer = event.target.__data__ as AtomRenderer;\n    const monomer = this.bondRenderer?.polymerBond.firstMonomer;\n    const attachmentPoint =\n      monomer.getPotentialAttachmentPointByBond(\n        this.bondRenderer?.polymerBond,\n      ) || monomer?.getValidSourcePoint();\n\n    this.editor.drawingEntitiesManager.deletePolymerBond(\n      this.bondRenderer?.polymerBond,\n    );\n    this.bondRenderer?.remove();\n    this.bondRenderer = undefined;\n\n    if (!attachmentPoint) {\n      return;\n    }\n\n    const modelChanges =\n      this.editor.drawingEntitiesManager.addMonomerToAtomBond(\n        monomer,\n        atomRenderer.atom,\n        attachmentPoint,\n      );\n\n    this.editor.renderersContainer.update(modelChanges);\n    this.history.update(modelChanges);\n  }\n\n  public handleBondCreation = (payload: {\n    firstMonomer: BaseMonomer;\n    secondMonomer: BaseMonomer;\n    firstSelectedAttachmentPoint: AttachmentPointName;\n    secondSelectedAttachmentPoint: AttachmentPointName;\n  }): void => {\n    assert(this.bondRenderer);\n\n    const {\n      secondMonomer,\n      firstSelectedAttachmentPoint,\n      secondSelectedAttachmentPoint,\n    } = payload;\n    const modelChanges =\n      this.editor.drawingEntitiesManager.finishPolymerBondCreation(\n        this.bondRenderer.polymerBond,\n        secondMonomer,\n        firstSelectedAttachmentPoint,\n        secondSelectedAttachmentPoint,\n      );\n    this.history.update(modelChanges);\n    this.editor.renderersContainer.update(modelChanges);\n    if (firstSelectedAttachmentPoint === secondSelectedAttachmentPoint) {\n      this.editor.events.error.dispatch(\n        'You have connected monomers with attachment points of the same group',\n      );\n    }\n    this.isBondConnectionModalOpen = false;\n    this.editor.renderersContainer.deletePolymerBond(\n      this.bondRenderer.polymerBond,\n      false,\n      false,\n    );\n    this.bondRenderer = undefined;\n  };\n\n  public handleBondCreationCancellation = (\n    secondMonomer: BaseMonomer,\n  ): void => {\n    if (!this.bondRenderer) {\n      return;\n    }\n\n    const modelChanges =\n      this.editor.drawingEntitiesManager.cancelPolymerBondCreation(\n        this.bondRenderer.polymerBond,\n        secondMonomer,\n      );\n    this.editor.renderersContainer.update(modelChanges);\n    this.isBondConnectionModalOpen = false;\n    this.bondRenderer = undefined;\n  };\n\n  public destroy() {\n    const modelChanges = this.removeBond();\n    modelChanges.merge(\n      this.editor.drawingEntitiesManager.removeHoverForAllMonomers(),\n    );\n\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  private shouldInvokeModal(\n    firstMonomer: BaseMonomer,\n    secondMonomer: BaseMonomer,\n    checkForPotentialBonds = true,\n  ) {\n    if (this.isHydrogenBond) {\n      return;\n    }\n\n    // No Modal: no free attachment point on second monomer\n    if (!secondMonomer.hasFreeAttachmentPoint) {\n      return false;\n    }\n\n    // No Modal: Both monomers have APs selected\n    if (\n      firstMonomer.chosenFirstAttachmentPointForBond !== null &&\n      secondMonomer.chosenSecondAttachmentPointForBond !== null\n    ) {\n      return false;\n    }\n\n    // Modal: either of the monomers doesn't have any potential APs\n    if (\n      checkForPotentialBonds &&\n      (!firstMonomer.hasPotentialBonds() || !secondMonomer.hasPotentialBonds())\n    ) {\n      return true;\n    }\n\n    // No Modal: Both monomers have only 1 attachment point\n    if (\n      firstMonomer.unUsedAttachmentPointsNamesList.length === 1 &&\n      secondMonomer.unUsedAttachmentPointsNamesList.length === 1\n    ) {\n      return false;\n    }\n\n    // Modal: Any or both monomers are Chems\n    if (firstMonomer instanceof Chem || secondMonomer instanceof Chem) {\n      return true;\n    }\n\n    // Modal: Any or both monomers are unresolved\n    if (\n      firstMonomer instanceof UnresolvedMonomer ||\n      secondMonomer instanceof UnresolvedMonomer\n    ) {\n      return true;\n    }\n\n    // Modal: One monomer is Peptide and another is RNA monomer\n    const rnaMonomerClasses = [Sugar, RNABase, Phosphate];\n    const firstMonomerIsRNA = rnaMonomerClasses.find(\n      (RNAClass) => firstMonomer instanceof RNAClass,\n    );\n    const secondMonomerIsRNA = rnaMonomerClasses.find(\n      (RNAClass) => secondMonomer instanceof RNAClass,\n    );\n    if (\n      (firstMonomerIsRNA && secondMonomer instanceof Peptide) ||\n      (secondMonomerIsRNA && firstMonomer instanceof Peptide)\n    ) {\n      return true;\n    }\n\n    // Modal: special case for Peptide chain\n    if (secondMonomer instanceof Peptide && firstMonomer instanceof Peptide) {\n      // one of monomers has more than 2 AP\n      const hasPlentyAttachmentPoints =\n        firstMonomer.listOfAttachmentPoints.length > 2 ||\n        secondMonomer.listOfAttachmentPoints.length > 2;\n\n      // at least one of monomers has more than 1 free AP\n      const hasPlentyFreeAttachmentPoints =\n        firstMonomer.unUsedAttachmentPointsNamesList.length > 1 ||\n        secondMonomer.unUsedAttachmentPointsNamesList.length > 1;\n\n      // there is no possibility to connect R1-R2\n      const BothR1AttachmentPointUsed =\n        firstMonomer.isAttachmentPointUsed(AttachmentPointName.R1) &&\n        secondMonomer.isAttachmentPointUsed(AttachmentPointName.R1);\n\n      const BothR2AttachmentPointUsed =\n        firstMonomer.isAttachmentPointUsed(AttachmentPointName.R2) &&\n        secondMonomer.isAttachmentPointUsed(AttachmentPointName.R2);\n\n      const R1AndR2AttachmentPointUsed =\n        (firstMonomer.isAttachmentPointUsed(AttachmentPointName.R2) &&\n          firstMonomer.isAttachmentPointUsed(AttachmentPointName.R1)) ||\n        (secondMonomer.isAttachmentPointUsed(AttachmentPointName.R2) &&\n          secondMonomer.isAttachmentPointUsed(AttachmentPointName.R1));\n\n      if (\n        hasPlentyAttachmentPoints &&\n        hasPlentyFreeAttachmentPoints &&\n        (BothR1AttachmentPointUsed ||\n          BothR2AttachmentPointUsed ||\n          R1AndR2AttachmentPointUsed)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexport { PolymerBond };\n","import {\n  AmbiguousMonomerType,\n  AttachmentPointName,\n  MonomerItemType,\n  MonomerOrAmbiguousType,\n} from 'domain/types';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { Command } from 'domain/entities/Command';\nimport { DrawingEntity } from 'domain/entities/DrawingEntity';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport assert from 'assert';\nimport {\n  BaseMonomer,\n  Chem,\n  LinkerSequenceNode,\n  Phosphate,\n  Pool,\n  RNABase,\n  SGroupForest,\n  Struct,\n  Sugar,\n} from 'domain/entities';\nimport {\n  AttachmentPointHoverOperation,\n  MonomerAddOperation,\n  MonomerDeleteOperation,\n  MonomerHoverOperation,\n  MonomerItemModifyOperation,\n  MonomerMoveOperation,\n} from 'application/editor/operations/monomer';\nimport {\n  DrawingEntityHoverOperation,\n  DrawingEntityMoveOperation,\n  DrawingEntityRedrawOperation,\n  DrawingEntitySelectOperation,\n} from 'application/editor/operations/drawingEntity';\nimport {\n  PolymerBondAddOperation,\n  PolymerBondCancelCreationOperation,\n  PolymerBondDeleteOperation,\n  PolymerBondFinishCreationOperation,\n  PolymerBondMoveOperation,\n  PolymerBondShowInfoOperation,\n  ReconnectPolymerBondOperation,\n} from 'application/editor/operations/polymerBond';\nimport {\n  MONOMER_CONST,\n  monomerFactory,\n} from 'application/editor/operations/monomer/monomerFactory';\nimport { Coordinates, CoreEditor } from 'application/editor/internal';\nimport {\n  getNextMonomerInChain,\n  getPhosphateFromSugar,\n  isAmbiguousMonomerLibraryItem,\n  isRnaBaseOrAmbiguousRnaBase,\n  isValidNucleoside,\n  isValidNucleotide,\n} from 'domain/helpers/monomers';\nimport { RNA_MONOMER_DISTANCE } from 'application/editor/tools/RnaPreset';\nimport { ChainsCollection } from 'domain/entities/monomer-chains/ChainsCollection';\nimport { SequenceRenderer } from 'application/render/renderers/sequence/SequenceRenderer';\nimport { Nucleoside } from './Nucleoside';\nimport { Nucleotide } from './Nucleotide';\nimport { SequenceMode, SnakeMode } from 'application/editor';\nimport { CanvasMatrix } from 'domain/entities/canvas-matrix/CanvasMatrix';\nimport { RecalculateCanvasMatrixOperation } from 'application/editor/operations/modes/snake';\nimport { Matrix } from 'domain/entities/canvas-matrix/Matrix';\nimport { Cell } from 'domain/entities/canvas-matrix/Cell';\nimport { AmbiguousMonomer } from 'domain/entities/AmbiguousMonomer';\nimport { KetMonomerClass } from 'application/formatters';\nimport { Atom } from 'domain/entities/CoreAtom';\nimport { Bond } from 'domain/entities/CoreBond';\nimport {\n  AtomAddOperation,\n  AtomDeleteOperation,\n} from 'application/editor/operations/coreAtom/atom';\nimport {\n  BondAddOperation,\n  BondDeleteOperation,\n} from 'application/editor/operations/coreBond/bond';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\nimport {\n  MonomerToAtomBondAddOperation,\n  MonomerToAtomBondDeleteOperation,\n} from 'application/editor/operations/monomerToAtomBond/monomerToAtomBond';\nimport { AtomLabel } from 'domain/constants';\nimport { isMonomerSgroupWithAttachmentPoints } from '../../utilities/monomers';\nimport { HydrogenBond } from 'domain/entities/HydrogenBond';\nimport { MACROMOLECULES_BOND_TYPES } from 'application/editor/tools/Bond';\n\nconst VERTICAL_DISTANCE_FROM_MONOMER = 30;\nconst DISTANCE_FROM_RIGHT = 55;\nexport const SNAKE_LAYOUT_CELL_WIDTH = 60;\nexport const MONOMER_START_X_POSITION = 20 + SNAKE_LAYOUT_CELL_WIDTH / 2;\nexport const MONOMER_START_Y_POSITION = 20 + SNAKE_LAYOUT_CELL_WIDTH / 2;\n\ntype RnaPresetAdditionParams = {\n  sugar: MonomerItemType;\n  sugarPosition: Vec2;\n  rnaBase: MonomerItemType | undefined;\n  rnaBasePosition: Vec2 | undefined;\n  phosphate: MonomerItemType | undefined;\n  phosphatePosition: Vec2 | undefined;\n  existingNode?: Nucleotide | Nucleoside | LinkerSequenceNode;\n};\n\ntype NucleotideOrNucleoside = {\n  sugar: Sugar;\n  phosphate?: Phosphate;\n  rnaBase: RNABase | AmbiguousMonomer;\n  baseMonomer: Sugar | Phosphate;\n};\n\nexport class DrawingEntitiesManager {\n  public monomers: Map<number, BaseMonomer> = new Map();\n  public polymerBonds: Map<number, PolymerBond | HydrogenBond> = new Map();\n  public atoms: Map<number, Atom> = new Map();\n  public bonds: Map<number, Bond> = new Map();\n  public monomerToAtomBonds: Map<number, MonomerToAtomBond> = new Map();\n\n  public micromoleculesHiddenEntities: Struct = new Struct();\n  public canvasMatrix?: CanvasMatrix;\n  public snakeLayoutMatrix?: Matrix<Cell>;\n  public get bottomRightMonomerPosition(): Vec2 {\n    let position: Vec2 | null = null;\n\n    this.monomers.forEach((monomer) => {\n      if (\n        !position ||\n        monomer.position.x + monomer.position.y > position.x + position.y\n      ) {\n        position = monomer.position;\n      }\n    });\n\n    return position || new Vec2(0, 0, 0);\n  }\n\n  get selectedEntitiesArr() {\n    const selectedEntities: DrawingEntity[] = [];\n    this.allEntities.forEach(([, drawingEntity]) => {\n      if (drawingEntity.selected) {\n        selectedEntities.push(drawingEntity);\n      }\n    });\n    return selectedEntities;\n  }\n\n  public get selectedEntities() {\n    return this.allEntities.filter(\n      ([, drawingEntity]) => drawingEntity.selected,\n    );\n  }\n\n  public get allEntities() {\n    return [\n      ...(this.monomers as Map<number, DrawingEntity>),\n      ...(this.polymerBonds as Map<number, DrawingEntity>),\n      ...(this.monomerToAtomBonds as Map<number, DrawingEntity>),\n      ...(this.bonds as Map<number, DrawingEntity>),\n      ...(this.atoms as Map<number, DrawingEntity>),\n    ];\n  }\n\n  public get hasDrawingEntities() {\n    return this.allEntities.length !== 0;\n  }\n\n  public get allBondsToMonomers() {\n    return [\n      ...(this.polymerBonds as Map<number, DrawingEntity>),\n      ...(this.monomerToAtomBonds as Map<number, DrawingEntity>),\n    ];\n  }\n\n  public deleteSelectedEntities() {\n    const mergedCommand = new Command();\n    this.selectedEntities.forEach(([, drawingEntity]) => {\n      const command = this.deleteDrawingEntity(drawingEntity);\n      mergedCommand.merge(command);\n    });\n    return mergedCommand;\n  }\n\n  public deleteAllEntities() {\n    const mergedCommand = new Command();\n    this.allEntities.forEach(([, drawingEntity]) => {\n      const command = this.deleteDrawingEntity(drawingEntity, false);\n      mergedCommand.merge(command);\n    });\n    return mergedCommand;\n  }\n\n  public addMonomerChangeModel(\n    monomerItem: MonomerItemType,\n    position: Vec2,\n    _monomer?: BaseMonomer,\n  ) {\n    if (_monomer) {\n      this.monomers.set(_monomer.id, _monomer);\n      return _monomer;\n    }\n    const monomer = this.createMonomer(monomerItem, position);\n    monomer.moveAbsolute(position);\n    this.monomers.set(monomer.id, monomer);\n    return monomer;\n  }\n\n  public createMonomer(monomerItem: MonomerOrAmbiguousType, position: Vec2) {\n    if (isAmbiguousMonomerLibraryItem(monomerItem)) {\n      return new AmbiguousMonomer(monomerItem, position);\n    } else {\n      const [Monomer] = monomerFactory(monomerItem);\n\n      return new Monomer(monomerItem, position);\n    }\n  }\n\n  public updateMonomerItem(\n    monomer: BaseMonomer,\n    monomerItemNew: MonomerItemType,\n  ) {\n    const initialMonomer = this.monomers.get(monomer.id);\n    if (!initialMonomer) return monomer;\n    initialMonomer.monomerItem = monomerItemNew;\n    this.monomers.set(monomer.id, initialMonomer);\n    return initialMonomer;\n  }\n\n  public addMonomer(\n    monomerItem: MonomerItemType,\n    position: Vec2,\n    _monomer?: BaseMonomer,\n  ) {\n    const command = new Command();\n    let addMonomerChangeModelCallback = this.addMonomerChangeModel.bind(\n      this,\n      monomerItem,\n      position,\n    );\n    if (_monomer) {\n      addMonomerChangeModelCallback = addMonomerChangeModelCallback.bind(\n        this,\n        _monomer,\n      );\n    }\n    const operation = new MonomerAddOperation(\n      addMonomerChangeModelCallback,\n      this.deleteMonomerChangeModel.bind(this),\n    );\n\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public deleteDrawingEntity(\n    drawingEntity: DrawingEntity,\n    needToDeleteConnectedEntities = true,\n  ) {\n    if (drawingEntity instanceof BaseMonomer) {\n      return this.deleteMonomer(drawingEntity, needToDeleteConnectedEntities);\n    } else if (\n      drawingEntity instanceof PolymerBond ||\n      drawingEntity instanceof HydrogenBond\n    ) {\n      return this.deletePolymerBond(drawingEntity);\n    } else if (drawingEntity instanceof MonomerToAtomBond) {\n      return this.deleteMonomerToAtomBond(drawingEntity);\n    } else if (drawingEntity instanceof Bond) {\n      return this.deleteBond(drawingEntity);\n    } else if (drawingEntity instanceof Atom) {\n      return this.deleteAtom(drawingEntity);\n    } else {\n      return new Command();\n    }\n  }\n\n  public selectDrawingEntity(drawingEntity: DrawingEntity) {\n    const command = this.unselectAllDrawingEntities();\n\n    drawingEntity.turnOnSelection();\n    command.merge(this.createDrawingEntitySelectionCommand(drawingEntity));\n\n    return command;\n  }\n\n  public selectDrawingEntities(drawingEntities: DrawingEntity[]) {\n    const command = this.unselectAllDrawingEntities();\n    drawingEntities.forEach((drawingEntity: DrawingEntity) => {\n      drawingEntity.turnOnSelection();\n      const operation = new DrawingEntitySelectOperation(drawingEntity);\n      command.addOperation(operation);\n    });\n    return command;\n  }\n\n  public createDrawingEntitySelectionCommand(drawingEntity: DrawingEntity) {\n    const command = new Command();\n\n    const selectionCommand = new DrawingEntitySelectOperation(drawingEntity);\n    command.addOperation(selectionCommand);\n\n    return command;\n  }\n\n  public unselectAllDrawingEntities() {\n    const command = new Command();\n\n    this.allEntities.forEach(([, drawingEntity]) => {\n      if (drawingEntity.selected) {\n        command.merge(this.unselectDrawingEntity(drawingEntity));\n      }\n    });\n\n    return command;\n  }\n\n  public unselectDrawingEntity(drawingEntity: DrawingEntity) {\n    const command = new Command();\n    drawingEntity.turnOffSelection();\n    command.addOperation(new DrawingEntitySelectOperation(drawingEntity));\n    return command;\n  }\n\n  public selectAllDrawingEntities() {\n    const command = new Command();\n\n    this.allEntities.forEach(([, drawingEntity]) => {\n      if (!drawingEntity.selected) {\n        drawingEntity.turnOnSelection();\n        const operation = new DrawingEntitySelectOperation(drawingEntity);\n        command.addOperation(operation);\n      }\n    });\n\n    return command;\n  }\n\n  public addDrawingEntitiesToSelection(drawingEntities: DrawingEntity[]) {\n    const command = new Command();\n    drawingEntities.forEach((drawingEntity: DrawingEntity) => {\n      if (drawingEntity.selected) {\n        drawingEntity.turnOffSelection();\n      } else {\n        drawingEntity.turnOnSelection();\n      }\n      command.addOperation(new DrawingEntitySelectOperation(drawingEntity));\n    });\n    return command;\n  }\n\n  public moveDrawingEntityModelChange(\n    drawingEntity: DrawingEntity,\n    offset?: Vec2,\n  ) {\n    if (\n      drawingEntity instanceof PolymerBond ||\n      drawingEntity instanceof HydrogenBond\n    ) {\n      drawingEntity.moveToLinkedEntities();\n    } else if (drawingEntity instanceof Bond) {\n      drawingEntity.moveToLinkedAtoms();\n    } else if (drawingEntity instanceof MonomerToAtomBond) {\n      drawingEntity.moveToLinkedEntities();\n    } else {\n      assert(offset);\n      drawingEntity.moveRelative(offset);\n      if (\n        drawingEntity instanceof BaseMonomer &&\n        isMonomerSgroupWithAttachmentPoints(drawingEntity)\n      ) {\n        this.moveChemAtomsPoint(drawingEntity, offset);\n      }\n    }\n\n    return drawingEntity;\n  }\n\n  private moveChemAtomsPoint(drawingEntity: BaseMonomer, offset?: Vec2) {\n    if (drawingEntity.monomerItem.props.isMicromoleculeFragment && offset) {\n      drawingEntity.monomerItem.struct.atoms.forEach((atom) => {\n        atom.pp.add_(offset);\n      });\n\n      drawingEntity.monomerItem.struct.sgroups.forEach((sgroup) => {\n        sgroup.pp?.add_(offset);\n      });\n    }\n  }\n\n  public moveSelectedDrawingEntities(\n    partOfMovementOffset: Vec2,\n    fullMovementOffset?: Vec2,\n  ) {\n    const command = new Command();\n\n    [...this.atoms.values(), ...this.monomers.values()].forEach(\n      (drawingEntity) => {\n        if (\n          drawingEntity instanceof BaseMonomer &&\n          drawingEntity.monomerItem.props.isMicromoleculeFragment &&\n          !isMonomerSgroupWithAttachmentPoints(drawingEntity)\n        ) {\n          return;\n        }\n\n        if (drawingEntity.selected) {\n          command.merge(\n            this.createDrawingEntityMovingCommand(\n              drawingEntity,\n              partOfMovementOffset,\n              fullMovementOffset,\n            ),\n          );\n        }\n      },\n    );\n\n    this.polymerBonds.forEach((drawingEntity) => {\n      if (\n        drawingEntity.selected ||\n        drawingEntity.firstMonomer.selected ||\n        drawingEntity.secondMonomer?.selected\n      ) {\n        command.merge(\n          this.createDrawingEntityMovingCommand(\n            drawingEntity,\n            partOfMovementOffset,\n            fullMovementOffset,\n          ),\n        );\n      }\n    });\n\n    this.monomerToAtomBonds.forEach((drawingEntity) => {\n      if (\n        drawingEntity.selected ||\n        drawingEntity.monomer.selected ||\n        drawingEntity.atom.selected\n      ) {\n        command.merge(\n          this.createDrawingEntityMovingCommand(\n            drawingEntity,\n            partOfMovementOffset,\n            fullMovementOffset,\n          ),\n        );\n      }\n    });\n\n    this.bonds.forEach((drawingEntity) => {\n      if (\n        drawingEntity.selected ||\n        drawingEntity.firstAtom.selected ||\n        drawingEntity.secondAtom.selected\n      ) {\n        command.merge(\n          this.createDrawingEntityMovingCommand(\n            drawingEntity,\n            partOfMovementOffset,\n            fullMovementOffset,\n          ),\n        );\n      }\n    });\n\n    return command;\n  }\n\n  public createDrawingEntityMovingCommand(\n    drawingEntity: DrawingEntity,\n    partOfMovementOffset: Vec2,\n    fullMovementOffset?: Vec2,\n  ) {\n    const command = new Command();\n\n    const movingCommand = new DrawingEntityMoveOperation(\n      this.moveDrawingEntityModelChange.bind(\n        this,\n        drawingEntity,\n        partOfMovementOffset,\n      ),\n      this.moveDrawingEntityModelChange.bind(\n        this,\n        drawingEntity,\n        fullMovementOffset\n          ? fullMovementOffset.negated()\n          : partOfMovementOffset.negated(),\n      ),\n      this.moveDrawingEntityModelChange.bind(\n        this,\n        drawingEntity,\n        fullMovementOffset || partOfMovementOffset,\n      ),\n      drawingEntity,\n    );\n    command.addOperation(movingCommand);\n\n    return command;\n  }\n\n  public createDrawingEntityRedrawCommand(\n    drawingEntityRedrawModelChange: () => DrawingEntity,\n    invertDrawingEntityRedrawModelChange: () => DrawingEntity,\n  ) {\n    const command = new Command();\n\n    const redrawCommand = new DrawingEntityRedrawOperation(\n      drawingEntityRedrawModelChange,\n      invertDrawingEntityRedrawModelChange,\n    );\n    command.addOperation(redrawCommand);\n\n    return command;\n  }\n\n  private deleteMonomerChangeModel(monomer: BaseMonomer) {\n    this.monomers.delete(monomer.id);\n  }\n\n  public deleteMonomer(\n    monomer: BaseMonomer,\n    needToDeleteConnectedBonds = true,\n  ) {\n    const command = new Command();\n    const operation = new MonomerDeleteOperation(\n      monomer,\n      this.addMonomerChangeModel.bind(\n        this,\n        monomer.monomerItem,\n        monomer.position,\n      ),\n      this.deleteMonomerChangeModel.bind(this),\n    );\n    command.addOperation(operation);\n\n    if (needToDeleteConnectedBonds && monomer.hasBonds) {\n      monomer.forEachBond((bond) => {\n        // Do not delete connected bond if it is selected because it is done deleteDrawingEntity method\n        // This check helps to avoid operations duplication\n        if (bond.selected) return;\n\n        if (bond instanceof PolymerBond || bond instanceof HydrogenBond) {\n          // We need to remove connected bond when doing a group selection even if it is not selected\n          // and mark it as selected to avoid operations duplication\n          bond.turnOnSelection();\n          command.merge(this.deletePolymerBond(bond));\n        } else {\n          command.merge(this.deleteMonomerToAtomBond(bond));\n        }\n      });\n    }\n\n    return command;\n  }\n\n  public modifyMonomerItem(\n    monomer: BaseMonomer,\n    monomerItemNew: MonomerItemType,\n  ) {\n    const command = new Command();\n    const operation = new MonomerItemModifyOperation(\n      monomer,\n      this.updateMonomerItem.bind(this, monomer, monomerItemNew),\n      this.updateMonomerItem.bind(this, monomer, monomer.monomerItem),\n    );\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public selectIfLocatedInRectangle(\n    rectangleTopLeftPoint: Vec2,\n    rectangleBottomRightPoint: Vec2,\n    previousSelectedEntities: [number, DrawingEntity][],\n    shiftKey = false,\n  ) {\n    const command = new Command();\n    this.allEntities.forEach(([, drawingEntity]) => {\n      if (\n        drawingEntity instanceof Chem &&\n        drawingEntity.monomerItem.props.isMicromoleculeFragment &&\n        !isMonomerSgroupWithAttachmentPoints(drawingEntity)\n      ) {\n        return;\n      }\n\n      const isPreviousSelected = previousSelectedEntities.find(\n        ([, entity]) => entity === drawingEntity,\n      );\n      let isValueChanged;\n      const editor = CoreEditor.provideEditorInstance();\n      if (\n        editor.mode instanceof SequenceMode &&\n        drawingEntity instanceof PolymerBond\n      ) {\n        isValueChanged = this.checkBondSelectionForSequenceMode(\n          drawingEntity,\n          isValueChanged,\n        );\n      } else {\n        isValueChanged = drawingEntity.selectIfLocatedInRectangle(\n          rectangleTopLeftPoint,\n          rectangleBottomRightPoint,\n          !!isPreviousSelected,\n          shiftKey,\n        );\n      }\n      if (isValueChanged) {\n        const selectionCommand =\n          this.createDrawingEntitySelectionCommand(drawingEntity);\n\n        command.merge(selectionCommand);\n      }\n    });\n    return command;\n  }\n\n  private checkBondSelectionForSequenceMode(\n    bond: PolymerBond,\n    isValueChanged: boolean,\n  ) {\n    const prevSelectedValue = bond.selected;\n    if (bond.firstMonomer.selected && bond.secondMonomer?.selected) {\n      bond.turnOnSelection();\n    } else {\n      bond.turnOffSelection();\n    }\n    isValueChanged = prevSelectedValue !== bond.selected;\n    return isValueChanged;\n  }\n\n  public startPolymerBondCreationChangeModel(\n    firstMonomer,\n    startPosition,\n    endPosition,\n    bondType = MACROMOLECULES_BOND_TYPES.SINGLE,\n    _polymerBond?: PolymerBond,\n  ) {\n    if (_polymerBond) {\n      this.polymerBonds.set(_polymerBond.id, _polymerBond);\n      return _polymerBond;\n    }\n\n    const polymerBond =\n      bondType === MACROMOLECULES_BOND_TYPES.HYDROGEN\n        ? new HydrogenBond(firstMonomer)\n        : new PolymerBond(firstMonomer);\n    this.polymerBonds.set(polymerBond.id, polymerBond);\n    // If we started from a specific AP, we need to 'attach' the bond to the first monomer\n    if (firstMonomer.chosenFirstAttachmentPointForBond) {\n      const startBondAttachmentPoint = firstMonomer.startBondAttachmentPoint;\n      firstMonomer.setBond(startBondAttachmentPoint, polymerBond);\n      firstMonomer.setPotentialBond(startBondAttachmentPoint, polymerBond);\n    }\n    polymerBond.moveBondStartAbsolute(startPosition.x, startPosition.y);\n    polymerBond.moveBondEndAbsolute(endPosition.x, endPosition.y);\n    return polymerBond;\n  }\n\n  public startPolymerBondCreation(\n    firstMonomer: BaseMonomer,\n    startPosition: Vec2,\n    endPosition: Vec2,\n    bondType: MACROMOLECULES_BOND_TYPES,\n  ) {\n    const command = new Command();\n\n    const operation = new PolymerBondAddOperation(\n      this.startPolymerBondCreationChangeModel.bind(\n        this,\n        firstMonomer,\n        startPosition,\n        endPosition,\n        bondType,\n      ),\n      this.deletePolymerBondChangeModel.bind(this),\n    );\n\n    command.addOperation(operation);\n\n    return { command, polymerBond: operation.polymerBond };\n  }\n\n  public deletePolymerBondChangeModel(polymerBond: PolymerBond) {\n    if (this.polymerBonds.get(polymerBond.id) !== polymerBond) {\n      return;\n    }\n\n    this.polymerBonds.delete(polymerBond.id);\n\n    const firstMonomerAttachmentPoint =\n      polymerBond.firstMonomer.getAttachmentPointByBond(polymerBond);\n    const secondMonomerAttachmentPoint =\n      polymerBond.secondMonomer?.getAttachmentPointByBond(polymerBond);\n    polymerBond.firstMonomer.removePotentialBonds();\n    polymerBond.secondMonomer?.removePotentialBonds();\n    polymerBond.firstMonomer.turnOffSelection();\n    polymerBond.secondMonomer?.turnOffSelection();\n    if (firstMonomerAttachmentPoint) {\n      polymerBond.firstMonomer.unsetBond(firstMonomerAttachmentPoint);\n    }\n    if (secondMonomerAttachmentPoint) {\n      polymerBond.secondMonomer?.unsetBond(secondMonomerAttachmentPoint);\n    }\n  }\n\n  public deletePolymerBond(polymerBond: PolymerBond | HydrogenBond) {\n    const command = new Command();\n    const firstAttachmentPoint =\n      polymerBond.firstMonomer.getAttachmentPointByBond(\n        polymerBond,\n      ) as AttachmentPointName;\n    const secondAttachmentPoint =\n      polymerBond.secondMonomer?.getAttachmentPointByBond(\n        polymerBond,\n      ) as AttachmentPointName;\n\n    const operation = new PolymerBondDeleteOperation(\n      polymerBond,\n      this.deletePolymerBondChangeModel.bind(this, polymerBond),\n      (_polymerBond?: PolymerBond | HydrogenBond) =>\n        this.finishPolymerBondCreationModelChange(\n          polymerBond.firstMonomer,\n          polymerBond.secondMonomer as BaseMonomer,\n          firstAttachmentPoint,\n          secondAttachmentPoint,\n          MACROMOLECULES_BOND_TYPES.SINGLE,\n          _polymerBond,\n        ),\n    );\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public cancelPolymerBondCreation(\n    polymerBond: PolymerBond,\n    secondMonomer?: BaseMonomer,\n  ) {\n    this.polymerBonds.delete(polymerBond.id);\n    const command = new Command();\n    polymerBond.firstMonomer.removeBond(polymerBond);\n    polymerBond.firstMonomer.removePotentialBonds(true);\n    polymerBond.firstMonomer.turnOffSelection();\n    polymerBond.firstMonomer.turnOffHover();\n    polymerBond.firstMonomer.turnOffAttachmentPointsVisibility();\n\n    secondMonomer?.turnOffSelection();\n    secondMonomer?.turnOffHover();\n    secondMonomer?.turnOffAttachmentPointsVisibility();\n    const operation = new PolymerBondCancelCreationOperation(\n      polymerBond,\n      secondMonomer,\n    );\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public movePolymerBond(polymerBond: PolymerBond, position: Vec2) {\n    const command = new Command();\n    polymerBond.moveBondEndAbsolute(position.x, position.y);\n\n    const operation = new PolymerBondMoveOperation(polymerBond);\n\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public finishPolymerBondCreationModelChange(\n    firstMonomer: BaseMonomer,\n    secondMonomer: BaseMonomer,\n    firstMonomerAttachmentPoint: AttachmentPointName,\n    secondMonomerAttachmentPoint: AttachmentPointName,\n    bondType?: MACROMOLECULES_BOND_TYPES,\n    _polymerBond?: PolymerBond,\n  ) {\n    if (_polymerBond) {\n      this.polymerBonds.set(_polymerBond.id, _polymerBond);\n      firstMonomer.setBond(firstMonomerAttachmentPoint, _polymerBond);\n      secondMonomer.setBond(secondMonomerAttachmentPoint, _polymerBond);\n      return _polymerBond;\n    }\n\n    const isHydrogenBond = bondType === MACROMOLECULES_BOND_TYPES.HYDROGEN;\n    const polymerBond = isHydrogenBond\n      ? new HydrogenBond(firstMonomer)\n      : new PolymerBond(firstMonomer);\n    this.polymerBonds.set(polymerBond.id, polymerBond);\n    polymerBond.setSecondMonomer(secondMonomer);\n    polymerBond.firstMonomer.setBond(firstMonomerAttachmentPoint, polymerBond);\n    assert(polymerBond.secondMonomer);\n    polymerBond.secondMonomer.setBond(\n      secondMonomerAttachmentPoint,\n      polymerBond,\n    );\n\n    polymerBond.firstMonomer.removePotentialBonds(true);\n    polymerBond.secondMonomer.removePotentialBonds(true);\n    polymerBond.firstMonomer.setChosenFirstAttachmentPoint(null);\n    polymerBond.secondMonomer?.setChosenSecondAttachmentPoint(null);\n    polymerBond.moveToLinkedEntities();\n    polymerBond.firstMonomer.turnOffSelection();\n    polymerBond.firstMonomer.turnOffHover();\n    polymerBond.firstMonomer.turnOffAttachmentPointsVisibility();\n    polymerBond.secondMonomer.turnOffSelection();\n    polymerBond.secondMonomer.turnOffHover();\n    polymerBond.secondMonomer.turnOffAttachmentPointsVisibility();\n    polymerBond.turnOffHover();\n\n    return polymerBond;\n  }\n\n  public finishPolymerBondCreation(\n    polymerBond: PolymerBond,\n    secondMonomer: BaseMonomer,\n    firstMonomerAttachmentPoint: AttachmentPointName,\n    secondMonomerAttachmentPoint: AttachmentPointName,\n    bondType = MACROMOLECULES_BOND_TYPES.SINGLE,\n  ) {\n    const command = new Command();\n    const editor = CoreEditor.provideEditorInstance();\n\n    const firstMonomer = polymerBond.firstMonomer;\n    this.polymerBonds.delete(polymerBond.id);\n    const operation = new PolymerBondFinishCreationOperation(\n      (polymerBond?: PolymerBond) =>\n        this.finishPolymerBondCreationModelChange(\n          firstMonomer,\n          secondMonomer,\n          firstMonomerAttachmentPoint,\n          secondMonomerAttachmentPoint,\n          bondType,\n          polymerBond,\n        ),\n      this.deletePolymerBondChangeModel.bind(this),\n    );\n\n    command.addOperation(operation);\n\n    if (editor.mode instanceof SnakeMode) {\n      command.merge(this.recalculateCanvasMatrix());\n    }\n\n    return command;\n  }\n\n  public createPolymerBond(\n    firstMonomer: BaseMonomer,\n    secondMonomer: BaseMonomer,\n    firstMonomerAttachmentPoint: AttachmentPointName,\n    secondMonomerAttachmentPoint: AttachmentPointName,\n    bondType = MACROMOLECULES_BOND_TYPES.SINGLE,\n  ) {\n    const command = new Command();\n\n    const operation = new PolymerBondFinishCreationOperation(\n      (polymerBond?: PolymerBond) =>\n        this.finishPolymerBondCreationModelChange(\n          firstMonomer,\n          secondMonomer,\n          firstMonomerAttachmentPoint,\n          secondMonomerAttachmentPoint,\n          bondType,\n          polymerBond,\n        ),\n      this.deletePolymerBondChangeModel.bind(this),\n    );\n\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public intendToStartBondCreation(monomer: BaseMonomer) {\n    const command = new Command();\n    monomer.turnOnHover();\n    monomer.turnOnAttachmentPointsVisibility();\n\n    const operation = new MonomerHoverOperation(monomer, true);\n\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public intendToStartAttachmenPointBondCreation(\n    monomer: BaseMonomer,\n    attachmentPointName: AttachmentPointName,\n  ) {\n    const command = new Command();\n    monomer.turnOnHover();\n    monomer.turnOnAttachmentPointsVisibility();\n\n    const operation = new AttachmentPointHoverOperation(\n      monomer,\n      attachmentPointName,\n    );\n\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public intendToFinishBondCreation(\n    monomer: BaseMonomer,\n    bond: PolymerBond,\n    shouldCalculateBonds: boolean,\n  ) {\n    const command = new Command();\n    monomer.turnOnHover();\n    monomer.turnOnAttachmentPointsVisibility();\n    if (shouldCalculateBonds) {\n      bond.firstMonomer.removePotentialBonds();\n      monomer.removePotentialBonds();\n      const firstMonomerValidSourcePoint =\n        bond.firstMonomer.getValidSourcePoint(monomer);\n      const secondMonomerValidTargetPoint = monomer.getValidTargetPoint(\n        bond.firstMonomer,\n      );\n      bond.firstMonomer.setPotentialBond(firstMonomerValidSourcePoint, bond);\n      monomer.setPotentialBond(secondMonomerValidTargetPoint, bond);\n    }\n    const connectFirstMonomerOperation = new MonomerHoverOperation(\n      bond.firstMonomer,\n      true,\n    );\n    const connectSecondMonomerOperation = new MonomerHoverOperation(\n      monomer,\n      true,\n    );\n    command.addOperation(connectFirstMonomerOperation);\n    command.addOperation(connectSecondMonomerOperation);\n    return command;\n  }\n\n  public intendToFinishAttachmenPointBondCreation(\n    monomer: BaseMonomer,\n    bond: PolymerBond,\n    attachmentPointName: AttachmentPointName,\n    shouldCalculateBonds: boolean,\n  ) {\n    const command = new Command();\n    monomer.turnOnHover();\n    monomer.turnOnAttachmentPointsVisibility();\n\n    if (monomer.isAttachmentPointUsed(attachmentPointName)) {\n      const operation = new MonomerHoverOperation(monomer, true);\n      command.addOperation(operation);\n      return command;\n    }\n    if (attachmentPointName) {\n      monomer.setPotentialSecondAttachmentPoint(attachmentPointName);\n      monomer.setPotentialBond(attachmentPointName, bond);\n    }\n\n    if (shouldCalculateBonds) {\n      bond.firstMonomer.removePotentialBonds();\n      monomer.removePotentialBonds();\n      const firstMonomerValidSourcePoint =\n        bond.firstMonomer.getValidSourcePoint(monomer);\n      const secondMonomerValidTargetPoint = monomer.getValidTargetPoint(\n        bond.firstMonomer,\n      );\n      bond.firstMonomer.setPotentialBond(firstMonomerValidSourcePoint, bond);\n      monomer.setPotentialBond(secondMonomerValidTargetPoint, bond);\n    }\n    const connectFirstMonomerOperation = new MonomerHoverOperation(\n      bond.firstMonomer,\n      true,\n    );\n    const connectSecondMonomerOperation = new AttachmentPointHoverOperation(\n      monomer,\n      attachmentPointName,\n    );\n    command.addOperation(connectFirstMonomerOperation);\n    command.addOperation(connectSecondMonomerOperation);\n    return command;\n  }\n\n  public cancelIntentionToFinishBondCreation(\n    monomer: BaseMonomer,\n    polymerBond?: PolymerBond,\n  ) {\n    const command = new Command();\n    monomer.turnOffHover();\n    monomer.turnOffAttachmentPointsVisibility();\n    monomer.setPotentialSecondAttachmentPoint(null);\n    monomer.removePotentialBonds();\n    const operation = new MonomerHoverOperation(monomer, true);\n    command.addOperation(operation);\n\n    // If the initial AP has been chosen automatically, it needs to be removed\n    if (\n      polymerBond &&\n      !polymerBond.firstMonomer.chosenFirstAttachmentPointForBond\n    ) {\n      polymerBond.firstMonomer.removePotentialBonds();\n      const operation = new MonomerHoverOperation(\n        polymerBond.firstMonomer,\n        true,\n      );\n      command.addOperation(operation);\n    }\n\n    return command;\n  }\n\n  public intendToSelectDrawingEntity(drawingEntity: DrawingEntity) {\n    const command = new Command();\n\n    drawingEntity.turnOnHover();\n\n    const operation = new DrawingEntityHoverOperation(drawingEntity);\n\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public cancelIntentionToSelectDrawingEntity(drawingEntity: DrawingEntity) {\n    const command = new Command();\n\n    drawingEntity.turnOffHover();\n\n    const operation = new DrawingEntityHoverOperation(drawingEntity);\n\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public showPolymerBondInformation(polymerBond: PolymerBond) {\n    const command = new Command();\n\n    polymerBond.turnOnHover();\n    polymerBond.firstMonomer.turnOnHover();\n\n    assert(polymerBond.secondMonomer);\n\n    polymerBond.secondMonomer.turnOnHover();\n\n    if (!(polymerBond instanceof HydrogenBond)) {\n      polymerBond.firstMonomer.turnOnAttachmentPointsVisibility();\n      polymerBond.secondMonomer.turnOnAttachmentPointsVisibility();\n    }\n\n    const operation = new PolymerBondShowInfoOperation(polymerBond);\n\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public hidePolymerBondInformation(polymerBond: PolymerBond) {\n    const command = new Command();\n\n    polymerBond.turnOffHover();\n    polymerBond.firstMonomer.turnOffHover();\n    polymerBond.firstMonomer.turnOffAttachmentPointsVisibility();\n\n    assert(polymerBond.secondMonomer);\n\n    polymerBond.secondMonomer.turnOffHover();\n    polymerBond.secondMonomer.turnOffAttachmentPointsVisibility();\n\n    const operation = new PolymerBondShowInfoOperation(polymerBond);\n\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public addRnaPresetFromNode = (\n    node: Nucleotide | Nucleoside | LinkerSequenceNode,\n  ) => {\n    // TODO: Consider combining it with the method below to avoid code duplication\n    const command = new Command();\n    const sugarMonomer = node.monomers.find(\n      (monomer) => monomer instanceof Sugar,\n    ) as Sugar | AmbiguousMonomer;\n    const phosphateMonomer = node.monomers.find(\n      (monomer) => monomer instanceof Phosphate,\n    ) as Phosphate | AmbiguousMonomer;\n    const rnaBaseMonomer = node.monomers.find((monomer) =>\n      isRnaBaseOrAmbiguousRnaBase(monomer),\n    ) as RNABase | AmbiguousMonomer;\n    const monomers = [rnaBaseMonomer, sugarMonomer, phosphateMonomer].filter(\n      (monomer) => monomer !== undefined,\n    ) as BaseMonomer[];\n\n    monomers.forEach((monomer, monomerIndex) => {\n      const monomerAddOperation =\n        monomer instanceof AmbiguousMonomer\n          ? new MonomerAddOperation(\n              this.addAmbiguousMonomerChangeModel.bind(\n                this,\n                monomer.variantMonomerItem,\n                monomer.position,\n                monomer,\n              ),\n              this.deleteMonomerChangeModel.bind(this),\n            )\n          : new MonomerAddOperation(\n              this.addMonomerChangeModel.bind(\n                this,\n                monomer.monomerItem,\n                monomer.position,\n                monomer,\n              ),\n              this.deleteMonomerChangeModel.bind(this),\n            );\n\n      command.addOperation(monomerAddOperation);\n      if (monomerIndex > 0) {\n        const previousMonomer = monomers[monomerIndex - 1];\n        const attPointStart = previousMonomer.getValidSourcePoint(monomer);\n        const attPointEnd = monomer.getValidSourcePoint(previousMonomer);\n\n        assert(attPointStart);\n        assert(attPointEnd);\n\n        const operation = new PolymerBondFinishCreationOperation(\n          (polymerBond?: PolymerBond) =>\n            this.finishPolymerBondCreationModelChange(\n              previousMonomer as BaseMonomer,\n              monomer,\n              attPointStart,\n              attPointEnd,\n              MACROMOLECULES_BOND_TYPES.SINGLE,\n              polymerBond,\n            ),\n          this.deletePolymerBondChangeModel.bind(this),\n        );\n        command.addOperation(operation);\n      }\n    });\n\n    return command;\n  };\n\n  public addRnaPreset({\n    sugar,\n    sugarPosition,\n    phosphate,\n    phosphatePosition,\n    rnaBase,\n    rnaBasePosition,\n  }: RnaPresetAdditionParams) {\n    const command = new Command();\n    const monomersToAdd: Array<[MonomerItemType, Vec2]> = [];\n    if (rnaBase && rnaBasePosition) {\n      monomersToAdd.push([rnaBase, rnaBasePosition]);\n    }\n    monomersToAdd.push([sugar, sugarPosition]);\n    if (phosphate && phosphatePosition) {\n      monomersToAdd.push([phosphate, phosphatePosition]);\n    }\n\n    const monomers: BaseMonomer[] = [];\n\n    monomersToAdd.forEach(([monomerItem, monomerPosition], monomerIndex) => {\n      const monomerAddOperation = new MonomerAddOperation(\n        this.addMonomerChangeModel.bind(this, monomerItem, monomerPosition),\n        this.deleteMonomerChangeModel.bind(this),\n      );\n      const monomer = monomerAddOperation.monomer;\n      monomers.push(monomer);\n      command.addOperation(monomerAddOperation);\n      if (monomerIndex > 0) {\n        const previousMonomer = monomers[monomerIndex - 1];\n        // requirements are: Base(R1)-(R3)Sugar(R2)-(R1)Phosphate\n        const attPointStart = previousMonomer.getValidSourcePoint(monomer);\n        const attPointEnd = monomer.getValidSourcePoint(previousMonomer);\n\n        assert(attPointStart);\n        assert(attPointEnd);\n\n        const operation = new PolymerBondFinishCreationOperation(\n          (polymerBond?: PolymerBond) =>\n            this.finishPolymerBondCreationModelChange(\n              previousMonomer as BaseMonomer,\n              monomer,\n              attPointStart,\n              attPointEnd,\n              MACROMOLECULES_BOND_TYPES.SINGLE,\n              polymerBond,\n            ),\n          this.deletePolymerBondChangeModel.bind(this),\n        );\n        command.addOperation(operation);\n      }\n    });\n\n    return { command, monomers };\n  }\n\n  public rearrangeChainModelChange(monomer: BaseMonomer, newPosition: Vec2) {\n    if (isMonomerSgroupWithAttachmentPoints(monomer)) {\n      const offset = newPosition.sub(monomer.position);\n\n      this.moveChemAtomsPoint(monomer, offset);\n    }\n\n    monomer.moveAbsolute(newPosition);\n\n    return monomer;\n  }\n\n  public getNucleotideSize(nucleotide: NucleotideOrNucleoside) {\n    const width =\n      (nucleotide.sugar.renderer?.monomerSize?.width || 0) +\n      (nucleotide.phosphate?.renderer?.monomerSize?.width || 0) +\n      (nucleotide.phosphate ? RNA_MONOMER_DISTANCE : 0);\n    const height =\n      (nucleotide.sugar.renderer?.monomerSize?.height || 0) +\n      (nucleotide.rnaBase.renderer?.monomerSize?.height || 0) +\n      RNA_MONOMER_DISTANCE;\n    return { width, height };\n  }\n\n  private reArrangeChain(\n    monomer: BaseMonomer,\n    lastPosition: Vec2,\n    canvasWidth: number,\n    rearrangedMonomersSet: Set<number>,\n    maxVerticalDistance: number,\n    snakeLayoutMatrix: Matrix<Cell>,\n    firstMonomer?: BaseMonomer,\n  ) {\n    const command = new Command();\n    const heightMonomerWithBond =\n      SNAKE_LAYOUT_CELL_WIDTH / 2 + VERTICAL_DISTANCE_FROM_MONOMER;\n    const isNewRow = lastPosition.x === MONOMER_START_X_POSITION;\n    maxVerticalDistance = isNewRow\n      ? heightMonomerWithBond\n      : Math.max(maxVerticalDistance, heightMonomerWithBond);\n    monomer.isMonomerInRnaChainRow =\n      maxVerticalDistance > heightMonomerWithBond;\n    const oldMonomerPosition = monomer.position;\n    const operation = new MonomerMoveOperation(\n      this.rearrangeChainModelChange.bind(\n        this,\n        monomer,\n        Coordinates.canvasToModel(lastPosition),\n      ),\n      this.rearrangeChainModelChange.bind(this, monomer, oldMonomerPosition),\n    );\n    command.addOperation(operation);\n    rearrangedMonomersSet.add(monomer.id);\n\n    const matrixX = isNewRow\n      ? snakeLayoutMatrix.height\n      : snakeLayoutMatrix.height - 1;\n    const matrixY = isNewRow\n      ? 0\n      : snakeLayoutMatrix.getRow(matrixX)?.length ?? 0;\n\n    snakeLayoutMatrix.set(\n      matrixX,\n      matrixY,\n      new Cell(null, [], matrixX, matrixY, monomer),\n    );\n\n    const nextPositionAndVerticalDistance =\n      this.getNextMonomerPositionForSnakeLayout(\n        monomer,\n        lastPosition,\n        canvasWidth,\n        rearrangedMonomersSet,\n        maxVerticalDistance,\n      );\n\n    return {\n      lastPosition:\n        nextPositionAndVerticalDistance?.lastPosition || lastPosition,\n      maxVerticalDistance:\n        nextPositionAndVerticalDistance?.maxVerticalDistance ||\n        maxVerticalDistance,\n      nextMonomer: getNextMonomerInChain(monomer, firstMonomer),\n      command,\n    };\n  }\n\n  private reArrangeRnaChain(\n    nucleotide: NucleotideOrNucleoside,\n    lastPosition: Vec2,\n    canvasWidth: number,\n    rearrangedMonomersSet: Set<number>,\n    maxVerticalDistance: number,\n    snakeLayoutMatrix: Matrix<Cell>,\n    firstMonomer?: BaseMonomer,\n  ) {\n    const command = new Command();\n    const nucleotideSize = this.getNucleotideSize(nucleotide);\n    const { height } = nucleotideSize;\n    const heightWithBond = height + VERTICAL_DISTANCE_FROM_MONOMER;\n    const isNewRow = lastPosition.x === MONOMER_START_X_POSITION;\n    maxVerticalDistance = Math.max(maxVerticalDistance, heightWithBond);\n    nucleotide.sugar.isMonomerInRnaChainRow = true;\n    nucleotide.rnaBase.isMonomerInRnaChainRow = true;\n    const oldSugarPosition = nucleotide.sugar.position;\n    const rnaBasePosition = new Vec2(\n      lastPosition.x,\n      lastPosition.y +\n        (nucleotide.sugar.renderer?.monomerSize?.height ?? 0) / 2 +\n        (nucleotide.rnaBase.renderer?.monomerSize?.height ?? 0) / 2 +\n        RNA_MONOMER_DISTANCE,\n    );\n    this.addRnaOperations(\n      command,\n      oldSugarPosition,\n      lastPosition,\n      nucleotide.sugar,\n    );\n    this.addRnaOperations(\n      command,\n      nucleotide.rnaBase?.position,\n      rnaBasePosition,\n      nucleotide.rnaBase,\n    );\n    rearrangedMonomersSet.add(nucleotide.sugar.id);\n    rearrangedMonomersSet.add(nucleotide.rnaBase?.id);\n\n    const matrixX = isNewRow\n      ? snakeLayoutMatrix.height\n      : snakeLayoutMatrix.height - 1;\n    const matrixY = isNewRow\n      ? 0\n      : snakeLayoutMatrix.getRow(matrixX)?.length ?? 0;\n\n    snakeLayoutMatrix.set(\n      matrixX,\n      matrixY,\n      new Cell(null, [], matrixX, matrixY, nucleotide.sugar),\n    );\n\n    if (nucleotide.phosphate) {\n      nucleotide.phosphate.isMonomerInRnaChainRow = true;\n      const phosphatePosition = new Vec2(\n        lastPosition.x + SNAKE_LAYOUT_CELL_WIDTH,\n        lastPosition.y,\n      );\n      this.addRnaOperations(\n        command,\n        nucleotide.phosphate?.position,\n        phosphatePosition,\n        nucleotide.phosphate,\n      );\n      rearrangedMonomersSet.add(nucleotide.phosphate?.id);\n      snakeLayoutMatrix.set(\n        matrixX,\n        matrixY + 1,\n        new Cell(null, [], matrixX, matrixY, nucleotide.sugar),\n      );\n    }\n    const lastMonomerInNucleotide =\n      nucleotide.baseMonomer === nucleotide.sugar && nucleotide.phosphate\n        ? nucleotide.phosphate\n        : nucleotide.sugar;\n\n    const nextMonomerPositionAndVerticalDistance =\n      this.getNextMonomerPositionForSnakeLayout(\n        lastMonomerInNucleotide,\n        lastPosition,\n        canvasWidth,\n        rearrangedMonomersSet,\n        maxVerticalDistance,\n        nucleotide.phosphate\n          ? SNAKE_LAYOUT_CELL_WIDTH * 2\n          : SNAKE_LAYOUT_CELL_WIDTH,\n      );\n\n    const nextMonomer = getNextMonomerInChain(\n      lastMonomerInNucleotide,\n      firstMonomer,\n    );\n\n    return {\n      command,\n      lastPosition:\n        nextMonomerPositionAndVerticalDistance?.lastPosition || lastPosition,\n      maxVerticalDistance:\n        nextMonomerPositionAndVerticalDistance?.maxVerticalDistance ||\n        maxVerticalDistance,\n      nextMonomer,\n    };\n  }\n\n  private getNextMonomerPositionForSnakeLayout(\n    monomer: BaseMonomer,\n    lastPosition: Vec2,\n    canvasWidth: number,\n    rearrangedMonomersSet: Set<number>,\n    maxVerticalDistance: number,\n    width?: number,\n  ) {\n    let nextPositionAndDistance;\n    for (const attachmentPointName in monomer.attachmentPointsToBonds) {\n      const polymerBond = monomer.attachmentPointsToBonds[attachmentPointName];\n      const nextMonomer = polymerBond?.getAnotherEntity(monomer);\n      if (\n        !polymerBond ||\n        polymerBond instanceof MonomerToAtomBond ||\n        rearrangedMonomersSet.has(nextMonomer.id)\n      ) {\n        continue;\n      }\n      if (\n        (attachmentPointName === 'R2' &&\n          nextMonomer.getAttachmentPointByBond(polymerBond) === 'R1') ||\n        (attachmentPointName === 'R1' &&\n          nextMonomer.getAttachmentPointByBond(polymerBond) === 'R2')\n      ) {\n        nextPositionAndDistance = this.getNextPositionAndDistance(\n          lastPosition,\n          maxVerticalDistance,\n          canvasWidth,\n          width,\n        );\n      }\n    }\n    return nextPositionAndDistance;\n  }\n\n  private addRnaOperations(\n    command: Command,\n    oldMonomerPosition: Vec2 | undefined,\n    newPosition: Vec2 | undefined,\n    monomer?: BaseMonomer,\n  ) {\n    if (!monomer || !oldMonomerPosition || !newPosition) {\n      return;\n    }\n    const operation = new MonomerMoveOperation(\n      this.rearrangeChainModelChange.bind(\n        this,\n        monomer,\n        Coordinates.canvasToModel(newPosition),\n      ),\n      this.rearrangeChainModelChange.bind(this, monomer, oldMonomerPosition),\n    );\n    command.addOperation(operation);\n  }\n\n  private recalculateCanvasMatrixModelChange(\n    snakeLayoutMatrix?: Matrix<Cell>,\n    _chainsCollection?: ChainsCollection,\n  ) {\n    if (!snakeLayoutMatrix || snakeLayoutMatrix.height === 0) {\n      return;\n    }\n\n    const chainsCollection =\n      _chainsCollection ||\n      ChainsCollection.fromMonomers(Array.from(this.monomers.values()));\n\n    if (!_chainsCollection) {\n      chainsCollection.rearrange();\n    }\n\n    this.canvasMatrix = new CanvasMatrix(chainsCollection, {\n      initialMatrix: snakeLayoutMatrix,\n    });\n\n    return this.redrawBonds();\n  }\n\n  public recalculateCanvasMatrix(\n    chainsCollection?: ChainsCollection,\n    previousSnakeLayoutMatrix?: Matrix<Cell>,\n  ) {\n    const command = new Command();\n\n    command.addOperation(\n      new RecalculateCanvasMatrixOperation(\n        this.recalculateCanvasMatrixModelChange.bind(\n          this,\n          this.snakeLayoutMatrix,\n          chainsCollection,\n        ),\n        this.recalculateCanvasMatrixModelChange.bind(\n          this,\n          previousSnakeLayoutMatrix,\n          chainsCollection,\n        ),\n      ),\n    );\n\n    return command;\n  }\n\n  public reArrangeChains(\n    canvasWidth: number,\n    isSnakeMode: boolean,\n    needRedrawBonds = true,\n  ) {\n    const snakeLayoutMatrix = new Matrix<Cell>();\n    const previousSnakeLayoutMatrix = this.snakeLayoutMatrix;\n    const command = new Command();\n    let chainsCollection;\n\n    if (isSnakeMode) {\n      const rearrangedMonomersSet: Set<number> = new Set();\n      let lastPosition = new Vec2({\n        x: MONOMER_START_X_POSITION,\n        y: MONOMER_START_Y_POSITION,\n      });\n      let maxVerticalDistance = 0;\n      chainsCollection = ChainsCollection.fromMonomers([\n        ...this.monomers.values(),\n      ]);\n      chainsCollection.rearrange();\n\n      chainsCollection.chains.forEach((chain) => {\n        chain.forEachNode(({ node }) => {\n          if (rearrangedMonomersSet.has(node.monomer.id)) {\n            return;\n          }\n\n          if (node instanceof Nucleoside || node instanceof Nucleotide) {\n            const rearrangeResult = this.reArrangeRnaChain(\n              {\n                sugar: node.sugar,\n                phosphate:\n                  node instanceof Nucleotide\n                    ? node.phosphate\n                    : getPhosphateFromSugar(node.sugar),\n                rnaBase: node.rnaBase,\n                baseMonomer: node.firstMonomerInNode,\n              },\n              lastPosition,\n              canvasWidth,\n              rearrangedMonomersSet,\n              maxVerticalDistance,\n              snakeLayoutMatrix,\n            );\n            lastPosition = rearrangeResult.lastPosition;\n            maxVerticalDistance = rearrangeResult.maxVerticalDistance;\n            command.merge(rearrangeResult.command);\n          } else {\n            node.monomers.forEach((monomer) => {\n              const rearrangeResult = this.reArrangeChain(\n                monomer,\n                lastPosition,\n                canvasWidth,\n                rearrangedMonomersSet,\n                maxVerticalDistance,\n                snakeLayoutMatrix,\n              );\n              lastPosition = rearrangeResult.lastPosition;\n              maxVerticalDistance = rearrangeResult.maxVerticalDistance;\n              command.merge(rearrangeResult.command);\n            });\n          }\n        });\n        lastPosition = getFirstPosition(maxVerticalDistance, lastPosition);\n        maxVerticalDistance = 0;\n      });\n    }\n\n    if (needRedrawBonds) {\n      command.merge(this.redrawBonds());\n    }\n\n    this.snakeLayoutMatrix = snakeLayoutMatrix;\n\n    command.merge(\n      this.recalculateCanvasMatrix(chainsCollection, previousSnakeLayoutMatrix),\n    );\n\n    return command;\n  }\n\n  private redrawBondsModelChange(\n    bond: PolymerBond | MonomerToAtomBond,\n    startPosition?: Vec2,\n    endPosition?: Vec2,\n  ) {\n    if (bond instanceof MonomerToAtomBond) {\n      bond.moveToLinkedEntities();\n\n      return bond;\n    }\n\n    if (startPosition && endPosition) {\n      bond.moveBondStartAbsolute(startPosition.x, startPosition.y);\n      bond.moveBondEndAbsolute(endPosition.x, endPosition.y);\n    } else {\n      bond.moveToLinkedEntities();\n    }\n\n    return bond;\n  }\n\n  public redrawBonds() {\n    const command = new Command();\n\n    [\n      ...this.polymerBonds.values(),\n      ...this.monomerToAtomBonds.values(),\n    ].forEach((polymerBond) => {\n      command.merge(\n        this.createDrawingEntityRedrawCommand(\n          this.redrawBondsModelChange.bind(this, polymerBond),\n          this.redrawBondsModelChange.bind(\n            this,\n            polymerBond,\n            polymerBond.startPosition,\n            polymerBond.endPosition,\n          ),\n        ),\n      );\n    });\n\n    return command;\n  }\n\n  public getNextPositionAndDistance(\n    lastPosition: Vec2,\n    height: number,\n    canvasWidth: number,\n    width = SNAKE_LAYOUT_CELL_WIDTH,\n  ) {\n    const isMonomerFitCanvas =\n      lastPosition.x +\n        width +\n        DISTANCE_FROM_RIGHT +\n        SNAKE_LAYOUT_CELL_WIDTH / 2 <\n      canvasWidth;\n\n    if (!isMonomerFitCanvas) {\n      return {\n        maxVerticalDistance: 0,\n        lastPosition: getFirstPosition(height, lastPosition),\n      };\n    }\n\n    return {\n      maxVerticalDistance: height,\n      lastPosition: new Vec2({\n        x: lastPosition.x + width,\n        y: lastPosition.y,\n      }),\n    };\n  }\n\n  public isNucleosideAndPhosphateConnectedAsNucleotide(\n    nucleoside: Nucleoside,\n    phosphate: Phosphate,\n  ) {\n    if (\n      !(nucleoside instanceof Nucleoside) ||\n      !(phosphate instanceof Phosphate)\n    )\n      return false;\n\n    const r2Bond = nucleoside.sugar.attachmentPointsToBonds.R2;\n\n    return (\n      !(r2Bond instanceof MonomerToAtomBond) &&\n      r2Bond?.secondMonomer === phosphate\n    );\n  }\n\n  public setMicromoleculesHiddenEntities(struct: Struct) {\n    struct.mergeInto(this.micromoleculesHiddenEntities);\n    this.micromoleculesHiddenEntities.atoms = new Pool();\n    this.micromoleculesHiddenEntities.bonds = new Pool();\n    this.micromoleculesHiddenEntities.halfBonds = new Pool();\n    this.micromoleculesHiddenEntities.sgroups = new Pool();\n    this.micromoleculesHiddenEntities.functionalGroups = new Pool();\n    this.micromoleculesHiddenEntities.sGroupForest = new SGroupForest();\n    this.micromoleculesHiddenEntities.frags = new Pool();\n  }\n\n  public clearMicromoleculesHiddenEntities() {\n    this.micromoleculesHiddenEntities = new Struct();\n  }\n\n  public mergeInto(targetDrawingEntitiesManager: DrawingEntitiesManager) {\n    const command = new Command();\n    const monomerToNewMonomer = new Map<BaseMonomer, BaseMonomer>();\n    const atomToNewAtom = new Map<Atom, Atom>();\n    const mergedDrawingEntities = new DrawingEntitiesManager();\n    const editor = CoreEditor.provideEditorInstance();\n    const viewModel = editor.viewModel;\n\n    this.monomers.forEach((monomer) => {\n      const monomerAddCommand =\n        monomer instanceof AmbiguousMonomer\n          ? targetDrawingEntitiesManager.addAmbiguousMonomer(\n              {\n                ...monomer.variantMonomerItem,\n              },\n              monomer.position,\n            )\n          : targetDrawingEntitiesManager.addMonomer(\n              monomer.monomerItem,\n              monomer.position,\n            );\n\n      command.merge(monomerAddCommand);\n\n      const addedMonomer = monomerAddCommand.operations[0]\n        .monomer as BaseMonomer;\n\n      mergedDrawingEntities.monomers.set(addedMonomer.id, addedMonomer);\n\n      monomerToNewMonomer.set(\n        monomer,\n        monomerAddCommand.operations[0].monomer as BaseMonomer,\n      );\n    });\n\n    this.polymerBonds.forEach((polymerBond) => {\n      assert(polymerBond.secondMonomer);\n      const polymerBondCreateCommand =\n        targetDrawingEntitiesManager.createPolymerBond(\n          monomerToNewMonomer.get(polymerBond.firstMonomer) as BaseMonomer,\n          monomerToNewMonomer.get(polymerBond.secondMonomer) as BaseMonomer,\n          polymerBond.firstMonomer.getAttachmentPointByBond(\n            polymerBond,\n          ) as AttachmentPointName,\n          polymerBond.secondMonomer.getAttachmentPointByBond(\n            polymerBond,\n          ) as AttachmentPointName,\n          polymerBond instanceof HydrogenBond\n            ? MACROMOLECULES_BOND_TYPES.HYDROGEN\n            : MACROMOLECULES_BOND_TYPES.SINGLE,\n        );\n      command.merge(polymerBondCreateCommand);\n\n      const addedPolymerBond = polymerBondCreateCommand.operations[0]\n        .polymerBond as PolymerBond;\n\n      mergedDrawingEntities.polymerBonds.set(\n        addedPolymerBond.id,\n        addedPolymerBond,\n      );\n    });\n\n    this.atoms.forEach((atom) => {\n      const atomAddCommand = targetDrawingEntitiesManager.addAtom(\n        atom.position,\n        monomerToNewMonomer.get(atom.monomer) as BaseMonomer,\n        atom.atomIdInMicroMode,\n        atom.label,\n      );\n      const addedAtom = atomAddCommand.operations[0].atom as Atom;\n\n      command.merge(atomAddCommand);\n      mergedDrawingEntities.atoms.set(addedAtom.id, addedAtom);\n      atomToNewAtom.set(atom, addedAtom);\n    });\n\n    this.bonds.forEach((bond) => {\n      const newFirstAtom = atomToNewAtom.get(bond.firstAtom);\n      const newSecondAtom = atomToNewAtom.get(bond.secondAtom);\n\n      if (!newFirstAtom || !newSecondAtom) {\n        return;\n      }\n\n      const bondAddCommand = targetDrawingEntitiesManager.addBond(\n        newFirstAtom,\n        newSecondAtom,\n        bond.type,\n        bond.stereo,\n      );\n      const addedBond = bondAddCommand.operations[0].bond as Bond;\n\n      command.merge(bondAddCommand);\n      mergedDrawingEntities.bonds.set(addedBond.id, addedBond);\n    });\n\n    viewModel.initialize([...targetDrawingEntitiesManager.bonds.values()]);\n\n    this.monomerToAtomBonds.forEach((monomerToAtomBond) => {\n      const bondAddCommand = targetDrawingEntitiesManager.addMonomerToAtomBond(\n        monomerToNewMonomer.get(monomerToAtomBond.monomer) as BaseMonomer,\n        atomToNewAtom.get(monomerToAtomBond.atom) as Atom,\n        monomerToAtomBond.monomer.getAttachmentPointByBond(\n          monomerToAtomBond,\n        ) as AttachmentPointName,\n      );\n\n      const addedBond = bondAddCommand.operations[0]\n        .monomerToAtomBond as MonomerToAtomBond;\n\n      command.merge(bondAddCommand);\n      mergedDrawingEntities.monomerToAtomBonds.set(addedBond.id, addedBond);\n    });\n\n    this.micromoleculesHiddenEntities.mergeInto(\n      targetDrawingEntitiesManager.micromoleculesHiddenEntities,\n    );\n\n    return { command, mergedDrawingEntities };\n  }\n\n  public centerMacroStructure() {\n    const centerPointOfModel = Coordinates.canvasToModel(\n      this.getCurrentCenterPointOfCanvas(),\n    );\n    const structCenter = this.getMacroStructureCenter();\n    const offset = Vec2.diff(centerPointOfModel, structCenter);\n    this.monomers.forEach((monomer: BaseMonomer) => {\n      this.moveMonomer(monomer, new Vec2(monomer.position).add(offset));\n    });\n    this.polymerBonds.forEach((bond: PolymerBond) => {\n      const { x: startX, y: startY } = new Vec2(bond.position).add(offset);\n      bond.moveBondStartAbsolute(startX, startY);\n      const { x: endX, y: endY } = new Vec2(bond.endPosition).add(offset);\n      bond.moveBondEndAbsolute(endX, endY);\n    });\n  }\n\n  public getCurrentCenterPointOfCanvas() {\n    const editor = CoreEditor.provideEditorInstance();\n    const originalCenterPointOfCanvas = new Vec2(\n      editor.canvasOffset.width / 2,\n      editor.canvasOffset.height / 2,\n    );\n    return Coordinates.viewToCanvas(originalCenterPointOfCanvas);\n  }\n\n  public getMacroStructureCenter() {\n    let xmin = 1e50;\n    let ymin = xmin;\n    let xmax = -xmin;\n    let ymax = -ymin;\n\n    this.monomers.forEach((monomer: BaseMonomer) => {\n      xmin = Math.min(xmin, monomer.position.x);\n      ymin = Math.min(ymin, monomer.position.y);\n      xmax = Math.max(xmax, monomer.position.x);\n      ymax = Math.max(ymax, monomer.position.y);\n    });\n    this.polymerBonds.forEach((bond: PolymerBond) => {\n      xmin = Math.min(xmin, bond.position.x);\n      ymin = Math.min(ymin, bond.position.y);\n      xmax = Math.max(xmax, bond.position.x);\n      ymax = Math.max(ymax, bond.position.y);\n    });\n    return new Vec2((xmin + xmax) / 2, (ymin + ymax) / 2);\n  }\n\n  public applyMonomersSequenceLayout() {\n    const chainsCollection = ChainsCollection.fromMonomers([\n      ...this.monomers.values(),\n    ]);\n    chainsCollection.rearrange();\n\n    SequenceRenderer.show(chainsCollection);\n\n    return chainsCollection;\n  }\n\n  public clearCanvas() {\n    const editor = CoreEditor.provideEditorInstance();\n\n    this.monomers.forEach((monomer) => {\n      editor.renderersContainer.deleteMonomer(monomer);\n    });\n\n    this.polymerBonds.forEach((polymerBond) => {\n      editor.renderersContainer.deletePolymerBond(polymerBond);\n    });\n\n    this.monomerToAtomBonds.forEach((monomerToAtomBond) => {\n      editor.renderersContainer.deleteMonomerToAtomBond(monomerToAtomBond);\n    });\n\n    SequenceRenderer.removeEmptyNodes();\n  }\n\n  public applyFlexLayoutMode(needRedrawBonds = false) {\n    const editor = CoreEditor.provideEditorInstance();\n    const command = new Command();\n\n    if (needRedrawBonds) {\n      command.merge(this.redrawBonds());\n    }\n\n    this.monomers.forEach((monomer) => {\n      editor.renderersContainer.deleteMonomer(monomer);\n      editor.renderersContainer.addMonomer(monomer);\n    });\n\n    this.polymerBonds.forEach((polymerBond) => {\n      editor.renderersContainer.deletePolymerBond(polymerBond);\n      editor.renderersContainer.addPolymerBond(polymerBond);\n    });\n\n    this.monomerToAtomBonds.forEach((monomerToAtomBond) => {\n      editor.renderersContainer.deleteMonomerToAtomBond(monomerToAtomBond);\n      editor.renderersContainer.addMonomerToAtomBond(monomerToAtomBond);\n    });\n\n    SequenceRenderer.removeEmptyNodes();\n\n    return command;\n  }\n\n  public rerenderPolymerBonds() {\n    const editor = CoreEditor.provideEditorInstance();\n\n    this.polymerBonds.forEach((polymerBond) => {\n      editor.renderersContainer.deletePolymerBond(polymerBond);\n      editor.renderersContainer.addPolymerBond(polymerBond);\n    });\n  }\n\n  public getAllSelectedEntitiesForEntities(drawingEntities: DrawingEntity[]) {\n    const command = new Command();\n    const editor = CoreEditor.provideEditorInstance();\n    drawingEntities.forEach((monomer) => monomer.turnOnSelection());\n    const newDrawingEntities = drawingEntities.reduce(\n      (\n        selectedDrawingEntities: DrawingEntity[],\n        drawingEntity: DrawingEntity,\n      ) => {\n        const res =\n          editor.drawingEntitiesManager.getAllSelectedEntitiesForSingleEntity(\n            drawingEntity,\n            true,\n            selectedDrawingEntities,\n          );\n        res.drawingEntities.forEach((entity) =>\n          command.addOperation(new DrawingEntitySelectOperation(entity)),\n        );\n        return selectedDrawingEntities.concat(res.drawingEntities);\n      },\n      [],\n    );\n    return { command, drawingEntities: newDrawingEntities };\n  }\n\n  public getAllSelectedEntitiesForSingleEntity(\n    drawingEntity: DrawingEntity,\n    needToSelectConnectedBonds = true,\n    selectedDrawingEntities?: DrawingEntity[],\n  ) {\n    const command = new Command();\n    command.addOperation(new DrawingEntitySelectOperation(drawingEntity));\n    drawingEntity.turnOnSelection();\n    let drawingEntities: DrawingEntity[] = [drawingEntity];\n\n    const editor = CoreEditor.provideEditorInstance();\n    if (\n      !(editor.mode instanceof SequenceMode) ||\n      drawingEntity instanceof PolymerBond\n    ) {\n      return { command, drawingEntities };\n    }\n    if (drawingEntity instanceof Sugar && drawingEntity.isPartOfRNA) {\n      const sugar = drawingEntity;\n      if (isValidNucleoside(sugar)) {\n        const nucleoside = Nucleoside.fromSugar(sugar);\n        drawingEntities = nucleoside.monomers;\n      } else if (isValidNucleotide(sugar)) {\n        const nucleotide = Nucleotide.fromSugar(sugar);\n        drawingEntities = nucleotide.monomers;\n      }\n      drawingEntities.forEach((entity) => {\n        if (!(entity instanceof Sugar)) {\n          entity.turnOnSelection();\n          command.addOperation(new DrawingEntitySelectOperation(entity));\n        }\n      });\n    }\n    drawingEntities.forEach((entity) => {\n      const monomer = entity as BaseMonomer;\n      if (needToSelectConnectedBonds && monomer.hasBonds) {\n        monomer.forEachBond((polymerBond) => {\n          if (\n            !selectedDrawingEntities?.includes(polymerBond) &&\n            !drawingEntities.includes(polymerBond) &&\n            polymerBond instanceof PolymerBond &&\n            polymerBond.getAnotherMonomer(monomer)?.selected\n          ) {\n            drawingEntities.push(polymerBond);\n            polymerBond.turnOnSelection();\n            command.addOperation(new DrawingEntitySelectOperation(polymerBond));\n          }\n        });\n      }\n    });\n    return { command, drawingEntities };\n  }\n\n  public validateIfApplicableForFasta() {\n    const monomerTypes = new Set();\n    let isValid = true;\n\n    this.monomers.forEach((monomer) => {\n      const monomerType =\n        monomer instanceof AmbiguousMonomer\n          ? monomer.monomerClass === KetMonomerClass.CHEM\n            ? MONOMER_CONST.CHEM\n            : monomer.monomers[0].monomerItem.props.MonomerType\n          : monomer.monomerItem.props.MonomerType;\n      monomerTypes.add(monomerType);\n      if (monomerType === MONOMER_CONST.CHEM || monomerTypes.size > 1) {\n        isValid = false;\n      }\n    });\n\n    return isValid;\n  }\n\n  public moveMonomer(monomer: BaseMonomer, position: Vec2) {\n    const oldMonomerPosition = monomer.position;\n    const command = new Command();\n    const operation = new MonomerMoveOperation(\n      this.rearrangeChainModelChange.bind(this, monomer, position),\n      this.rearrangeChainModelChange.bind(this, monomer, oldMonomerPosition),\n    );\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  public removeHoverForAllMonomers() {\n    const command = new Command();\n    this.monomers.forEach((monomer) => {\n      if (!monomer.hovered) {\n        return;\n      }\n\n      monomer.turnOffHover();\n      monomer.turnOffAttachmentPointsVisibility();\n\n      command.addOperation(new MonomerHoverOperation(monomer, true));\n    });\n\n    return command;\n  }\n\n  private reconnectPolymerBondModelChange(\n    polymerBond: PolymerBond,\n    {\n      newFirstMonomerAttachmentPoint,\n      newSecondMonomerAttachmentPoint,\n      initialFirstMonomerAttachmentPoint,\n      initialSecondMonomerAttachmentPoint,\n    }: {\n      newFirstMonomerAttachmentPoint: AttachmentPointName;\n      newSecondMonomerAttachmentPoint: AttachmentPointName;\n      initialFirstMonomerAttachmentPoint: AttachmentPointName;\n      initialSecondMonomerAttachmentPoint: AttachmentPointName;\n    },\n  ) {\n    polymerBond.firstMonomer.unsetBond(initialFirstMonomerAttachmentPoint);\n    polymerBond.secondMonomer?.unsetBond(initialSecondMonomerAttachmentPoint);\n\n    polymerBond.firstMonomer.setBond(\n      newFirstMonomerAttachmentPoint,\n      polymerBond,\n    );\n    polymerBond.secondMonomer?.setBond(\n      newSecondMonomerAttachmentPoint,\n      polymerBond,\n    );\n\n    return polymerBond;\n  }\n\n  public reconnectPolymerBond(\n    polymerBond: PolymerBond,\n    newFirstMonomerAttachmentPoint: AttachmentPointName,\n    newSecondMonomerAttachmentPoint: AttachmentPointName,\n    initialFirstMonomerAttachmentPoint: AttachmentPointName,\n    initialSecondMonomerAttachmentPoint: AttachmentPointName,\n  ) {\n    const command = new Command();\n\n    command.addOperation(\n      new ReconnectPolymerBondOperation(\n        this.reconnectPolymerBondModelChange.bind(this, polymerBond, {\n          newFirstMonomerAttachmentPoint,\n          newSecondMonomerAttachmentPoint,\n          initialFirstMonomerAttachmentPoint,\n          initialSecondMonomerAttachmentPoint,\n        }),\n        this.reconnectPolymerBondModelChange.bind(this, polymerBond, {\n          newFirstMonomerAttachmentPoint: initialFirstMonomerAttachmentPoint,\n          newSecondMonomerAttachmentPoint: initialSecondMonomerAttachmentPoint,\n          initialFirstMonomerAttachmentPoint: newFirstMonomerAttachmentPoint,\n          initialSecondMonomerAttachmentPoint: newSecondMonomerAttachmentPoint,\n        }),\n      ),\n    );\n\n    return command;\n  }\n\n  private addAmbiguousMonomerChangeModel(\n    variantMonomerItem: AmbiguousMonomerType,\n    position: Vec2,\n    _monomer?: BaseMonomer,\n  ) {\n    if (_monomer) {\n      this.monomers.set(_monomer.id, _monomer);\n\n      return _monomer;\n    }\n\n    const monomer = new AmbiguousMonomer(variantMonomerItem, position);\n\n    this.monomers.set(monomer.id, monomer);\n\n    return monomer;\n  }\n\n  public addAmbiguousMonomer(\n    ambiguousMonomerItem: AmbiguousMonomerType,\n    position: Vec2,\n  ) {\n    const command = new Command();\n    const operation = new MonomerAddOperation(\n      this.addAmbiguousMonomerChangeModel.bind(\n        this,\n        ambiguousMonomerItem,\n        position,\n      ),\n      this.deleteMonomerChangeModel.bind(this),\n    );\n\n    command.addOperation(operation);\n\n    return command;\n  }\n\n  private addAtomChangeModel(\n    position: Vec2,\n    monomer: BaseMonomer,\n    atomIdInMicroMode: number,\n    label: AtomLabel,\n    _atom?: Atom,\n  ) {\n    if (_atom) {\n      this.atoms.set(_atom.id, _atom);\n\n      return _atom;\n    }\n\n    const atom = new Atom(position, monomer, atomIdInMicroMode, label);\n\n    this.atoms.set(atom.id, atom);\n\n    return atom;\n  }\n\n  public addAtom(\n    position: Vec2,\n    monomer: BaseMonomer,\n    atomIdInMicroMode: number,\n    label: AtomLabel,\n  ) {\n    const command = new Command();\n    const atomAddOperation = new AtomAddOperation(\n      this.addAtomChangeModel.bind(\n        this,\n        position,\n        monomer,\n        atomIdInMicroMode,\n        label,\n      ),\n      this.addAtomChangeModel.bind(\n        this,\n        position,\n        monomer,\n        atomIdInMicroMode,\n        label,\n      ),\n    );\n\n    command.addOperation(atomAddOperation);\n\n    return command;\n  }\n\n  private deleteAtomChangeModel(atom: Atom) {\n    this.atoms.delete(atom.id);\n\n    return atom;\n  }\n\n  private deleteAtom(atom: Atom) {\n    const command = new Command();\n\n    command.addOperation(\n      new AtomDeleteOperation(\n        atom,\n        this.deleteAtomChangeModel.bind(this, atom),\n        this.addAtomChangeModel.bind(\n          this,\n          atom.position,\n          atom.monomer,\n          atom.atomIdInMicroMode,\n          atom.label,\n        ),\n      ),\n    );\n\n    return command;\n  }\n\n  private addBondChangeModel(\n    firstAtom: Atom,\n    secondAtom: Atom,\n    type: number,\n    stereo: number,\n    _bond?: Bond,\n  ) {\n    if (_bond) {\n      this.bonds.set(_bond.id, _bond);\n\n      return _bond;\n    }\n\n    const bond = new Bond(firstAtom, secondAtom, type, stereo);\n\n    this.bonds.set(bond.id, bond);\n    firstAtom.addBond(bond);\n    secondAtom.addBond(bond);\n\n    return bond;\n  }\n\n  public addBond(\n    firstAtom: Atom,\n    secondAtom: Atom,\n    type: number,\n    stereo: number,\n  ) {\n    const command = new Command();\n    const bondAddOperation = new BondAddOperation(\n      this.addBondChangeModel.bind(this, firstAtom, secondAtom, type, stereo),\n      this.addBondChangeModel.bind(this, firstAtom, secondAtom, type, stereo),\n    );\n\n    command.addOperation(bondAddOperation);\n\n    return command;\n  }\n\n  private deleteBondChangeModel(bond: Bond) {\n    this.bonds.delete(bond.id);\n\n    return bond;\n  }\n\n  private deleteBond(bond: Bond) {\n    const command = new Command();\n\n    command.addOperation(\n      new BondDeleteOperation(\n        bond,\n        this.deleteBondChangeModel.bind(this, bond),\n        this.addBondChangeModel.bind(\n          this,\n          bond.firstAtom,\n          bond.secondAtom,\n          bond.type,\n          bond.stereo,\n        ),\n      ),\n    );\n\n    return command;\n  }\n\n  public addMonomerToAtomBondChangeModel(\n    monomer: BaseMonomer,\n    atom: Atom,\n    attachmentPoint: AttachmentPointName,\n    _monomerToAtomBond?: MonomerToAtomBond,\n  ) {\n    if (_monomerToAtomBond) {\n      this.monomerToAtomBonds.set(_monomerToAtomBond.id, _monomerToAtomBond);\n      monomer.setBond(attachmentPoint, _monomerToAtomBond);\n\n      return _monomerToAtomBond;\n    }\n\n    const monomerToAtomBond = new MonomerToAtomBond(monomer, atom);\n\n    this.monomerToAtomBonds.set(monomerToAtomBond.id, monomerToAtomBond);\n\n    monomerToAtomBond.moveToLinkedEntities();\n    monomer.setBond(attachmentPoint, monomerToAtomBond);\n    monomer.turnOffAttachmentPointsVisibility();\n    monomer.turnOffHover();\n\n    return monomerToAtomBond;\n  }\n\n  private deleteMonomerToAtomBondChangeModel(\n    monomerAtomBond: MonomerToAtomBond,\n  ) {\n    const attachmentPointName =\n      monomerAtomBond.monomer.getAttachmentPointByBond(monomerAtomBond);\n\n    if (attachmentPointName) {\n      monomerAtomBond.monomer.unsetBond(attachmentPointName);\n    }\n    this.monomerToAtomBonds.delete(monomerAtomBond.id);\n\n    return monomerAtomBond;\n  }\n\n  private deleteMonomerToAtomBond(monomerAtomBond: MonomerToAtomBond) {\n    const command = new Command();\n\n    command.addOperation(\n      new MonomerToAtomBondDeleteOperation(\n        monomerAtomBond,\n        this.deleteMonomerToAtomBondChangeModel.bind(this, monomerAtomBond),\n        this.addMonomerToAtomBondChangeModel.bind(\n          this,\n          monomerAtomBond.monomer,\n          monomerAtomBond.atom,\n          monomerAtomBond.monomer.getAttachmentPointByBond(\n            monomerAtomBond,\n          ) as AttachmentPointName,\n        ),\n      ),\n    );\n\n    return command;\n  }\n\n  public addMonomerToAtomBond(\n    monomer: BaseMonomer,\n    atom: Atom,\n    attachmentPoint: AttachmentPointName,\n  ) {\n    const command = new Command();\n    const monomerAddToAtomBondOperation = new MonomerToAtomBondAddOperation(\n      this.addMonomerToAtomBondChangeModel.bind(\n        this,\n        monomer,\n        atom,\n        attachmentPoint,\n      ),\n      this.deleteMonomerToAtomBondChangeModel.bind(this),\n    );\n\n    command.addOperation(monomerAddToAtomBondOperation);\n\n    return command;\n  }\n}\nfunction getFirstPosition(height: number, lastPosition: Vec2) {\n  return new Vec2(MONOMER_START_X_POSITION, lastPosition.y + height);\n}\n","import { Command } from 'domain/entities/Command';\nimport { SelectLayoutModeOperation } from '../operations/polymerBond';\nimport { CoreEditor, EditorHistory } from '../internal';\nimport {\n  DEFAULT_LAYOUT_MODE,\n  LayoutMode,\n  modesMap,\n} from 'application/editor/modes';\nimport {\n  getStructStringFromClipboardData,\n  initHotKeys,\n  isClipboardAPIAvailable,\n  keyNorm,\n  legacyCopy,\n  legacyPaste,\n} from 'utilities';\nimport { BaseMonomer, Struct, Vec2 } from 'domain/entities';\nimport {\n  identifyStructFormat,\n  macromoleculesFilesInputFormats,\n  SupportedFormat,\n} from 'application/formatters';\nimport { KetSerializer } from 'domain/serializers';\nimport { ChemicalMimeType } from 'domain/services';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { ketcherProvider } from 'application/utils';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport { HydrogenBond } from 'domain/entities/HydrogenBond';\n\nexport abstract class BaseMode {\n  private _pasteIsInProgress = false;\n\n  protected constructor(\n    public modeName: LayoutMode,\n    public previousMode: LayoutMode = DEFAULT_LAYOUT_MODE,\n  ) {}\n\n  private changeMode(editor: CoreEditor, modeName: LayoutMode, isUndo = false) {\n    editor.events.layoutModeChange.dispatch(modeName);\n    const ModeConstructor = modesMap[modeName];\n    editor.mode.destroy();\n    editor.setMode(new ModeConstructor());\n    editor.mode.initialize(true, isUndo, false);\n  }\n\n  public initialize(\n    needRemoveSelection = true,\n    _isUndo = false,\n    _needReArrangeChains = false,\n  ) {\n    const command = new Command();\n    const editor = CoreEditor.provideEditorInstance();\n\n    command.addOperation(\n      new SelectLayoutModeOperation(\n        this.changeMode.bind(this, editor, this.modeName),\n        this.changeMode.bind(this, editor, this.previousMode, true),\n        this.modeName,\n        this.previousMode,\n      ),\n    );\n\n    if (needRemoveSelection) {\n      editor.events.selectTool.dispatch('select-rectangle');\n    }\n\n    return command;\n  }\n\n  async onKeyDown(event: KeyboardEvent) {\n    await new Promise<void>((resolve) => {\n      setTimeout(() => {\n        const editor = CoreEditor.provideEditorInstance();\n        if (!this.checkIfTargetIsInput(event)) {\n          const hotKeys = initHotKeys(this.keyboardEventHandlers);\n          const shortcutKey = keyNorm.lookup(hotKeys, event);\n          this.keyboardEventHandlers[shortcutKey]?.handler(event);\n        }\n        editor.events.mouseLeaveSequenceItem.dispatch();\n        resolve();\n      }, 0);\n    });\n  }\n\n  get keyboardEventHandlers() {\n    return {};\n  }\n\n  abstract getNewNodePosition();\n\n  abstract applyAdditionalPasteOperations(\n    _drawingEntitiesManager: DrawingEntitiesManager,\n  ): Command;\n\n  abstract isPasteAllowedByMode(\n    drawingEntitiesManager: DrawingEntitiesManager,\n  ): boolean;\n\n  abstract isPasteAvailable(\n    drawingEntitiesManager: DrawingEntitiesManager,\n  ): boolean;\n\n  abstract scrollForView(): void;\n\n  onCopy(event: ClipboardEvent) {\n    if (this.checkIfTargetIsInput(event)) {\n      return;\n    }\n    const editor = CoreEditor.provideEditorInstance();\n    const drawingEntitiesManager = new DrawingEntitiesManager();\n    editor.drawingEntitiesManager.selectedEntities.forEach(([, entity]) => {\n      if (entity instanceof BaseMonomer) {\n        drawingEntitiesManager.addMonomerChangeModel(\n          entity.monomerItem,\n          entity.position,\n          entity,\n        );\n      } else if (\n        (entity instanceof PolymerBond || entity instanceof HydrogenBond) &&\n        entity.secondMonomer\n      ) {\n        const firstAttachmentPoint =\n          entity.firstMonomer.getAttachmentPointByBond(entity);\n        const secondAttachmentPoint =\n          entity.secondMonomer?.getAttachmentPointByBond(entity);\n        if (\n          firstAttachmentPoint &&\n          secondAttachmentPoint &&\n          entity.firstMonomer.selected &&\n          entity.secondMonomer?.selected\n        ) {\n          drawingEntitiesManager.finishPolymerBondCreationModelChange(\n            entity.firstMonomer,\n            entity.secondMonomer,\n            firstAttachmentPoint,\n            secondAttachmentPoint,\n            undefined,\n            entity,\n          );\n        }\n      }\n    });\n    const ketSerializer = new KetSerializer();\n    const serializedKet = ketSerializer.serialize(\n      new Struct(),\n      drawingEntitiesManager,\n    );\n    if (isClipboardAPIAvailable()) {\n      navigator.clipboard.writeText(serializedKet);\n    } else {\n      legacyCopy(event.clipboardData, {\n        'text/plain': serializedKet,\n      });\n      event.preventDefault();\n    }\n  }\n\n  async onPaste(event: ClipboardEvent) {\n    if (this.checkIfTargetIsInput(event)) {\n      return;\n    }\n    const editor = CoreEditor.provideEditorInstance();\n    const isCanvasEmptyBeforePaste =\n      !editor.drawingEntitiesManager.hasDrawingEntities;\n\n    if (isClipboardAPIAvailable()) {\n      const isSequenceEditInRNABuilderMode =\n        CoreEditor.provideEditorInstance().isSequenceEditInRNABuilderMode;\n\n      if (isSequenceEditInRNABuilderMode || this._pasteIsInProgress) return;\n      this._pasteIsInProgress = true;\n\n      const clipboardData = await navigator.clipboard.read();\n      this.pasteFromClipboard(clipboardData).finally(() => {\n        this._pasteIsInProgress = false;\n\n        if (!isCanvasEmptyBeforePaste) {\n          return;\n        }\n\n        editor.zoomToStructuresIfNeeded();\n      });\n    } else {\n      const clipboardData = legacyPaste(event.clipboardData, ['text/plain']);\n      this.pasteFromClipboard(clipboardData);\n      event.preventDefault();\n\n      if (!isCanvasEmptyBeforePaste) {\n        return;\n      }\n\n      editor.zoomToStructuresIfNeeded();\n    }\n  }\n\n  async pasteFromClipboard(clipboardData) {\n    let modelChanges;\n    const editor = CoreEditor.provideEditorInstance();\n    const pastedStr = await getStructStringFromClipboardData(clipboardData);\n    const format = identifyStructFormat(pastedStr, true);\n    if (format === SupportedFormat.ket) {\n      modelChanges = this.pasteKetFormatFragment(pastedStr);\n    } else {\n      let inputFormat;\n      let isSequenceOrFasta = false;\n      switch (format) {\n        case SupportedFormat.sequence:\n          inputFormat =\n            macromoleculesFilesInputFormats.seq[\n              editor.sequenceTypeEnterMode.toLowerCase()\n            ];\n          isSequenceOrFasta = true;\n          break;\n        case SupportedFormat.fasta:\n          inputFormat =\n            macromoleculesFilesInputFormats.fasta[\n              editor.sequenceTypeEnterMode.toLowerCase()\n            ];\n          isSequenceOrFasta = true;\n          break;\n        case SupportedFormat.molV3000:\n          inputFormat = macromoleculesFilesInputFormats.mol;\n          break;\n        default:\n          break;\n      }\n\n      modelChanges = await this.pasteWithIndigoConversion(\n        pastedStr,\n        inputFormat,\n        isSequenceOrFasta,\n      );\n    }\n\n    if (!modelChanges || modelChanges.operations.length === 0) {\n      return;\n    }\n    editor.renderersContainer.update(modelChanges);\n    new EditorHistory(editor).update(modelChanges);\n    this.scrollForView();\n  }\n\n  pasteKetFormatFragment(pastedStr: string) {\n    const editor = CoreEditor.provideEditorInstance();\n    const ketSerializer = new KetSerializer();\n    const deserialisedKet =\n      ketSerializer.deserializeToDrawingEntities(pastedStr);\n    if (!deserialisedKet) {\n      throw new Error('Error during parsing file');\n    }\n    const drawingEntitiesManager = deserialisedKet?.drawingEntitiesManager;\n\n    if (\n      !drawingEntitiesManager ||\n      !this.isPasteAllowedByMode(drawingEntitiesManager)\n    ) {\n      return;\n    }\n    if (!this.isPasteAvailable(drawingEntitiesManager)) {\n      editor.events.openErrorModal.dispatch({\n        errorTitle: 'Error Message',\n        errorMessage:\n          'It is impossible to merge fragments. Attachment point to establish bonds are not available.',\n      });\n      return;\n    }\n\n    this.updateMonomersPosition(drawingEntitiesManager);\n    const { command: modelChanges, mergedDrawingEntities } =\n      drawingEntitiesManager.mergeInto(editor.drawingEntitiesManager);\n\n    modelChanges.merge(\n      this.applyAdditionalPasteOperations(mergedDrawingEntities),\n    );\n\n    return modelChanges;\n  }\n\n  async pasteWithIndigoConversion(\n    pastedStr: string,\n    inputFormat: ChemicalMimeType,\n    isSequenceOrFasta = false,\n  ) {\n    const indigo = ketcherProvider.getKetcher().indigo;\n    try {\n      const ketStruct = await indigo.convert(\n        isSequenceOrFasta ? pastedStr.toUpperCase() : pastedStr,\n        {\n          outputFormat: ChemicalMimeType.KET,\n          inputFormat,\n        },\n      );\n\n      return this.pasteKetFormatFragment(ketStruct.struct);\n    } catch (error) {\n      const stringError =\n        typeof error === 'string' ? error : JSON.stringify(error);\n      const errorMessage = 'Convert error! ' + stringError;\n\n      this.unsupportedSymbolsError(errorMessage, isSequenceOrFasta);\n\n      return new Command();\n    }\n  }\n\n  private updateMonomersPosition(\n    drawingEntitiesManager: DrawingEntitiesManager,\n  ) {\n    let offset: Vec2;\n    let index = 0;\n    const newNodePosition = this.getNewNodePosition();\n    drawingEntitiesManager.monomers.forEach((monomer) => {\n      let position;\n      if (index === 0) {\n        offset = Vec2.diff(newNodePosition, new Vec2(monomer.position));\n        position = newNodePosition;\n      } else {\n        position = offset\n          ? new Vec2(monomer.position).add(offset)\n          : new Vec2(monomer.position);\n      }\n      drawingEntitiesManager.moveMonomer(monomer, position);\n      index++;\n    });\n  }\n\n  unsupportedSymbolsError(errorMessage: string, isSequenceOrFasta = false) {\n    const editor = CoreEditor.provideEditorInstance();\n    editor.events.openErrorModal.dispatch({\n      errorTitle: isSequenceOrFasta ? 'Unsupported symbols' : 'Error',\n      errorMessage,\n    });\n  }\n\n  private checkIfTargetIsInput(event: Event) {\n    return (\n      event.target instanceof HTMLElement &&\n      (event.target?.nodeName === 'INPUT' ||\n        event.target?.nodeName === 'TEXTAREA')\n    );\n  }\n\n  public destroy() {}\n}\n","import { LayoutMode } from 'application/editor/modes/types';\nimport { BaseMode } from 'application/editor/modes/internal';\nimport { CoreEditor } from '../Editor';\nimport { Coordinates } from '../internal';\nimport { Command } from 'domain/entities/Command';\n\nexport class FlexMode extends BaseMode {\n  constructor(previousMode?: LayoutMode) {\n    super('flex-layout-mode', previousMode);\n  }\n\n  initialize() {\n    const command = super.initialize();\n    const editor = CoreEditor.provideEditorInstance();\n\n    const modelChanges =\n      editor.drawingEntitiesManager.applyFlexLayoutMode(true);\n\n    command.merge(editor.drawingEntitiesManager.recalculateCanvasMatrix());\n\n    editor.renderersContainer.update(modelChanges);\n\n    return command;\n  }\n\n  getNewNodePosition() {\n    const editor = CoreEditor.provideEditorInstance();\n    return Coordinates.canvasToModel(editor.lastCursorPositionOfCanvas);\n  }\n\n  applyAdditionalPasteOperations() {\n    return new Command();\n  }\n\n  isPasteAllowedByMode(): boolean {\n    return true;\n  }\n\n  isPasteAvailable(): boolean {\n    return true;\n  }\n\n  scrollForView(): void {}\n}\n","import { BaseMonomer } from 'domain/entities/BaseMonomer';\n\nexport class MonomerSequenceNode {\n  constructor(public monomer: BaseMonomer) {}\n\n  public get SubChainConstructor() {\n    return this.monomer.SubChainConstructor;\n  }\n\n  public get firstMonomerInNode() {\n    return this.monomer;\n  }\n\n  public get lastMonomerInNode() {\n    return this.monomer;\n  }\n\n  public get monomers() {\n    return [this.monomer];\n  }\n\n  public get renderer() {\n    return this.monomer.renderer;\n  }\n\n  public get modified() {\n    return this.monomer.isModification;\n  }\n}\n","import { BaseSequenceItemRenderer, SequenceRenderer } from 'application/render';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { CoreEditor } from 'application/editor';\nimport ZoomTool from '../../../../editor/tools/Zoom';\nimport { select } from 'd3';\nimport { drawnStructuresSelector } from 'application/editor/constants';\n\nconst TEXT_COLOR = '#333333';\nconst HOVER_COLOR = '#167782';\nconst BUTTON_OFFSET_FROM_CANVAS = 20;\nconst BUTTON_Y_OFFSET_FROM_ROW = 18;\n\nexport class NewSequenceButton {\n  private buttonElement?: D3SvgElementSelection<SVGElement, void>;\n  private canvas: D3SvgElementSelection<SVGSVGElement, void>;\n  private rootElement?: D3SvgElementSelection<SVGGElement, void>;\n  private bodyElement?: D3SvgElementSelection<SVGForeignObjectElement, void>;\n\n  constructor(private indexOfRowBefore: number) {\n    this.canvas = ZoomTool.instance?.canvas || select(drawnStructuresSelector);\n  }\n\n  public show() {\n    const editor = CoreEditor.provideEditorInstance();\n    const chain =\n      SequenceRenderer.chainsCollection.chains[this.indexOfRowBefore];\n    const lastNodeRendererInChain = chain.lastNode?.renderer;\n\n    if (!(lastNodeRendererInChain instanceof BaseSequenceItemRenderer)) {\n      return;\n    }\n\n    this.rootElement = this.canvas\n      .append('g')\n      .data([this])\n      .attr('class', 'dynamic-element')\n      .attr(\n        'transform',\n        `translate(${BUTTON_OFFSET_FROM_CANVAS}, ${\n          lastNodeRendererInChain.scaledMonomerPositionForSequence.y +\n          BUTTON_Y_OFFSET_FROM_ROW\n        })`,\n      )\n      .attr('cursor', 'pointer') as never as D3SvgElementSelection<\n      SVGGElement,\n      void\n    >;\n\n    this.rootElement.attr('opacity', '0');\n    this.rootElement\n      .append('rect')\n      .attr('x', '16')\n      .attr('y', '14')\n      .attr('width', '595')\n      .attr('height', '4')\n      .attr('stroke', '#B4B9D6')\n      .attr('stroke-width', '1')\n      .attr('fill', '#fff');\n\n    this.bodyElement = this.rootElement\n      .append('foreignObject')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('height', '35')\n      .attr('width', '611');\n\n    this.buttonElement = this.bodyElement.append<SVGElement>('xhtml:div').attr(\n      'style',\n      `\n        width: 32px;\n        padding:  8px;\n        font-size: 12px;\n        color: ${TEXT_COLOR};\n        border-radius: 20px;\n        box-shadow: 0px 2px 5px 0px #67688426;\n        background-color: #ffffff;\n        font-weight: 400;\n        border: none;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      `,\n    );\n\n    NewSequenceButton.appendPlusIcon(this.buttonElement);\n\n    this.rootElement\n      .on('mouseover', () => {\n        this.appendHover();\n        this.rootElement?.attr('opacity', '1');\n      })\n      .on('mouseout', () => {\n        this.removeHover();\n        this.rootElement?.attr('opacity', '0');\n      })\n      .on('click', (event: MouseEvent) => {\n        event.stopPropagation();\n        editor.events.startNewSequence.dispatch({\n          indexOfRowBefore: this.indexOfRowBefore,\n        });\n      });\n  }\n\n  public static appendPlusIcon(\n    element: D3SvgElementSelection<SVGElement, void>,\n  ) {\n    element\n      .append('svg')\n      .attr('width', '16')\n      .attr('height', '16')\n      .attr('fill', 'currentColor')\n      .append('path')\n      .attr(\n        'd',\n        'M16 7.00095V9.00095H9V16.002H7V9.00095H0V7.00095H7V0.00195312H9V7.00095H16Z',\n      );\n  }\n\n  protected appendHover(): D3SvgElementSelection<SVGUseElement, void> | void {\n    this.buttonElement?.style('color', HOVER_COLOR);\n  }\n\n  protected appendHoverAreaElement(): void {}\n\n  drawSelection(): void {}\n\n  moveSelection(): void {}\n\n  protected removeHover(): void {\n    this.buttonElement?.style('color', TEXT_COLOR);\n  }\n\n  public remove() {\n    this.rootElement?.remove();\n    this.rootElement = undefined;\n  }\n}\n","import { CoreEditor, EditorHistory } from 'application/editor/internal';\nimport { LayoutMode } from 'application/editor/modes';\nimport { BaseMode } from 'application/editor/modes/BaseMode';\nimport ZoomTool from 'application/editor/tools/Zoom';\nimport { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\nimport {\n  NodeSelection,\n  NodesSelection,\n  SequenceRenderer,\n} from 'application/render/renderers/sequence/SequenceRenderer';\nimport { AttachmentPointName, MonomerItemType } from 'domain/types';\nimport { Command } from 'domain/entities/Command';\nimport {\n  AmbiguousMonomer,\n  BaseMonomer,\n  LinkerSequenceNode,\n  Phosphate,\n  RNABase,\n  SequenceType,\n  Sugar,\n  Vec2,\n} from 'domain/entities';\nimport { BaseRenderer } from 'application/render/renderers/internal';\nimport { EmptySequenceNode } from 'domain/entities/EmptySequenceNode';\nimport { Nucleoside } from 'domain/entities/Nucleoside';\nimport { Nucleotide } from 'domain/entities/Nucleotide';\nimport {\n  ReinitializeModeOperation,\n  RestoreSequenceCaretPositionOperation,\n} from 'application/editor/operations/modes';\nimport assert from 'assert';\nimport {\n  getPeptideLibraryItem,\n  getRnaPartLibraryItem,\n} from 'domain/helpers/rna';\nimport {\n  peptideNaturalAnalogues,\n  RNA_DNA_NON_MODIFIED_PART,\n  rnaDnaNaturalAnalogues,\n} from 'domain/constants/monomers';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { isNumber, uniq } from 'lodash';\nimport { ChainsCollection } from 'domain/entities/monomer-chains/ChainsCollection';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport { Chain } from 'domain/entities/monomer-chains/Chain';\nimport { MonomerSequenceNode } from 'domain/entities/MonomerSequenceNode';\nimport {\n  IRnaPreset,\n  LabeledNodesWithPositionInSequence,\n} from 'application/editor/tools/Tool';\nimport { NewSequenceButton } from 'application/render/renderers/sequence/ui-controls/NewSequenceButton';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\n\nconst naturalAnalogues = uniq([\n  ...rnaDnaNaturalAnalogues,\n  ...peptideNaturalAnalogues,\n]);\n\nenum Direction {\n  Left = 'left',\n  Right = 'right',\n}\n\nexport interface StartNewSequenceEventData {\n  indexOfRowBefore: number;\n}\n\nexport class SequenceMode extends BaseMode {\n  private _isEditMode = false;\n  private _isEditInRNABuilderMode = false;\n  private selectionStarted = false;\n  private selectionStartCaretPosition = -1;\n  private mousemoveCounter = 0;\n\n  constructor(previousMode?: LayoutMode) {\n    super('sequence-layout-mode', previousMode);\n  }\n\n  public get isEditMode() {\n    return this._isEditMode;\n  }\n\n  public set isEditMode(isEditMode) {\n    this._isEditMode = isEditMode;\n  }\n\n  public get isEditInRNABuilderMode() {\n    return this._isEditInRNABuilderMode;\n  }\n\n  public set isEditInRNABuilderMode(isEditInRNABuilderMode) {\n    this._isEditInRNABuilderMode = isEditInRNABuilderMode;\n  }\n\n  public initialize(\n    needScroll = true,\n    needRemoveSelection = true,\n    needReArrangeChains = true,\n  ) {\n    const command = super.initialize(needRemoveSelection);\n    const editor = CoreEditor.provideEditorInstance();\n\n    editor.drawingEntitiesManager.clearCanvas();\n\n    // Prevent rearranging chains (and recalculating the layout) when switching to sequence mode,\n    // only recalculate after changes in the sequence\n    const modelChanges = needReArrangeChains\n      ? editor.drawingEntitiesManager.reArrangeChains(\n          editor.canvas.width.baseVal.value,\n          true,\n          false,\n        )\n      : new Command();\n    const zoom = ZoomTool.instance;\n\n    editor.renderersContainer.update(modelChanges);\n\n    const chainsCollection =\n      editor.drawingEntitiesManager.applyMonomersSequenceLayout();\n    const firstMonomerPosition = (\n      chainsCollection.firstNode?.monomer.renderer as BaseSequenceItemRenderer\n    )?.scaledMonomerPositionForSequence;\n\n    if (firstMonomerPosition && (needScroll || needReArrangeChains)) {\n      zoom.scrollTo(firstMonomerPosition);\n    }\n\n    modelChanges.merge(command);\n\n    return modelChanges;\n  }\n\n  public turnOnEditMode(\n    sequenceItemRenderer?: BaseSequenceItemRenderer,\n    needToRemoveSelection = true,\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n\n    this.isEditMode = true;\n    this.initialize(false, needToRemoveSelection, false);\n    if (sequenceItemRenderer) {\n      SequenceRenderer.setCaretPositionNextToMonomer(\n        sequenceItemRenderer.node.monomer,\n      );\n    }\n    editor.events.toggleSequenceEditMode.dispatch(true);\n  }\n\n  public turnOffEditMode() {\n    if (!this.isEditMode) return;\n    const editor = CoreEditor.provideEditorInstance();\n\n    this.isEditMode = false;\n    this.initialize(false, true, false);\n    editor.events.toggleSequenceEditMode.dispatch(false);\n  }\n\n  public turnOnSequenceEditInRNABuilderMode() {\n    const editor = CoreEditor.provideEditorInstance();\n\n    this.isEditInRNABuilderMode = true;\n    this.initialize(false, false, false);\n\n    editor.events.toggleSequenceEditInRNABuilderMode.dispatch(true);\n  }\n\n  public turnOffSequenceEditInRNABuilderMode() {\n    const editor = CoreEditor.provideEditorInstance();\n\n    this.isEditInRNABuilderMode = false;\n    this.initialize(false, true, false);\n    editor.events.toggleSequenceEditInRNABuilderMode.dispatch(false);\n  }\n\n  public startNewSequence(eventData?: StartNewSequenceEventData) {\n    const currentChainIndex = this.isEditMode\n      ? SequenceRenderer.currentChainIndex\n      : SequenceRenderer.chainsCollection.chains.length - 1;\n    const indexOfRowBefore = isNumber(eventData?.indexOfRowBefore)\n      ? eventData?.indexOfRowBefore\n      : currentChainIndex;\n\n    if (!this.isEditMode) {\n      this.turnOnEditMode();\n    }\n\n    SequenceRenderer.startNewSequence(indexOfRowBefore);\n  }\n\n  public modifySequenceInRnaBuilder(\n    updatedSelection: LabeledNodesWithPositionInSequence[],\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n    const history = new EditorHistory(editor);\n    const modelChanges = new Command();\n\n    // Update Nucleotides one by one\n    for (const labeledNucleoelement of updatedSelection) {\n      const nodeIndexOverall = labeledNucleoelement.nodeIndexOverall;\n\n      if (nodeIndexOverall === undefined) return;\n\n      // Create monomerItem(s) based on label\n      let sugarMonomerItem;\n      let baseMonomerItem;\n      let phosphateMonomerItem;\n      if (labeledNucleoelement.sugarLabel) {\n        sugarMonomerItem = getRnaPartLibraryItem(\n          editor,\n          labeledNucleoelement.sugarLabel,\n        );\n      }\n      if (labeledNucleoelement.baseLabel) {\n        baseMonomerItem = getRnaPartLibraryItem(\n          editor,\n          labeledNucleoelement.baseLabel,\n        );\n      }\n      if (labeledNucleoelement.phosphateLabel) {\n        phosphateMonomerItem = getRnaPartLibraryItem(\n          editor,\n          labeledNucleoelement.phosphateLabel,\n        );\n      }\n\n      const currentNode = SequenceRenderer.getNodeByPointer(nodeIndexOverall);\n\n      // Update Sugar monomerItem object\n      if (currentNode.sugar && sugarMonomerItem) {\n        modelChanges.merge(\n          editor.drawingEntitiesManager.modifyMonomerItem(\n            currentNode.sugar,\n            sugarMonomerItem,\n          ),\n        );\n      }\n      // Update Base monomerItem object\n      if (currentNode.rnaBase && baseMonomerItem) {\n        modelChanges.merge(\n          editor.drawingEntitiesManager.modifyMonomerItem(\n            currentNode.rnaBase,\n            baseMonomerItem,\n          ),\n        );\n      }\n\n      // Update monomerItem object or add Phosphate\n      if (phosphateMonomerItem) {\n        // Update Phosphate monomerItem object for Nucleotide\n        if (currentNode instanceof Nucleotide) {\n          modelChanges.merge(\n            editor.drawingEntitiesManager.modifyMonomerItem(\n              currentNode.phosphate,\n              phosphateMonomerItem,\n            ),\n          );\n          // Add Phosphate to Nucleoside\n        } else if (currentNode instanceof Nucleoside) {\n          const sugarR2 = currentNode.sugar.attachmentPointsToBonds.R2;\n\n          if (sugarR2 instanceof MonomerToAtomBond) {\n            return;\n          }\n\n          const nextMonomerInSameChain = sugarR2?.secondMonomer;\n\n          // Remove existing bond connection between Nucleoside Sugar and next node in case of any\n          if (sugarR2) {\n            modelChanges.merge(\n              editor.drawingEntitiesManager.deletePolymerBond(sugarR2),\n            );\n          }\n\n          modelChanges.merge(\n            this.bondNodesThroughNewPhosphate(\n              new Vec2(0, 0),\n              currentNode.sugar,\n              nextMonomerInSameChain,\n              labeledNucleoelement.phosphateLabel,\n            ),\n          );\n          // Update Phosphate monomerItem object\n        } else if (currentNode.monomer instanceof Phosphate) {\n          modelChanges.merge(\n            editor.drawingEntitiesManager.modifyMonomerItem(\n              currentNode.monomer,\n              phosphateMonomerItem,\n            ),\n          );\n        }\n      }\n    }\n\n    // Refresh UI\n    modelChanges.addOperation(new ReinitializeModeOperation());\n    editor.renderersContainer.update(modelChanges);\n    history.update(modelChanges);\n  }\n\n  public click(event: MouseEvent) {\n    const eventData = event.target?.__data__;\n    const isClickedOnSequenceItem =\n      eventData instanceof BaseSequenceItemRenderer;\n\n    if (this.isEditMode && isClickedOnSequenceItem) {\n      this.unselectAllEntities();\n    }\n  }\n\n  public doubleClickOnSequenceItem(event: MouseEvent) {\n    if (this.isEditInRNABuilderMode) {\n      return;\n    }\n\n    const eventData = event.target?.__data__ as BaseSequenceItemRenderer;\n\n    this.turnOnEditMode(eventData, false);\n  }\n\n  public mousedownBetweenSequenceItems(event: MouseEvent) {\n    if (this.isEditInRNABuilderMode) {\n      return;\n    }\n\n    const eventData = event.target?.__data__ as BaseSequenceItemRenderer;\n\n    this.turnOnEditMode(eventData);\n    SequenceRenderer.moveCaretForward();\n  }\n\n  public mousedown(event: MouseEvent) {\n    const eventData: BaseRenderer | NewSequenceButton | undefined =\n      event.target?.__data__;\n    const isClickedOnEmptyPlace = !(\n      eventData instanceof NewSequenceButton ||\n      eventData instanceof BaseRenderer\n    );\n    const isEventOnSequenceItem = eventData instanceof BaseSequenceItemRenderer;\n\n    if (isClickedOnEmptyPlace) {\n      this.turnOffEditMode();\n\n      return;\n    }\n\n    if (this.isEditMode && isEventOnSequenceItem && !event.shiftKey) {\n      let sequenceItemBoundingBox = eventData.rootBoundingClientRect;\n\n      // Case when user clicks between symbols. In this case renderer stored in eventData\n      // is already destroyed during rerender in mousedownBetweenSequenceItems handler\n      if (!sequenceItemBoundingBox) {\n        sequenceItemBoundingBox = SequenceRenderer.getRendererByMonomer(\n          eventData.node.monomer,\n        )?.rootBoundingClientRect;\n      }\n\n      const isRightSideOfSequenceItemClicked = sequenceItemBoundingBox\n        ? event.clientX >\n          sequenceItemBoundingBox.x + sequenceItemBoundingBox.width / 2\n        : false;\n\n      SequenceRenderer.setCaretPositionByMonomer(eventData.node.monomer);\n\n      if (isRightSideOfSequenceItemClicked) {\n        SequenceRenderer.moveCaretForward();\n      }\n\n      SequenceRenderer.resetLastUserDefinedCaretPosition();\n\n      this.unselectAllEntities();\n      this.selectionStarted = true;\n      this.selectionStartCaretPosition = SequenceRenderer.caretPosition;\n    }\n  }\n\n  public mousemove(event: MouseEvent) {\n    const eventData = event.target?.__data__;\n    const isEventOnSequenceItem = eventData instanceof BaseSequenceItemRenderer;\n    // this.mousemoveCounter > 1 used here to prevent selection of single monomer\n    // when user just clicked on it during the mousemove event\n    if (\n      this.isEditMode &&\n      isEventOnSequenceItem &&\n      this.selectionStarted &&\n      this.mousemoveCounter > 1\n    ) {\n      const editor = CoreEditor.provideEditorInstance();\n      SequenceRenderer.setCaretPositionBySequenceItemRenderer(\n        eventData as BaseSequenceItemRenderer,\n      );\n\n      let startCaretPosition = this.selectionStartCaretPosition;\n      let endCaretPosition = SequenceRenderer.caretPosition;\n      if (this.selectionStartCaretPosition > SequenceRenderer.caretPosition) {\n        startCaretPosition = SequenceRenderer.caretPosition;\n        endCaretPosition = this.selectionStartCaretPosition;\n      }\n      const monomers = SequenceRenderer.getMonomersByCaretPositionRange(\n        startCaretPosition,\n        endCaretPosition,\n      );\n      this.unselectAllEntities();\n      const { command: modelChanges } =\n        editor.drawingEntitiesManager.getAllSelectedEntitiesForEntities(\n          monomers,\n        );\n      const moveCaretOperation = new RestoreSequenceCaretPositionOperation(\n        this.selectionStartCaretPosition,\n        SequenceRenderer.caretPosition,\n      );\n      modelChanges.addOperation(moveCaretOperation);\n      editor.renderersContainer.update(modelChanges);\n    }\n\n    if (this.selectionStarted) {\n      this.mousemoveCounter++;\n    }\n  }\n\n  mouseup() {\n    if (this.selectionStarted) {\n      this.selectionStarted = false;\n    }\n\n    if (this.isEditMode) {\n      SequenceRenderer.resetLastUserDefinedCaretPosition();\n    }\n    this.mousemoveCounter = 0;\n  }\n\n  private bondNodesThroughNewPhosphate(\n    position: Vec2,\n    previousMonomer: BaseMonomer,\n    nextMonomer?: BaseMonomer,\n    phosphate?: string,\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n    const phosphateLibraryItem = getRnaPartLibraryItem(\n      editor,\n      phosphate || RNA_DNA_NON_MODIFIED_PART.PHOSPHATE,\n    );\n\n    assert(phosphateLibraryItem);\n\n    const modelChanges = editor.drawingEntitiesManager.addMonomer(\n      phosphateLibraryItem,\n      position,\n    );\n\n    const additionalPhosphate = modelChanges.operations[0]\n      .monomer as BaseMonomer;\n\n    modelChanges.merge(\n      this.tryToCreatePolymerBond(previousMonomer, additionalPhosphate),\n    );\n\n    if (nextMonomer) {\n      modelChanges.merge(\n        this.tryToCreatePolymerBond(additionalPhosphate, nextMonomer),\n      );\n    }\n\n    return modelChanges;\n  }\n\n  private handlePeptideNodeAddition(\n    enteredSymbol: string,\n    newNodePosition: Vec2,\n  ) {\n    if (!peptideNaturalAnalogues.includes(enteredSymbol)) {\n      return undefined;\n    }\n\n    const modelChanges = new Command();\n    const editor = CoreEditor.provideEditorInstance();\n    const newPeptideLibraryItem = getPeptideLibraryItem(editor, enteredSymbol);\n\n    assert(newPeptideLibraryItem);\n\n    const peptideAddCommand = editor.drawingEntitiesManager.addMonomer(\n      newPeptideLibraryItem,\n      newNodePosition,\n    );\n\n    const newPeptide = peptideAddCommand.operations[0].monomer as BaseMonomer;\n    const newPeptideNode = new MonomerSequenceNode(newPeptide);\n\n    modelChanges.merge(peptideAddCommand);\n\n    modelChanges.merge(this.insertNewSequenceFragment(newPeptideNode));\n\n    return modelChanges;\n  }\n\n  private handleRnaDnaNodeAddition(\n    enteredSymbol: string,\n    currentNode: SubChainNode,\n    newNodePosition: Vec2,\n  ) {\n    if (!rnaDnaNaturalAnalogues.includes(enteredSymbol)) {\n      return undefined;\n    }\n\n    const modelChanges = new Command();\n    const { modelChanges: addedNodeModelChanges, node: nodeToAdd } =\n      currentNode instanceof Nucleotide || currentNode instanceof Nucleoside\n        ? Nucleotide.createOnCanvas(enteredSymbol, newNodePosition)\n        : Nucleoside.createOnCanvas(enteredSymbol, newNodePosition);\n\n    modelChanges.merge(addedNodeModelChanges);\n\n    modelChanges.merge(this.insertNewSequenceFragment(nodeToAdd));\n\n    return modelChanges;\n  }\n\n  private connectNodes(\n    firstNodeToConnect: SubChainNode | undefined,\n    secondNodeToConnect: SubChainNode | undefined,\n    modelChanges: Command,\n    newNodePosition: Vec2,\n    nextNodeInSameChain?: SubChainNode,\n  ) {\n    if (\n      !firstNodeToConnect ||\n      firstNodeToConnect instanceof EmptySequenceNode ||\n      !secondNodeToConnect ||\n      secondNodeToConnect instanceof EmptySequenceNode\n    ) {\n      return;\n    }\n\n    const editor = CoreEditor.provideEditorInstance();\n    const nodeR2Bond =\n      firstNodeToConnect.lastMonomerInNode.attachmentPointsToBonds?.R2;\n    const nextNodeR1Bond =\n      secondNodeToConnect?.firstMonomerInNode?.attachmentPointsToBonds.R1;\n\n    if (nodeR2Bond || nextNodeR1Bond) {\n      editor.events.error.dispatch(\n        'No available attachment points to establish bonds for merge.',\n      );\n\n      return;\n    }\n\n    if (\n      nextNodeInSameChain instanceof EmptySequenceNode &&\n      firstNodeToConnect instanceof Nucleoside &&\n      (secondNodeToConnect instanceof Nucleotide ||\n        secondNodeToConnect instanceof Nucleoside)\n    ) {\n      modelChanges.merge(\n        this.bondNodesThroughNewPhosphate(\n          newNodePosition,\n          firstNodeToConnect.lastMonomerInNode,\n          secondNodeToConnect.firstMonomerInNode,\n        ),\n      );\n    } else {\n      modelChanges.merge(\n        this.tryToCreatePolymerBond(\n          firstNodeToConnect.lastMonomerInNode,\n          secondNodeToConnect.firstMonomerInNode,\n        ),\n      );\n    }\n  }\n\n  private deleteBondToNextNodeInChain(\n    node: SubChainNode | undefined,\n    modelChanges: Command,\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n    const nodeR2Bond = node?.lastMonomerInNode.attachmentPointsToBonds.R2;\n\n    if (!nodeR2Bond || nodeR2Bond instanceof MonomerToAtomBond) {\n      return;\n    }\n\n    modelChanges.merge(\n      editor.drawingEntitiesManager.deletePolymerBond(nodeR2Bond),\n    );\n  }\n\n  private finishNodesDeletion(\n    modelChanges: Command,\n    previousCaretPosition: number,\n    newCaretPosition?: number,\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n    const history = new EditorHistory(editor);\n    const moveCaretOperation = new RestoreSequenceCaretPositionOperation(\n      previousCaretPosition,\n      isNumber(newCaretPosition)\n        ? newCaretPosition\n        : SequenceRenderer.caretPosition,\n    );\n    modelChanges.addOperation(new ReinitializeModeOperation());\n    editor.renderersContainer.update(modelChanges);\n    modelChanges.addOperation(moveCaretOperation);\n    history.update(modelChanges);\n    this.selectionStartCaretPosition = -1;\n    SequenceRenderer.resetLastUserDefinedCaretPosition();\n  }\n\n  private tryToCreatePolymerBond(\n    firstMonomer: BaseMonomer,\n    secondMonomer: BaseMonomer,\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n\n    const isConnectionPossible = this.areR1R2Free(secondMonomer, firstMonomer);\n\n    if (!isConnectionPossible) {\n      this.showMergeWarningModal();\n      return new Command();\n    }\n\n    return editor.drawingEntitiesManager.createPolymerBond(\n      firstMonomer,\n      secondMonomer,\n      AttachmentPointName.R2,\n      AttachmentPointName.R1,\n    );\n  }\n\n  private handleNodesDeletion(selections: NodesSelection) {\n    const editor = CoreEditor.provideEditorInstance();\n    const modelChanges = new Command();\n\n    selections.forEach((selectionRange) => {\n      const selectionStartNode = selectionRange[0].node;\n      const selectionEndNode = selectionRange[selectionRange.length - 1].node;\n      let isPhosphateAdditionalyDeleted = false;\n\n      const nodeBeforeSelection =\n        SequenceRenderer.getPreviousNode(selectionStartNode);\n      const nodeAfterSelection = SequenceRenderer.getNextNode(selectionEndNode);\n      const nodeInSameChainBeforeSelection =\n        SequenceRenderer.getPreviousNodeInSameChain(selectionStartNode);\n      const nodeInSameChainAfterSelection =\n        SequenceRenderer.getNextNodeInSameChain(selectionEndNode);\n\n      if (\n        !nodeInSameChainBeforeSelection &&\n        nodeAfterSelection &&\n        !(nodeAfterSelection instanceof EmptySequenceNode)\n      ) {\n        modelChanges.merge(\n          editor.drawingEntitiesManager.moveMonomer(\n            nodeAfterSelection.monomer,\n            selectionStartNode.monomer.position,\n          ),\n        );\n      }\n\n      if (\n        !nodeBeforeSelection ||\n        nodeBeforeSelection instanceof EmptySequenceNode\n      ) {\n        return;\n      }\n\n      if (\n        nodeBeforeSelection === nodeInSameChainBeforeSelection &&\n        nodeBeforeSelection instanceof Nucleotide &&\n        !(nodeInSameChainAfterSelection instanceof Nucleotide) &&\n        !(nodeInSameChainAfterSelection instanceof Nucleoside)\n      ) {\n        // delete phosphate from last nucleotide\n        modelChanges.merge(\n          editor.drawingEntitiesManager.deleteMonomer(\n            nodeBeforeSelection.lastMonomerInNode,\n          ),\n        );\n        // TODO get rid of this boolean\n        isPhosphateAdditionalyDeleted = true;\n      }\n\n      if (\n        !nodeAfterSelection ||\n        nodeAfterSelection instanceof EmptySequenceNode ||\n        (!this.isEditMode &&\n          (nodeAfterSelection !== nodeInSameChainAfterSelection ||\n            nodeBeforeSelection !== nodeInSameChainBeforeSelection))\n      ) {\n        return;\n      }\n\n      if (\n        nodeBeforeSelection instanceof Nucleoside &&\n        nodeAfterSelection instanceof Nucleotide\n      ) {\n        modelChanges.merge(\n          this.bondNodesThroughNewPhosphate(\n            this.getNewSequenceItemPosition(nodeBeforeSelection),\n            nodeBeforeSelection.lastMonomerInNode,\n            nodeAfterSelection.firstMonomerInNode,\n          ),\n        );\n      } else {\n        modelChanges.merge(\n          this.tryToCreatePolymerBond(\n            isPhosphateAdditionalyDeleted\n              ? nodeBeforeSelection.firstMonomerInNode\n              : nodeBeforeSelection.lastMonomerInNode,\n            nodeAfterSelection.firstMonomerInNode,\n          ),\n        );\n      }\n    });\n\n    return modelChanges;\n  }\n\n  get keyboardEventHandlers() {\n    const deleteNode = (direction: Direction) => {\n      const editor = CoreEditor.provideEditorInstance();\n      const nodeToDelete =\n        direction === Direction.Left\n          ? SequenceRenderer.previousNode\n          : SequenceRenderer.getNodeByPointer(SequenceRenderer.caretPosition);\n      const caretPosition =\n        direction === Direction.Left\n          ? (SequenceRenderer.previousCaretPosition as number)\n          : SequenceRenderer.caretPosition;\n      const selections = SequenceRenderer.selections;\n      const modelChanges = new Command();\n      let nodesToDelete: NodesSelection;\n\n      if (selections.length) {\n        modelChanges.merge(this.deleteSelectedDrawingEntities());\n        nodesToDelete = selections;\n      } else if (nodeToDelete) {\n        nodeToDelete.monomers.forEach((monomer) => {\n          modelChanges.merge(\n            editor.drawingEntitiesManager.deleteMonomer(monomer),\n          );\n        });\n        nodesToDelete = [\n          [\n            {\n              node: nodeToDelete,\n              nodeIndexOverall: caretPosition,\n            },\n          ],\n        ];\n      } else {\n        return;\n      }\n\n      modelChanges.merge(this.handleNodesDeletion(nodesToDelete));\n\n      this.finishNodesDeletion(\n        modelChanges,\n        nodesToDelete[0][0].nodeIndexOverall,\n        nodesToDelete[0][0].nodeIndexOverall,\n      );\n\n      if (\n        SequenceRenderer.caretPosition === 0 &&\n        SequenceRenderer.chainsCollection.chains.length === 0\n      ) {\n        this.startNewSequence();\n      }\n    };\n\n    return {\n      delete: {\n        shortcut: ['Delete'],\n        handler: () => deleteNode(Direction.Right),\n      },\n      backspace: {\n        shortcut: ['Backspace'],\n        handler: () => deleteNode(Direction.Left),\n      },\n      'turn-off-edit-mode': {\n        shortcut: ['Escape'],\n        handler: () => {\n          this.turnOffEditMode();\n        },\n      },\n      'start-new-sequence': {\n        shortcut: ['Enter'],\n        handler: () => {\n          this.unselectAllEntities();\n          this.startNewSequence();\n        },\n      },\n      'move-caret-up': {\n        shortcut: ['ArrowUp'],\n        handler: () => {\n          SequenceRenderer.moveCaretUp();\n        },\n      },\n      'move-caret-down': {\n        shortcut: ['ArrowDown'],\n        handler: () => {\n          SequenceRenderer.moveCaretDown();\n        },\n      },\n      'move-caret-forward': {\n        shortcut: ['ArrowRight'],\n        handler: () => {\n          if (!this.isEditMode) {\n            return;\n          }\n          SequenceRenderer.moveCaretForward();\n          SequenceRenderer.resetLastUserDefinedCaretPosition();\n        },\n      },\n      'move-caret-back': {\n        shortcut: ['ArrowLeft'],\n        handler: () => {\n          if (!this.isEditMode) {\n            return;\n          }\n          SequenceRenderer.moveCaretBack();\n          SequenceRenderer.resetLastUserDefinedCaretPosition();\n        },\n      },\n      'add-sequence-item': {\n        shortcut: [\n          ...naturalAnalogues,\n          ...naturalAnalogues.map((naturalAnalogue) =>\n            naturalAnalogue.toLowerCase(),\n          ),\n        ],\n        handler: (event) => {\n          if (\n            SequenceRenderer.chainsCollection.length === 1 &&\n            SequenceRenderer.chainsCollection.firstNode instanceof\n              EmptySequenceNode &&\n            !this.isEditMode\n          ) {\n            this.turnOnEditMode();\n            SequenceRenderer.setCaretPosition(0);\n          }\n\n          if (!this.isEditMode) {\n            return;\n          }\n\n          if (!this.deleteSelection()) {\n            return;\n          }\n\n          const enteredSymbol = event.code.replace('Key', '');\n          const editor = CoreEditor.provideEditorInstance();\n          const history = new EditorHistory(editor);\n          const modelChanges = this.insertNewSequenceItem(\n            editor,\n            enteredSymbol,\n          );\n\n          // Case when user type symbol that does not exist in current sequence type mode\n          if (!modelChanges) {\n            return;\n          }\n\n          modelChanges.addOperation(new ReinitializeModeOperation());\n          editor.renderersContainer.update(modelChanges);\n          modelChanges.addOperation(SequenceRenderer.moveCaretForward());\n          history.update(modelChanges);\n        },\n      },\n      'sequence-edit-select': {\n        shortcut: [\n          'Shift+ArrowLeft',\n          'Shift+ArrowRight',\n          'Shift+ArrowUp',\n          'Shift+ArrowDown',\n        ],\n        handler: (event) => {\n          const arrowKey = event.key;\n\n          if (\n            SequenceRenderer.caretPosition === 0 &&\n            arrowKey === 'ArrowLeft'\n          ) {\n            return;\n          }\n\n          this.selectionStartCaretPosition =\n            this.selectionStartCaretPosition !== -1\n              ? this.selectionStartCaretPosition\n              : SequenceRenderer.caretPosition;\n          SequenceRenderer.shiftArrowSelectionInEditMode(event);\n\n          if (arrowKey === 'ArrowLeft' || arrowKey === 'ArrowRight') {\n            SequenceRenderer.resetLastUserDefinedCaretPosition();\n          }\n        },\n      },\n    };\n  }\n\n  private deleteSelection() {\n    const selections = SequenceRenderer.selections;\n\n    if (selections.length > 1) {\n      return false;\n    }\n\n    if (selections.length === 1) {\n      const deletionModelChanges = this.deleteSelectedDrawingEntities();\n\n      deletionModelChanges.merge(this.handleNodesDeletion(selections));\n      this.finishNodesDeletion(\n        deletionModelChanges,\n        SequenceRenderer.caretPosition,\n        selections[0][0].nodeIndexOverall,\n      );\n    }\n    return true;\n  }\n\n  isPasteAllowedByMode(drawingEntitiesManager: DrawingEntitiesManager) {\n    const editor = CoreEditor.provideEditorInstance();\n    const chainsCollection = ChainsCollection.fromMonomers([\n      ...drawingEntitiesManager.monomers.values(),\n    ]);\n    if (!this.isEditMode) {\n      return true;\n    }\n\n    if (chainsCollection.chains.length > 1) {\n      editor.events.error.dispatch(\n        'Paste of several fragments is prohibited in text-editing mode.',\n      );\n      return false;\n    }\n\n    if (chainsCollection.chains.length === 0) {\n      editor.events.error.dispatch('No copied fragments.');\n      return false;\n    }\n\n    if (!this.deleteSelection()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private isR1Free(entity: SubChainNode | BaseMonomer): boolean {\n    if (entity instanceof BaseMonomer) {\n      return entity.attachmentPointsToBonds.R1 === null;\n    }\n\n    return entity?.firstMonomerInNode?.attachmentPointsToBonds?.R1 === null;\n  }\n\n  private isR2Free(entity?: SubChainNode | BaseMonomer): boolean {\n    if (entity instanceof BaseMonomer) {\n      return entity.attachmentPointsToBonds.R2 === null;\n    }\n\n    return entity?.lastMonomerInNode?.attachmentPointsToBonds?.R2 === null;\n  }\n\n  private areR1R2Free(\n    firstEntity: SubChainNode | BaseMonomer,\n    lastEntity: SubChainNode | BaseMonomer,\n  ): boolean {\n    return this.isR1Free(firstEntity) && this.isR2Free(lastEntity);\n  }\n\n  private isConnectionPossible(\n    firstMonomer: BaseMonomer,\n    firstMonomerAttachmentPoint: AttachmentPointName,\n    secondMonomer: BaseMonomer,\n    secondMonomerAttachmentPoint: AttachmentPointName,\n  ) {\n    return (\n      firstMonomer.attachmentPointsToBonds[firstMonomerAttachmentPoint] ===\n        null &&\n      secondMonomer.attachmentPointsToBonds[secondMonomerAttachmentPoint] ===\n        null\n    );\n  }\n\n  isPasteAvailable(drawingEntitiesManager: DrawingEntitiesManager) {\n    if (!this.isEditMode) {\n      return true;\n    }\n    const chainsCollection = ChainsCollection.fromMonomers([\n      ...drawingEntitiesManager.monomers.values(),\n    ]);\n    const currentNode = SequenceRenderer.currentEdittingNode;\n    const previousNodeInSameChain = SequenceRenderer.previousNodeInSameChain;\n    const lastNodeOfNewFragment = chainsCollection.lastNode;\n    const firstNodeOfNewFragment = chainsCollection.firstNode;\n    const isPasteInEnd =\n      currentNode instanceof EmptySequenceNode || !currentNode;\n    const isPasteInStart = !previousNodeInSameChain;\n    if (isPasteInEnd && !previousNodeInSameChain) return true;\n    if (isPasteInEnd) {\n      return (\n        this.isR1Free(firstNodeOfNewFragment) &&\n        this.isR2Free(previousNodeInSameChain)\n      );\n    }\n    if (isPasteInStart) {\n      return this.isR2Free(lastNodeOfNewFragment) && this.isR1Free(currentNode);\n    }\n    return this.areR1R2Free(firstNodeOfNewFragment, lastNodeOfNewFragment);\n  }\n\n  applyAdditionalPasteOperations(\n    drawingEntitiesManager: DrawingEntitiesManager,\n  ) {\n    if (!this.isEditMode) {\n      const command = new Command();\n\n      command.addOperation(new ReinitializeModeOperation());\n\n      return command;\n    }\n\n    const chainsCollection = ChainsCollection.fromMonomers([\n      ...drawingEntitiesManager.monomers.values(),\n    ]);\n\n    const currentSequence = SequenceRenderer.currentChain;\n\n    const currentSequenceHasPhosphate =\n      currentSequence?.lastNonEmptyNode?.monomer?.monomerItem?.props?.Name ===\n      'Phosphate';\n\n    let nextCaretPosition =\n      SequenceRenderer.caretPosition + chainsCollection.length;\n\n    if (currentSequenceHasPhosphate) {\n      nextCaretPosition -= 1;\n    }\n\n    const modelChanges = this.insertNewSequenceFragment(chainsCollection);\n\n    modelChanges.addOperation(new ReinitializeModeOperation());\n\n    modelChanges.addOperation(\n      new RestoreSequenceCaretPositionOperation(\n        SequenceRenderer.caretPosition,\n        nextCaretPosition,\n      ),\n    );\n\n    return modelChanges;\n  }\n\n  private preserveSideChainConnections(selection: NodeSelection) {\n    if (selection.node.monomer.sideConnections.length === 0) {\n      return null;\n    }\n\n    const sideConnectionsData: Array<{\n      firstMonomerAttachmentPointName: AttachmentPointName;\n      secondMonomer: BaseMonomer;\n      secondMonomerAttachmentPointName: AttachmentPointName;\n    }> = [];\n\n    Object.entries(selection.node.monomer.attachmentPointsToBonds).forEach(\n      ([key, bond]) => {\n        if (\n          !bond ||\n          bond instanceof MonomerToAtomBond ||\n          !bond.isSideChainConnection\n        ) {\n          return;\n        }\n\n        const secondMonomer = bond.getAnotherMonomer(selection.node.monomer);\n        if (!secondMonomer?.attachmentPointsToBonds) {\n          return;\n        }\n\n        const secondMonomerBondData = Object.entries(\n          secondMonomer?.attachmentPointsToBonds,\n        ).find(([, value]) => value === bond);\n\n        if (!secondMonomerBondData) {\n          return;\n        }\n\n        const [secondMonomerAttachmentPointName] = secondMonomerBondData;\n\n        sideConnectionsData.push({\n          firstMonomerAttachmentPointName: key as AttachmentPointName,\n          secondMonomer,\n          secondMonomerAttachmentPointName:\n            secondMonomerAttachmentPointName as AttachmentPointName,\n        });\n      },\n    );\n\n    return sideConnectionsData;\n  }\n\n  private replaceSelectionWithMonomer(\n    monomerItem: MonomerItemType,\n    selection: NodeSelection,\n    modelChanges: Command,\n    previousSelectionNode?: SubChainNode,\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n    const nextNode = SequenceRenderer.getNextNodeInSameChain(selection.node);\n    const position = selection.node.monomer.position;\n    const sideChainConnections = this.preserveSideChainConnections(selection);\n    const hasPreviousNodeInChain =\n      selection.node.firstMonomerInNode.attachmentPointsToBonds.R1;\n    const hasNextNodeInChain =\n      selection.node.lastMonomerInNode.attachmentPointsToBonds.R2;\n\n    selection.node.monomers.forEach((monomer) => {\n      modelChanges.merge(editor.drawingEntitiesManager.deleteMonomer(monomer));\n      monomer.forEachBond((polymerBond) => {\n        modelChanges.merge(\n          editor.drawingEntitiesManager.deleteDrawingEntity(polymerBond),\n        );\n      });\n    });\n\n    const monomerAddCommand = editor.drawingEntitiesManager.addMonomer(\n      monomerItem,\n      position,\n    );\n    const newMonomer = monomerAddCommand.operations[0].monomer as BaseMonomer;\n    const newMonomerSequenceNode = new MonomerSequenceNode(newMonomer);\n\n    modelChanges.merge(monomerAddCommand);\n    modelChanges.merge(\n      this.insertNewSequenceFragment(\n        newMonomerSequenceNode,\n        nextNode || null,\n        previousSelectionNode,\n        Boolean(hasPreviousNodeInChain),\n        Boolean(hasNextNodeInChain),\n      ),\n    );\n\n    // TODO: Check for multiple side chain connections in Linkers\n    sideChainConnections?.forEach((sideConnectionData) => {\n      const {\n        firstMonomerAttachmentPointName,\n        secondMonomer,\n        secondMonomerAttachmentPointName,\n      } = sideConnectionData;\n      if (\n        !this.isConnectionPossible(\n          newMonomer,\n          firstMonomerAttachmentPointName,\n          secondMonomer,\n          secondMonomerAttachmentPointName,\n        )\n      ) {\n        return;\n      }\n\n      modelChanges.merge(\n        editor.drawingEntitiesManager.createPolymerBond(\n          newMonomer,\n          secondMonomer,\n          firstMonomerAttachmentPointName,\n          secondMonomerAttachmentPointName,\n        ),\n      );\n    });\n\n    return newMonomerSequenceNode;\n  }\n\n  private replaceSelectionsWithMonomer(\n    selections: NodesSelection,\n    monomerItem: MonomerItemType,\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n    const history = new EditorHistory(editor);\n    const modelChanges = new Command();\n\n    selections.forEach((selectionRange) => {\n      let previousReplacedNode = SequenceRenderer.getPreviousNodeInSameChain(\n        selectionRange[0].node,\n      );\n\n      selectionRange.forEach((nodeSelection) => {\n        if (nodeSelection.node instanceof EmptySequenceNode) {\n          return;\n        }\n\n        previousReplacedNode = this.replaceSelectionWithMonomer(\n          monomerItem,\n          nodeSelection,\n          modelChanges,\n          previousReplacedNode,\n        );\n      });\n    });\n\n    modelChanges.addOperation(new ReinitializeModeOperation());\n    editor.renderersContainer.update(modelChanges);\n    modelChanges.setUndoOperationReverse();\n    modelChanges.setUndoOperationsByPriority();\n    history.update(modelChanges);\n  }\n\n  private checkIfNewMonomerCouldEstablishConnections(\n    nodeSelection: NodeSelection,\n    monomerItem: MonomerItemType | undefined,\n    sideChainConnections?: boolean,\n  ) {\n    if (!monomerItem?.attachmentPoints) {\n      return false;\n    }\n\n    const newMonomerAttachmentPoints =\n      BaseMonomer.getAttachmentPointDictFromMonomerDefinition(\n        monomerItem.attachmentPoints,\n      );\n    // Side chains\n    // node.selection.node.monomers.attachmentPoints\n    const oldMonomerBonds: [string, PolymerBond | MonomerToAtomBond | null][] =\n      sideChainConnections\n        ? Object.entries(nodeSelection.node.monomer.attachmentPointsToBonds)\n        : [\n            [\n              AttachmentPointName.R1 as string,\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              nodeSelection.node.firstMonomerInNode.attachmentPointsToBonds.R1!,\n            ],\n            [\n              AttachmentPointName.R2 as string,\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              nodeSelection.node.lastMonomerInNode.attachmentPointsToBonds.R2!,\n            ],\n          ];\n    // Backbone\n    // nodeSelection.node.firstMonomerInNode.attachmentPointsToBonds.R1\n    // nodeSelection.node.lastMonomerInNode.attachmentPointsToBonds.R2\n    return oldMonomerBonds.every(([key, bond]) => {\n      if (\n        !bond ||\n        (!(bond instanceof MonomerToAtomBond) &&\n          (sideChainConnections\n            ? !bond.isSideChainConnection\n            : !bond.isBackBoneChainConnection))\n      ) {\n        return true;\n      }\n\n      return newMonomerAttachmentPoints.attachmentPointsList.includes(\n        key as AttachmentPointName,\n      );\n    });\n  }\n\n  private selectionsContainLinkerNode(selections: NodesSelection) {\n    return selections.some((selectionRange) =>\n      selectionRange.some(\n        (nodeSelection) => nodeSelection.node instanceof LinkerSequenceNode,\n      ),\n    );\n  }\n\n  private selectionsCantPreserveConnectionsWithMonomer(\n    selections: NodesSelection,\n    monomerItem: MonomerItemType,\n    sideChainConnections?: boolean,\n  ) {\n    return selections.some((selectionRange) =>\n      selectionRange.some(\n        (nodeSelection) =>\n          !this.checkIfNewMonomerCouldEstablishConnections(\n            nodeSelection,\n            monomerItem,\n            sideChainConnections,\n          ),\n      ),\n    );\n  }\n\n  private presetHasNeededAttachmentPoints(preset) {\n    // TODO: This check is not universal, it won't allow to put presets without R1 in sugar, revisit later\n    if (!preset.sugar) {\n      return false;\n    }\n\n    const sugarHasR1 = BaseMonomer.getAttachmentPointDictFromMonomerDefinition(\n      preset.sugar.attachmentPoints,\n    ).attachmentPointsList.includes(AttachmentPointName.R1);\n\n    if (preset.phosphate) {\n      const phosphateHasR2 =\n        BaseMonomer.getAttachmentPointDictFromMonomerDefinition(\n          preset.phosphate.attachmentPoints,\n        ).attachmentPointsList.includes(AttachmentPointName.R2);\n\n      return sugarHasR1 && phosphateHasR2;\n    }\n\n    return sugarHasR1;\n  }\n\n  private selectionsCantPreserveConnectionsWithPreset(\n    selections: NodesSelection,\n    preset: IRnaPreset,\n    sideChainConnections?: boolean,\n  ) {\n    return selections.some((selectionRange) =>\n      selectionRange.some((nodeSelection) =>\n        [preset.sugar, preset.base, preset.phosphate].some(\n          (monomer) =>\n            monomer &&\n            !this.checkIfNewMonomerCouldEstablishConnections(\n              nodeSelection,\n              monomer,\n              sideChainConnections,\n            ),\n        ),\n      ),\n    );\n  }\n\n  private checkNodeInsertionPossibility(newNode: SubChainNode) {\n    const previousNodeInSameChain = SequenceRenderer.previousNodeInSameChain;\n    const currentNode = SequenceRenderer.currentEdittingNode;\n    const currentNodeIsNotEmpty = !(currentNode instanceof EmptySequenceNode);\n\n    let missingAttachmentPoint: AttachmentPointName | null = null;\n\n    const previousMonomerHasR2 = Boolean(\n      previousNodeInSameChain?.lastMonomerInNode.hasAttachmentPoint(\n        AttachmentPointName.R2,\n      ),\n    );\n    const newMonomerHasR1 = newNode.firstMonomerInNode.hasAttachmentPoint(\n      AttachmentPointName.R1,\n    );\n    const rightSideInsertImpossible =\n      Boolean(previousNodeInSameChain) &&\n      (!previousMonomerHasR2 || !newMonomerHasR1);\n    if (rightSideInsertImpossible && !newMonomerHasR1) {\n      missingAttachmentPoint = AttachmentPointName.R1;\n    }\n\n    const nextMonomerHasR1 = Boolean(\n      currentNode?.firstMonomerInNode.hasAttachmentPoint(\n        AttachmentPointName.R1,\n      ),\n    );\n    const newMonomerHasR2 = newNode.lastMonomerInNode.hasAttachmentPoint(\n      AttachmentPointName.R2,\n    );\n    const leftSideInsertImpossible =\n      Boolean(currentNode) &&\n      currentNodeIsNotEmpty &&\n      (!nextMonomerHasR1 || !newMonomerHasR2);\n    if (leftSideInsertImpossible && !newMonomerHasR2) {\n      missingAttachmentPoint = AttachmentPointName.R2;\n    }\n\n    const nodeCanBeInserted =\n      !rightSideInsertImpossible && !leftSideInsertImpossible;\n\n    return {\n      nodeCanBeInserted,\n      missingAttachmentPoint,\n    };\n  }\n\n  public insertMonomerFromLibrary(monomerItem: MonomerItemType) {\n    const editor = CoreEditor.provideEditorInstance();\n    const history = new EditorHistory(editor);\n    const modelChanges = new Command();\n    const selections = SequenceRenderer.selections;\n\n    if (selections.length > 0) {\n      if (\n        this.selectionsCantPreserveConnectionsWithMonomer(\n          selections,\n          monomerItem,\n        )\n      ) {\n        this.showMergeWarningModal();\n        return;\n      }\n\n      if (this.selectionsContainLinkerNode(selections)) {\n        editor.events.openConfirmationDialog.dispatch({\n          confirmationText:\n            'Symbol @ can represent multiple monomers, all of them are going to be deleted. Do you want to proceed?',\n          onConfirm: () => {\n            this.replaceSelectionsWithMonomer(selections, monomerItem);\n          },\n        });\n      } else if (\n        this.selectionsCantPreserveConnectionsWithMonomer(\n          selections,\n          monomerItem,\n          true,\n        )\n      ) {\n        editor.events.openConfirmationDialog.dispatch({\n          confirmationText:\n            'Side chain connections will be deleted during replacement. Do you want to proceed?',\n          onConfirm: () => {\n            this.replaceSelectionsWithMonomer(selections, monomerItem);\n          },\n        });\n      } else {\n        this.replaceSelectionsWithMonomer(selections, monomerItem);\n      }\n    } else {\n      const newNodePosition = this.getNewNodePosition();\n\n      const newMonomer = editor.drawingEntitiesManager.createMonomer(\n        monomerItem,\n        newNodePosition,\n      );\n      const newMonomerSequenceNode = new MonomerSequenceNode(newMonomer);\n\n      const { nodeCanBeInserted, missingAttachmentPoint } =\n        this.checkNodeInsertionPossibility(newMonomerSequenceNode);\n      if (!nodeCanBeInserted) {\n        const message =\n          missingAttachmentPoint &&\n          `The monomer lacks ${missingAttachmentPoint} attachment point and cannot be inserted at current position`;\n        this.showMergeWarningModal(message);\n        return;\n      }\n\n      const monomerAddCommand = editor.drawingEntitiesManager.addMonomer(\n        monomerItem,\n        newNodePosition,\n        newMonomer,\n      );\n\n      modelChanges.merge(monomerAddCommand);\n      modelChanges.merge(\n        this.insertNewSequenceFragment(newMonomerSequenceNode),\n      );\n\n      modelChanges.addOperation(new ReinitializeModeOperation());\n      editor.renderersContainer.update(modelChanges);\n      SequenceRenderer.moveCaretForward();\n      history.update(modelChanges);\n    }\n  }\n\n  private createRnaPresetNode(preset: IRnaPreset, position: Vec2) {\n    const editor = CoreEditor.provideEditorInstance();\n    const { base: rnaBase, sugar, phosphate } = preset;\n\n    assert(sugar);\n\n    const sugarMonomer = editor.drawingEntitiesManager.createMonomer(\n      sugar,\n      position,\n    ) as Sugar;\n\n    let rnaBaseMonomer: RNABase | AmbiguousMonomer | null = null;\n    if (rnaBase) {\n      rnaBaseMonomer = editor.drawingEntitiesManager.createMonomer(\n        rnaBase,\n        position,\n      ) as RNABase;\n    }\n\n    let phosphateMonomer: Phosphate | null = null;\n    if (phosphate) {\n      phosphateMonomer = editor.drawingEntitiesManager.createMonomer(\n        phosphate,\n        position,\n      ) as Phosphate;\n    }\n\n    let newPresetNode: Nucleotide | Nucleoside | LinkerSequenceNode | null =\n      null;\n\n    if (rnaBaseMonomer && sugarMonomer && phosphateMonomer) {\n      newPresetNode = new Nucleotide(\n        sugarMonomer,\n        rnaBaseMonomer,\n        phosphateMonomer,\n      );\n    } else if (rnaBaseMonomer && sugarMonomer) {\n      newPresetNode = new Nucleoside(sugarMonomer, rnaBaseMonomer);\n    } else {\n      newPresetNode = new LinkerSequenceNode(sugarMonomer);\n    }\n\n    return newPresetNode;\n  }\n\n  private replaceSelectionWithPreset(\n    preset: IRnaPreset,\n    selection: NodeSelection,\n    modelChanges: Command,\n    previousSelectionNode?: SubChainNode,\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n    const nextNode = SequenceRenderer.getNextNodeInSameChain(selection.node);\n    const position = selection.node.monomer.position;\n    const hasPreviousNodeInChain =\n      selection.node.firstMonomerInNode.attachmentPointsToBonds.R1;\n    const hasNextNodeInChain =\n      selection.node.lastMonomerInNode.attachmentPointsToBonds.R2;\n\n    const sideChainConnections = this.preserveSideChainConnections(selection);\n\n    selection.node.monomers.forEach((monomer) => {\n      modelChanges.merge(editor.drawingEntitiesManager.deleteMonomer(monomer));\n      monomer.forEachBond((polymerBond) => {\n        modelChanges.merge(\n          editor.drawingEntitiesManager.deleteDrawingEntity(polymerBond),\n        );\n      });\n    });\n\n    const newPresetNode = this.createRnaPresetNode(preset, position);\n\n    assert(newPresetNode);\n\n    const rnaPresetAddModelChanges =\n      editor.drawingEntitiesManager.addRnaPresetFromNode(newPresetNode);\n\n    modelChanges.merge(rnaPresetAddModelChanges);\n    modelChanges.merge(\n      this.insertNewSequenceFragment(\n        newPresetNode,\n        nextNode || null,\n        previousSelectionNode,\n        Boolean(hasPreviousNodeInChain),\n        Boolean(hasNextNodeInChain),\n      ),\n    );\n\n    // TODO: This check breaks some side chains (e.g. Sugar-to-Sugar for Nucleotides), need another way of preserving connections\n    const monomerForSideConnections =\n      newPresetNode instanceof Nucleotide\n        ? newPresetNode.phosphate\n        : newPresetNode instanceof Nucleoside\n        ? newPresetNode.sugar\n        : newPresetNode.monomer;\n\n    sideChainConnections?.forEach((sideConnectionData) => {\n      const {\n        firstMonomerAttachmentPointName,\n        secondMonomer,\n        secondMonomerAttachmentPointName,\n      } = sideConnectionData;\n      if (\n        !this.isConnectionPossible(\n          monomerForSideConnections,\n          firstMonomerAttachmentPointName,\n          secondMonomer,\n          secondMonomerAttachmentPointName,\n        )\n      ) {\n        return;\n      }\n\n      modelChanges.merge(\n        editor.drawingEntitiesManager.createPolymerBond(\n          monomerForSideConnections,\n          secondMonomer,\n          firstMonomerAttachmentPointName,\n          secondMonomerAttachmentPointName,\n        ),\n      );\n    });\n\n    return newPresetNode;\n  }\n\n  private replaceSelectionsWithPreset(\n    selections: NodesSelection,\n    preset: IRnaPreset,\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n    const history = new EditorHistory(editor);\n    const modelChanges = new Command();\n\n    selections.forEach((selectionRange) => {\n      let previousReplacedNode = SequenceRenderer.getPreviousNodeInSameChain(\n        selectionRange[0].node,\n      );\n\n      selectionRange.forEach((nodeSelection) => {\n        if (nodeSelection.node instanceof EmptySequenceNode) {\n          return;\n        }\n\n        previousReplacedNode = this.replaceSelectionWithPreset(\n          preset,\n          nodeSelection,\n          modelChanges,\n          previousReplacedNode,\n        );\n      });\n    });\n\n    modelChanges.addOperation(new ReinitializeModeOperation());\n    editor.renderersContainer.update(modelChanges);\n    modelChanges.setUndoOperationReverse();\n    modelChanges.setUndoOperationsByPriority();\n    history.update(modelChanges);\n  }\n\n  public insertPresetFromLibrary(preset: IRnaPreset) {\n    const editor = CoreEditor.provideEditorInstance();\n    const history = new EditorHistory(editor);\n    const modelChanges = new Command();\n    const selections = SequenceRenderer.selections;\n\n    if (selections.length > 0) {\n      if (!this.presetHasNeededAttachmentPoints(preset)) {\n        this.showMergeWarningModal();\n        return;\n      }\n\n      if (this.selectionsContainLinkerNode(selections)) {\n        editor.events.openConfirmationDialog.dispatch({\n          confirmationText:\n            'Symbol @ can represent multiple monomers, all of them are going to be deleted. Do you want to proceed?',\n          onConfirm: () => {\n            this.replaceSelectionsWithPreset(selections, preset);\n          },\n        });\n      } else if (\n        this.selectionsCantPreserveConnectionsWithPreset(\n          selections,\n          preset,\n          true,\n        )\n      ) {\n        editor.events.openConfirmationDialog.dispatch({\n          confirmationText:\n            'Side chain connections will be deleted during replacement. Do you want to proceed?',\n          onConfirm: () => {\n            this.replaceSelectionsWithPreset(selections, preset);\n          },\n        });\n      } else {\n        this.replaceSelectionsWithPreset(selections, preset);\n      }\n    } else {\n      const newNodePosition = this.getNewNodePosition();\n\n      const newPresetNode = this.createRnaPresetNode(preset, newNodePosition);\n\n      assert(newPresetNode);\n\n      const { nodeCanBeInserted, missingAttachmentPoint } =\n        this.checkNodeInsertionPossibility(newPresetNode);\n\n      if (!nodeCanBeInserted) {\n        const message =\n          missingAttachmentPoint &&\n          `The monomer lacks ${missingAttachmentPoint} attachment point and cannot be inserted at current position`;\n        this.showMergeWarningModal(message);\n        return;\n      }\n\n      const rnaPresetAddModelChanges =\n        editor.drawingEntitiesManager.addRnaPresetFromNode(newPresetNode);\n\n      modelChanges.merge(rnaPresetAddModelChanges);\n      modelChanges.merge(this.insertNewSequenceFragment(newPresetNode));\n\n      modelChanges.addOperation(new ReinitializeModeOperation());\n      editor.renderersContainer.update(modelChanges);\n      SequenceRenderer.moveCaretForward();\n      history.update(modelChanges);\n    }\n  }\n\n  private insertNewSequenceItem(editor: CoreEditor, enteredSymbol: string) {\n    const currentNode = SequenceRenderer.currentEdittingNode;\n    const newNodePosition = this.getNewNodePosition();\n    let modelChanges;\n    const previousNodeInSameChain = SequenceRenderer.previousNodeInSameChain;\n\n    if (\n      currentNode instanceof MonomerSequenceNode &&\n      currentNode.monomer instanceof Phosphate\n    ) {\n      return;\n    }\n\n    if (currentNode instanceof EmptySequenceNode && previousNodeInSameChain) {\n      if (!this.isR2Free(previousNodeInSameChain)) {\n        this.showMergeWarningModal();\n        return;\n      }\n    }\n    if (\n      !previousNodeInSameChain &&\n      !(currentNode instanceof EmptySequenceNode) &&\n      currentNode\n    ) {\n      if (!this.isR1Free(currentNode)) {\n        this.showMergeWarningModal();\n        return;\n      }\n    }\n    if (editor.sequenceTypeEnterMode === SequenceType.PEPTIDE) {\n      modelChanges = this.handlePeptideNodeAddition(\n        enteredSymbol,\n        newNodePosition,\n      );\n    } else {\n      modelChanges = this.handleRnaDnaNodeAddition(\n        enteredSymbol,\n        currentNode,\n        newNodePosition,\n      );\n    }\n    return modelChanges;\n  }\n\n  private showMergeWarningModal(message?: string | null) {\n    const editor = CoreEditor.provideEditorInstance();\n\n    editor.events.openErrorModal.dispatch({\n      errorTitle: 'Error Message',\n      errorMessage:\n        message ??\n        'It is impossible to merge fragments. Attachment point to establish bonds are not available.',\n    });\n  }\n\n  private insertNewSequenceFragment(\n    chainsCollectionOrNode: ChainsCollection | SubChainNode,\n    nextNodeToConnect?: SubChainNode | null,\n    previousNodeToConnect?: SubChainNode,\n    needConnectWithPreviousNodeInChain = true,\n    needConnectWithNextNodeInChain = true,\n  ) {\n    const chainsCollection =\n      chainsCollectionOrNode instanceof ChainsCollection\n        ? chainsCollectionOrNode\n        : new ChainsCollection().add(\n            new Chain().addNode(chainsCollectionOrNode),\n          );\n    const currentNode =\n      nextNodeToConnect === null\n        ? undefined\n        : nextNodeToConnect || SequenceRenderer.currentEdittingNode;\n    const previousNodeInSameChain =\n      previousNodeToConnect || SequenceRenderer.previousNodeInSameChain;\n    const modelChanges = new Command();\n    const lastNodeOfNewFragment = chainsCollection.lastNode;\n    const firstNodeOfNewFragment = chainsCollection.firstNode;\n    const newNodePosition = this.getNewNodePosition();\n\n    this.deleteBondToNextNodeInChain(previousNodeInSameChain, modelChanges);\n\n    if (needConnectWithPreviousNodeInChain) {\n      this.connectNodes(\n        previousNodeInSameChain,\n        firstNodeOfNewFragment,\n        modelChanges,\n        newNodePosition,\n        currentNode,\n      );\n    }\n\n    if (needConnectWithNextNodeInChain) {\n      this.connectNodes(\n        lastNodeOfNewFragment,\n        currentNode,\n        modelChanges,\n        newNodePosition,\n      );\n    }\n\n    return modelChanges;\n  }\n\n  getNewNodePosition() {\n    if (this.isEditMode) {\n      const currentNode = SequenceRenderer.currentEdittingNode;\n      const previousNode = SequenceRenderer.previousFromCurrentEdittingMonomer;\n      const nodeBeforePreviousNode = previousNode\n        ? SequenceRenderer.getPreviousNodeInSameChain(previousNode)\n        : undefined;\n      const newNodePosition = this.getNewSequenceItemPosition(\n        previousNode,\n        nodeBeforePreviousNode,\n        currentNode,\n      );\n      return newNodePosition;\n    } else {\n      return SequenceRenderer.chainsCollection.chains.length > 0\n        ? SequenceRenderer.getNextChainPosition()\n        : new Vec2(0, 0);\n    }\n  }\n\n  private deleteSelectedDrawingEntities() {\n    const editor = CoreEditor.provideEditorInstance();\n    const modelChanges = new Command();\n    editor.drawingEntitiesManager.selectedEntities.forEach(([, entity]) => {\n      modelChanges.merge(\n        editor.drawingEntitiesManager.deleteDrawingEntity(entity),\n      );\n    });\n\n    return modelChanges;\n  }\n\n  private getNewSequenceItemPosition(\n    previousNode?: SubChainNode,\n    nodeBeforePreviousNode?: SubChainNode,\n    currentNode?: SubChainNode,\n  ) {\n    const offsetFromPrevious = new Vec2(1, 1);\n\n    if (previousNode && !(previousNode instanceof EmptySequenceNode)) {\n      return previousNode.lastMonomerInNode.position.add(offsetFromPrevious);\n    } else if (currentNode && !(currentNode instanceof EmptySequenceNode)) {\n      return currentNode.firstMonomerInNode.position.add(offsetFromPrevious);\n    } else if (nodeBeforePreviousNode) {\n      return nodeBeforePreviousNode.lastMonomerInNode.position.add(\n        offsetFromPrevious,\n      );\n    } else {\n      return new Vec2(0, 0);\n    }\n  }\n\n  scrollForView() {\n    if (this.isEditMode) {\n      return;\n    }\n\n    const zoom = ZoomTool.instance;\n    const drawnEntitiesBoundingBox =\n      SequenceRenderer.getRenderedStructuresBbox();\n\n    if (zoom.isFitToCanvasHeight(drawnEntitiesBoundingBox.height)) {\n      zoom.scrollTo(\n        new Vec2(drawnEntitiesBoundingBox.left, drawnEntitiesBoundingBox.top),\n      );\n    } else {\n      zoom.scrollTo(\n        new Vec2(\n          drawnEntitiesBoundingBox.left,\n          drawnEntitiesBoundingBox.bottom,\n        ),\n        true,\n      );\n    }\n  }\n\n  private unselectAllEntities() {\n    const editor = CoreEditor.provideEditorInstance();\n    const modelChanges =\n      editor.drawingEntitiesManager.unselectAllDrawingEntities();\n    modelChanges.merge(SequenceRenderer.unselectEmptySequenceNodes());\n    editor.renderersContainer.update(modelChanges);\n  }\n\n  public destroy() {\n    this.turnOffEditMode();\n    SequenceRenderer.removeNewSequenceButtons();\n  }\n}\n","import { editorEvents } from 'application/editor/editorEvents';\nimport { Coordinates } from 'application/editor/shared/coordinates';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport assert from 'assert';\nimport { Vec2 } from 'domain/entities';\nimport { DrawingEntity } from 'domain/entities/DrawingEntity';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { BaseRenderer } from '../BaseRenderer';\n\nexport class FlexModePolymerBondRenderer extends BaseRenderer {\n  private editorEvents: typeof editorEvents;\n  // TODO: Specify the types.\n  private selectionElement;\n  private previousStateOfIsMonomersOnSameHorizontalLine = false;\n  public declare bodyElement?: D3SvgElementSelection<SVGLineElement, this>;\n\n  constructor(public readonly polymerBond: PolymerBond) {\n    super(polymerBond as DrawingEntity);\n    this.polymerBond.setRenderer(this);\n    this.editorEvents = editorEvents;\n  }\n\n  public get rootBBox(): DOMRect | undefined {\n    const rootNode = this.rootElement?.node();\n    if (!rootNode) return;\n\n    return rootNode.getBBox();\n  }\n\n  public get width(): number {\n    return this.rootBBox?.width || 0;\n  }\n\n  public get height(): number {\n    return this.rootBBox?.height || 0;\n  }\n\n  private get scaledPosition(): {\n    readonly endPosition: Vec2;\n    readonly startPosition: Vec2;\n  } {\n    // we need to convert monomer coordinates(stored in angstroms) to pixels.\n    // it needs to be done in view layer of application (like renderers)\n    const startPositionInPixels = Coordinates.modelToCanvas(\n      this.polymerBond.startPosition,\n    );\n\n    const endPositionInPixels = Coordinates.modelToCanvas(\n      this.polymerBond.endPosition,\n    );\n\n    return {\n      startPosition: startPositionInPixels,\n      endPosition: endPositionInPixels,\n    };\n  }\n\n  public moveSelection(): void {\n    if (\n      this.previousStateOfIsMonomersOnSameHorizontalLine !==\n      this.isMonomersOnSameHorizontalLine()\n    ) {\n      this.remove();\n      this.show();\n    } else {\n      assert(this.rootElement);\n      this.moveStart();\n      this.moveEnd();\n    }\n    this.previousStateOfIsMonomersOnSameHorizontalLine =\n      this.isMonomersOnSameHorizontalLine();\n  }\n\n  // TODO: Specify the types.\n  public appendBond(rootElement) {\n    this.appendBondGraph(rootElement);\n    return this.bodyElement;\n  }\n\n  public isMonomersOnSameHorizontalLine(): boolean {\n    if (!this.polymerBond.secondMonomer) return false;\n\n    const monomer1Y = this.polymerBond.firstMonomer.position.y;\n    const monomer2Y = this.polymerBond.secondMonomer.position.y;\n    const difference = monomer1Y - monomer2Y;\n    return difference < 0.5 && difference > -0.5;\n  }\n\n  // TODO: Specify the types.\n  public appendBondGraph(rootElement) {\n    this.bodyElement = rootElement\n      .append('line')\n      .attr('stroke', this.polymerBond.finished ? '#333333' : '#0097A8')\n      .attr('stroke-width', 1)\n      .attr('class', 'selection-area')\n      .attr('x1', this.scaledPosition.startPosition.x)\n      .attr('y1', this.scaledPosition.startPosition.y)\n      .attr('x2', this.scaledPosition.endPosition.x)\n      .attr('y2', this.scaledPosition.endPosition.y)\n      .attr('pointer-events', this.polymerBond.finished ? 'stroke' : 'none');\n\n    return this.bodyElement;\n  }\n\n  // TODO: Specify the types.\n  private appendRootElement() {\n    return this.canvas\n      .insert('g', `.monomer`)\n      .data([this])\n      .on('mouseover', (event) => {\n        this.editorEvents.mouseOverPolymerBond.dispatch(event);\n        this.editorEvents.mouseOverDrawingEntity.dispatch(event);\n      })\n      .on('mousemove', (event) => {\n        this.editorEvents.mouseOnMovePolymerBond.dispatch(event);\n      })\n      .on('mouseout', (event) => {\n        this.editorEvents.mouseLeavePolymerBond.dispatch(event);\n        this.editorEvents.mouseLeaveDrawingEntity.dispatch(event);\n      })\n      .attr(\n        'pointer-events',\n        this.polymerBond.finished ? 'stroke' : 'none',\n      ) as never as D3SvgElementSelection<SVGGElement, void>;\n  }\n\n  public show(): void {\n    this.rootElement = this.rootElement || this.appendRootElement();\n    this.appendBond(this.rootElement);\n    this.appendHoverAreaElement();\n    this.drawSelection();\n  }\n\n  public drawSelection(): void {\n    if (this.polymerBond.selected) {\n      this.selectionElement?.remove();\n      this.selectionElement = this.rootElement\n        ?.insert('line', ':first-child')\n        .attr('stroke', '#57FF8F')\n        .attr('x1', this.scaledPosition.startPosition.x)\n        .attr('y1', this.scaledPosition.startPosition.y)\n        .attr('x2', this.scaledPosition.endPosition.x)\n        .attr('y2', this.scaledPosition.endPosition.y)\n        .attr('stroke-width', '5')\n        .attr('class', 'dynamic-element');\n    } else {\n      this.selectionElement?.remove();\n    }\n  }\n\n  public moveEnd(): void {\n    this.moveGraphBondEnd();\n  }\n\n  private moveGraphBondEnd(): void {\n    assert(this.bodyElement);\n    assert(this.hoverAreaElement);\n    this.bodyElement\n      .attr('x2', this.scaledPosition.endPosition.x)\n      .attr('y2', this.scaledPosition.endPosition.y);\n\n    this.hoverAreaElement\n      .attr('x2', this.scaledPosition.endPosition.x)\n      .attr('y2', this.scaledPosition.endPosition.y);\n\n    this.hoverCircleAreaElement\n      ?.attr('cx', this.scaledPosition.endPosition.x)\n      .attr('cy', this.scaledPosition.endPosition.y);\n\n    this.selectionElement\n      ?.attr('x2', this.scaledPosition.endPosition.x)\n      ?.attr('y2', this.scaledPosition.endPosition.y);\n  }\n\n  public moveStart(): void {\n    this.moveGraphBondStart();\n  }\n\n  private moveGraphBondStart(): void {\n    assert(this.bodyElement);\n    assert(this.hoverAreaElement);\n    this.bodyElement\n      .attr('x1', this.scaledPosition.startPosition.x)\n      .attr('y1', this.scaledPosition.startPosition.y);\n\n    this.hoverAreaElement\n      .attr('x1', this.scaledPosition.startPosition.x)\n      .attr('y1', this.scaledPosition.startPosition.y);\n\n    this.selectionElement\n      ?.attr('x1', this.scaledPosition.startPosition.x)\n      ?.attr('y1', this.scaledPosition.startPosition.y);\n  }\n\n  protected appendHoverAreaElement(): void {\n    (<D3SvgElementSelection<SVGLineElement, void> | undefined>(\n      this.hoverAreaElement\n    )) = this.rootElement\n      ?.append('line')\n      .attr('stroke', 'transparent')\n      .attr('x1', this.scaledPosition.startPosition.x)\n      .attr('y1', this.scaledPosition.startPosition.y)\n      .attr('x2', this.scaledPosition.endPosition.x)\n      .attr('y2', this.scaledPosition.endPosition.y)\n      .attr('stroke-width', '10');\n\n    (<D3SvgElementSelection<SVGCircleElement, void> | undefined>(\n      this.hoverCircleAreaElement\n    )) = this.rootElement\n      ?.append('circle')\n      .attr('cursor', 'pointer')\n      .attr('r', '1')\n      .attr('fill', 'transparent')\n      .attr('pointer-events', 'none')\n      .attr('stroke-width', '10')\n      .attr('cx', this.scaledPosition.endPosition.x)\n      .attr('cy', this.scaledPosition.endPosition.y);\n  }\n\n  public appendHover(): void {\n    assert(this.bodyElement);\n\n    this.bodyElement.attr('stroke', '#0097A8').attr('pointer-events', 'none');\n\n    if (this.polymerBond.selected && this.selectionElement) {\n      this.selectionElement.attr('stroke', '#CCFFDD');\n    }\n  }\n\n  // TODO: Specify the types.\n  public removeHover() {\n    assert(this.bodyElement);\n    assert(this.hoverAreaElement);\n\n    this.bodyElement\n      .attr('stroke', '#333333')\n      .attr('pointer-events', this.polymerBond.finished ? 'stroke' : 'none');\n\n    if (this.polymerBond.selected && this.selectionElement) {\n      this.selectionElement.attr('stroke', '#57FF8F');\n    }\n\n    return this.hoverAreaElement.attr('stroke', 'transparent');\n  }\n\n  public remove(): void {\n    super.remove();\n    if (this.polymerBond.hovered) {\n      this.editorEvents.mouseLeaveMonomer.dispatch();\n    }\n  }\n}\n","import { editorEvents } from 'application/editor/editorEvents';\nimport { CoreEditor } from 'application/editor/internal';\nimport { Coordinates } from 'application/editor/shared/coordinates';\nimport {\n  BaseMonomerRenderer,\n  BaseSequenceItemRenderer,\n} from 'application/render';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport assert from 'assert';\nimport { BaseMonomer, Vec2 } from 'domain/entities';\nimport { Cell } from 'domain/entities/canvas-matrix/Cell';\nimport {\n  Connection,\n  ConnectionDirectionInDegrees,\n  ConnectionDirectionOfLastCell,\n} from 'domain/entities/canvas-matrix/Connection';\nimport { SNAKE_LAYOUT_CELL_WIDTH } from 'domain/entities/DrawingEntitiesManager';\nimport { DrawingEntity } from 'domain/entities/DrawingEntity';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { getSugarFromRnaBase } from 'domain/helpers/monomers';\nimport { BaseRenderer } from '../BaseRenderer';\nimport { HydrogenBond } from 'domain/entities/HydrogenBond';\nimport { SnakeMode } from 'application/editor';\n\nenum LineDirection {\n  Horizontal = 'Horizontal',\n  Vertical = 'Vertical',\n}\n\nconst LINE_FROM_MONOMER_LENGTH = 15;\nconst VERTICAL_LINE_LENGTH = 21;\nconst RNA_CHAIN_VERTICAL_LINE_LENGTH = 74;\nconst CORNER_LENGTH = 4;\nconst DOUBLE_CORNER_LENGTH = CORNER_LENGTH * 2;\n\nconst BOND_END_LENGTH = 15;\nconst CELL_HEIGHT = 40;\nconst SMOOTH_CORNER_SIZE = 5;\nconst SIDE_CONNECTION_BODY_ELEMENT_CLASS = 'polymer-bond-body';\n\n// TODO: Need to split the class by three:\n//  - SnakeModeBackboneBondRenderer (black “snake” line)\n//  - SnakeModeSideChainBondRenderer (blue “snake” line)\n//  - SnakeModeRNABaseAndSugarBondRenderer (black straight line)\nexport class SnakeModePolymerBondRenderer extends BaseRenderer {\n  private editorEvents: typeof editorEvents;\n  private isSnakeBond = false; // `SnakeModeBackboneBondRenderer` or `SnakeModeRNABaseAndSugarBondRenderer`.\n  // TODO: Specify the types.\n  private selectionElement;\n  private path = '';\n  private previousStateOfIsMonomersOnSameHorizontalLine = false;\n  private sideConnectionBondTurnPoint?: number;\n  public declare bodyElement?: D3SvgElementSelection<SVGLineElement, this>;\n\n  constructor(public readonly polymerBond: PolymerBond) {\n    super(polymerBond as DrawingEntity);\n    this.polymerBond.setRenderer(this);\n    this.editorEvents = editorEvents;\n    this.calculateIsSnakeBond();\n  }\n\n  // TODO: Delete.\n  public get isSnake(): true {\n    return true;\n  }\n\n  private get isHydrogenBond() {\n    return this.polymerBond instanceof HydrogenBond;\n  }\n\n  public get rootBBox(): DOMRect | undefined {\n    const rootNode = this.rootElement?.node();\n    if (!rootNode) return;\n\n    return rootNode.getBBox();\n  }\n\n  public get width(): number {\n    return this.rootBBox?.width || 0;\n  }\n\n  public get height(): number {\n    return this.rootBBox?.height || 0;\n  }\n\n  private get scaledPosition(): {\n    readonly endPosition: Vec2;\n    readonly startPosition: Vec2;\n  } {\n    // we need to convert monomer coordinates(stored in angstroms) to pixels.\n    // it needs to be done in view layer of application (like renderers)\n    const startPositionInPixels = Coordinates.modelToCanvas(\n      this.polymerBond.startPosition,\n    );\n\n    const endPositionInPixels = Coordinates.modelToCanvas(\n      this.polymerBond.endPosition,\n    );\n\n    return {\n      startPosition: startPositionInPixels,\n      endPosition: endPositionInPixels,\n    };\n  }\n\n  public moveSelection(): void {\n    if (\n      this.previousStateOfIsMonomersOnSameHorizontalLine !==\n      this.isMonomersOnSameHorizontalLine()\n    ) {\n      this.remove();\n      this.show();\n    } else {\n      assert(this.rootElement);\n      this.moveStart();\n      this.moveEnd();\n    }\n    this.previousStateOfIsMonomersOnSameHorizontalLine =\n      this.isMonomersOnSameHorizontalLine();\n  }\n\n  // TODO: Specify the types.\n  public appendBond(rootElement) {\n    const editor = CoreEditor.provideEditorInstance();\n    const matrix = editor.drawingEntitiesManager.canvasMatrix;\n    const cells = matrix?.polymerBondToCells.get(this.polymerBond);\n\n    if (\n      this.polymerBond.isSideChainConnection &&\n      (!this.isHydrogenBond || editor.mode instanceof SnakeMode) &&\n      cells\n    ) {\n      this.appendSideConnectionBond(rootElement, cells);\n    } else if (\n      this.isSnakeBond &&\n      this.polymerBond.finished &&\n      !this.isMonomersOnSameHorizontalLine()\n    ) {\n      this.appendSnakeBond(rootElement);\n    } else {\n      this.appendBondGraph(rootElement);\n    }\n\n    return this.bodyElement;\n  }\n\n  // TODO: Specify the types.\n  public appendSnakeBond(rootElement) {\n    const startPosition = this.scaledPosition.startPosition;\n    const endPosition = this.scaledPosition.endPosition;\n    this.updateSnakeBondPath(startPosition, endPosition);\n\n    this.bodyElement = rootElement\n      .append('path')\n      .attr('stroke', this.polymerBond.finished ? '#333333' : '#0097A8')\n      .attr('stroke-width', 1)\n      .attr('class', 'selection-area')\n      .attr('d', this.path)\n      .attr('fill-opacity', 0)\n      .attr('pointer-events', 'stroke');\n    return this.bodyElement;\n  }\n\n  private drawPartOfSideConnection(\n    isHorizontal: boolean,\n    connection: Connection,\n    cell: Cell,\n    direction: ConnectionDirectionInDegrees,\n  ): string {\n    const sin = Math.sin((direction * Math.PI) / 180);\n    const cos = Math.cos((direction * Math.PI) / 180);\n    const xOffset = (SNAKE_LAYOUT_CELL_WIDTH / 2) * cos;\n    const yOffset = (CELL_HEIGHT / 2) * sin;\n    const maxXOffset = cell.connections.reduce(\n      (max: number, connection: Connection): number => {\n        return max > connection.xOffset ? max : connection.xOffset;\n      },\n      0,\n    );\n    const maxYOffset = cell.connections.reduce(\n      (max: number, connection: Connection): number => {\n        const connectionYOffset = connection.yOffset || 0;\n        return max > connectionYOffset ? max : connectionYOffset;\n      },\n      0,\n    );\n\n    let endOfPathPart: number;\n    if (isHorizontal && this.sideConnectionBondTurnPoint) {\n      endOfPathPart = this.sideConnectionBondTurnPoint;\n    } else {\n      const { monomerSize, scaledMonomerPosition } = (\n        cell.monomer as BaseMonomer\n      ).renderer as BaseMonomerRenderer | BaseSequenceItemRenderer;\n      endOfPathPart = isHorizontal\n        ? scaledMonomerPosition.x + monomerSize.width / 2 + xOffset\n        : scaledMonomerPosition.y + monomerSize.height / 2 + yOffset;\n    }\n\n    this.sideConnectionBondTurnPoint = endOfPathPart;\n\n    if (isHorizontal) {\n      endOfPathPart +=\n        -(connection.yOffset || 0) * 3 +\n        cos * -connection.xOffset * 3 +\n        cos * (maxXOffset + 1) * 3 +\n        (maxYOffset + 1) * 3;\n    }\n    let pathPart = isHorizontal ? 'H ' : 'V ';\n    pathPart += `${endOfPathPart - SMOOTH_CORNER_SIZE * cos} `;\n    pathPart += generateBend(cos, sin, cos, 1);\n\n    return pathPart;\n  }\n\n  // TODO: Specify the types.\n  private appendSideConnectionBond(rootElement, cells: Cell[]) {\n    const firstCell = cells[0];\n    const firstCellConnection = firstCell.connections.find(\n      (connection: Connection): boolean => {\n        return connection.polymerBond === this.polymerBond;\n      },\n    ) as Connection;\n    const isVerticalConnection = firstCellConnection.isVertical;\n    const isStraightVerticalConnection =\n      cells.length === 2 && isVerticalConnection;\n    const isFirstMonomerOfBondInFirstCell = firstCell.node?.monomers.includes(\n      this.polymerBond.firstMonomer,\n    );\n    const isTwoNeighborRowsConnection = cells.every(\n      (cell) => cell.y === firstCell.y || cell.y === firstCell.y + 1,\n    );\n    const startPosition = isFirstMonomerOfBondInFirstCell\n      ? this.scaledPosition.startPosition\n      : this.scaledPosition.endPosition;\n    const endPosition = isFirstMonomerOfBondInFirstCell\n      ? this.scaledPosition.endPosition\n      : this.scaledPosition.startPosition;\n    const xDirection =\n      startPosition.x >= (this.sideConnectionBondTurnPoint || endPosition.x)\n        ? 180\n        : 0;\n    let dAttributeForPath = `M ${startPosition.x},${startPosition.y} `;\n\n    const cos = Math.cos((xDirection * Math.PI) / 180);\n\n    let previousConnection: Connection;\n    let previousCell: Cell;\n\n    const horizontalPartIntersectionsOffset = firstCellConnection.xOffset;\n\n    const areCellsOnSameRow = cells.every((cell) => {\n      return cell.y === firstCell.y;\n    });\n    const isSecondCellEmpty = cells[1].node === null;\n\n    if (areCellsOnSameRow) {\n      dAttributeForPath += `L ${startPosition.x},${\n        startPosition.y -\n        BOND_END_LENGTH -\n        horizontalPartIntersectionsOffset * 3\n      } `;\n      dAttributeForPath += generateBend(0, -1, cos, -1);\n    } else {\n      dAttributeForPath += `L ${startPosition.x},${\n        startPosition.y +\n        BOND_END_LENGTH +\n        horizontalPartIntersectionsOffset * 3\n      } `;\n      if (\n        !isStraightVerticalConnection &&\n        !isSecondCellEmpty &&\n        !isTwoNeighborRowsConnection\n      ) {\n        dAttributeForPath += generateBend(0, 1, cos, 1);\n      }\n    }\n\n    if (isVerticalConnection && !isStraightVerticalConnection) {\n      dAttributeForPath += this.drawPartOfSideConnection(\n        true,\n        firstCellConnection,\n        firstCell,\n        this.sideConnectionBondTurnPoint &&\n          startPosition.x < this.sideConnectionBondTurnPoint\n          ? 0\n          : 180,\n      );\n    }\n\n    let maxHorizontalOffset = 0;\n\n    cells.forEach((cell: Cell, cellIndex: number): void => {\n      const cellConnection = cell.connections.find(\n        (connection: Connection): boolean => {\n          return connection.polymerBond === this.polymerBond;\n        },\n      ) as Connection;\n      const isLastCell = cellIndex === cells.length - 1;\n      const _xDirection = this.sideConnectionBondTurnPoint\n        ? endPosition.x < this.sideConnectionBondTurnPoint\n          ? 180\n          : 0\n        : xDirection;\n      const maxXOffset = cell.connections.reduce(\n        (max: number, connection: Connection): number => {\n          return connection.isVertical || max > connection.xOffset\n            ? max\n            : connection.xOffset;\n        },\n        0,\n      );\n\n      maxHorizontalOffset =\n        maxHorizontalOffset > maxXOffset ? maxHorizontalOffset : maxXOffset;\n\n      if (isLastCell) {\n        if (isStraightVerticalConnection) {\n          return;\n        }\n\n        const directionObject =\n          cellConnection.direction as ConnectionDirectionOfLastCell;\n        const yDirection = isVerticalConnection ? 90 : directionObject.y;\n        const sin = Math.sin((yDirection * Math.PI) / 180);\n        const cos = Math.cos((_xDirection * Math.PI) / 180);\n\n        if (!areCellsOnSameRow) {\n          dAttributeForPath += `V ${\n            endPosition.y -\n            CELL_HEIGHT / 2 -\n            SMOOTH_CORNER_SIZE -\n            sin * (cellConnection.yOffset || 0) * 3 -\n            (isTwoNeighborRowsConnection\n              ? maxHorizontalOffset - cellConnection.xOffset\n              : cellConnection.xOffset) *\n              3\n          } `;\n          dAttributeForPath += generateBend(0, sin, cos, 1);\n        }\n        dAttributeForPath += `H ${endPosition.x - SMOOTH_CORNER_SIZE * cos} `;\n        dAttributeForPath += generateBend(cos, 0, cos, 1);\n        return;\n      }\n      // empty cells\n      if (cell.node === null) {\n        return;\n      }\n\n      // other cells\n      if (\n        previousConnection &&\n        previousConnection.direction !== cellConnection.direction\n      ) {\n        const isHorizontal =\n          previousConnection.direction === 0 ||\n          previousConnection.direction === 180;\n\n        dAttributeForPath += this.drawPartOfSideConnection(\n          isHorizontal,\n          previousConnection,\n          previousCell,\n          // FIXME: Check. Is it correct to use `as ConnectionDirectionInDegrees` here?\n          isHorizontal\n            ? xDirection\n            : (previousConnection.direction as ConnectionDirectionInDegrees),\n        );\n      }\n      previousCell = cell;\n      previousConnection = cellConnection;\n    });\n\n    dAttributeForPath += `L ${endPosition.x},${endPosition.y} `;\n\n    this.bodyElement = rootElement\n      .append('path')\n      .attr('class', `${SIDE_CONNECTION_BODY_ELEMENT_CLASS}`)\n      .attr('stroke', this.isHydrogenBond ? '#333333' : '#43B5C0')\n      .attr('stroke-width', 1)\n      .attr('d', dAttributeForPath)\n      .attr('fill', 'none')\n      .attr('stroke-dasharray', this.isHydrogenBond ? '2' : '0')\n      .attr('pointer-events', 'all');\n\n    this.path = dAttributeForPath;\n\n    return this.bodyElement;\n  }\n\n  private getMonomerWidth(): number {\n    return this.polymerBond.firstMonomer.renderer?.monomerSize.width ?? 0;\n  }\n\n  private getMonomerHeight(): number {\n    return this.polymerBond.firstMonomer.renderer?.monomerSize.height ?? 0;\n  }\n\n  public isMonomersOnSameHorizontalLine(): boolean {\n    if (!this.polymerBond.secondMonomer) return false;\n\n    const monomer1Y = this.polymerBond.firstMonomer.position.y;\n    const monomer2Y = this.polymerBond.secondMonomer.position.y;\n    const difference = monomer1Y - monomer2Y;\n    return difference < 0.5 && difference > -0.5;\n  }\n\n  private updateSnakeBondPath(\n    startPosition: Vec2,\n    endPosition: Vec2,\n    reCheckAttachmentPoint = true,\n  ): void {\n    const isR1TheCurrentAttachmentPointOfFirstMonomer =\n      this.polymerBond.firstMonomer.getAttachmentPointByBond(\n        this.polymerBond,\n      ) === 'R1' ||\n      this.polymerBond.firstMonomer.getPotentialAttachmentPointByBond(\n        this.polymerBond,\n      ) === 'R1';\n\n    // check if there is nucleotide in current row\n    const isBondConnectedWithNucleotide =\n      this.polymerBond.firstMonomer.isMonomerInRnaChainRow;\n\n    const verticalLineLength = isBondConnectedWithNucleotide\n      ? RNA_CHAIN_VERTICAL_LINE_LENGTH\n      : VERTICAL_LINE_LENGTH + 5;\n\n    if (this.isSecondMonomerBottomRight(startPosition, endPosition)) {\n      if (\n        isR1TheCurrentAttachmentPointOfFirstMonomer &&\n        reCheckAttachmentPoint\n      ) {\n        this.updateSnakeBondPath(endPosition, startPosition, false);\n        return;\n      }\n      this.addLine(\n        LineDirection.Horizontal,\n        LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth() / 2,\n        startPosition,\n      );\n      this.addLineFromLeftToBottom();\n      this.addLine(\n        LineDirection.Vertical,\n        endPosition.y - startPosition.y - CORNER_LENGTH * 2,\n      );\n      this.addLineFromTopToRight();\n      this.addLine(\n        LineDirection.Horizontal,\n        endPosition.x -\n          startPosition.x -\n          CORNER_LENGTH * 2 -\n          LINE_FROM_MONOMER_LENGTH -\n          this.getMonomerWidth() / 2,\n      );\n    } else if (this.isSecondMonomerTopRight(startPosition, endPosition)) {\n      if (\n        isR1TheCurrentAttachmentPointOfFirstMonomer &&\n        reCheckAttachmentPoint\n      ) {\n        this.updateSnakeBondPath(endPosition, startPosition, false);\n        return;\n      }\n      this.addLine(\n        LineDirection.Horizontal,\n        LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth() / 2,\n        startPosition,\n      );\n      this.addLineFromLeftToTop();\n      this.addLine(\n        LineDirection.Vertical,\n        endPosition.y -\n          startPosition.y -\n          CORNER_LENGTH * 2 +\n          this.getMonomerHeight() / 2,\n      );\n      this.addLineFromBottomToRight();\n      this.addLine(\n        LineDirection.Horizontal,\n        endPosition.x -\n          startPosition.x -\n          CORNER_LENGTH * 2 -\n          LINE_FROM_MONOMER_LENGTH -\n          this.getMonomerWidth() / 2,\n      );\n    } else if (this.isSecondMonomerBottomLeft(startPosition, endPosition)) {\n      if (\n        isR1TheCurrentAttachmentPointOfFirstMonomer &&\n        reCheckAttachmentPoint\n      ) {\n        this.updateSnakeBondPath(endPosition, startPosition, false);\n        return;\n      }\n      this.addLine(\n        LineDirection.Horizontal,\n        LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth() / 2,\n        startPosition,\n      );\n      this.addLineFromLeftToBottom();\n      this.addLine(LineDirection.Vertical, verticalLineLength);\n      this.addLineFromTopToLeft();\n      this.addLine(\n        LineDirection.Horizontal,\n        -(\n          startPosition.x -\n          endPosition.x +\n          LINE_FROM_MONOMER_LENGTH * 2 +\n          this.getMonomerWidth()\n        ),\n      );\n      this.addLineFromRightToBottom();\n      this.addLine(\n        LineDirection.Vertical,\n        endPosition.y -\n          startPosition.y -\n          CORNER_LENGTH * 4 -\n          verticalLineLength,\n      );\n      this.addLineFromTopToRight();\n      this.addLine(\n        LineDirection.Horizontal,\n        LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth() / 2,\n      );\n    } else if (this.isSecondMonomerTopLeft(startPosition, endPosition)) {\n      if (\n        isR1TheCurrentAttachmentPointOfFirstMonomer &&\n        reCheckAttachmentPoint\n      ) {\n        this.updateSnakeBondPath(endPosition, startPosition, false);\n        return;\n      }\n      this.addLine(\n        LineDirection.Horizontal,\n        LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth() / 2,\n        startPosition,\n      );\n      this.addLineFromLeftToBottom();\n      this.addLine(LineDirection.Vertical, this.getMonomerHeight());\n      this.addLineFromTopToLeft();\n      this.addLine(\n        LineDirection.Horizontal,\n        -(\n          startPosition.x -\n          endPosition.x +\n          LINE_FROM_MONOMER_LENGTH * 2 +\n          this.getMonomerWidth()\n        ),\n      );\n\n      this.addLineFromRightToTop();\n      this.addLine(\n        LineDirection.Vertical,\n        endPosition.y - startPosition.y - this.getMonomerHeight(),\n      );\n      this.addLineFromBottomToRight();\n      this.addLine(\n        LineDirection.Horizontal,\n        LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth() / 2,\n      );\n    } else if (this.isSecondMonomerLeft(startPosition, endPosition)) {\n      if (\n        isR1TheCurrentAttachmentPointOfFirstMonomer &&\n        reCheckAttachmentPoint\n      ) {\n        this.updateSnakeBondPath(endPosition, startPosition, false);\n        return;\n      }\n      this.addLine(\n        LineDirection.Horizontal,\n        LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth() / 2,\n        startPosition,\n      );\n      this.addLineFromLeftToBottom();\n      this.addLine(\n        LineDirection.Vertical,\n        endPosition.y - startPosition.y + this.getMonomerHeight(),\n      );\n      this.addLineFromTopToLeft();\n      this.addLine(\n        LineDirection.Horizontal,\n        -(\n          startPosition.x -\n          endPosition.x +\n          LINE_FROM_MONOMER_LENGTH * 2 +\n          this.getMonomerWidth()\n        ),\n      );\n\n      this.addLineFromRightToTop();\n      this.addLine(LineDirection.Vertical, -this.getMonomerHeight());\n      this.addLineFromBottomToRight();\n      this.addLine(\n        LineDirection.Horizontal,\n        LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth() / 2,\n      );\n    } else {\n      this.addRandomLine(startPosition, endPosition);\n    }\n  }\n\n  private isSecondMonomerTopRight(\n    startPosition: Vec2,\n    endPosition: Vec2,\n  ): boolean {\n    return (\n      startPosition.y - endPosition.y > DOUBLE_CORNER_LENGTH &&\n      endPosition.x - startPosition.x >\n        DOUBLE_CORNER_LENGTH + LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth()\n    );\n  }\n\n  private isSecondMonomerBottomRight(\n    startPosition: Vec2,\n    endPosition: Vec2,\n  ): boolean {\n    return (\n      endPosition.y - startPosition.y > DOUBLE_CORNER_LENGTH &&\n      endPosition.x - startPosition.x >\n        DOUBLE_CORNER_LENGTH + LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth()\n    );\n  }\n\n  private isSecondMonomerBottomLeft(\n    startPosition: Vec2,\n    endPosition: Vec2,\n  ): boolean {\n    return (\n      endPosition.y - startPosition.y >=\n        2 * (VERTICAL_LINE_LENGTH + DOUBLE_CORNER_LENGTH) &&\n      endPosition.x - startPosition.x <=\n        DOUBLE_CORNER_LENGTH + LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth()\n    );\n  }\n\n  private isSecondMonomerTopLeft(\n    startPosition: Vec2,\n    endPosition: Vec2,\n  ): boolean {\n    return (\n      startPosition.y - endPosition.y > 0 &&\n      endPosition.x - startPosition.x <=\n        DOUBLE_CORNER_LENGTH + LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth()\n    );\n  }\n\n  private isSecondMonomerLeft(startPosition: Vec2, endPosition: Vec2): boolean {\n    return (\n      startPosition.y - endPosition.y < 0 &&\n      startPosition.y - endPosition.y >\n        -2 * (VERTICAL_LINE_LENGTH + DOUBLE_CORNER_LENGTH) &&\n      endPosition.x - startPosition.x <=\n        DOUBLE_CORNER_LENGTH + LINE_FROM_MONOMER_LENGTH + this.getMonomerWidth()\n    );\n  }\n\n  private addLineFromTopToRight(): void {\n    this.path = `${this.path} c 0,4.418 3.582,${CORNER_LENGTH} ${CORNER_LENGTH},${CORNER_LENGTH}`;\n  }\n\n  private addLineFromLeftToTop(): void {\n    this.path = `${this.path} c 4.418,0 ${CORNER_LENGTH},-3.582 ${CORNER_LENGTH},-${CORNER_LENGTH}`;\n  }\n\n  private addLineFromBottomToRight(): void {\n    this.path = `${this.path} c 0,-4.418 3.582,-${CORNER_LENGTH} ${CORNER_LENGTH},-${CORNER_LENGTH}`;\n  }\n\n  private addLineFromLeftToBottom(): void {\n    this.path = `${this.path} c 4.418,0 ${CORNER_LENGTH},3.582 ${CORNER_LENGTH},${CORNER_LENGTH}`;\n  }\n\n  private addLineFromTopToLeft(): void {\n    this.path = `${this.path} c 0,4.418 -3.582,${CORNER_LENGTH} -${CORNER_LENGTH},${CORNER_LENGTH}`;\n  }\n\n  private addLineFromRightToTop(): void {\n    this.path = `${this.path} c -4.418,0 -${CORNER_LENGTH},-3.582 -${CORNER_LENGTH},-${CORNER_LENGTH}`;\n  }\n\n  private addLineFromRightToBottom(): void {\n    this.path = `${this.path} c -4.418,0 -${CORNER_LENGTH},3.582 -${CORNER_LENGTH},${CORNER_LENGTH}`;\n  }\n\n  private addLine(\n    lineDirection: LineDirection,\n    length: number,\n    startPosition?: Vec2,\n  ): void {\n    const start = startPosition\n      ? `M ${Math.round(startPosition.x)},${Math.round(startPosition.y)}`\n      : this.path;\n    const line =\n      lineDirection === LineDirection.Horizontal\n        ? `l${length}, 0`\n        : `l 0, ${length}`;\n    this.path = `${start} ${line}`;\n  }\n\n  private addRandomLine(startPosition: Vec2, endPosition: Vec2): void {\n    const start = `M ${Math.round(startPosition.x)},${Math.round(\n      startPosition.y,\n    )}`;\n    const line = `L ${Math.round(endPosition.x)},${Math.round(endPosition.y)}`;\n    this.path = `${start} ${line}`;\n  }\n\n  // TODO: Specify the types.\n  public appendBondGraph(rootElement) {\n    this.bodyElement = rootElement\n      .append('line')\n      .attr('stroke', this.polymerBond.finished ? '#333333' : '#0097A8')\n      .attr('stroke-width', 1)\n      .attr('stroke-dasharray', this.isHydrogenBond ? '2' : '0')\n      .attr('class', 'selection-area')\n      .attr('x1', this.scaledPosition.startPosition.x)\n      .attr('y1', this.scaledPosition.startPosition.y)\n      .attr('x2', this.scaledPosition.endPosition.x)\n      .attr('y2', this.scaledPosition.endPosition.y)\n      .attr('pointer-events', 'stroke');\n\n    return this.bodyElement;\n  }\n\n  // TODO: Specify the types.\n  private appendRootElement() {\n    return this.canvas\n      .insert('g', `.monomer`)\n      .data([this])\n      .on('mouseover', (event) => {\n        this.editorEvents.mouseOverPolymerBond.dispatch(event);\n        this.editorEvents.mouseOverDrawingEntity.dispatch(event);\n      })\n      .on('mousemove', (event) => {\n        this.editorEvents.mouseOnMovePolymerBond.dispatch(event);\n      })\n      .on('mouseout', (event) => {\n        this.editorEvents.mouseLeavePolymerBond.dispatch(event);\n        this.editorEvents.mouseLeaveDrawingEntity.dispatch(event);\n      })\n      .attr('pointer-events', 'stroke') as never as D3SvgElementSelection<\n      SVGGElement,\n      void\n    >;\n  }\n\n  public show(_theme?: unknown, force = false): void {\n    if (force) {\n      this.sideConnectionBondTurnPoint = undefined;\n    }\n    this.rootElement = this.rootElement || this.appendRootElement();\n    this.appendBond(this.rootElement);\n    this.appendHoverAreaElement();\n    this.drawSelection();\n  }\n\n  private get isSideConnectionBondDrawn() {\n    return this.polymerBond.isSideChainConnection && this.path;\n  }\n\n  public drawSelection(): void {\n    if (this.polymerBond.selected) {\n      this.selectionElement?.remove();\n      if (\n        (this.isSnakeBond && !this.isMonomersOnSameHorizontalLine()) ||\n        this.isSideConnectionBondDrawn\n      ) {\n        this.selectionElement = this.rootElement\n          ?.insert('path', ':first-child')\n          .attr('stroke', '#57FF8F')\n          .attr('stroke-width', 2)\n          .attr('fill-opacity', 0)\n          .attr('d', this.path)\n          .attr('class', 'dynamic-element');\n      } else {\n        this.selectionElement = this.rootElement\n          ?.insert('line', ':first-child')\n          .attr('stroke', '#57FF8F')\n          .attr('x1', this.scaledPosition.startPosition.x)\n          .attr('y1', this.scaledPosition.startPosition.y)\n          .attr('x2', this.scaledPosition.endPosition.x)\n          .attr('y2', this.scaledPosition.endPosition.y)\n          .attr('stroke-width', '5')\n          .attr('class', 'dynamic-element');\n      }\n    } else {\n      this.selectionElement?.remove();\n    }\n  }\n\n  public moveEnd(): void {\n    if (\n      this.isSnakeBond &&\n      !this.isMonomersOnSameHorizontalLine() &&\n      this.polymerBond.finished\n    ) {\n      this.moveSnakeBondEnd();\n    } else {\n      this.moveGraphBondEnd();\n    }\n  }\n\n  private moveSnakeBondEnd(): void {\n    const startPosition = this.scaledPosition.startPosition;\n    const endPosition = this.scaledPosition.endPosition;\n    this.updateSnakeBondPath(startPosition, endPosition);\n\n    assert(this.bodyElement);\n    assert(this.hoverAreaElement);\n    this.bodyElement.attr('d', this.path);\n\n    this.hoverAreaElement.attr('d', this.path);\n    this.selectionElement?.attr('d', this.path);\n  }\n\n  private moveGraphBondEnd(): void {\n    assert(this.bodyElement);\n    assert(this.hoverAreaElement);\n    this.bodyElement\n      .attr('x2', this.scaledPosition.endPosition.x)\n      .attr('y2', this.scaledPosition.endPosition.y);\n\n    this.hoverAreaElement\n      .attr('x2', this.scaledPosition.endPosition.x)\n      .attr('y2', this.scaledPosition.endPosition.y);\n\n    this.hoverCircleAreaElement\n      ?.attr('cx', this.scaledPosition.endPosition.x)\n      .attr('cy', this.scaledPosition.endPosition.y);\n\n    this.selectionElement\n      ?.attr('x2', this.scaledPosition.endPosition.x)\n      ?.attr('y2', this.scaledPosition.endPosition.y);\n  }\n\n  public moveStart(): void {\n    if (this.isSnakeBond && !this.isMonomersOnSameHorizontalLine()) {\n      this.moveSnakeBondStart();\n    } else {\n      this.moveGraphBondStart();\n    }\n  }\n\n  private moveSnakeBondStart(): void {\n    const startPosition = this.scaledPosition.startPosition;\n    const endPosition = this.scaledPosition.endPosition;\n    this.updateSnakeBondPath(startPosition, endPosition);\n\n    assert(this.bodyElement);\n    assert(this.hoverAreaElement);\n    this.bodyElement.attr('d', this.path);\n\n    this.hoverAreaElement.attr('d', this.path);\n    this.selectionElement?.attr('d', this.path);\n  }\n\n  private moveGraphBondStart(): void {\n    assert(this.bodyElement);\n    assert(this.hoverAreaElement);\n    this.bodyElement\n      .attr('x1', this.scaledPosition.startPosition.x)\n      .attr('y1', this.scaledPosition.startPosition.y);\n\n    this.hoverAreaElement\n      .attr('x1', this.scaledPosition.startPosition.x)\n      .attr('y1', this.scaledPosition.startPosition.y);\n\n    this.selectionElement\n      ?.attr('x1', this.scaledPosition.startPosition.x)\n      ?.attr('y1', this.scaledPosition.startPosition.y);\n  }\n\n  protected appendHoverAreaElement(): void {\n    if (\n      (this.isSnakeBond && !this.isMonomersOnSameHorizontalLine()) ||\n      this.isSideConnectionBondDrawn\n    ) {\n      (<D3SvgElementSelection<SVGPathElement, void> | undefined>(\n        this.hoverAreaElement\n      )) = this.rootElement\n        ?.append('path')\n        .attr('stroke', 'transparent')\n        .attr('d', this.path)\n        .attr('fill-opacity', 0)\n        .attr('stroke-width', '5');\n    } else {\n      (<D3SvgElementSelection<SVGLineElement, void> | undefined>(\n        this.hoverAreaElement\n      )) = this.rootElement\n        ?.append('line')\n        .attr('stroke', 'transparent')\n        .attr('x1', this.scaledPosition.startPosition.x)\n        .attr('y1', this.scaledPosition.startPosition.y)\n        .attr('x2', this.scaledPosition.endPosition.x)\n        .attr('y2', this.scaledPosition.endPosition.y)\n        .attr('stroke-width', '10');\n\n      (<D3SvgElementSelection<SVGCircleElement, void> | undefined>(\n        this.hoverCircleAreaElement\n      )) = this.rootElement\n        ?.append('circle')\n        .attr('cursor', 'pointer')\n        .attr('r', '1')\n        .attr('fill', 'transparent')\n        .attr('pointer-events', 'none')\n        .attr('stroke-width', '10')\n        .attr('cx', this.scaledPosition.endPosition.x)\n        .attr('cy', this.scaledPosition.endPosition.y);\n    }\n  }\n\n  public appendHover(): void {\n    assert(this.bodyElement);\n\n    const editor = CoreEditor.provideEditorInstance();\n\n    if (this.polymerBond.isSideChainConnection) {\n      const allSideConnectionBondsBodyElements = editor.canvas.querySelectorAll(\n        `.${SIDE_CONNECTION_BODY_ELEMENT_CLASS}`,\n      );\n\n      Array.from(allSideConnectionBondsBodyElements).forEach(\n        (bondBodyElement) => {\n          bondBodyElement.setAttribute(\n            'stroke',\n            this.isHydrogenBond ? 'lightgrey' : '#C0E2E6',\n          );\n        },\n      );\n    }\n\n    this.bodyElement.attr('stroke', '#0097A8').attr('pointer-events', 'none');\n\n    if (this.polymerBond.selected && this.selectionElement) {\n      this.selectionElement.attr('stroke', '#CCFFDD');\n    }\n  }\n\n  // TODO: Specify the types.\n  public removeHover() {\n    assert(this.bodyElement);\n    assert(this.hoverAreaElement);\n\n    const editor = CoreEditor.provideEditorInstance();\n\n    if (this.polymerBond.isSideChainConnection) {\n      const allSideConnectionBondsBodyElements = editor.canvas.querySelectorAll(\n        `.${SIDE_CONNECTION_BODY_ELEMENT_CLASS}`,\n      );\n\n      Array.from(allSideConnectionBondsBodyElements).forEach(\n        (bondBodyElement) => {\n          const renderer =\n            bondBodyElement.__data__ as SnakeModePolymerBondRenderer;\n\n          bondBodyElement.setAttribute(\n            'stroke',\n            renderer.polymerBond.isSideChainConnection && !this.isHydrogenBond\n              ? '#43B5C0'\n              : '#333333',\n          );\n        },\n      );\n    }\n\n    this.bodyElement\n      .attr(\n        'stroke',\n        this.polymerBond.isSideChainConnection && !this.isHydrogenBond\n          ? '#43B5C0'\n          : '#333333',\n      )\n      .attr('pointer-events', 'stroke');\n\n    if (this.polymerBond.selected && this.selectionElement) {\n      this.selectionElement.attr('stroke', '#57FF8F');\n    }\n\n    return this.hoverAreaElement.attr('stroke', 'transparent');\n  }\n\n  private calculateIsSnakeBond(): void {\n    if (this.polymerBond.isSideChainConnection) {\n      this.isSnakeBond = false;\n      return;\n    }\n\n    if (\n      getSugarFromRnaBase(this.polymerBond.firstMonomer) ||\n      getSugarFromRnaBase(this.polymerBond.secondMonomer)\n    ) {\n      this.isSnakeBond = false;\n      return;\n    }\n\n    this.isSnakeBond = true;\n  }\n\n  public remove(): void {\n    super.remove();\n    if (this.polymerBond.hovered) {\n      this.editorEvents.mouseLeaveMonomer.dispatch();\n    }\n  }\n}\n\nfunction generateBend(\n  dx1: number,\n  dy1: number,\n  dx: number,\n  dy: number,\n): string {\n  return `q ${SMOOTH_CORNER_SIZE * dx1},${SMOOTH_CORNER_SIZE * dy1} ${\n    SMOOTH_CORNER_SIZE * dx\n  },${SMOOTH_CORNER_SIZE * dy} `;\n}\n","import { CoreEditor, SnakeMode } from 'application/editor';\nimport { FlexModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/FlexModePolymerBondRenderer';\nimport { SnakeModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/SnakeModePolymerBondRenderer';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { HydrogenBond } from 'domain/entities/HydrogenBond';\n\nexport enum LayoutMode {\n  Flex = 'Flex',\n  Snake = 'Snake',\n}\n\ntype PolymerBondRendererClass =\n  | FlexModePolymerBondRenderer\n  | SnakeModePolymerBondRenderer;\ntype PolymerBondRendererClassType =\n  | typeof FlexModePolymerBondRenderer\n  | typeof SnakeModePolymerBondRenderer;\nconst polymerBondRendererMap = new Map<\n  LayoutMode,\n  PolymerBondRendererClassType\n>([\n  [LayoutMode.Flex, FlexModePolymerBondRenderer],\n  [LayoutMode.Snake, SnakeModePolymerBondRenderer],\n]);\n\nexport class PolymerBondRendererFactory {\n  public static createInstance(\n    polymerBond: PolymerBond | HydrogenBond,\n  ): PolymerBondRendererClass {\n    const mode = checkIfIsSnakeMode() ? LayoutMode.Snake : LayoutMode.Flex;\n    return polymerBond instanceof HydrogenBond\n      ? new SnakeModePolymerBondRenderer(polymerBond)\n      : (PolymerBondRendererFactory.createInstanceByMode(\n          mode,\n          polymerBond,\n        ) as PolymerBondRendererClass);\n  }\n\n  public static createInstanceByMode(\n    mode: LayoutMode,\n    polymerBond: PolymerBond,\n  ): PolymerBondRendererClass | never {\n    const RendererClass = polymerBondRendererMap.get(mode);\n    if (!RendererClass) {\n      throw new Error(\n        `PolymerBondRenderer for the layout mode “${mode}” not found.`,\n      );\n    }\n    return new RendererClass(polymerBond);\n  }\n}\n\nfunction checkIfIsSnakeMode(): boolean {\n  const editor = CoreEditor.provideEditorInstance();\n  return editor?.mode instanceof SnakeMode;\n}\n","import { BaseRenderer } from 'application/render/renderers/BaseRenderer';\nimport { Atom } from 'domain/entities/CoreAtom';\nimport { Coordinates } from 'application/editor/shared/coordinates';\nimport { CoreEditor, ZoomTool } from 'application/editor';\nimport { AtomLabel, ElementColor, Elements } from 'domain/constants';\nimport { D3SvgElementSelection } from 'application/render/types';\n\nexport class AtomRenderer extends BaseRenderer {\n  private selectionElement?: D3SvgElementSelection<SVGEllipseElement, void>;\n  private textElement?: D3SvgElementSelection<SVGTextElement, void>;\n\n  constructor(public atom: Atom) {\n    super(atom);\n    atom.setRenderer(this);\n  }\n\n  get scaledPosition() {\n    return Coordinates.modelToCanvas(this.atom.position);\n  }\n\n  get center() {\n    return this.scaledPosition;\n  }\n\n  private appendRootElement() {\n    const editor = CoreEditor.provideEditorInstance();\n\n    const rootElement = this.canvas\n      .insert('g', ':first-child')\n      .data([this])\n      .attr('pointer-events', 'all')\n      .attr(\n        'transform',\n        `translate(${this.scaledPosition.x}, ${this.scaledPosition.y})`,\n      ) as never as D3SvgElementSelection<SVGGElement, void>;\n\n    rootElement\n      ?.on('mouseover', () => {\n        this.showHover();\n      })\n      .on('mouseleave', () => {\n        this.hideHover();\n      })\n      .on('mouseup', (event) => {\n        editor.events.mouseUpAtom.dispatch(event);\n      });\n\n    return rootElement;\n  }\n\n  private appendBody() {\n    return this.rootElement\n      ?.append('circle')\n      .data([this])\n      .attr('r', 0)\n      .attr('cx', 0)\n      .attr('cy', 0);\n  }\n\n  private appendSelectionContour() {\n    if (this.labelLength < 2 || !this.isLabelVisible) {\n      return this.rootElement\n        ?.insert('circle', ':first-child')\n        .attr('r', 10)\n        .attr('cx', 0)\n        .attr('cy', 0);\n    } else {\n      const labelBbox = this.textElement?.node()?.getBoundingClientRect();\n      const labelX = labelBbox?.x || 0;\n      const labelWidth = labelBbox?.width || 8;\n      const labelHeight = labelBbox?.height || 8;\n      const canvasBoundingClientRect = ZoomTool.instance.canvasWrapper\n        .node()\n        ?.getBoundingClientRect();\n      const canvasX = canvasBoundingClientRect?.x || 0;\n      const HOVER_PADDING = 4;\n      const HOVER_RECTANGLE_RADIUS = 10;\n\n      return this.rootElement\n        ?.insert('rect', ':first-child')\n        .attr('x', labelX - this.scaledPosition.x - canvasX - HOVER_PADDING)\n        .attr('y', -(labelHeight / 2 + HOVER_PADDING))\n        .attr('width', labelWidth + HOVER_PADDING * 2)\n        .attr('height', labelHeight + HOVER_PADDING * 2)\n        .attr('rx', HOVER_RECTANGLE_RADIUS)\n        .attr('ry', HOVER_RECTANGLE_RADIUS);\n    }\n  }\n\n  protected appendHover() {\n    const selectionContourElement = this.appendSelectionContour();\n\n    return (\n      selectionContourElement\n        ?.attr('stroke', '#0097a8')\n        // selectionContourElement is union type here. For some reason for union selection types\n        // ts shows error that first call of attr can return string.\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        .attr('stroke-width', '1.2')\n        .attr('fill', 'none')\n        .attr('opacity', '0')\n    );\n  }\n\n  public showHover() {\n    this.hoverElement?.attr('opacity', '1');\n  }\n\n  public hideHover() {\n    this.hoverElement?.attr('opacity', '0');\n  }\n\n  private get shouldHydrogenBeOnLeft() {\n    const viewModel = CoreEditor.provideEditorInstance().viewModel;\n    const atomHaldEdges = viewModel.atomsToHalfEdges.get(this.atom);\n\n    if (atomHaldEdges?.length === 0) {\n      if (this.atom.label === AtomLabel.D || this.atom.label === AtomLabel.T) {\n        return false;\n      } else {\n        const element = Elements.get(this.atom.label);\n\n        return !element || Boolean(element.leftH);\n      }\n    }\n\n    if (atomHaldEdges?.length === 1) {\n      const firstHalfEdge = atomHaldEdges[0];\n\n      return firstHalfEdge.direction.x > 0;\n    }\n\n    return false;\n  }\n\n  public get isLabelVisible() {\n    const editor = CoreEditor.provideEditorInstance();\n    const viewModel = editor.viewModel;\n    const atomNeighborsHalfEdges = viewModel.atomsToHalfEdges.get(this.atom);\n    const isCarbon = this.atom.label === AtomLabel.C;\n    const visibleTerminal = true;\n    const isAtomTerminal =\n      !atomNeighborsHalfEdges?.length || atomNeighborsHalfEdges.length === 1;\n    const isAtomInMiddleOfChain = (atomNeighborsHalfEdges?.length || 0) >= 2;\n\n    if (isCarbon && !isAtomTerminal) {\n      return false;\n    }\n\n    if ((isAtomTerminal && visibleTerminal) || isAtomInMiddleOfChain)\n      return true;\n\n    return false;\n  }\n\n  public get labelLength() {\n    const { hydrogenAmount } = this.atom.calculateValence();\n\n    if (hydrogenAmount === 0) {\n      return 1;\n    }\n\n    return hydrogenAmount === 1 ? 2 : 3;\n  }\n\n  private appendLabel() {\n    if (!this.isLabelVisible) {\n      return;\n    }\n\n    const { hydrogenAmount } = this.atom.calculateValence();\n    const shouldHydrogenBeOnLeft = this.shouldHydrogenBeOnLeft;\n\n    const textElement = this.rootElement\n      ?.append('text')\n      .attr('y', 5)\n      .attr('fill', ElementColor[this.atom.label])\n      .attr(\n        'style',\n        'user-select: none; font-family: Arial; letter-spacing: 1.2px;',\n      )\n      .attr('font-size', '13px')\n      .attr('pointer-events', 'none');\n\n    if (!shouldHydrogenBeOnLeft) {\n      textElement?.append('tspan').text(this.atom.label);\n    }\n\n    if (hydrogenAmount > 0) {\n      textElement?.append('tspan').text('H');\n    }\n\n    if (hydrogenAmount > 1) {\n      textElement?.append('tspan').text(hydrogenAmount).attr('dy', 3);\n    }\n\n    if (shouldHydrogenBeOnLeft) {\n      textElement\n        ?.append('tspan')\n        .text(this.atom.label)\n        .attr('dy', hydrogenAmount > 1 ? -3 : 0);\n    }\n\n    textElement\n      ?.attr(\n        'text-anchor',\n        shouldHydrogenBeOnLeft\n          ? 'end'\n          : hydrogenAmount > 0\n          ? 'start'\n          : 'middle',\n      )\n      .attr('x', shouldHydrogenBeOnLeft ? 5 : hydrogenAmount > 0 ? -5 : 0);\n\n    return textElement;\n  }\n\n  public appendSelection() {\n    if (!this.selectionElement) {\n      const selectionContourElement = this.appendSelectionContour();\n\n      this.selectionElement = selectionContourElement\n        ?.attr('fill', '#57FF8F')\n        // selectionContourElement is union type here. For some reason for union selection types\n        // ts shows error that first call of attr can return string.\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        .attr('class', 'dynamic-element');\n    }\n  }\n\n  public removeSelection() {\n    this.selectionElement?.remove();\n    this.selectionElement = undefined;\n  }\n\n  public drawSelection() {\n    if (!this.rootElement) {\n      return;\n    }\n    if (this.atom.selected) {\n      this.appendSelection();\n    } else {\n      this.removeSelection();\n    }\n  }\n\n  public moveSelection() {\n    if (!this.rootElement) {\n      return;\n    }\n\n    this.drawSelection();\n    this.move();\n  }\n\n  show() {\n    this.rootElement = this.appendRootElement();\n    this.bodyElement = this.appendBody();\n    this.textElement = this.appendLabel();\n    this.hoverElement = this.appendHover();\n    this.drawSelection();\n  }\n\n  public move() {\n    this.rootElement?.attr(\n      'transform',\n      `translate(${this.scaledPosition.x}, ${this.scaledPosition.y})`,\n    );\n  }\n\n  public remove() {\n    this.removeSelection();\n    super.remove();\n  }\n\n  protected appendHoverAreaElement(): void {}\n\n  protected removeHover(): void {}\n}\n","import { BaseRenderer } from 'application/render/renderers/BaseRenderer';\nimport { Atom } from 'domain/entities/CoreAtom';\nimport { Coordinates } from 'application/editor/shared/coordinates';\nimport { Bond } from 'domain/entities/CoreBond';\nimport { Scale } from 'domain/helpers';\nimport { Vec2 } from 'domain/entities';\nimport { getBondLineShift } from 'application/render/restruct/rebond';\nimport { CoreEditor } from 'application/editor';\nimport { HalfEdge } from 'application/render/view-model/HalfEdge';\nimport { ViewModel } from 'application/render/view-model/ViewModel';\nimport { KetcherLogger } from 'utilities';\nimport { D3SvgElementSelection } from 'application/render/types';\n\nconst BOND_WIDTH = 2;\n\nexport class BondRenderer extends BaseRenderer {\n  private pathShape = '';\n  private selectionElement:\n    | D3SvgElementSelection<SVGPathElement, void>\n    | undefined;\n\n  constructor(public bond: Bond) {\n    super(bond);\n    bond.setRenderer(this);\n  }\n\n  private get scaledPosition() {\n    const startPositionInPixels = Scale.modelToCanvas(\n      this.bond.startPosition,\n      this.editorSettings,\n    );\n\n    const endPositionInPixels = Scale.modelToCanvas(\n      this.bond.endPosition,\n      this.editorSettings,\n    );\n\n    return {\n      startPosition: startPositionInPixels,\n      endPosition: endPositionInPixels,\n    };\n  }\n\n  private getDoubleBondShiftForChain(\n    firstHalfEdge?: HalfEdge,\n    secondHalfEdge?: HalfEdge,\n  ): number {\n    if (!firstHalfEdge || !secondHalfEdge) return 0;\n    const nLeft =\n      (firstHalfEdge.sinToLeftNeighborHalfEdge > 0.3 ? 1 : 0) +\n      (secondHalfEdge.sinToRightNeighborHalfEdge > 0.3 ? 1 : 0);\n    const nRight =\n      (secondHalfEdge.sinToLeftNeighborHalfEdge > 0.3 ? 1 : 0) +\n      (firstHalfEdge.sinToRightNeighborHalfEdge > 0.3 ? 1 : 0);\n    if (nLeft > nRight) return -1;\n    if (nLeft < nRight) return 1;\n    if (\n      (firstHalfEdge.sinToLeftNeighborHalfEdge > 0.3 ? 1 : 0) +\n        (firstHalfEdge.sinToRightNeighborHalfEdge > 0.3 ? 1 : 0) ===\n      1\n    )\n      return 1;\n    return 0;\n  }\n\n  private getDoubleBondShiftForLoop(\n    loop1HalfEdgesAmount: number,\n    loop2HalfEdgesAmount: number,\n    loop1DoubleBondsAmount: number,\n    loop2DoubleBondsAmount: number,\n  ): number {\n    const BENZENE_RING_BONDS_AMOUNT = 6;\n\n    if (\n      loop1HalfEdgesAmount === BENZENE_RING_BONDS_AMOUNT &&\n      loop2HalfEdgesAmount !== BENZENE_RING_BONDS_AMOUNT &&\n      (loop1DoubleBondsAmount > 1 || loop2DoubleBondsAmount === 1)\n    )\n      return -1;\n    if (\n      loop2HalfEdgesAmount === BENZENE_RING_BONDS_AMOUNT &&\n      loop1HalfEdgesAmount !== BENZENE_RING_BONDS_AMOUNT &&\n      (loop2DoubleBondsAmount > 1 || loop1DoubleBondsAmount === 1)\n    )\n      return 1;\n    if (\n      loop2HalfEdgesAmount * loop1DoubleBondsAmount >\n      loop1HalfEdgesAmount * loop2DoubleBondsAmount\n    )\n      return -1;\n    if (\n      loop2HalfEdgesAmount * loop1DoubleBondsAmount <\n      loop1HalfEdgesAmount * loop2DoubleBondsAmount\n    )\n      return 1;\n    if (loop2HalfEdgesAmount > loop1HalfEdgesAmount) return -1;\n    return 1;\n  }\n\n  private getDoubleBondShift(\n    viewModel: ViewModel,\n    firstHalfEdge?: HalfEdge,\n    secondHalfEdge?: HalfEdge,\n  ) {\n    if (!firstHalfEdge || !secondHalfEdge) {\n      return this.getDoubleBondShiftForChain(firstHalfEdge, secondHalfEdge);\n    }\n\n    const loop1Id = firstHalfEdge.loopId || -1;\n    const loop2Id = secondHalfEdge.loopId || -1;\n    const loop1 = viewModel.loops.get(loop1Id);\n    const loop2 = viewModel.loops.get(loop2Id);\n\n    if (loop1 && loop2) {\n      return this.getDoubleBondShiftForLoop(\n        loop1.halfEdges.length,\n        loop2.halfEdges.length,\n        loop1.doubleBondsAmount,\n        loop2.doubleBondsAmount,\n      );\n    } else if (loop1) {\n      return -1;\n    } else if (loop2) {\n      return 1;\n    } else {\n      return this.getDoubleBondShiftForChain(firstHalfEdge, secondHalfEdge);\n    }\n  }\n\n  private shiftPositionIfAtomLabelVisible(\n    position: Vec2,\n    atom: Atom,\n    halfEdge: HalfEdge,\n  ) {\n    if (atom.renderer?.isLabelVisible) {\n      return position.addScaled(\n        halfEdge.direction,\n        BOND_WIDTH * 3 + (this.bond.firstAtom.renderer?.labelLength || 0) * 4,\n      );\n    }\n\n    return position;\n  }\n\n  public appendSelection() {\n    const pathShape = this.getSelectionContour();\n\n    if (this.selectionElement) {\n      this.selectionElement.attr('d', pathShape);\n    } else {\n      this.selectionElement = this.canvas\n        ?.insert('path', ':first-child')\n        .attr('d', pathShape)\n        .attr('fill', '#57ff8f')\n        .attr('class', 'dynamic-element');\n    }\n  }\n\n  public removeSelection() {\n    this.selectionElement?.remove();\n    this.selectionElement = undefined;\n  }\n\n  public appendHover() {\n    if (this.hoverElement) {\n      return this.hoverElement;\n    }\n\n    const pathShape = this.getSelectionContour();\n\n    this.hoverElement = this.canvas\n      ?.insert('path', ':first-child')\n      .attr('d', pathShape)\n      .attr('fill', 'none')\n      .attr('stroke', '#0097A8')\n      .attr('stroke-width', 1.2)\n      .attr('class', 'dynamic-element');\n\n    return this.hoverElement;\n  }\n\n  public removeHover() {\n    this.hoverElement?.remove();\n    this.hoverElement = undefined;\n  }\n\n  public drawSelection() {\n    if (!this.rootElement) {\n      return;\n    }\n    if (this.bond.selected) {\n      this.appendSelection();\n      // this.raiseElement();\n    } else {\n      this.removeSelection();\n    }\n  }\n\n  private appendRootElement() {\n    return this.canvas\n      .append('g')\n      .data([this])\n      .attr(\n        'transform',\n        `translate(${this.scaledPosition.startPosition.x}, ${this.scaledPosition.startPosition.y})`,\n      ) as never as D3SvgElementSelection<SVGGElement, void>;\n  }\n\n  getSelectionPoints() {\n    // please refer to: ketcher-core/docs/data/hover_selection_1.png\n    const editor = CoreEditor.provideEditorInstance();\n    const viewModel = editor.viewModel;\n    const halfEdges = viewModel.bondsToHalfEdges.get(this.bond);\n    const firstHalfEdge = halfEdges?.[0];\n    const secondHalfEdge = halfEdges?.[1];\n    const bond: Bond = this.bond;\n    const bondSpacingInPx = 6;\n    const stereoBondWidth = 6;\n    const regularSelectionThikness = bondSpacingInPx + BOND_WIDTH;\n\n    if (!firstHalfEdge || !secondHalfEdge) {\n      KetcherLogger.warn(\n        'Failed to draw selection for bond. There is no no half edges.',\n      );\n\n      return [];\n    }\n\n    // get half-bond positions, this is where the actual bond\n    // image on the screen is drawn, it may be different e.g. if the\n    // bond is connected to an atom with a label as opposed\n    // to when it is connected to a Carbon atom w/o a label\n    // please refer to: ketcher-core/docs/data/hover_selection_2.png\n    let halfEdgeStart = Coordinates.modelToCanvas(firstHalfEdge.position);\n    let halfEdgeEnd = Coordinates.modelToCanvas(secondHalfEdge.position);\n\n    halfEdgeStart = this.shiftPositionIfAtomLabelVisible(\n      halfEdgeStart,\n      this.bond.firstAtom,\n      firstHalfEdge,\n    );\n\n    halfEdgeEnd = this.shiftPositionIfAtomLabelVisible(\n      halfEdgeEnd,\n      this.bond.secondAtom,\n      secondHalfEdge,\n    );\n\n    const isStereoBond = bond.stereo !== 0 && bond.stereo !== 3;\n\n    const addPadding = isStereoBond ? 0 : -2;\n\n    // find the points on the line where we will be drawing the curves\n    const contourStart = Vec2.getLinePoint(\n      halfEdgeEnd,\n      halfEdgeStart,\n      addPadding,\n    );\n    const contourEnd = Vec2.getLinePoint(\n      halfEdgeStart,\n      halfEdgeEnd,\n      addPadding,\n    );\n\n    const stereoBondStartHeightCoef = 0.5;\n    const bondPadding = 0.5;\n    const addStart = isStereoBond\n      ? stereoBondWidth * stereoBondStartHeightCoef\n      : regularSelectionThikness + bondPadding;\n    const stereoBondEndHeightCoef = 1;\n    const addEnd = isStereoBond\n      ? stereoBondWidth +\n        (regularSelectionThikness * stereoBondEndHeightCoef) / stereoBondWidth\n      : regularSelectionThikness + bondPadding;\n\n    const contourPaddedStart = Vec2.getLinePoint(\n      contourStart,\n      contourEnd,\n      addEnd,\n    );\n    const contourPaddedEnd = Vec2.getLinePoint(\n      contourEnd,\n      contourStart,\n      addStart,\n    );\n\n    // we need four points for each bezier curve\n    // and two for each line that together form the selection contour\n    // the padded values are for the curve points and the rest of\n    // the values are for drawing the lines\n    // please refer to: ketcher-core/docs/data/hover_selection_3.png\n    const startPoint = contourStart.add(new Vec2(addEnd, 0));\n    const endPoint = contourEnd.add(new Vec2(addStart, 0));\n    const padStartPoint = contourPaddedStart.add(new Vec2(addEnd, 0));\n    const padEndPoint = contourPaddedEnd.add(new Vec2(addStart, 0));\n\n    const angle =\n      (Math.atan2(firstHalfEdge.direction.y, firstHalfEdge.direction.x) * 180) /\n      Math.PI;\n\n    // rotate the points +/-90 degrees to find the\n    // perpendicular points that will be used for actual drawing\n    // of selection contour on canvas\n    const startTop = startPoint.rotateAroundOrigin(\n      angle + 90,\n      new Vec2(contourStart.x, contourStart.y),\n    );\n    const startBottom = startPoint.rotateAroundOrigin(\n      angle - 90,\n      new Vec2(contourStart.x, contourStart.y),\n    );\n    const startPadTop = padStartPoint.rotateAroundOrigin(\n      angle + 90,\n      contourPaddedStart,\n    );\n    const startPadBottom = padStartPoint.rotateAroundOrigin(\n      angle - 90,\n      contourPaddedStart,\n    );\n    const endTop = endPoint.rotateAroundOrigin(angle + 90, contourEnd);\n    const endBottom = endPoint.rotateAroundOrigin(angle - 90, contourEnd);\n    const endPadTop = padEndPoint.rotateAroundOrigin(\n      angle + 90,\n      contourPaddedEnd,\n    );\n    const endPadBottom = padEndPoint.rotateAroundOrigin(\n      angle - 90,\n      contourPaddedEnd,\n    );\n\n    return [\n      startPadTop,\n      startTop,\n      endTop,\n      endPadTop,\n      endPadBottom,\n      endBottom,\n      startPadBottom,\n      startBottom,\n    ];\n  }\n\n  private getSelectionContour() {\n    const [\n      startPadTop,\n      startTop,\n      endTop,\n      endPadTop,\n      endPadBottom,\n      endBottom,\n      startPadBottom,\n      startBottom,\n    ] = this.getSelectionPoints();\n\n    // for a visual representation of the points\n    // please refer to: ketcher-core/docs/data/hover_selection_exp.png\n    const pathString = `\n      M ${startTop.x} ${startTop.y}\n      L ${endTop.x} ${endTop.y}\n      C ${endPadTop.x} ${endPadTop.y}, ${endPadBottom.x} ${endPadBottom.y}, ${endBottom.x} ${endBottom.y}\n      L ${startBottom.x} ${startBottom.y}\n      C ${startPadBottom.x} ${startPadBottom.y}, ${startPadTop.x} ${startPadTop.y}, ${startTop.x} ${startTop.y}\n    `;\n\n    return pathString;\n  }\n\n  public moveSelection() {\n    if (!this.rootElement) {\n      return;\n    }\n\n    this.drawSelection();\n    this.move();\n  }\n\n  show() {\n    this.rootElement = this.appendRootElement();\n    const editor = CoreEditor.provideEditorInstance();\n    const viewModel = editor.viewModel;\n    const halfEdges = viewModel.bondsToHalfEdges.get(this.bond);\n    const firstHalfEdge = halfEdges?.[0];\n    const secondHalfEdge = halfEdges?.[1];\n    const bondSpace = 6;\n    const linesOffset = bondSpace / 2;\n    const stereoBondWidth = 6;\n\n    if (!firstHalfEdge || !secondHalfEdge) {\n      KetcherLogger.warn(\n        'Failed to draw double bond. There is no no half edges.',\n      );\n\n      return;\n    }\n\n    if (this.bond.type === 2) {\n      let bondStartPosition = Coordinates.modelToCanvas(\n        firstHalfEdge.position,\n      ).sub(this.scaledPosition.startPosition);\n      let bondEndPosition = Coordinates.modelToCanvas(\n        secondHalfEdge.position,\n      ).sub(this.scaledPosition.startPosition);\n      bondStartPosition = this.shiftPositionIfAtomLabelVisible(\n        bondStartPosition,\n        this.bond.firstAtom,\n        firstHalfEdge,\n      );\n      bondEndPosition = this.shiftPositionIfAtomLabelVisible(\n        bondEndPosition,\n        this.bond.secondAtom,\n        secondHalfEdge,\n      );\n      const shift = this.getDoubleBondShift(\n        viewModel,\n        firstHalfEdge,\n        secondHalfEdge,\n      );\n      const firstLinePartShift = linesOffset + shift * linesOffset;\n      const secondLinePartShift = -linesOffset + shift * linesOffset;\n\n      let firstLineStartPosition = bondStartPosition.addScaled(\n        firstHalfEdge.leftNormal,\n        firstLinePartShift,\n      );\n      let firstLineEndPosition = bondEndPosition.addScaled(\n        firstHalfEdge.leftNormal,\n        firstLinePartShift,\n      );\n      let secondLineStartPosition = bondStartPosition.addScaled(\n        firstHalfEdge.leftNormal,\n        secondLinePartShift,\n      );\n      let secondLineEndPosition = bondEndPosition.addScaled(\n        firstHalfEdge.leftNormal,\n        secondLinePartShift,\n      );\n\n      if (shift > 0) {\n        firstLineStartPosition = firstLineStartPosition.addScaled(\n          firstHalfEdge.direction,\n          bondSpace *\n            getBondLineShift(\n              firstHalfEdge.cosToRightNeighborHalfEdge,\n              firstHalfEdge.sinToRightNeighborHalfEdge,\n            ),\n        );\n\n        firstLineEndPosition = firstLineEndPosition.addScaled(\n          firstHalfEdge.direction,\n          -bondSpace *\n            getBondLineShift(\n              secondHalfEdge.cosToLeftNeighborHalfEdge,\n              secondHalfEdge.sinToLeftNeighborHalfEdge,\n            ),\n        );\n      } else if (shift < 0) {\n        secondLineStartPosition = secondLineStartPosition.addScaled(\n          firstHalfEdge.direction,\n          bondSpace *\n            getBondLineShift(\n              firstHalfEdge.cosToLeftNeighborHalfEdge,\n              firstHalfEdge.sinToLeftNeighborHalfEdge,\n            ),\n        );\n\n        secondLineEndPosition = secondLineEndPosition.addScaled(\n          firstHalfEdge.direction,\n          -bondSpace *\n            getBondLineShift(\n              secondHalfEdge.cosToRightNeighborHalfEdge,\n              secondHalfEdge.sinToRightNeighborHalfEdge,\n            ),\n        );\n      }\n\n      this.pathShape = `\n          M${firstLineStartPosition.x},${firstLineStartPosition.y} \n          L${firstLineEndPosition.x},${firstLineEndPosition.y} \n          M${secondLineStartPosition.x},${secondLineStartPosition.y}      \n          L${secondLineEndPosition.x},${secondLineEndPosition.y}\n        `;\n\n      this.rootElement\n        .append('path')\n        .attr('d', this.pathShape)\n        .attr('stroke', 'black')\n        .attr('stroke-width', `${BOND_WIDTH}px`)\n        .on('mouseover', () => {\n          this.appendHover();\n        })\n        .on('mouseout', () => {\n          this.removeHover();\n        });\n    } else if (this.bond.type === 1) {\n      if (this.bond.stereo === 1) {\n        let bondStartPosition = Coordinates.modelToCanvas(\n          firstHalfEdge.position,\n        ).sub(this.scaledPosition.startPosition);\n        let bondEndPosition = Coordinates.modelToCanvas(\n          secondHalfEdge.position,\n        ).sub(this.scaledPosition.startPosition);\n        bondStartPosition = this.shiftPositionIfAtomLabelVisible(\n          bondStartPosition,\n          this.bond.firstAtom,\n          firstHalfEdge,\n        );\n        bondEndPosition = this.shiftPositionIfAtomLabelVisible(\n          bondEndPosition,\n          this.bond.secondAtom,\n          secondHalfEdge,\n        );\n        const halfOfBondEndWidth = 0.7 * stereoBondWidth;\n        const bondEndFirstPoint = bondEndPosition.addScaled(\n          firstHalfEdge.leftNormal,\n          halfOfBondEndWidth,\n        );\n        const bondEndSecondPoint = bondEndPosition.addScaled(\n          firstHalfEdge.leftNormal,\n          -halfOfBondEndWidth,\n        );\n\n        this.pathShape = `\n          M${bondStartPosition.x},${bondStartPosition.y}\n          L${bondEndFirstPoint.x},${bondEndFirstPoint.y}\n          L${bondEndSecondPoint.x},${bondEndSecondPoint.y}\n          Z\n          `;\n\n        this.rootElement\n          .append('path')\n          .attr('d', this.pathShape)\n          .attr('stroke', '#000')\n          .attr('stroke-width', 2)\n          .attr('stroke-linecap', 'round')\n          .attr('stroke-linejoin', 'round')\n          .on('mouseenter', () => {\n            this.appendHover();\n          })\n          .on('mouseleave', () => {\n            this.removeHover();\n          });\n      } else if (this.bond.stereo === 6) {\n        let bondStartPosition = Coordinates.modelToCanvas(\n          firstHalfEdge.position,\n        ).sub(this.scaledPosition.startPosition);\n        let bondEndPosition = Coordinates.modelToCanvas(\n          secondHalfEdge.position,\n        ).sub(this.scaledPosition.startPosition);\n\n        bondStartPosition = this.shiftPositionIfAtomLabelVisible(\n          bondStartPosition,\n          this.bond.firstAtom,\n          firstHalfEdge,\n        );\n        bondEndPosition = this.shiftPositionIfAtomLabelVisible(\n          bondEndPosition,\n          this.bond.secondAtom,\n          secondHalfEdge,\n        );\n\n        const direction = bondEndPosition.sub(bondStartPosition);\n        const bondLength = direction.length() + 0.2;\n        const normalizedDirection = direction.normalized();\n        const offsetBetweenLines = 1.2 * BOND_WIDTH;\n        const numberOfLines =\n          Math.max(\n            Math.floor(\n              (bondLength - BOND_WIDTH) / (BOND_WIDTH + offsetBetweenLines),\n            ),\n            0,\n          ) + 2;\n        const step = bondLength / (numberOfLines - 1);\n        const halfOfBondEndWidth = 0.7 * stereoBondWidth;\n\n        let path = '';\n        // TODO define proper names for variables below\n        let p;\n        let q;\n        let r;\n\n        for (let i = 0; i < numberOfLines; ++i) {\n          r = bondStartPosition.addScaled(normalizedDirection, step * i);\n          p = r.addScaled(\n            firstHalfEdge.leftNormal,\n            (halfOfBondEndWidth * (i + 0.5)) / (numberOfLines - 0.5),\n          );\n          q = r.addScaled(\n            firstHalfEdge.leftNormal,\n            (-halfOfBondEndWidth * (i + 0.5)) / (numberOfLines - 0.5),\n          );\n\n          path += `\n            M${p.x},${p.y}\n            L${q.x},${q.y}\n          `;\n        }\n\n        this.pathShape = path;\n\n        this.rootElement\n          .append('path')\n          .attr('d', this.pathShape)\n          .attr('stroke', '#000')\n          .attr('stroke-width', 2)\n          .attr('stroke-linecap', 'round')\n          .attr('stroke-linejoin', 'round')\n          .on('mouseenter', () => {\n            this.appendHover();\n          })\n          .on('mouseleave', () => {\n            this.removeHover();\n          });\n      } else {\n        let startPosition = new Vec2(0, 0);\n        let endPosition = this.scaledPosition.endPosition.sub(\n          this.scaledPosition.startPosition,\n        );\n\n        startPosition = this.shiftPositionIfAtomLabelVisible(\n          startPosition,\n          this.bond.firstAtom,\n          firstHalfEdge,\n        );\n        endPosition = this.shiftPositionIfAtomLabelVisible(\n          endPosition,\n          this.bond.secondAtom,\n          secondHalfEdge,\n        );\n\n        this.pathShape = `M${startPosition.x},${startPosition.y} L${endPosition.x},${endPosition.y}`;\n\n        this.rootElement\n          .append('path')\n          .attr('d', this.pathShape)\n          .attr('stroke', 'black')\n          .attr('stroke-width', `${BOND_WIDTH}px`)\n          .on('mouseenter', () => {\n            this.appendHover();\n          })\n          .on('mouseleave', () => {\n            this.removeHover();\n          });\n      }\n    }\n  }\n\n  public remove() {\n    super.remove();\n    this.removeHover();\n    this.removeSelection();\n  }\n\n  public move() {\n    if (!this.rootElement) {\n      return;\n    }\n\n    this.remove();\n    this.show();\n  }\n\n  protected appendHoverAreaElement(): void {}\n}\n","import { BaseRenderer } from 'application/render/renderers/BaseRenderer';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { Scale } from 'domain/helpers';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\n\nexport class MonomerToAtomBondRenderer extends BaseRenderer {\n  private selectionElement:\n    | D3SvgElementSelection<SVGLineElement, void>\n    | undefined;\n\n  constructor(public monomerToAtomBond: MonomerToAtomBond) {\n    super(monomerToAtomBond);\n    this.monomerToAtomBond.setRenderer(this);\n  }\n\n  private get scaledPosition() {\n    const startPositionInPixels = Scale.modelToCanvas(\n      this.monomerToAtomBond.startPosition,\n      this.editorSettings,\n    );\n\n    const endPositionInPixels = Scale.modelToCanvas(\n      this.monomerToAtomBond.endPosition,\n      this.editorSettings,\n    );\n\n    return {\n      startPosition: startPositionInPixels,\n      endPosition: endPositionInPixels,\n    };\n  }\n\n  show() {\n    this.rootElement = this.canvas\n      .insert('g', `.monomer`)\n      .data([this])\n      .attr(\n        'transform',\n        `translate(${this.scaledPosition.startPosition.x}, ${this.scaledPosition.startPosition.y})`,\n      ) as never as D3SvgElementSelection<SVGGElement, void>;\n\n    this.rootElement\n      ?.append('line')\n      .attr('x1', 0)\n      .attr('y1', 0)\n      .attr(\n        'x2',\n        this.scaledPosition.endPosition.x - this.scaledPosition.startPosition.x,\n      )\n      .attr(\n        'y2',\n        this.scaledPosition.endPosition.y - this.scaledPosition.startPosition.y,\n      )\n      .attr('stroke', '#333333')\n      .attr('stroke-width', 1);\n    this.appendHover();\n  }\n\n  protected appendHover(): D3SvgElementSelection<SVGUseElement, void> | void {\n    this.rootElement\n      ?.append('line')\n      .attr('x1', 0)\n      .attr('y1', 0)\n      .attr(\n        'x2',\n        this.scaledPosition.endPosition.x - this.scaledPosition.startPosition.x,\n      )\n      .attr(\n        'y2',\n        this.scaledPosition.endPosition.y - this.scaledPosition.startPosition.y,\n      )\n      .attr('stroke', 'transparent')\n      .attr('stroke-width', 10);\n  }\n\n  protected appendHoverAreaElement(): void {}\n\n  public drawSelection() {\n    if (!this.rootElement) {\n      return;\n    }\n    if (this.monomerToAtomBond.selected) {\n      this.appendSelection();\n    } else {\n      this.removeSelection();\n    }\n  }\n\n  public appendSelection(): void {\n    this.selectionElement = this.rootElement\n      ?.insert('line', ':first-child')\n      .attr('x1', 0)\n      .attr('y1', 0)\n      .attr(\n        'x2',\n        this.scaledPosition.endPosition.x - this.scaledPosition.startPosition.x,\n      )\n      .attr(\n        'y2',\n        this.scaledPosition.endPosition.y - this.scaledPosition.startPosition.y,\n      )\n      .attr('stroke', '#57ff8f')\n      .attr('stroke-width', 10);\n  }\n\n  public removeSelection() {\n    this.selectionElement?.remove();\n    this.selectionElement = undefined;\n  }\n\n  public move() {\n    if (!this.rootElement) {\n      return;\n    }\n\n    this.remove();\n    this.show();\n  }\n\n  protected removeHover(): void {\n    this.hoverElement?.remove();\n    this.hoverElement = undefined;\n  }\n\n  public moveSelection(): void {}\n}\n","import { CoreEditor } from 'application/editor/Editor';\nimport { monomerFactory } from 'application/editor/operations/monomer/monomerFactory';\nimport {\n  PeptideRenderer,\n  PhosphateRenderer,\n  SugarRenderer,\n  UnsplitNucleotideRenderer,\n} from 'application/render';\nimport { notifyRenderComplete } from 'application/render/internal';\nimport { BaseMonomerRenderer } from 'application/render/renderers/BaseMonomerRenderer';\nimport { FlexModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/FlexModePolymerBondRenderer';\nimport { PolymerBondRendererFactory } from 'application/render/renderers/PolymerBondRenderer/PolymerBondRendererFactory';\nimport { SnakeModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/SnakeModePolymerBondRenderer';\nimport assert from 'assert';\nimport { Peptide, Phosphate, Sugar, UnsplitNucleotide } from 'domain/entities';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { Command } from 'domain/entities/Command';\nimport { DrawingEntity } from 'domain/entities/DrawingEntity';\nimport { ChainsCollection } from 'domain/entities/monomer-chains/ChainsCollection';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport {\n  checkIsR2R1Connection,\n  getNextMonomerInChain,\n  getRnaBaseFromSugar,\n  isMonomerBeginningOfChain,\n  isPeptideOrAmbiguousPeptide,\n  isRnaBaseOrAmbiguousRnaBase,\n} from 'domain/helpers/monomers';\nimport { AttachmentPointName } from 'domain/types';\nimport { AmbiguousMonomer } from 'domain/entities/AmbiguousMonomer';\nimport { AmbiguousMonomerRenderer } from 'application/render/renderers/AmbiguousMonomerRenderer';\nimport { Atom } from 'domain/entities/CoreAtom';\nimport { AtomRenderer } from 'application/render/renderers/AtomRenderer';\nimport { BondRenderer } from 'application/render/renderers/BondRenderer';\nimport { Bond } from 'domain/entities/CoreBond';\nimport { MonomerToAtomBondRenderer } from 'application/render/renderers/MonomerToAtomBondRenderer';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\n\ntype FlexModeOrSnakeModePolymerBondRenderer =\n  | FlexModePolymerBondRenderer\n  | SnakeModePolymerBondRenderer;\n\nexport class RenderersManager {\n  // FIXME: Specify the types.\n  private theme;\n  public monomers: Map<number, BaseMonomerRenderer | AmbiguousMonomerRenderer> =\n    new Map();\n\n  public polymerBonds = new Map<\n    number,\n    FlexModeOrSnakeModePolymerBondRenderer\n  >();\n\n  public atoms = new Map<number, AtomRenderer>();\n\n  public bonds = new Map<number, BondRenderer>();\n\n  private needRecalculateMonomersEnumeration = false;\n  private needRecalculateMonomersBeginning = false;\n\n  constructor({ theme }) {\n    this.theme = theme;\n  }\n\n  public hoverDrawingEntity(drawingEntity: DrawingEntity) {\n    assert(drawingEntity.baseRenderer);\n    drawingEntity.baseRenderer.redrawHover();\n  }\n\n  public selectDrawingEntity(drawingEntity: DrawingEntity) {\n    assert(drawingEntity.baseRenderer);\n    drawingEntity.baseRenderer.drawSelection();\n  }\n\n  public moveDrawingEntity(drawingEntity: DrawingEntity) {\n    assert(drawingEntity.baseRenderer);\n    drawingEntity.baseRenderer.moveSelection();\n    drawingEntity.baseRenderer.drawSelection();\n  }\n\n  private markForReEnumeration() {\n    this.needRecalculateMonomersEnumeration = true;\n  }\n\n  public markForRecalculateBegin() {\n    this.needRecalculateMonomersBeginning = true;\n  }\n\n  public addMonomer(\n    monomer: BaseMonomer | AmbiguousMonomer,\n    callback?: () => void,\n  ) {\n    let monomerRenderer;\n\n    if (monomer instanceof AmbiguousMonomer) {\n      monomerRenderer = new AmbiguousMonomerRenderer(monomer);\n    } else {\n      const MonomerRenderer = monomerFactory(monomer.monomerItem)[1];\n      monomerRenderer = new MonomerRenderer(monomer);\n    }\n\n    this.monomers.set(monomer.id, monomerRenderer);\n    monomerRenderer.show(this.theme);\n    this.markForReEnumeration();\n    this.markForRecalculateBegin();\n    if (callback) {\n      callback();\n    }\n  }\n\n  public moveMonomer(monomer: BaseMonomer) {\n    monomer.renderer?.move();\n    monomer.renderer?.drawSelection();\n  }\n\n  public redrawDrawingEntity(drawingEntity: DrawingEntity, force = false) {\n    drawingEntity.baseRenderer?.remove();\n    drawingEntity.baseRenderer?.show(this.theme, force);\n  }\n\n  public deleteAllDrawingEntities() {\n    this.monomers.forEach((monomerRenderer) => {\n      monomerRenderer.remove();\n    });\n    this.polymerBonds.forEach((polymerBondRenderer) => {\n      polymerBondRenderer.remove();\n    });\n  }\n\n  public deleteMonomer(monomer: BaseMonomer) {\n    monomer.renderer?.remove();\n    this.monomers.delete(monomer.id);\n    this.markForReEnumeration();\n    this.markForRecalculateBegin();\n  }\n\n  public addPolymerBond(polymerBond: PolymerBond): void {\n    const polymerBondRenderer =\n      PolymerBondRendererFactory.createInstance(polymerBond);\n    this.polymerBonds.set(polymerBond.id, polymerBondRenderer);\n    polymerBondRenderer.show();\n    polymerBondRenderer.polymerBond.firstMonomer.renderer?.redrawAttachmentPoints();\n    this.markForReEnumeration();\n    this.markForRecalculateBegin();\n  }\n\n  public movePolymerBond(polymerBond: PolymerBond) {\n    polymerBond.renderer?.moveStart();\n    polymerBond.renderer?.moveEnd();\n    polymerBond.renderer?.drawSelection();\n    // If we started bond from the specific AP, it needs to be redrawn to face the bond direction\n    if (polymerBond.firstMonomer.chosenFirstAttachmentPointForBond) {\n      polymerBond.firstMonomer.renderer?.redrawAttachmentPointsCoordinates();\n    }\n  }\n\n  public showPolymerBondInformation(polymerBond: PolymerBond) {\n    polymerBond.renderer?.redrawHover();\n    polymerBond.firstMonomer.renderer?.redrawAttachmentPoints();\n    polymerBond.firstMonomer.renderer?.redrawHover();\n    polymerBond.secondMonomer?.renderer?.redrawAttachmentPoints();\n    polymerBond.secondMonomer?.renderer?.redrawHover();\n  }\n\n  public deletePolymerBond(\n    polymerBond: PolymerBond,\n    recalculateEnumeration = true,\n    recalculateBeginning = true,\n  ) {\n    polymerBond.renderer?.remove();\n    polymerBond?.firstMonomer?.renderer?.redrawAttachmentPoints?.();\n    polymerBond?.secondMonomer?.renderer?.redrawAttachmentPoints?.();\n    this.polymerBonds.delete(polymerBond.id);\n    if (recalculateEnumeration) {\n      this.markForReEnumeration();\n    }\n    if (recalculateBeginning) {\n      this.markForRecalculateBegin();\n    }\n  }\n\n  private recalculatePeptideChainEnumeration(\n    peptideRenderer: PeptideRenderer,\n    _currentEnumeration = 1,\n  ) {\n    let currentEnumeration = _currentEnumeration;\n    const stack = [{ monomerRenderer: peptideRenderer }];\n\n    while (stack.length > 0) {\n      const stackItem = stack.pop();\n      assert(stackItem);\n      const { monomerRenderer } = stackItem;\n\n      monomerRenderer.setEnumeration(currentEnumeration);\n      monomerRenderer.redrawEnumeration();\n\n      const nextMonomer = getNextMonomerInChain(monomerRenderer.monomer);\n\n      if (\n        !isPeptideOrAmbiguousPeptide(nextMonomer) ||\n        nextMonomer === peptideRenderer.monomer\n      ) {\n        return;\n      }\n\n      const isR2R1Connection = checkIsR2R1Connection(\n        monomerRenderer.monomer,\n        nextMonomer,\n      );\n\n      if (!isR2R1Connection) {\n        return;\n      }\n\n      assert(nextMonomer.renderer);\n\n      stack.push({ monomerRenderer: nextMonomer.renderer as PeptideRenderer });\n      currentEnumeration++;\n    }\n  }\n\n  private recalculateRnaChainEnumeration(\n    rnaComponentRenderer: BaseMonomerRenderer,\n    _currentEnumeration = 1,\n  ) {\n    let currentEnumeration = _currentEnumeration;\n    const stack = [{ monomerRenderer: rnaComponentRenderer }];\n\n    while (stack.length > 0) {\n      const stackItem = stack.pop();\n      assert(stackItem);\n      const { monomerRenderer } = stackItem;\n\n      if (monomerRenderer instanceof SugarRenderer) {\n        const rnaBaseMonomer = getRnaBaseFromSugar(\n          monomerRenderer.monomer as Sugar,\n        );\n        if (isRnaBaseOrAmbiguousRnaBase(rnaBaseMonomer)) {\n          rnaBaseMonomer.renderer?.setEnumeration(currentEnumeration);\n          rnaBaseMonomer.renderer?.redrawEnumeration();\n          currentEnumeration++;\n        }\n      }\n\n      if (monomerRenderer instanceof UnsplitNucleotideRenderer) {\n        monomerRenderer.setEnumeration(currentEnumeration);\n        monomerRenderer.redrawEnumeration();\n        currentEnumeration++;\n      }\n\n      const nextMonomer = getNextMonomerInChain(monomerRenderer.monomer);\n\n      if (\n        (!(nextMonomer instanceof Sugar) &&\n          !(nextMonomer instanceof Phosphate) &&\n          !(nextMonomer instanceof UnsplitNucleotide)) ||\n        nextMonomer === rnaComponentRenderer.monomer\n      ) {\n        return;\n      }\n\n      const isR2R1Connection = checkIsR2R1Connection(\n        monomerRenderer.monomer,\n        nextMonomer,\n      );\n\n      if (\n        !isR2R1Connection ||\n        !(nextMonomer.renderer instanceof BaseMonomerRenderer)\n      ) {\n        return;\n      }\n\n      stack.push({\n        monomerRenderer: nextMonomer.renderer,\n      });\n    }\n  }\n\n  private recalculatePeptideEnumeration(\n    peptideRenderer: PeptideRenderer,\n    firstMonomers: BaseMonomer[],\n  ) {\n    if (!peptideRenderer.monomer.hasBonds) {\n      peptideRenderer.setEnumeration(null);\n      peptideRenderer.redrawEnumeration();\n    }\n    if (\n      !isMonomerBeginningOfChain(peptideRenderer.monomer, [Peptide]) &&\n      !firstMonomers.includes(peptideRenderer.monomer)\n    ) {\n      return;\n    }\n\n    this.recalculatePeptideChainEnumeration(peptideRenderer);\n  }\n\n  private recalculateRnaEnumeration(\n    rnaComponentRenderer: BaseMonomerRenderer,\n    firstMonomers: BaseMonomer[],\n  ) {\n    if (\n      !isMonomerBeginningOfChain(rnaComponentRenderer.monomer, [\n        Phosphate,\n        Sugar,\n        UnsplitNucleotide,\n      ]) &&\n      !firstMonomers.includes(rnaComponentRenderer.monomer)\n    ) {\n      return;\n    }\n\n    this.recalculateRnaChainEnumeration(rnaComponentRenderer);\n  }\n\n  private recalculateMonomersEnumeration() {\n    const editor = CoreEditor.provideEditorInstance();\n    const [, firstMonomersInCyclicChains] =\n      ChainsCollection.getFirstMonomersInChains([\n        ...editor.drawingEntitiesManager.monomers.values(),\n      ]);\n\n    this.monomers.forEach((monomerRenderer) => {\n      if (isPeptideOrAmbiguousPeptide(monomerRenderer.monomer)) {\n        this.recalculatePeptideEnumeration(\n          monomerRenderer as PeptideRenderer,\n          firstMonomersInCyclicChains,\n        );\n      }\n\n      if (\n        monomerRenderer instanceof UnsplitNucleotideRenderer ||\n        monomerRenderer instanceof PhosphateRenderer ||\n        monomerRenderer instanceof SugarRenderer ||\n        monomerRenderer instanceof AmbiguousMonomerRenderer\n      ) {\n        this.recalculateRnaEnumeration(\n          monomerRenderer as BaseMonomerRenderer,\n          firstMonomersInCyclicChains,\n        );\n      }\n\n      if (\n        isRnaBaseOrAmbiguousRnaBase(monomerRenderer.monomer) &&\n        !monomerRenderer.monomer.isAttachmentPointUsed(AttachmentPointName.R1)\n      ) {\n        monomerRenderer.setEnumeration(null);\n        monomerRenderer.redrawEnumeration();\n      }\n    });\n\n    this.needRecalculateMonomersEnumeration = false;\n  }\n\n  private isOnlyPartOfRnaChain(sugar: Sugar) {\n    const phosphate = getNextMonomerInChain(sugar);\n    const nextMonomerAfterPhospate = getNextMonomerInChain(phosphate);\n    return !sugar.attachmentPointsToBonds.R1 && !nextMonomerAfterPhospate;\n  }\n\n  private recalculateMonomersBeginning() {\n    this.monomers.forEach((monomerRenderer) => {\n      if (isPeptideOrAmbiguousPeptide(monomerRenderer.monomer)) {\n        if (monomerRenderer.enumeration === 1) {\n          monomerRenderer.setBeginning(monomerRenderer.CHAIN_BEGINNING);\n        } else {\n          monomerRenderer.setBeginning(null);\n        }\n        monomerRenderer.reDrawChainBeginning();\n      }\n      if (monomerRenderer instanceof SugarRenderer) {\n        const rnaBaseMonomer = getRnaBaseFromSugar(\n          monomerRenderer.monomer as Sugar,\n        );\n        if (\n          isRnaBaseOrAmbiguousRnaBase(rnaBaseMonomer) &&\n          rnaBaseMonomer.renderer?.enumeration === 1 &&\n          !this.isOnlyPartOfRnaChain(monomerRenderer.monomer)\n        ) {\n          monomerRenderer.setBeginning(monomerRenderer.CHAIN_BEGINNING);\n        } else {\n          monomerRenderer.setBeginning(null);\n        }\n        monomerRenderer.reDrawChainBeginning();\n      }\n    });\n    this.needRecalculateMonomersBeginning = false;\n  }\n\n  // FIXME: Specify the types.\n  public finishPolymerBondCreation(polymerBond: PolymerBond) {\n    assert(polymerBond.secondMonomer);\n\n    const polymerBondRenderer =\n      PolymerBondRendererFactory.createInstance(polymerBond);\n    this.polymerBonds.set(polymerBond.id, polymerBondRenderer);\n    this.markForReEnumeration();\n    this.markForRecalculateBegin();\n    polymerBond.firstMonomer.renderer?.redrawAttachmentPoints();\n    polymerBond.firstMonomer.renderer?.drawSelection();\n    polymerBond.firstMonomer.renderer?.redrawHover();\n    polymerBond.secondMonomer.renderer?.redrawAttachmentPoints();\n    polymerBond.secondMonomer.renderer?.drawSelection();\n    polymerBond.secondMonomer.renderer?.redrawHover();\n\n    polymerBond.renderer?.show();\n  }\n\n  public cancelPolymerBondCreation(\n    polymerBond: PolymerBond,\n    secondMonomer?: BaseMonomer,\n  ) {\n    this.deletePolymerBond(polymerBond);\n    polymerBond.firstMonomer.renderer?.redrawAttachmentPoints();\n    polymerBond.firstMonomer.renderer?.drawSelection();\n    polymerBond.firstMonomer.renderer?.redrawHover();\n    secondMonomer?.renderer?.redrawAttachmentPoints();\n    secondMonomer?.renderer?.drawSelection();\n    secondMonomer?.renderer?.redrawHover();\n  }\n\n  public hoverMonomer(monomer: BaseMonomer, needRedrawAttachmentPoints) {\n    this.hoverDrawingEntity(monomer as DrawingEntity);\n    if (needRedrawAttachmentPoints) {\n      monomer.renderer?.redrawAttachmentPoints();\n    }\n  }\n\n  public hoverAttachmentPoint(\n    monomer: BaseMonomer,\n    attachmentPointName: AttachmentPointName,\n  ) {\n    this.hoverDrawingEntity(monomer as DrawingEntity);\n    monomer.renderer?.hoverAttachmentPoint(attachmentPointName);\n    monomer.renderer?.updateAttachmentPoints();\n  }\n\n  public update(modelChanges?: Command) {\n    const editor = CoreEditor.provideEditorInstance();\n    const viewModel = editor.viewModel;\n\n    modelChanges?.execute(this);\n    viewModel.initialize([...editor.drawingEntitiesManager.bonds.values()]);\n    modelChanges?.executeAfterAllOperations(this);\n\n    this.runPostRenderMethods();\n    notifyRenderComplete();\n  }\n\n  public addAtom(atom: Atom) {\n    const atomRenderer = new AtomRenderer(atom);\n\n    this.atoms.set(atom.id, atomRenderer);\n    atomRenderer.show();\n  }\n\n  public deleteAtom(atom: Atom) {\n    this.atoms.delete(atom.id);\n    atom.renderer?.remove();\n  }\n\n  public addBond(bond: Bond) {\n    const bondRenderer = new BondRenderer(bond);\n\n    this.bonds.set(bond.id, bondRenderer);\n    bondRenderer.show();\n  }\n\n  public deleteBond(bond: Bond) {\n    this.bonds.delete(bond.id);\n    bond.renderer?.remove();\n  }\n\n  public addMonomerToAtomBond(bond: MonomerToAtomBond) {\n    const bondRenderer = new MonomerToAtomBondRenderer(bond);\n\n    bondRenderer.show();\n    bond.monomer.renderer?.redrawAttachmentPoints();\n    bond.monomer.renderer?.redrawHover();\n  }\n\n  public deleteMonomerToAtomBond(bond: MonomerToAtomBond) {\n    bond.renderer?.remove();\n  }\n\n  public runPostRenderMethods() {\n    if (this.needRecalculateMonomersEnumeration) {\n      this.recalculateMonomersEnumeration();\n    }\n    if (this.needRecalculateMonomersBeginning) {\n      this.recalculateMonomersBeginning();\n    }\n  }\n\n  public static getRenderedStructuresBbox() {\n    let left;\n    let right;\n    let top;\n    let bottom;\n    const editor = CoreEditor.provideEditorInstance();\n\n    editor.drawingEntitiesManager.monomers.forEach((monomer) => {\n      const monomerPosition = monomer.renderer?.scaledMonomerPosition;\n\n      assert(monomerPosition);\n\n      left = left ? Math.min(left, monomerPosition.x) : monomerPosition.x;\n      right = right ? Math.max(right, monomerPosition.x) : monomerPosition.x;\n      top = top ? Math.min(top, monomerPosition.y) : monomerPosition.y;\n      bottom = bottom ? Math.max(bottom, monomerPosition.y) : monomerPosition.y;\n    });\n    return {\n      left,\n      right,\n      top,\n      bottom,\n      width: right - left,\n      height: bottom - top,\n    };\n  }\n\n  public rerenderSideConnectionPolymerBonds() {\n    this.polymerBonds.forEach((polymerBondRenderer) => {\n      if (!polymerBondRenderer.polymerBond.isSideChainConnection) {\n        return;\n      }\n\n      polymerBondRenderer.remove();\n      polymerBondRenderer.show(undefined, true);\n    });\n  }\n}\n","import { BaseMode } from 'application/editor/modes/BaseMode';\nimport { LayoutMode } from 'application/editor/modes';\nimport ZoomTool from '../tools/Zoom';\nimport { CoreEditor } from '../Editor';\nimport { Coordinates } from '../internal';\nimport { Command } from 'domain/entities/Command';\nimport { ReinitializeModeOperation } from 'application/editor/operations/modes';\nimport { Vec2 } from 'domain/entities';\nimport { RenderersManager } from 'application/render/renderers/RenderersManager';\nimport {\n  MONOMER_START_X_POSITION,\n  MONOMER_START_Y_POSITION,\n  SNAKE_LAYOUT_CELL_WIDTH,\n} from 'domain/entities/DrawingEntitiesManager';\n\nexport class SnakeMode extends BaseMode {\n  constructor(previousMode?: LayoutMode) {\n    super('snake-layout-mode', previousMode);\n  }\n\n  public initialize(_needRemoveSelection: boolean, _isUndo = false) {\n    const command = super.initialize();\n    const editor = CoreEditor.provideEditorInstance();\n\n    // Prevent layout to be called if turn on snake mode by undo operation\n    // because during undo to flex mode if monomers were not moved\n    // we need just redraw canvas to apply new bond view style (straight instead of curved)\n    const modelChanges = _isUndo\n      ? new Command()\n      : editor.drawingEntitiesManager.reArrangeChains(\n          editor.canvas.width.baseVal.value,\n          true,\n        );\n\n    editor.drawingEntitiesManager.applyFlexLayoutMode();\n\n    command.merge(modelChanges);\n    editor.renderersContainer.update(modelChanges);\n    command.setUndoOperationReverse();\n\n    const drawnEntitiesBoundingBox =\n      RenderersManager.getRenderedStructuresBbox();\n    const zoom = ZoomTool.instance;\n\n    zoom.scrollTo(\n      new Vec2(drawnEntitiesBoundingBox.left, drawnEntitiesBoundingBox.top),\n      false,\n      MONOMER_START_X_POSITION - SNAKE_LAYOUT_CELL_WIDTH / 4,\n      MONOMER_START_Y_POSITION - SNAKE_LAYOUT_CELL_WIDTH / 4,\n      false,\n    );\n\n    return command;\n  }\n\n  getNewNodePosition() {\n    const editor = CoreEditor.provideEditorInstance();\n\n    return Coordinates.modelToCanvas(\n      editor.drawingEntitiesManager.bottomRightMonomerPosition,\n    );\n  }\n\n  scrollForView() {\n    const zoom = ZoomTool.instance;\n    const drawnEntitiesBoundingBox =\n      RenderersManager.getRenderedStructuresBbox();\n\n    if (zoom.isFitToCanvasHeight(drawnEntitiesBoundingBox.height)) {\n      zoom.scrollTo(\n        new Vec2(drawnEntitiesBoundingBox.left, drawnEntitiesBoundingBox.top),\n        false,\n        2,\n      );\n    } else {\n      zoom.scrollTo(\n        new Vec2(\n          drawnEntitiesBoundingBox.left,\n          drawnEntitiesBoundingBox.bottom,\n        ),\n        true,\n        2,\n      );\n    }\n  }\n\n  applyAdditionalPasteOperations() {\n    const command = new Command();\n    command.addOperation(new ReinitializeModeOperation());\n\n    return command;\n  }\n\n  isPasteAllowedByMode(): boolean {\n    return true;\n  }\n\n  isPasteAvailable(): boolean {\n    return true;\n  }\n}\n","import { BaseMode } from 'application/editor/modes/BaseMode';\nimport { SequenceMode } from 'application/editor';\n\nexport type LayoutMode =\n  | 'flex-layout-mode'\n  | 'snake-layout-mode'\n  | 'sequence-layout-mode';\n\nexport const DEFAULT_LAYOUT_MODE: LayoutMode = 'sequence-layout-mode';\n\nexport function isSequenceMode(mode: BaseMode): mode is SequenceMode {\n  return mode instanceof SequenceMode;\n}\n","import { FlexMode } from './FlexMode';\nimport { SequenceMode } from './SequenceMode';\nimport { SnakeMode } from './SnakeMode';\n\nexport * from './FlexMode';\nexport * from './SequenceMode';\nexport * from './SnakeMode';\nexport * from './types';\n\nexport const modesMap = {\n  'flex-layout-mode': FlexMode,\n  'snake-layout-mode': SnakeMode,\n  'sequence-layout-mode': SequenceMode,\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { RenderersManager } from 'application/render/renderers/RenderersManager';\nimport { Operation } from 'domain/entities/Operation';\nimport { CoreEditor } from 'application/editor/internal';\nimport { SequenceMode, SnakeMode } from 'application/editor/modes';\nimport {\n  SequencePointer,\n  SequenceRenderer,\n} from 'application/render/renderers/sequence/SequenceRenderer';\n\nexport class ReinitializeModeOperation implements Operation {\n  public priority = 2;\n  constructor() {}\n\n  public execute(_renderersManager: RenderersManager) {\n    const editor = CoreEditor.provideEditorInstance();\n    if (\n      editor.mode instanceof SequenceMode ||\n      editor.mode instanceof SnakeMode\n    ) {\n      editor.mode.initialize(false);\n    }\n  }\n\n  public invert(_renderersManager: RenderersManager) {\n    const editor = CoreEditor.provideEditorInstance();\n    if (\n      editor.mode instanceof SequenceMode ||\n      editor.mode instanceof SnakeMode\n    ) {\n      editor.mode.initialize(false);\n    }\n  }\n}\n\nexport class RestoreSequenceCaretPositionOperation implements Operation {\n  constructor(\n    private previousPosition: SequencePointer,\n    private nextPosition: SequencePointer,\n  ) {\n    this.execute();\n  }\n\n  public execute() {\n    SequenceRenderer.setCaretPosition(this.nextPosition);\n  }\n\n  public invert(_renderersManager: RenderersManager) {\n    SequenceRenderer.setCaretPosition(this.previousPosition);\n  }\n}\n","import assert from 'assert';\nimport { BaseSequenceRenderer } from 'application/render/renderers/sequence/BaseSequenceRenderer';\nimport { D3SvgElementSelection } from 'application/render/types';\nimport { MonomerToAtomBond, SubChainNode, Vec2 } from 'domain/entities';\nimport { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\n\nexport class MonomerToAtomBondSequenceRenderer extends BaseSequenceRenderer {\n  constructor(\n    public monomerToAtomBond: MonomerToAtomBond,\n    private monomerNode: SubChainNode,\n  ) {\n    super(monomerToAtomBond);\n  }\n\n  private get monomer() {\n    return this.monomerNode.monomer;\n  }\n\n  private get atom() {\n    return this.monomerToAtomBond.atom;\n  }\n\n  public get scaledPosition() {\n    assert(this.monomer.renderer instanceof BaseSequenceItemRenderer);\n\n    const monomerY = this.monomer.renderer.scaledMonomerPositionForSequence.y;\n    const monomerX = this.monomer.renderer.scaledMonomerPositionForSequence.x;\n    const atomY = this.atom.renderer?.center.y;\n    const atomX = this.atom.renderer?.center.x;\n\n    return {\n      startPosition: new Vec2(monomerX, monomerY),\n      endPosition: new Vec2(atomX, atomY),\n    };\n  }\n\n  public get center() {\n    return Vec2.centre(\n      new Vec2(\n        this.scaledPosition.startPosition.x + 6,\n        this.mainLineY.mainLineY1,\n      ),\n      new Vec2(\n        this.scaledPosition.startPosition.x + 6,\n        this.mainLineY.mainLineY2,\n      ),\n    );\n  }\n\n  private get mainLineY() {\n    const mainLineY1 =\n      this.scaledPosition.startPosition.y -\n      (this.scaledPosition.startPosition.y > this.scaledPosition.endPosition.y\n        ? 15\n        : -3);\n    const mainLineY2 = this.scaledPosition.endPosition.y;\n\n    return { mainLineY1, mainLineY2 };\n  }\n\n  public show() {\n    this.rootElement = this.canvas\n      .insert('g', `:first-child`)\n      .data([this]) as never as D3SvgElementSelection<SVGGElement, void>;\n\n    this.rootElement\n      ?.append('path')\n      .attr('stroke', 'black')\n      .attr('fill', 'none')\n      .attr('d', this.getBondPath());\n  }\n\n  private getBondPath() {\n    return `M ${this.scaledPosition.startPosition.x + 6}, ${\n      this.mainLineY.mainLineY1\n    } L ${this.scaledPosition.endPosition.x}, ${this.mainLineY.mainLineY2}`;\n  }\n\n  public moveStart(): void {}\n\n  public moveEnd(): void {}\n\n  public get isSnake(): false {\n    return false;\n  }\n\n  public isMonomersOnSameHorizontalLine(): false {\n    return false;\n  }\n}\n","import { ChainsCollection } from 'domain/entities/monomer-chains/ChainsCollection';\nimport { SequenceNodeRendererFactory } from 'application/render/renderers/sequence/SequenceNodeRendererFactory';\nimport {\n  BaseMonomer,\n  MonomerToAtomBond,\n  Nucleotide,\n  Phosphate,\n  Sugar,\n  Vec2,\n} from 'domain/entities';\nimport { AttachmentPointName } from 'domain/types';\nimport { PolymerBondSequenceRenderer } from 'application/render/renderers/sequence/PolymerBondSequenceRenderer';\nimport {\n  getNextMonomerInChain,\n  getRnaBaseFromSugar,\n  getSugarFromRnaBase,\n  isRnaBaseOrAmbiguousRnaBase,\n} from 'domain/helpers/monomers';\nimport { Nucleoside } from 'domain/entities/Nucleoside';\nimport { BackBoneBondSequenceRenderer } from 'application/render/renderers/sequence/BackBoneBondSequenceRenderer';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\nimport { EmptySequenceItemRenderer } from 'application/render/renderers/sequence/EmptySequenceItemRenderer';\nimport { EmptySequenceNode } from 'domain/entities/EmptySequenceNode';\nimport { Chain } from 'domain/entities/monomer-chains/Chain';\nimport { EmptySubChain } from 'domain/entities/monomer-chains/EmptySubChain';\nimport { SubChainNode } from 'domain/entities/monomer-chains/types';\nimport { CoreEditor } from 'application/editor/internal';\nimport { RestoreSequenceCaretPositionOperation } from 'application/editor/operations/modes';\nimport assert from 'assert';\nimport { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\nimport { BaseMonomerRenderer } from 'application/render';\nimport { Command } from 'domain/entities/Command';\nimport { NewSequenceButton } from 'application/render/renderers/sequence/ui-controls/NewSequenceButton';\nimport { isNumber } from 'lodash';\nimport { MonomerToAtomBondSequenceRenderer } from 'application/render/renderers/sequence/MonomerToAtomBondSequenceRenderer';\n\nexport type SequencePointer = number;\nexport type NumberOfSymbolsInRow = number;\nexport type SequenceLastCaretPosition = number;\n\nexport type NodeSelection = {\n  node: SubChainNode;\n  nodeIndexOverall: number;\n  isNucleosideConnectedAndSelectedWithPhosphate?: boolean;\n  hasR1Connection?: boolean;\n};\n\nexport type NodesSelection = NodeSelection[][];\nconst NUMBER_OF_SYMBOLS_IN_ROW: NumberOfSymbolsInRow = 30;\n\nexport class SequenceRenderer {\n  public static caretPosition: SequencePointer = -1;\n  public static lastUserDefinedCaretPosition: SequenceLastCaretPosition = 0;\n  public static chainsCollection: ChainsCollection;\n  public static lastChainStartPosition: Vec2;\n  private static emptySequenceItemRenderers: EmptySequenceItemRenderer[] = [];\n  private static newSequenceButtons: NewSequenceButton[] = [];\n  public static show(\n    chainsCollection: ChainsCollection,\n    emptyChainIndex?: number,\n  ) {\n    SequenceRenderer.chainsCollection = chainsCollection;\n    this.removeEmptyNodes();\n    this.removeNewSequenceButtons();\n    this.showNodes(\n      SequenceRenderer.chainsCollection,\n      chainsCollection.length === 0 ? 0 : emptyChainIndex,\n    );\n    this.showBonds(SequenceRenderer.chainsCollection);\n  }\n\n  public static removeEmptyNodes() {\n    SequenceRenderer.emptySequenceItemRenderers.forEach(\n      (emptySequenceItemRenderer) => {\n        emptySequenceItemRenderer.remove();\n        SequenceRenderer.emptySequenceItemRenderers = [];\n      },\n    );\n  }\n\n  public static removeNewSequenceButtons() {\n    this.newSequenceButtons.forEach((newSequenceButton) =>\n      newSequenceButton.remove(),\n    );\n    this.newSequenceButtons = [];\n  }\n\n  private static showNodes(\n    chainsCollection: ChainsCollection,\n    chainBeforeEmptyChainIndex?: number,\n  ) {\n    const firstNode = chainsCollection.firstNode;\n    const emptyChainIndex = isNumber(chainBeforeEmptyChainIndex)\n      ? chainBeforeEmptyChainIndex + 1\n      : undefined;\n    let newSequenceEmptyNode;\n\n    let currentChainStartPosition = firstNode\n      ? BaseMonomerRenderer.getScaledMonomerPosition(\n          firstNode.monomer.position,\n          firstNode.monomer.renderer?.monomerSize,\n        )\n      : new Vec2(41.5, 41.5);\n\n    let currentMonomerIndexInChain = 0;\n    let currentMonomerIndexOverall = 0;\n    const isEditMode = CoreEditor.provideEditorInstance().isSequenceEditMode;\n    const isEditInRnaBuilderMode =\n      CoreEditor.provideEditorInstance().isSequenceEditInRNABuilderMode;\n\n    if (isEditMode) {\n      chainsCollection.chains.forEach((chain) => {\n        const emptySequenceNode = new EmptySequenceNode();\n        const emptySubChain = new EmptySubChain();\n        emptySubChain.add(emptySequenceNode);\n        chain.subChains.push(emptySubChain);\n      });\n    }\n\n    if (isNumber(emptyChainIndex)) {\n      const { emptyChain, emptySequenceNode } =\n        Chain.createChainWithEmptyNode();\n\n      SequenceRenderer.chainsCollection.chains.splice(\n        emptyChainIndex,\n        0,\n        emptyChain,\n      );\n\n      newSequenceEmptyNode = emptySequenceNode;\n    }\n\n    chainsCollection.chains.forEach((chain, chainIndex) => {\n      currentMonomerIndexInChain = 0;\n      chain.subChains.forEach((subChain) => {\n        subChain.nodes.forEach((node) => {\n          const renderer = SequenceNodeRendererFactory.fromNode(\n            node,\n            currentChainStartPosition,\n            currentMonomerIndexInChain,\n            currentMonomerIndexInChain + 1 + (isEditMode ? 1 : 0) ===\n              chain.subChains.reduce(\n                (prev, curr) => prev + curr.nodes.length,\n                0,\n              ),\n            subChain,\n            currentMonomerIndexOverall === SequenceRenderer.caretPosition,\n            node.monomer.renderer,\n          );\n          renderer.show();\n          node.monomers?.forEach((monomer) => monomer.setRenderer(renderer));\n          currentMonomerIndexInChain++;\n          currentMonomerIndexOverall++;\n\n          if (node instanceof EmptySequenceNode) {\n            SequenceRenderer.emptySequenceItemRenderers.push(renderer);\n            node.setRenderer(renderer);\n          }\n        });\n      });\n\n      currentChainStartPosition = SequenceRenderer.getNextChainPosition(\n        currentChainStartPosition,\n        chain,\n      );\n\n      if (!isEditInRnaBuilderMode) {\n        this.showNewSequenceButton(chainIndex);\n      }\n    });\n\n    if (newSequenceEmptyNode) {\n      SequenceRenderer.setCaretPositionByNode(newSequenceEmptyNode);\n    }\n\n    if (this.caretPosition > currentMonomerIndexOverall) {\n      this.setCaretPosition(currentMonomerIndexOverall);\n    }\n\n    this.lastChainStartPosition = currentChainStartPosition;\n  }\n\n  public static getNextChainPosition(\n    currentChainStartPosition: Vec2 = SequenceRenderer.lastChainStartPosition,\n    lastChain: Chain = SequenceRenderer.lastChain,\n  ) {\n    return new Vec2(\n      currentChainStartPosition.x,\n      currentChainStartPosition.y +\n        80 +\n        47 * Math.floor((lastChain.length - 1) / 30),\n    );\n  }\n\n  private static showBonds(chainsCollection: ChainsCollection) {\n    const handledMonomersToAttachmentPoints: Map<\n      BaseMonomer,\n      Set<AttachmentPointName>\n    > = new Map();\n\n    chainsCollection.chains.forEach((chain) => {\n      chain.subChains.forEach((subChain) => {\n        subChain.nodes.forEach((node) => {\n          if (node instanceof EmptySequenceNode) {\n            return;\n          }\n\n          if (!handledMonomersToAttachmentPoints.has(node.monomer)) {\n            handledMonomersToAttachmentPoints.set(node.monomer, new Set());\n          }\n          node.monomer.forEachBond((polymerBond, attachmentPointName) => {\n            const handledAttachmentPoints =\n              handledMonomersToAttachmentPoints.get(\n                node.monomer,\n              ) as Set<AttachmentPointName>;\n\n            if (polymerBond instanceof MonomerToAtomBond) {\n              const bondRenderer = new MonomerToAtomBondSequenceRenderer(\n                polymerBond,\n                node,\n              );\n\n              bondRenderer.show();\n              polymerBond.setRenderer(bondRenderer);\n              handledAttachmentPoints.add(attachmentPointName);\n\n              return;\n            }\n\n            if (!subChain.bonds.includes(polymerBond)) {\n              subChain.bonds.push(polymerBond);\n            }\n            if (!polymerBond.isSideChainConnection) {\n              polymerBond.setRenderer(\n                new BackBoneBondSequenceRenderer(polymerBond),\n              );\n              return;\n            }\n\n            if (handledAttachmentPoints.has(attachmentPointName)) {\n              return;\n            }\n\n            const anotherMonomer = polymerBond.getAnotherEntity(\n              node.monomer,\n            ) as BaseMonomer;\n\n            // Skip handling side chains for sugar(R3) + base(R1) connections.\n            if (\n              (node.monomer instanceof Sugar &&\n                getRnaBaseFromSugar(node.monomer) === anotherMonomer) ||\n              (anotherMonomer instanceof Sugar &&\n                getRnaBaseFromSugar(anotherMonomer) === node.monomer)\n            ) {\n              return;\n            }\n\n            let bondRenderer;\n\n            // If side connection comes from rna base then take connected sugar and draw side connection from it\n            // because for rna we display only one letter instead of three\n            const connectedSugarToBase = getSugarFromRnaBase(anotherMonomer);\n            if (\n              isRnaBaseOrAmbiguousRnaBase(anotherMonomer) &&\n              connectedSugarToBase\n            ) {\n              bondRenderer = new PolymerBondSequenceRenderer(\n                new PolymerBond(node.monomer, connectedSugarToBase),\n              );\n            } else {\n              bondRenderer = new PolymerBondSequenceRenderer(polymerBond);\n            }\n            bondRenderer.show();\n            polymerBond.setRenderer(bondRenderer);\n            handledAttachmentPoints.add(attachmentPointName);\n\n            if (!handledMonomersToAttachmentPoints.get(anotherMonomer)) {\n              handledMonomersToAttachmentPoints.set(anotherMonomer, new Set());\n            }\n            const anotherMonomerHandledAttachmentPoints =\n              handledMonomersToAttachmentPoints.get(\n                anotherMonomer,\n              ) as Set<AttachmentPointName>;\n\n            anotherMonomerHandledAttachmentPoints.add(\n              anotherMonomer?.getAttachmentPointByBond(\n                polymerBond,\n              ) as AttachmentPointName,\n            );\n          });\n        });\n      });\n      if (chain.isCyclic) {\n        const polymerBond = chain.firstMonomer?.attachmentPointsToBonds\n          .R1 as PolymerBond;\n        const bondRenderer = new PolymerBondSequenceRenderer(\n          polymerBond,\n          chain.firstNode,\n          chain.lastNonEmptyNode,\n        );\n        bondRenderer.show();\n        polymerBond.setRenderer(bondRenderer);\n      }\n    });\n  }\n\n  public static setCaretPosition(caretPosition: SequencePointer) {\n    const oldSubChainNode = SequenceRenderer.currentEdittingNode;\n\n    if (oldSubChainNode) {\n      assert(oldSubChainNode.renderer instanceof BaseSequenceItemRenderer);\n      oldSubChainNode.renderer.isEditingSymbol = false;\n      oldSubChainNode.renderer?.removeCaret();\n    }\n    SequenceRenderer.caretPosition = caretPosition;\n    const subChainNode = SequenceRenderer.currentEdittingNode;\n\n    if (!subChainNode) {\n      return;\n    }\n\n    assert(subChainNode.renderer instanceof BaseSequenceItemRenderer);\n    subChainNode.renderer.isEditingSymbol = true;\n    subChainNode.renderer?.showCaret();\n  }\n\n  public static forEachNode(\n    forEachCallback: (params: {\n      chainIndex: number;\n      subChainIndex: number;\n      nodeIndex: number;\n      nodeIndexOverall: number;\n      node: SubChainNode;\n      subChain: BaseSubChain;\n      chain: Chain;\n    }) => void,\n  ) {\n    this.chainsCollection.forEachNode(forEachCallback);\n  }\n\n  public static setCaretPositionBySequenceItemRenderer(\n    sequenceItemRenderer: BaseSequenceItemRenderer,\n  ) {\n    let newCaretPosition = -1;\n\n    SequenceRenderer.forEachNode(({ node, nodeIndexOverall }) => {\n      if (node.renderer === sequenceItemRenderer) {\n        newCaretPosition = nodeIndexOverall;\n      }\n    });\n\n    this.setCaretPosition(newCaretPosition);\n  }\n\n  public static setCaretPositionByMonomer(monomer: BaseMonomer) {\n    let newCaretPosition = -1;\n\n    SequenceRenderer.forEachNode(({ node, nodeIndexOverall }) => {\n      if (node.monomer === monomer) {\n        newCaretPosition = nodeIndexOverall;\n      }\n    });\n\n    this.setCaretPosition(newCaretPosition);\n  }\n\n  public static setCaretPositionNextToMonomer(monomer: BaseMonomer) {\n    let newCaretPosition = -1;\n\n    SequenceRenderer.forEachNode(({ node, nodeIndexOverall }) => {\n      if (node.monomer === monomer) {\n        newCaretPosition = nodeIndexOverall;\n      }\n    });\n\n    if (newCaretPosition === -1) {\n      return;\n    }\n\n    this.setCaretPosition(newCaretPosition + 1);\n  }\n\n  public static setCaretPositionByNode(nodeToCompare: SubChainNode) {\n    let newCaretPosition = -1;\n\n    SequenceRenderer.forEachNode(({ node, nodeIndexOverall }) => {\n      if (node === nodeToCompare) {\n        newCaretPosition = nodeIndexOverall;\n      }\n    });\n\n    this.setCaretPosition(newCaretPosition);\n  }\n\n  public static getMonomersByCaretPositionRange(\n    startCaretPosition: SequencePointer,\n    endCaretPosition,\n  ) {\n    const monomers: BaseMonomer[] = [];\n    SequenceRenderer.forEachNode(({ node, nodeIndexOverall }) => {\n      if (\n        startCaretPosition <= nodeIndexOverall &&\n        nodeIndexOverall < (endCaretPosition || this.caretPosition)\n      ) {\n        monomers.push(node.monomer);\n      }\n    });\n    return monomers;\n  }\n\n  public static resetLastUserDefinedCaretPosition() {\n    this.lastUserDefinedCaretPosition = this.caretPosition;\n  }\n\n  private static get nodesGroupedByRows() {\n    const finalArray: Array<Array<SubChainNode>> = [];\n    let chainNodes: Array<SubChainNode> = [];\n    SequenceRenderer.forEachNode(({ node }) => {\n      chainNodes.push(node);\n      if (!(node instanceof EmptySequenceNode)) {\n        return;\n      }\n\n      if (chainNodes.length > NUMBER_OF_SYMBOLS_IN_ROW) {\n        while (chainNodes.length > 0) {\n          finalArray.push(chainNodes.splice(0, NUMBER_OF_SYMBOLS_IN_ROW));\n        }\n      } else {\n        finalArray.push([...chainNodes]);\n      }\n      chainNodes = [];\n    });\n\n    return finalArray;\n  }\n\n  private static getNodeIndexInRowByGlobalIndex(nodeIndexOverall: number) {\n    let restNodes = nodeIndexOverall;\n    let nodeIndexInRow;\n\n    this.nodesGroupedByRows.forEach((row) => {\n      if (nodeIndexInRow === undefined && restNodes - row.length < 0) {\n        nodeIndexInRow = restNodes;\n      }\n      restNodes -= row.length;\n    });\n\n    return nodeIndexInRow;\n  }\n\n  private static get currentChainRow() {\n    return (\n      this.nodesGroupedByRows.find((idexRow) =>\n        idexRow.includes(this.currentEdittingNode),\n      ) || []\n    );\n  }\n\n  private static get previousRowOfNodes() {\n    const index = this.nodesGroupedByRows.findIndex((row) =>\n      row.includes(this.currentEdittingNode),\n    );\n    return index > 0 ? this.nodesGroupedByRows[index - 1] : [];\n  }\n\n  private static get nextRowOfNodes() {\n    const currentIndex = this.nodesGroupedByRows.findIndex((row) =>\n      row.includes(this.currentEdittingNode),\n    );\n    return currentIndex !== -1 &&\n      currentIndex + 1 < this.nodesGroupedByRows.length\n      ? this.nodesGroupedByRows[currentIndex + 1]\n      : [];\n  }\n\n  public static moveCaretUp() {\n    const currentNodeIndexInRow = this.currentChainRow.indexOf(\n      this.currentEdittingNode,\n    );\n\n    let newCaretPosition = this.caretPosition;\n    const symbolsBeforeCaretInCurrentRow = currentNodeIndexInRow;\n    const lastUserDefinedCursorPositionInRow =\n      this.getNodeIndexInRowByGlobalIndex(this.lastUserDefinedCaretPosition);\n\n    newCaretPosition -= symbolsBeforeCaretInCurrentRow;\n    newCaretPosition -= Math.max(\n      this.previousRowOfNodes.length === 0 ? 0 : 1,\n      this.previousRowOfNodes.length - lastUserDefinedCursorPositionInRow,\n    );\n\n    SequenceRenderer.setCaretPosition(newCaretPosition);\n  }\n\n  public static moveCaretDown() {\n    const currentNodeIndexInRow = this.currentChainRow.indexOf(\n      this.currentEdittingNode,\n    );\n\n    let newCaretPosition = this.caretPosition;\n    const lastUserDefinedCursorPositionInRow =\n      this.getNodeIndexInRowByGlobalIndex(this.lastUserDefinedCaretPosition);\n    const symbolsAfterCaretInCurrentRow =\n      this.currentChainRow.length - currentNodeIndexInRow;\n\n    newCaretPosition += symbolsAfterCaretInCurrentRow;\n    newCaretPosition += Math.min(\n      lastUserDefinedCursorPositionInRow,\n      this.nextRowOfNodes.length - 1,\n    );\n\n    SequenceRenderer.setCaretPosition(newCaretPosition);\n  }\n\n  public static moveCaretForward() {\n    const operation = new RestoreSequenceCaretPositionOperation(\n      this.caretPosition,\n      this.nextCaretPosition || this.caretPosition,\n    );\n    SequenceRenderer.resetLastUserDefinedCaretPosition();\n\n    return operation;\n  }\n\n  public static moveCaretBack() {\n    const operation = new RestoreSequenceCaretPositionOperation(\n      this.caretPosition,\n      this.previousCaretPosition === undefined\n        ? this.caretPosition\n        : this.previousCaretPosition,\n    );\n    SequenceRenderer.resetLastUserDefinedCaretPosition();\n\n    return operation;\n  }\n\n  public static get currentChainIndex() {\n    let currentChainIndex = -1;\n\n    SequenceRenderer.forEachNode(({ nodeIndexOverall, chainIndex }) => {\n      if (nodeIndexOverall === this.caretPosition) {\n        currentChainIndex = chainIndex;\n      }\n    });\n\n    return currentChainIndex;\n  }\n\n  public static get lastNodeCaretPosition(): SequencePointer | undefined {\n    if (SequenceRenderer.chainsCollection.chains.length === 0) {\n      return undefined;\n    }\n\n    let lastNodeIndex = -1;\n\n    SequenceRenderer.forEachNode(() => {\n      lastNodeIndex++;\n    });\n\n    return lastNodeIndex === -1 ? undefined : lastNodeIndex;\n  }\n\n  public static getNodeByPointer(sequencePointer?: SequencePointer) {\n    if (sequencePointer === undefined) return;\n    let nodeToReturn;\n\n    SequenceRenderer.forEachNode(({ node, nodeIndexOverall }) => {\n      if (nodeIndexOverall === sequencePointer) {\n        nodeToReturn = node;\n      }\n    });\n\n    return nodeToReturn;\n  }\n\n  public static get currentEdittingNode() {\n    return SequenceRenderer.getNodeByPointer(this.caretPosition);\n  }\n\n  public static get previousFromCurrentEdittingMonomer() {\n    return SequenceRenderer.getNodeByPointer(\n      SequenceRenderer.previousCaretPosition,\n    );\n  }\n\n  public static get currentChain() {\n    return SequenceRenderer.chainsCollection.chains[\n      SequenceRenderer.currentChainIndex\n    ];\n  }\n\n  public static get previousChain() {\n    return SequenceRenderer.chainsCollection.chains[\n      SequenceRenderer.currentChainIndex - 1\n    ];\n  }\n\n  public static get nextChain() {\n    return SequenceRenderer.chainsCollection.chains[\n      SequenceRenderer.currentChainIndex + 1\n    ];\n  }\n\n  public static getLastNonEmptyNode(chain: Chain) {\n    const subChainBeforeLast = chain.subChains[chain.subChains.length - 2];\n\n    return subChainBeforeLast.nodes[subChainBeforeLast.nodes.length - 1];\n  }\n\n  public static getLastNode(chain: Chain) {\n    const lastSubChain = chain.subChains[chain.subChains.length - 1];\n\n    return lastSubChain.nodes[lastSubChain.nodes.length - 1];\n  }\n\n  public static get nextNode() {\n    return SequenceRenderer.getNodeByPointer(\n      SequenceRenderer.nextCaretPosition,\n    );\n  }\n\n  public static get previousNode() {\n    return SequenceRenderer.getNodeByPointer(\n      SequenceRenderer.previousCaretPosition,\n    );\n  }\n\n  public static get nextNodeInSameChain(): SubChainNode | undefined {\n    if (SequenceRenderer.nextCaretPosition === SequenceRenderer.caretPosition) {\n      return;\n    }\n\n    return SequenceRenderer.getNodeByPointer(\n      SequenceRenderer.nextCaretPosition,\n    );\n  }\n\n  public static get previousNodeInSameChain() {\n    return SequenceRenderer.getPreviousNodeInSameChain(\n      SequenceRenderer.currentEdittingNode,\n    );\n  }\n\n  private static get nextCaretPosition(): SequencePointer | undefined {\n    const nodeOnNextPosition = SequenceRenderer.getNodeByPointer(\n      this.caretPosition + 1,\n    );\n\n    return nodeOnNextPosition ? this.caretPosition + 1 : undefined;\n  }\n\n  public static get previousCaretPosition() {\n    const nodeOnPreviousPosition = SequenceRenderer.getNodeByPointer(\n      this.caretPosition - 1,\n    );\n\n    return nodeOnPreviousPosition ? this.caretPosition - 1 : undefined;\n  }\n\n  public static get lastChain() {\n    return SequenceRenderer.chainsCollection.chains[\n      SequenceRenderer.chainsCollection.chains.length - 1\n    ];\n  }\n\n  public static startNewSequence(indexOfRowBefore?: number) {\n    const editor = CoreEditor.provideEditorInstance();\n    const oldNewSequenceChainIndex =\n      SequenceRenderer.chainsCollection.chains.findIndex((chain) => {\n        return chain.isNewSequenceChain;\n      });\n    const chainsCollection = ChainsCollection.fromMonomers([\n      ...editor.drawingEntitiesManager.monomers.values(),\n    ]);\n    chainsCollection.rearrange();\n\n    editor.drawingEntitiesManager.clearCanvas();\n\n    SequenceRenderer.show(\n      chainsCollection,\n      oldNewSequenceChainIndex !== -1 &&\n        isNumber(indexOfRowBefore) &&\n        indexOfRowBefore > oldNewSequenceChainIndex\n        ? indexOfRowBefore - 1\n        : indexOfRowBefore,\n    );\n  }\n\n  public static getPreviousNodeInSameChain(\n    nodeToCompare: SubChainNode,\n  ): SubChainNode | undefined {\n    let previousNode;\n    let previousNodeChainIndex = -1;\n    let nodeToReturn;\n\n    SequenceRenderer.forEachNode(({ node, chainIndex }) => {\n      if (nodeToCompare === node && chainIndex === previousNodeChainIndex) {\n        nodeToReturn = previousNode;\n      }\n      previousNodeChainIndex = chainIndex;\n      previousNode = node;\n    });\n\n    return nodeToReturn;\n  }\n\n  public static getNextNodeInSameChain(\n    nodeToCompare: SubChainNode,\n  ): SubChainNode {\n    let previousNode;\n    let previousNodeChainIndex = -1;\n    let nodeToReturn;\n\n    SequenceRenderer.forEachNode(({ node, chainIndex }) => {\n      if (\n        nodeToCompare === previousNode &&\n        chainIndex === previousNodeChainIndex\n      ) {\n        nodeToReturn = node;\n      }\n      previousNodeChainIndex = chainIndex;\n      previousNode = node;\n    });\n\n    return nodeToReturn;\n  }\n\n  public static getPreviousNode(nodeToCompare: SubChainNode) {\n    let previousNode;\n    let nodeToReturn;\n\n    SequenceRenderer.forEachNode(({ node }) => {\n      if (nodeToCompare === node) {\n        nodeToReturn = previousNode;\n      }\n      previousNode = node;\n    });\n\n    return nodeToReturn;\n  }\n\n  public static getNextNode(nodeToCompare: SubChainNode) {\n    let previousNode;\n    let nodeToReturn;\n\n    SequenceRenderer.forEachNode(({ node }) => {\n      if (previousNode === nodeToCompare) {\n        nodeToReturn = node;\n      }\n      previousNode = node;\n    });\n\n    return nodeToReturn;\n  }\n\n  public static shiftArrowSelectionInEditMode(event) {\n    const editor = CoreEditor.provideEditorInstance();\n    let modelChanges = new Command();\n    const arrowKey = event.code;\n    if (arrowKey === 'ArrowRight') {\n      modelChanges = SequenceRenderer.getShiftArrowChanges(\n        editor,\n        this.currentEdittingNode.monomer,\n      );\n      modelChanges.addOperation(this.moveCaretForward());\n    } else if (arrowKey === 'ArrowLeft') {\n      if (this.previousNodeInSameChain) {\n        modelChanges = SequenceRenderer.getShiftArrowChanges(\n          editor,\n          this.previousNodeInSameChain.monomer,\n        );\n      } else if (SequenceRenderer.previousChain) {\n        const previousChainLastEmptyNode = SequenceRenderer.getLastNode(\n          SequenceRenderer.previousChain,\n        );\n        ({ command: modelChanges } =\n          editor.drawingEntitiesManager.getAllSelectedEntitiesForSingleEntity(\n            previousChainLastEmptyNode.monomer,\n          ));\n      }\n      modelChanges.addOperation(this.moveCaretBack());\n    } else if (arrowKey === 'ArrowUp') {\n      const previousCaretPosition = SequenceRenderer.caretPosition;\n      SequenceRenderer.moveCaretUp();\n      const newCaretPosition = SequenceRenderer.caretPosition;\n\n      SequenceRenderer.forEachNode(({ node, nodeIndexOverall }) => {\n        if (\n          nodeIndexOverall < previousCaretPosition &&\n          nodeIndexOverall >= newCaretPosition\n        ) {\n          modelChanges.merge(\n            SequenceRenderer.getShiftArrowChanges(editor, node.monomer),\n          );\n        }\n      });\n    } else if (arrowKey === 'ArrowDown') {\n      const previousCaretPosition = SequenceRenderer.caretPosition;\n      SequenceRenderer.moveCaretDown();\n      const newCaretPosition = SequenceRenderer.caretPosition;\n\n      SequenceRenderer.forEachNode(({ node, nodeIndexOverall }) => {\n        if (\n          nodeIndexOverall >= previousCaretPosition &&\n          nodeIndexOverall < newCaretPosition\n        ) {\n          modelChanges.merge(\n            SequenceRenderer.getShiftArrowChanges(editor, node.monomer),\n          );\n        }\n      });\n    }\n    editor.renderersContainer.update(modelChanges);\n  }\n\n  private static getShiftArrowChanges(\n    editor: CoreEditor,\n    monomer: BaseMonomer,\n  ) {\n    let modelChanges;\n    const needTurnOffSelection = monomer.selected;\n    const result =\n      editor.drawingEntitiesManager.getAllSelectedEntitiesForSingleEntity(\n        monomer,\n      );\n    if (needTurnOffSelection) {\n      modelChanges =\n        editor.drawingEntitiesManager.addDrawingEntitiesToSelection(\n          result.drawingEntities,\n        );\n    } else {\n      modelChanges = result.command;\n    }\n    return modelChanges;\n  }\n\n  public static unselectEmptySequenceNodes() {\n    const command = new Command();\n    const editor = CoreEditor.provideEditorInstance();\n    SequenceRenderer.forEachNode(({ node }) => {\n      if (node instanceof EmptySequenceNode) {\n        command.merge(\n          editor.drawingEntitiesManager.unselectDrawingEntity(node.monomer),\n        );\n      }\n    });\n    return command;\n  }\n\n  public static get selections() {\n    const editor = CoreEditor.provideEditorInstance();\n    const selections: NodesSelection = [];\n    let lastSelectionRangeIndex = -1;\n    let previousNode;\n\n    SequenceRenderer.forEachNode(({ node, nodeIndexOverall }) => {\n      if (node.monomer.selected) {\n        const selection: Partial<NodeSelection> = {};\n\n        // Add field 'isNucleosideConnectedAndSelectedWithPhosphate' to the Nucleoside elements\n        if (node instanceof Nucleoside) {\n          const nextMonomer = getNextMonomerInChain(node.sugar);\n\n          selection.isNucleosideConnectedAndSelectedWithPhosphate =\n            nextMonomer instanceof Phosphate &&\n            nextMonomer.selected &&\n            editor.drawingEntitiesManager.isNucleosideAndPhosphateConnectedAsNucleotide(\n              node,\n              nextMonomer,\n            );\n        }\n\n        // Add field 'hasR1Connection' to the Nucleotide/Nucleoside elements\n        if (node instanceof Nucleotide || node instanceof Nucleoside) {\n          selection.hasR1Connection = !!node.sugar.attachmentPointsToBonds.R1;\n        }\n\n        if (!previousNode?.monomer.selected) {\n          lastSelectionRangeIndex = selections.push([]) - 1;\n        }\n        selections[lastSelectionRangeIndex].push({\n          ...selection,\n          node,\n          nodeIndexOverall,\n        });\n      }\n      previousNode = node;\n    });\n\n    return selections;\n  }\n\n  public static getRenderedStructuresBbox() {\n    let left;\n    let right;\n    let top;\n    let bottom;\n    SequenceRenderer.forEachNode(({ node }) => {\n      assert(node.monomer.renderer instanceof BaseSequenceItemRenderer);\n      const nodePosition =\n        node.monomer.renderer?.scaledMonomerPositionForSequence;\n      left = left ? Math.min(left, nodePosition.x) : nodePosition.x;\n      right = right ? Math.max(right, nodePosition.x) : nodePosition.x;\n      top = top ? Math.min(top, nodePosition.y) : nodePosition.y;\n      bottom = bottom ? Math.max(bottom, nodePosition.y) : nodePosition.y;\n    });\n    return {\n      left,\n      right,\n      top,\n      bottom,\n      width: right - left,\n      height: bottom - top,\n    };\n  }\n\n  public static getRendererByMonomer(monomer: BaseMonomer) {\n    let rendererToReturn;\n\n    SequenceRenderer.forEachNode(({ node }) => {\n      if (node.monomer === monomer) {\n        rendererToReturn = node.renderer;\n      }\n    });\n\n    return rendererToReturn;\n  }\n\n  public static showNewSequenceButton(indexOfRowBefore: number) {\n    const newSequenceButton = new NewSequenceButton(indexOfRowBefore);\n    newSequenceButton.show();\n    this.newSequenceButtons.push(newSequenceButton);\n  }\n}\n","import { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\nimport { isMonomerSgroupWithAttachmentPoints } from '../../../../utilities/monomers';\n\nexport class ChemSequenceItemRenderer extends BaseSequenceItemRenderer {\n  get symbolToDisplay(): string {\n    return '@';\n  }\n\n  protected drawModification() {}\n\n  public show() {\n    if (\n      this.node.monomer.monomerItem.props.isMicromoleculeFragment &&\n      !isMonomerSgroupWithAttachmentPoints(this.node.monomer)\n    ) {\n      return;\n    }\n\n    super.show();\n  }\n}\n","import { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\n\nexport class EmptySequenceItemRenderer extends BaseSequenceItemRenderer {\n  get symbolToDisplay(): string {\n    return '';\n  }\n\n  protected drawModification() {}\n}\n","import { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\nimport {\n  AmbiguousMonomer,\n  Nucleoside,\n  Nucleotide,\n  Vec2,\n} from 'domain/entities';\nimport { BaseSubChain } from 'domain/entities/monomer-chains/BaseSubChain';\n\nexport abstract class RNASequenceItemRenderer extends BaseSequenceItemRenderer {\n  constructor(\n    public node: Nucleoside | Nucleotide,\n    _firstNodeInChainPosition: Vec2,\n    _monomerIndexInChain: number,\n    _isLastMonomerInChain: boolean,\n    _subChain: BaseSubChain,\n    _isEditingSymbol: boolean,\n    public monomerSize: { width: number; height: number },\n    public scaledMonomerPosition: Vec2,\n  ) {\n    super(\n      node,\n      _firstNodeInChainPosition,\n      _monomerIndexInChain,\n      _isLastMonomerInChain,\n      _subChain,\n      _isEditingSymbol,\n      monomerSize,\n      scaledMonomerPosition,\n    );\n  }\n\n  get symbolToDisplay(): string {\n    return this.node.rnaBase instanceof AmbiguousMonomer\n      ? this.node.rnaBase.label\n      : this.node.rnaBase.monomerItem?.props.MonomerNaturalAnalogCode || '@';\n  }\n\n  protected drawCommonModification(node: Nucleoside | Nucleotide) {\n    if (node.rnaBase.isModification) {\n      this.backgroundElement?.attr(\n        'fill',\n        this.node.monomer.selected\n          ? this.isSequenceEditInRnaBuilderModeTurnedOn\n            ? '#41A8B2'\n            : '#3ACA6A'\n          : '#CAD3DD',\n      );\n    }\n\n    if (node.sugar.isModification) {\n      this.backgroundElement\n        ?.attr(\n          'stroke',\n          this.isSequenceEditInRnaBuilderModeTurnedOn ? '#24545A' : '#585858',\n        )\n        .attr('stroke-width', '1px');\n    }\n  }\n}\n","import { Nucleotide } from 'domain/entities';\nimport { D3SvgElementSelection } from 'application/render/types';\n\nimport { RNASequenceItemRenderer } from './RNASequenceItemRenderer';\n\nexport class NucleotideSequenceItemRenderer extends RNASequenceItemRenderer {\n  private phosphateModificationCircleElement?: D3SvgElementSelection<\n    SVGCircleElement,\n    void\n  >;\n\n  drawModification() {\n    const node = this.node as Nucleotide;\n\n    this.drawCommonModification(node);\n\n    if (this.phosphateModificationCircleElement) {\n      this.phosphateModificationCircleElement.remove();\n    }\n\n    if (node.phosphate?.isModification) {\n      this.phosphateModificationCircleElement = this.rootElement\n        ?.append('circle')\n        .attr('r', '3px')\n        .attr(\n          'fill',\n          this.isSequenceEditInRnaBuilderModeTurnedOn ? '#24545A' : '#585858',\n        )\n        .attr('cx', '10')\n        .attr('cy', '-16');\n    }\n  }\n}\n","import { Nucleoside, Phosphate } from 'domain/entities';\nimport { getNextMonomerInChain } from 'domain/helpers/monomers';\nimport { RNASequenceItemRenderer } from './RNASequenceItemRenderer';\nimport { D3SvgElementSelection } from 'application/render/types';\n\nexport class NucleosideSequenceItemRenderer extends RNASequenceItemRenderer {\n  private nucleosideCircleElement?: D3SvgElementSelection<\n    SVGCircleElement,\n    void\n  >;\n\n  protected drawModification() {\n    const node = this.node as Nucleoside;\n    const nextNode = getNextMonomerInChain(node.sugar);\n\n    this.drawCommonModification(node);\n\n    if (this.nucleosideCircleElement) {\n      this.nucleosideCircleElement.remove();\n    }\n\n    // show modification for not last Nucleoside\n    if (nextNode && !(nextNode instanceof Phosphate)) {\n      this.nucleosideCircleElement = this.rootElement\n        ?.append('circle')\n        .attr('r', '3px')\n        .attr(\n          'stroke',\n          this.isSequenceEditInRnaBuilderModeTurnedOn ? '#24545A' : '#585858',\n        )\n        .attr('stroke-width', '1px')\n        .attr('fill', 'none')\n        .attr('cx', '10')\n        .attr('cy', '-16');\n    }\n  }\n}\n","import { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\n\nexport class PeptideSequenceItemRenderer extends BaseSequenceItemRenderer {\n  get symbolToDisplay(): string {\n    return this.node.monomer.monomerItem.props.MonomerNaturalAnalogCode || '@';\n  }\n\n  protected drawModification() {}\n}\n","import { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\n\nexport class PhosphateSequenceItemRenderer extends BaseSequenceItemRenderer {\n  get symbolToDisplay(): string {\n    return 'p';\n  }\n\n  protected drawModification() {}\n}\n","import { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\n\nexport class UnresolvedMonomerSequenceItemRenderer extends BaseSequenceItemRenderer {\n  get symbolToDisplay(): string {\n    return '?';\n  }\n\n  protected drawModification(): void {\n    return undefined;\n  }\n}\n","import { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\nimport { NO_NATURAL_ANALOGUE } from 'domain/constants/monomers';\n\nexport class UnsplitNucleotideSequenceItemRenderer extends BaseSequenceItemRenderer {\n  get symbolToDisplay(): string {\n    const naturalAnalogue =\n      this.node.monomer.monomerItem.props.MonomerNaturalAnalogCode;\n\n    return naturalAnalogue && naturalAnalogue !== NO_NATURAL_ANALOGUE\n      ? naturalAnalogue\n      : '@';\n  }\n\n  protected drawModification(): void {\n    return undefined;\n  }\n}\n","import {\n  AmbiguousMonomerRenderer,\n  BaseMonomerRenderer,\n  ChemRenderer,\n  PeptideRenderer,\n  PhosphateRenderer,\n  RNABaseRenderer,\n  SugarRenderer,\n  UnresolvedMonomerRenderer,\n  UnsplitNucleotideRenderer,\n} from 'application/render/renderers';\nimport { MonomerOrAmbiguousType } from 'domain/types';\nimport {\n  AmbiguousMonomer,\n  Chem,\n  Peptide,\n  Phosphate,\n  RNABase,\n  Sugar,\n  UnresolvedMonomer,\n  UnsplitNucleotide,\n} from 'domain/entities';\nimport { KetMonomerClass } from 'application/formatters/types/ket';\nimport { isAmbiguousMonomerLibraryItem } from 'domain/helpers/monomers';\nimport {\n  rnaDnaNaturalAnalogues,\n  unknownNaturalAnalogues,\n} from 'domain/constants/monomers';\n\ntype DerivedClass<T> = new (...args: unknown[]) => T;\nexport const MONOMER_CONST = {\n  AMINO_ACID: 'AminoAcid',\n  PEPTIDE: 'PEPTIDE',\n  CHEM: 'CHEM',\n  RNA: 'RNA',\n  DNA: 'DNA',\n  MODDNA: 'MODDNA',\n  R: 'R', // states for Ribose\n  P: 'P', // states for Phosphate\n  SUGAR: 'SUGAR',\n  BASE: 'BASE',\n  PHOSPHATE: 'PHOSPHATE',\n};\n\ntype Monomer =\n  | typeof Chem\n  | typeof Sugar\n  | typeof Peptide\n  | typeof RNABase\n  | typeof Phosphate;\n\nexport const monomerFactory = (\n  monomer: MonomerOrAmbiguousType,\n): [\n  Monomer: Monomer,\n  MonomerRenderer: DerivedClass<BaseMonomerRenderer>,\n  ketMonomerClass: KetMonomerClass,\n] => {\n  let Monomer;\n  let MonomerRenderer;\n  let ketMonomerClass: KetMonomerClass;\n\n  if (isAmbiguousMonomerLibraryItem(monomer)) {\n    Monomer = AmbiguousMonomer;\n    MonomerRenderer = AmbiguousMonomerRenderer;\n    ketMonomerClass = AmbiguousMonomer.getMonomerClass(monomer.monomers);\n  } else if (monomer.props.unresolved) {\n    Monomer = UnresolvedMonomer;\n    MonomerRenderer = UnresolvedMonomerRenderer;\n    ketMonomerClass = KetMonomerClass.CHEM;\n  } else if (\n    monomer.props.MonomerClass === KetMonomerClass.RNA ||\n    monomer.props.MonomerClass === KetMonomerClass.DNA\n  ) {\n    Monomer = UnsplitNucleotide;\n    MonomerRenderer = UnsplitNucleotideRenderer;\n    ketMonomerClass = KetMonomerClass.RNA;\n  } else if (\n    monomer.props.MonomerClass === KetMonomerClass.AminoAcid ||\n    monomer.props.MonomerType === MONOMER_CONST.PEPTIDE\n  ) {\n    Monomer = Peptide;\n    MonomerRenderer = PeptideRenderer;\n    ketMonomerClass = KetMonomerClass.AminoAcid;\n  } else if (\n    monomer.props.MonomerClass === KetMonomerClass.Sugar ||\n    (monomer.props.MonomerType === MONOMER_CONST.RNA &&\n      monomer.props.MonomerNaturalAnalogCode === MONOMER_CONST.R)\n  ) {\n    Monomer = Sugar;\n    MonomerRenderer = SugarRenderer;\n    ketMonomerClass = KetMonomerClass.Sugar;\n  } else if (\n    monomer.props.MonomerClass === KetMonomerClass.Phosphate ||\n    (monomer.props.MonomerType === MONOMER_CONST.RNA &&\n      monomer.props.MonomerNaturalAnalogCode === MONOMER_CONST.P)\n  ) {\n    Monomer = Phosphate;\n    MonomerRenderer = PhosphateRenderer;\n    ketMonomerClass = KetMonomerClass.Phosphate;\n  } else if (\n    monomer.props.MonomerClass === KetMonomerClass.Base ||\n    (monomer.props.MonomerType === MONOMER_CONST.RNA &&\n      [...rnaDnaNaturalAnalogues, ...unknownNaturalAnalogues].includes(\n        monomer.props.MonomerNaturalAnalogCode,\n      ))\n  ) {\n    Monomer = RNABase;\n    MonomerRenderer = RNABaseRenderer;\n    ketMonomerClass = KetMonomerClass.Base;\n  } else {\n    Monomer = Chem;\n    MonomerRenderer = ChemRenderer;\n    ketMonomerClass = KetMonomerClass.CHEM;\n  }\n\n  return [Monomer, MonomerRenderer, ketMonomerClass];\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseOperation } from '../operations/base';\nimport { ReStruct } from '../../render';\n//\n// Undo/redo actions\n//\nexport class Action {\n  operations: BaseOperation[];\n\n  constructor(operations = []) {\n    this.operations = operations;\n  }\n\n  addOp(operation: BaseOperation, restruct?: ReStruct): BaseOperation {\n    if (!restruct || !operation.isDummy(restruct)) {\n      this.operations.push(operation);\n    }\n\n    return operation;\n  }\n\n  mergeWith(action) {\n    this.operations = this.operations.concat(action.operations);\n    return this;\n  }\n\n  // Perform action and return inverted one\n  perform(restruct: ReStruct): Action {\n    const action = new Action();\n    const sortedOperations = [...this.operations].sort(\n      (a, b) => a.priority - b.priority,\n    );\n    sortedOperations.forEach((operation) => {\n      const invertedOperation = operation.perform(restruct);\n      action.addOp(invertedOperation);\n    });\n\n    return action;\n  }\n\n  isDummy(restruct?: ReStruct) {\n    return (\n      this.operations.find(\n        // TODO [RB] the condition is always true for op.* operations\n        (operation) => (restruct ? !operation.isDummy(restruct) : true),\n      ) === undefined\n    );\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\n/**\n * @param restruct { ReStruct }\n * @param _events { Array<PipelineSubscription> }\n * @param bid { number }\n * @param template {{\n * \t\tmolecule: Struct,\n * \t\tbid: number\n *  }}\n * @param simpleFusing { Function }\n * @returns { Promise }\n */\nexport function fromAromaticTemplateOnBond(\n  restruct,\n  template,\n  bid,\n  _events,\n  simpleFusing,\n) {\n  const action = simpleFusing(restruct, template, bid);\n  return Promise.resolve(action);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Fragment, Vec2 } from 'domain/entities';\n\nconst SELECTION_DISTANCE_COEFFICIENT = 0.4;\nconst SELECTION_WITHIN_TEXT = 0;\n\nconst findMaps = {\n  atoms: findClosestAtom,\n  bonds: findClosestBond,\n  enhancedFlags: findClosestEnhancedFlag,\n  sgroupData: findClosestDataSGroupData,\n  sgroups: findClosestSGroup,\n  rxnArrows: findClosestRxnArrow,\n  rxnPluses: findClosestRxnPlus,\n  frags: findClosestFrag,\n  rgroups: findClosestRGroup,\n  simpleObjects: findClosestSimpleObject,\n  texts: findClosestText,\n};\n\nfunction findClosestText(restruct, cursorPosition) {\n  let minDist = null;\n  let ret = null;\n\n  restruct.texts.forEach((text, id) => {\n    const referencePoints = text.getReferencePoints(restruct);\n    const topX = referencePoints[0].x;\n    const topY = referencePoints[0].y;\n    const bottomX = referencePoints[2].x;\n    const bottomY = referencePoints[2].y;\n\n    const distances = [];\n\n    if (cursorPosition.x >= topX && cursorPosition.x <= bottomX) {\n      if (cursorPosition.y < topY) {\n        distances.push(topY - cursorPosition.y);\n      } else if (cursorPosition.y > bottomY) {\n        distances.push(cursorPosition.y - bottomY);\n      } else {\n        distances.push(cursorPosition.y - topY, bottomY - cursorPosition.y);\n      }\n    }\n\n    if (cursorPosition.x < topX && cursorPosition.y < topY) {\n      distances.push(Vec2.dist(new Vec2(topX, topY), cursorPosition));\n    }\n\n    if (cursorPosition.x > bottomX && cursorPosition.y > bottomY) {\n      distances.push(Vec2.dist(new Vec2(bottomX, bottomY), cursorPosition));\n    }\n\n    if (cursorPosition.x < topX && cursorPosition.y > bottomY) {\n      distances.push(Vec2.dist(new Vec2(topX, bottomY), cursorPosition));\n    }\n\n    if (cursorPosition.x > bottomX && cursorPosition.y < topY) {\n      distances.push(Vec2.dist(new Vec2(bottomX, topY), cursorPosition));\n    }\n\n    if (cursorPosition.y >= topY && cursorPosition.y <= bottomY) {\n      if (cursorPosition.x < topX) {\n        distances.push(topX - cursorPosition.x);\n      } else if (cursorPosition.x > bottomX) {\n        distances.push(cursorPosition.x - bottomX);\n      } else {\n        distances.push(SELECTION_WITHIN_TEXT);\n      }\n    }\n\n    const dist = Math.min(...distances);\n\n    if (dist < SELECTION_DISTANCE_COEFFICIENT && (!ret || dist < minDist)) {\n      minDist = dist;\n      ret = { id, dist: minDist };\n    }\n  });\n  return ret;\n}\n\nfunction findClosestSimpleObject(restruct, pos) {\n  let minDist = null;\n  let refPoint = null;\n  let ret = null;\n\n  restruct.simpleObjects.forEach((simpleObject, id) => {\n    const dist = simpleObject.calcDistance(\n      pos,\n      restruct.render.options.microModeScale,\n    );\n\n    if (dist.minDist < 0.3 && (!ret || dist.minDist < minDist)) {\n      minDist = dist.minDist;\n      refPoint = dist.refPoint;\n\n      ret = { id, dist: minDist, ref: refPoint };\n    }\n  });\n  return ret;\n}\n\nfunction findClosestAtom(restruct, pos, skip, minDist) {\n  let closestAtom = null;\n  const maxMinDist = SELECTION_DISTANCE_COEFFICIENT;\n  const skipId = skip && skip.map === 'atoms' ? skip.id : null;\n\n  minDist = minDist || maxMinDist;\n  minDist = Math.min(minDist, maxMinDist);\n\n  restruct.atoms.forEach((atom, aid) => {\n    if (aid === skipId) return;\n\n    const dist = Vec2.dist(pos, atom.a.pp);\n\n    if (dist < minDist) {\n      closestAtom = aid;\n      minDist = dist;\n    }\n  });\n\n  if (closestAtom !== null) {\n    return {\n      id: closestAtom,\n      dist: minDist,\n    };\n  }\n\n  return null;\n}\n\nfunction findClosestBond(restruct, pos, skip, minDist, scale) {\n  // eslint-disable-line max-params\n  let closestBond = null;\n  let closestBondCenter = null;\n  const maxMinDist = 0.8 * SELECTION_DISTANCE_COEFFICIENT;\n  const skipId = skip && skip.map === 'bonds' ? skip.id : null;\n\n  minDist = minDist || maxMinDist;\n  minDist = Math.min(minDist, maxMinDist);\n\n  let minCDist = minDist;\n\n  restruct.bonds.forEach((bond, bid) => {\n    if (bid === skipId) return;\n\n    const p1 = restruct.atoms.get(bond.b.begin).a.pp;\n    const p2 = restruct.atoms.get(bond.b.end).a.pp;\n\n    const mid = Vec2.lc2(p1, 0.5, p2, 0.5);\n    const cdist = Vec2.dist(pos, mid);\n\n    if (cdist < minCDist) {\n      minCDist = cdist;\n      closestBondCenter = bid;\n    }\n  });\n\n  restruct.bonds.forEach((bond, bid) => {\n    if (bid === skipId) return;\n\n    const hb = restruct.molecule.halfBonds.get(bond.b.hb1);\n    const dir = hb.dir;\n    const norm = hb.norm;\n\n    const p1 = restruct.atoms.get(bond.b.begin).a.pp;\n    const p2 = restruct.atoms.get(bond.b.end).a.pp;\n\n    const inStripe =\n      Vec2.dot(pos.sub(p1), dir) * Vec2.dot(pos.sub(p2), dir) < 0;\n\n    if (inStripe) {\n      const dist = Math.abs(Vec2.dot(pos.sub(p1), norm));\n\n      if (dist < minDist) {\n        closestBond = bid;\n        minDist = dist;\n      }\n    }\n  });\n\n  if (closestBondCenter !== null) {\n    return {\n      id: closestBondCenter,\n      dist: minCDist,\n    };\n  }\n\n  if (\n    closestBond !== null &&\n    minDist > SELECTION_DISTANCE_COEFFICIENT * scale\n  ) {\n    return {\n      id: closestBond,\n      dist: minDist,\n    };\n  }\n\n  return null;\n}\n\nfunction findClosestEnhancedFlag(restruct, pos, skip, _minDist, options) {\n  let minDist;\n  let ret = null;\n  restruct.enhancedFlags.forEach((item, id) => {\n    const fragment = restruct.molecule.frags.get(id);\n    if (!fragment || !fragment.enhancedStereoFlag || !options.showStereoFlags)\n      return;\n\n    const p = fragment.stereoFlagPosition\n      ? new Vec2(fragment.stereoFlagPosition.x, fragment.stereoFlagPosition.y)\n      : Fragment.getDefaultStereoFlagPosition(restruct.molecule, id);\n    if (!p || Math.abs(pos.x - p.x) >= 1.0) return;\n\n    const dist = Math.abs(pos.y - p.y);\n\n    if (dist < 0.3 && (!ret || dist < minDist)) {\n      minDist = dist;\n      ret = { id, dist: minDist };\n    }\n  });\n  return ret;\n}\n\nfunction findClosestDataSGroupData(restruct, pos) {\n  let minDist = null;\n  let ret = null;\n\n  restruct.sgroupData.forEach((item, id) => {\n    if (item.sgroup.type !== 'DAT') throw new Error('Data group expected');\n\n    if (item.sgroup.data.fieldName !== 'MRV_IMPLICIT_H') {\n      const box = item.sgroup.dataArea;\n      const inBox =\n        box.p0.y < pos.y &&\n        box.p1.y > pos.y &&\n        box.p0.x < pos.x &&\n        box.p1.x > pos.x;\n      const xDist = Math.min(\n        Math.abs(box.p0.x - pos.x),\n        Math.abs(box.p1.x - pos.x),\n      );\n\n      if (inBox && (ret === null || xDist < minDist)) {\n        ret = { id, dist: xDist };\n        minDist = xDist;\n      }\n    }\n  });\n\n  return ret;\n}\n\nfunction findClosestFrag(restruct, pos, skip, minDist, scale) {\n  minDist = Math.min(\n    minDist || SELECTION_DISTANCE_COEFFICIENT,\n    SELECTION_DISTANCE_COEFFICIENT,\n  );\n\n  const struct = restruct.molecule;\n\n  const closestAtom = findClosestAtom(restruct, pos, skip, minDist);\n\n  if (closestAtom) {\n    return {\n      id: struct.atoms.get(closestAtom.id).fragment,\n      dist: closestAtom.dist,\n    };\n  }\n\n  const closestBond = findClosestBond(restruct, pos, skip, minDist, scale);\n\n  if (closestBond) {\n    const atomId = struct.bonds.get(closestBond.id).begin;\n    return {\n      id: struct.atoms.get(atomId).fragment,\n      dist: closestBond.dist,\n    };\n  }\n\n  return null;\n}\n\nfunction findClosestRGroup(restruct, pos, skip, minDist) {\n  minDist = Math.min(\n    minDist || SELECTION_DISTANCE_COEFFICIENT,\n    SELECTION_DISTANCE_COEFFICIENT,\n  );\n\n  let ret = null;\n\n  restruct.rgroups.forEach((rgroup, rgid) => {\n    if (\n      rgid !== skip &&\n      rgroup.labelBox &&\n      rgroup.labelBox.contains(pos, 0.5)\n    ) {\n      const dist = Vec2.dist(rgroup.labelBox.centre(), pos);\n\n      if (!ret || dist < minDist) {\n        minDist = dist;\n        ret = { id: rgid, dist: minDist };\n      }\n    }\n  });\n\n  return ret;\n}\n\nfunction findClosestRxnArrow(restruct, pos) {\n  let minDist = null;\n  let refPoint = null;\n  let ret = null;\n\n  restruct.rxnArrows.forEach((rxnArrow, id) => {\n    const dist = rxnArrow.calcDistance(\n      pos,\n      restruct.render.options.microModeScale,\n    );\n\n    if (dist.minDist < 0.3 && (!ret || dist.minDist < minDist)) {\n      minDist = dist.minDist;\n      refPoint = dist.refPoint;\n\n      ret = { id, dist: minDist, ref: refPoint };\n    }\n  });\n  return ret;\n}\n\nfunction findClosestRxnPlus(restruct, pos) {\n  let minDist = null;\n  let ret = null;\n\n  restruct.rxnPluses.forEach((plus, id) => {\n    const p = plus.item.pp;\n    const dist = Math.max(Math.abs(pos.x - p.x), Math.abs(pos.y - p.y));\n\n    if (dist < 0.3 && (!ret || dist < minDist)) {\n      minDist = dist;\n      ret = { id, dist: minDist };\n    }\n  });\n\n  return ret;\n}\n\nfunction findClosestSGroup(restruct, pos) {\n  let ret = null;\n  let minDist = SELECTION_DISTANCE_COEFFICIENT;\n\n  restruct.molecule.sgroups.forEach((sg, sgid) => {\n    if (sg.isContracted()) {\n      const { position } = sg.getContractedPosition(restruct.molecule);\n      const d = sg.bracketDirection;\n      const n = d.rotateSC(1, 0);\n      const pg = new Vec2(Vec2.dot(pos, d), Vec2.dot(pos, n));\n      const shift = new Vec2(0.625, 0.625);\n      const box = {\n        p0: Vec2.diff(position, shift),\n        p1: Vec2.sum(position, shift),\n      };\n\n      const inBox =\n        box.p0.y < pg.y &&\n        box.p1.y > pg.y &&\n        box.p0.x < pg.x &&\n        box.p1.x > pg.x;\n      const xDist = Math.min(\n        Math.abs(box.p0.x - pg.x),\n        Math.abs(box.p1.x - pg.x),\n      );\n\n      if (inBox && (ret === null || xDist < minDist)) {\n        ret = sgid;\n        minDist = xDist;\n      }\n    } else {\n      const d = sg.bracketDirection;\n      const n = d.rotateSC(1, 0);\n      const pg = new Vec2(Vec2.dot(pos, d), Vec2.dot(pos, n));\n\n      sg.areas.forEach((box) => {\n        const inBox =\n          box.p0.y < pg.y &&\n          box.p1.y > pg.y &&\n          box.p0.x < pg.x &&\n          box.p1.x > pg.x;\n        const xDist = Math.min(\n          Math.abs(box.p0.x - pg.x),\n          Math.abs(box.p1.x - pg.x),\n        );\n\n        if (inBox && (ret === null || xDist < minDist)) {\n          ret = sgid;\n          minDist = xDist;\n        }\n      });\n    }\n  });\n\n  if (ret !== null) {\n    return {\n      id: ret,\n      dist: minDist,\n    };\n  }\n\n  return null;\n}\n\nfunction findClosestItem(restruct, pos, maps, skip, scale) {\n  // eslint-disable-line max-params\n  maps = maps || Object.keys(findMaps);\n\n  return maps.reduce((res, mp) => {\n    const minDist = res ? res.dist : null;\n    const item = findMaps[mp](restruct, pos, skip, minDist, scale);\n\n    if (item !== null && (res === null || item.dist < res.dist)) {\n      const { id, dist, ...other } = item;\n      return {\n        map: mp,\n        id,\n        dist,\n        ...other,\n      };\n    }\n\n    return res;\n  }, null);\n}\n\n/**\n * @param restruct { ReStruct }\n * @param selected { object }\n * @param maps { Array<string> }\n * @param scale { number }\n * @return {{\n * \t\tatoms: Map<number, number>?\n * \t\tbonds: Map<number, number>?\n * }}\n */\nfunction findCloseMerge(restruct, selected, maps = ['atoms', 'bonds'], scale) {\n  const pos = {\n    atoms: new Map(), // aid -> position\n    bonds: new Map(), // bid -> position\n  };\n\n  const struct = restruct.molecule;\n\n  selected.atoms.forEach((aid) => {\n    pos.atoms.set(aid, struct.atoms.get(aid).pp);\n  });\n\n  selected.bonds.forEach((bid) => {\n    const bond = struct.bonds.get(bid);\n    pos.bonds.set(\n      bid,\n      Vec2.lc2(\n        struct.atoms.get(bond.begin).pp,\n        0.5,\n        struct.atoms.get(bond.end).pp,\n        0.5,\n      ),\n    );\n  });\n\n  const result = {};\n  maps.forEach((mp) => {\n    result[mp] = Array.from(pos[mp].keys()).reduce((res, srcId) => {\n      const skip = { map: mp, id: srcId };\n      const item = findMaps[mp](\n        restruct,\n        pos[mp].get(srcId),\n        skip,\n        null,\n        scale,\n      );\n\n      if (item && !selected[mp].includes(item.id)) res.set(srcId, item.id);\n\n      return res;\n    }, new Map());\n  });\n\n  return result;\n}\n\nexport default {\n  atom: findClosestAtom, // used in Actions\n  item: findClosestItem,\n  merge: findCloseMerge,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  Atom,\n  AtomAttributes,\n  AtomQueryProperties,\n  Bond,\n  Struct,\n  Vec2,\n} from 'domain/entities';\n\nimport closest from '../shared/closest';\nimport { difference } from 'lodash';\nimport { ReStruct } from 'application/render';\nimport { selectionKeys } from '../shared/constants';\nimport { EditorSelection } from '../editor.types';\nexport type AtomType = 'single' | 'list' | 'pseudo';\nexport type AtomAttributeName = keyof AtomAttributes;\nexport type AtomQueryPropertiesName = keyof AtomQueryProperties;\nexport type AtomAllAttributeName = AtomAttributeName | AtomQueryPropertiesName;\nexport type AtomAllAttributeValue =\n  | AtomAttributes[AtomAttributeName]\n  | AtomQueryProperties[AtomQueryPropertiesName];\n\nexport function atomGetAttr(\n  restruct: ReStruct,\n  aid: number,\n  name: AtomAttributeName,\n) {\n  const atom = restruct.molecule.atoms.get(aid);\n  if (!atom) return null;\n  return atom[name];\n}\n\nexport function atomGetDegree(restruct, aid) {\n  return restruct.atoms.get(aid).a.neighbors.length;\n}\n\nexport function atomGetSGroups(restruct, atomId: number): number[] {\n  return Array.from(restruct.atoms.get(atomId).a.sgs);\n}\n\nexport function atomGetPos(restruct, id) {\n  return restruct.molecule.atoms.get(id).pp;\n}\n\nexport function findStereoAtoms(\n  struct: Struct,\n  atomIds: number[] | undefined,\n): number[] {\n  let monomerAtoms = 0;\n  if (struct.sgroups && struct.sgroups.size > 0) {\n    struct.sgroups.forEach((sgroup) => {\n      monomerAtoms += sgroup.atoms.length;\n    });\n  }\n\n  // no atoms, or only monomers present\n  if (!atomIds || struct.atoms.size === monomerAtoms) {\n    return [] as number[];\n  }\n\n  return atomIds.filter((atomId: number) => {\n    const atom = struct.atoms.get(atomId);\n    if (atom?.stereoLabel !== null) {\n      return true;\n    }\n    const connectedBonds = Atom.getConnectedBondIds(struct, atomId);\n    const connectedWithStereoBond = connectedBonds.some((bondId: number) => {\n      const bond = struct.bonds.get(bondId);\n      return bond?.begin === atomId && bond?.stereo;\n    });\n    return connectedWithStereoBond;\n  });\n}\n\nexport function structSelection(struct): EditorSelection {\n  return selectionKeys.reduce((res, key) => {\n    res[key] = Array.from(struct[key].keys());\n    return res;\n  }, {});\n}\n\nexport function formatSelection(selection): any {\n  return selectionKeys.reduce((res, key) => {\n    res[key] = selection[key] || [];\n\n    return res;\n  }, {});\n}\n\n// Get new atom id/label and pos for bond being added to existing atom\nexport function atomForNewBond(restruct, id, bond?) {\n  // eslint-disable-line max-statements\n  const neighbours: Array<{ id: number; v: Vec2 }> = [];\n  const pos = atomGetPos(restruct, id);\n  const atomNeighbours = restruct.molecule.atomGetNeighbors(id);\n\n  const prevBondId = restruct.molecule.findBondId(\n    id,\n    atomNeighbours.length ? atomNeighbours[0]?.aid : undefined,\n  );\n  const prevBond = restruct.molecule.bonds.get(prevBondId);\n  const prevBondType = prevBond ? prevBond.type : bond ? bond.type : 1;\n\n  restruct.molecule.atomGetNeighbors(id).forEach((nei) => {\n    const neiPos = atomGetPos(restruct, nei.aid);\n\n    if (Vec2.dist(pos, neiPos) < 0.1) return;\n\n    neighbours.push({ id: nei.aid, v: Vec2.diff(neiPos, pos) });\n  });\n\n  neighbours.sort(\n    (nei1, nei2) =>\n      Math.atan2(nei1.v.y, nei1.v.x) - Math.atan2(nei2.v.y, nei2.v.x),\n  );\n\n  let i;\n  let maxI = 0;\n  let angle;\n  let maxAngle = 0;\n\n  // TODO: impove layout: tree, ...\n\n  for (i = 0; i < neighbours.length; i++) {\n    angle = Vec2.angle(\n      neighbours[i].v,\n      neighbours[(i + 1) % neighbours.length].v,\n    );\n\n    if (angle < 0) angle += 2 * Math.PI;\n\n    if (angle > maxAngle) {\n      maxI = i;\n      maxAngle = angle;\n    }\n  }\n\n  let v = new Vec2(1, 0);\n\n  if (neighbours.length > 0) {\n    if (neighbours.length === 1) {\n      maxAngle = -((4 * Math.PI) / 3);\n\n      // zig-zag\n      const nei = restruct.molecule.atomGetNeighbors(id)[0];\n      if (atomGetDegree(restruct, nei.aid) > 1) {\n        const neiNeighbours: Array<any> = [];\n        const neiPos = atomGetPos(restruct, nei.aid);\n        const neiV = Vec2.diff(pos, neiPos);\n        const neiAngle = Math.atan2(neiV.y, neiV.x);\n\n        restruct.molecule.atomGetNeighbors(nei.aid).forEach((neiNei) => {\n          const neiNeiPos = atomGetPos(restruct, neiNei.aid);\n\n          if (neiNei.bid === nei.bid || Vec2.dist(neiPos, neiNeiPos) < 0.1) {\n            return;\n          }\n\n          const vDiff = Vec2.diff(neiNeiPos, neiPos);\n          let ang = Math.atan2(vDiff.y, vDiff.x) - neiAngle;\n\n          if (ang < 0) ang += 2 * Math.PI;\n\n          neiNeighbours.push(ang);\n        });\n        neiNeighbours.sort((nei1, nei2) => nei1 - nei2);\n\n        if (\n          neiNeighbours[0] <= Math.PI * 1.01 &&\n          neiNeighbours[neiNeighbours.length - 1] <= 1.01 * Math.PI\n        ) {\n          maxAngle *= -1;\n        }\n      }\n    }\n\n    const shallBe180DegToPrevBond =\n      (neighbours.length === 1 &&\n        prevBondType === bond?.type &&\n        (bond?.type === Bond.PATTERN.TYPE.DOUBLE ||\n          bond?.type === Bond.PATTERN.TYPE.TRIPLE)) ||\n      (prevBondType === Bond.PATTERN.TYPE.SINGLE &&\n        bond?.type === Bond.PATTERN.TYPE.TRIPLE) ||\n      (prevBondType === Bond.PATTERN.TYPE.TRIPLE &&\n        bond?.type === Bond.PATTERN.TYPE.SINGLE);\n\n    if (shallBe180DegToPrevBond) {\n      const prevBondAngle = restruct.molecule.bonds.get(prevBondId).angle;\n      if (prevBondAngle > -90 && prevBondAngle < 90 && neighbours[0].v.x > 0) {\n        angle = (prevBondAngle * Math.PI) / 180 + Math.PI;\n      } else {\n        angle = (prevBondAngle * Math.PI) / 180;\n      }\n    } else {\n      angle =\n        maxAngle / 2 + Math.atan2(neighbours[maxI].v.y, neighbours[maxI].v.x);\n    }\n\n    v = v.rotate(angle);\n  }\n\n  v.add_(pos); // eslint-disable-line no-underscore-dangle\n\n  let a: any = closest.atom(restruct, v, null, 0.1);\n  a = a === null ? { label: 'C' } : a.id;\n\n  return { atom: a, pos: v };\n}\n\nexport function getRelSGroupsBySelection(\n  struct: Struct,\n  selectedAtoms: number[],\n) {\n  return struct.sgroups.filter(\n    (_sgid, sg) =>\n      !sg.data.attached &&\n      !sg.data.absolute &&\n      difference(sg.atoms, selectedAtoms).length === 0,\n  );\n}\n\nexport function isAttachmentBond(\n  { begin, end }: Bond,\n  selection: EditorSelection,\n) {\n  if (!selection.atoms) {\n    return false;\n  }\n  const isBondStartsInSelectionAndEndsOutside =\n    selection.atoms.includes(begin) && !selection.atoms.includes(end);\n  const isBondEndsInSelectionAndStartsOutside =\n    selection.atoms.includes(end) && !selection.atoms.includes(begin);\n  return (\n    isBondStartsInSelectionAndEndsOutside ||\n    isBondEndsInSelectionAndStartsOutside\n  );\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { RGroupAttr, RGroupFragment, UpdateIfThen } from '../operations';\n\nimport { Action } from './action';\n\nexport function fromRGroupAttrs(restruct, id, attrs) {\n  const action = new Action();\n\n  Object.keys(attrs).forEach((key) => {\n    action.addOp(new RGroupAttr(id, key, attrs[key]));\n  });\n\n  return action.perform(restruct);\n}\n\nexport function fromRGroupFragment(restruct, rgidNew, frid) {\n  const action = new Action();\n  action.addOp(new RGroupFragment(rgidNew, frid));\n\n  return action.perform(restruct);\n}\n\nexport function fromUpdateIfThen(\n  restruct,\n  rgidNew,\n  rgidOld,\n  skipRgids: Array<number> = [],\n) {\n  const action = new Action();\n  if (!restruct.molecule.rgroups.get(rgidOld)) {\n    action.addOp(new UpdateIfThen(rgidNew, rgidOld, skipRgids));\n  }\n\n  return action.perform(restruct);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  AtomAttr,\n  AtomMove,\n  SGroupAddToHierarchy,\n  SGroupAtomAdd,\n  SGroupAtomRemove,\n  SGroupAttr,\n  SGroupCreate,\n  SGroupDataMove,\n  SGroupDelete,\n  SGroupRemoveFromHierarchy,\n} from '../operations';\nimport { Pile, SGroup, SGroupAttachmentPoint, Vec2 } from 'domain/entities';\nimport { atomGetAttr, atomGetDegree, atomGetSGroups } from './utils';\n\nimport { Action } from './action';\nimport { SgContexts } from '..';\nimport { uniq } from 'lodash/fp';\nimport { fromAtomsAttrs } from './atom';\nimport {\n  SGroupAttachmentPointAdd,\n  SGroupAttachmentPointRemove,\n} from 'application/editor/operations/sgroup/sgroupAttachmentPoints';\nimport Restruct from 'application/render/restruct/restruct';\nimport assert from 'assert';\nimport { MonomerMicromolecule } from 'domain/entities/monomerMicromolecule';\nimport { isNumber } from 'lodash';\n\nexport function fromSeveralSgroupAddition(\n  restruct: Restruct,\n  type,\n  atoms,\n  attrs,\n) {\n  const attachmentPoints = [];\n\n  const descriptors = attrs.fieldValue;\n  if (typeof descriptors === 'string' || type !== 'DAT') {\n    return fromSgroupAddition(\n      restruct,\n      type,\n      atoms,\n      attrs,\n      restruct.molecule.sgroups.newId(),\n      attachmentPoints,\n    );\n  }\n\n  return descriptors.reduce((acc, fValue) => {\n    const localAttrs = Object.assign({}, attrs);\n    localAttrs.fieldValue = fValue;\n\n    return acc.mergeWith(\n      fromSgroupAddition(\n        restruct,\n        type,\n        atoms,\n        localAttrs,\n        restruct.molecule.sgroups.newId(),\n        attachmentPoints,\n      ),\n    );\n  }, new Action());\n}\n\nexport function fromSgroupAttrs(restruct, id, attrs) {\n  const action = new Action();\n\n  Object.keys(attrs).forEach((key) => {\n    action.addOp(new SGroupAttr(id, key, attrs[key]));\n  });\n\n  return action.perform(restruct);\n}\n\nexport function setExpandSGroup(\n  restruct: Restruct,\n  sgid: number,\n  attrs: { expanded: boolean },\n) {\n  const action = new Action();\n\n  Object.keys(attrs).forEach((key) => {\n    action.addOp(new SGroupAttr(sgid, key, attrs[key]));\n  });\n\n  const sgroup = restruct.molecule.sgroups.get(sgid);\n  assert(sgroup != null);\n  const atoms = SGroup.getAtoms(restruct, sgroup);\n\n  atoms.forEach((aid) => {\n    action.mergeWith(\n      fromAtomsAttrs(restruct, aid, restruct.atoms.get(aid)?.a, false),\n    );\n  });\n\n  return action.perform(restruct);\n}\n\nexport function setExpandMonomerSGroup(\n  restruct: Restruct,\n  sgid: number,\n  attrs: { expanded: boolean },\n) {\n  const action = new Action();\n\n  Object.keys(attrs).forEach((key) => {\n    action.addOp(new SGroupAttr(sgid, key, attrs[key]));\n  });\n\n  const sgroup = restruct.molecule.sgroups.get(sgid);\n  assert(sgroup != null);\n\n  const sGroupAtoms = SGroup.getAtoms(restruct, sgroup);\n  const attachmentPoints = sgroup.getAttachmentPoints();\n  const bondsToOutside = restruct.molecule.bonds.filter((_, bond) => {\n    return (\n      (sGroupAtoms.includes(bond.begin) && !sGroupAtoms.includes(bond.end)) ||\n      (sGroupAtoms.includes(bond.end) && !sGroupAtoms.includes(bond.begin))\n    );\n  });\n\n  const attachmentAtomsFromOutside: number[] = [];\n\n  for (const bond of bondsToOutside.values()) {\n    if (\n      attachmentPoints.some(\n        (attachmentPoint) => attachmentPoint.atomId === bond.begin,\n      )\n    ) {\n      attachmentAtomsFromOutside.push(bond.end);\n    } else {\n      attachmentAtomsFromOutside.push(bond.begin);\n    }\n  }\n\n  const sGroupBBox = SGroup.getObjBBox(sGroupAtoms, restruct.molecule);\n  const sGroupWidth = sGroupBBox.p1.x - sGroupBBox.p0.x;\n  const sGroupHeight = sGroupBBox.p1.y - sGroupBBox.p0.y;\n\n  const visitedAtoms = new Set<number>();\n  const visitedSGroups = new Set<number>();\n\n  const atomsToMove = new Map<number, number[]>();\n  const sGroupsToMove = new Map<number, number[]>();\n\n  const prepareSubStructure = (atomId: number, subStructureKey: number) => {\n    if (visitedAtoms.has(atomId)) {\n      return;\n    }\n    visitedAtoms.add(atomId);\n\n    const atomSGroups = restruct.atoms.get(atomId)?.a.sgs;\n    const atomInSGroup = atomSGroups?.size && atomSGroups.size > 0;\n    if (atomInSGroup) {\n      for (const anotherSGroupId of atomSGroups.values()) {\n        if (visitedSGroups.has(anotherSGroupId) || anotherSGroupId === sgid) {\n          continue;\n        }\n        visitedSGroups.add(anotherSGroupId);\n\n        const anotherSGroup = restruct.molecule.sgroups.get(anotherSGroupId);\n        if (!anotherSGroup) {\n          continue;\n        }\n\n        const previousArray = sGroupsToMove.get(subStructureKey) ?? [];\n        sGroupsToMove.set(\n          subStructureKey,\n          previousArray.concat(anotherSGroupId),\n        );\n      }\n    }\n\n    const atom = restruct.atoms.get(atomId);\n    if (atom) {\n      const previousArray = atomsToMove.get(subStructureKey) ?? [];\n      atomsToMove.set(subStructureKey, previousArray.concat(atomId));\n\n      atom.a.neighbors.forEach((halfBondId) => {\n        const neighborAtomId =\n          restruct.molecule?.halfBonds?.get(halfBondId)?.end;\n        if (\n          neighborAtomId === undefined ||\n          sGroupAtoms.includes(neighborAtomId)\n        ) {\n          return;\n        }\n\n        prepareSubStructure(neighborAtomId, subStructureKey);\n      });\n    }\n  };\n\n  attachmentAtomsFromOutside.forEach((atomId, index) => {\n    prepareSubStructure(atomId, index);\n  });\n\n  atomsToMove.forEach((atomIds, key) => {\n    const sGroups = sGroupsToMove.get(key) ?? [];\n    const subStructBBox = SGroup.getObjBBox(atomIds, restruct.molecule);\n    const subStructCenter = new Vec2(\n      subStructBBox.p0.x + subStructBBox.p1.x / 2,\n      subStructBBox.p0.y + subStructBBox.p1.y / 2,\n    );\n    const sGroupCenter = new Vec2(\n      sGroupBBox.p0.x + sGroupBBox.p1.x / 2,\n      sGroupBBox.p0.y + sGroupBBox.p1.y / 2,\n    );\n    const direction = subStructCenter.sub(sGroupCenter).normalized();\n    const moveVector = new Vec2(\n      (direction.x * sGroupHeight) / 4,\n      (direction.y * sGroupWidth) / 4,\n    );\n\n    const finalMoveVector = attrs.expanded ? moveVector : moveVector.negated();\n\n    atomIds.forEach((atomId) => {\n      action.addOp(new AtomMove(atomId, finalMoveVector));\n    });\n    sGroups.forEach((sGroupId) => {\n      action.addOp(new SGroupDataMove(sGroupId, finalMoveVector));\n    });\n  });\n\n  sGroupAtoms.forEach((aid) => {\n    action.mergeWith(\n      fromAtomsAttrs(restruct, aid, restruct.atoms.get(aid)?.a, false),\n    );\n  });\n\n  return action.perform(restruct);\n}\n\n// todo delete after supporting expand - collapse for 2 attachment points\nexport function expandSGroupWithMultipleAttachmentPoint(restruct) {\n  const action = new Action();\n\n  const struct = restruct.molecule;\n\n  struct.sgroups.forEach((sgroup: SGroup) => {\n    if (\n      sgroup.isNotContractible(struct) &&\n      !(sgroup instanceof MonomerMicromolecule)\n    ) {\n      action.mergeWith(\n        setExpandSGroup(restruct, sgroup.id, {\n          expanded: true,\n        }),\n      );\n    }\n  });\n\n  return action;\n}\n\nexport function sGroupAttributeAction(id, attrs) {\n  const action = new Action();\n\n  Object.keys(attrs).forEach((key) => {\n    action.addOp(new SGroupAttr(id, key, attrs[key]));\n  });\n\n  return action;\n}\n\nexport function fromSgroupDeletion(restruct, id, needPerform = true) {\n  let action = new Action();\n  const struct = restruct.molecule;\n\n  const sG = restruct.sgroups.get(id).item;\n\n  if (sG.type === 'SRU') {\n    struct.sGroupsRecalcCrossBonds();\n\n    sG.neiAtoms.forEach((aid) => {\n      if (atomGetAttr(restruct, aid, 'label') === '*') {\n        action.addOp(new AtomAttr(aid, 'label', 'C'));\n      }\n    });\n  }\n\n  const sg = struct.sgroups.get(id) as SGroup;\n  const atoms = SGroup.getAtoms(struct, sg);\n  const attrs = sg.getAttrs();\n\n  action.addOp(new SGroupRemoveFromHierarchy(id));\n\n  atoms.forEach((atom) => {\n    action.addOp(new SGroupAtomRemove(id, atom));\n  });\n\n  sg.getAttachmentPoints().forEach((attachmentPoint) => {\n    action.addOp(new SGroupAttachmentPointRemove(id, attachmentPoint));\n  });\n\n  action.addOp(new SGroupDelete(id));\n\n  if (needPerform) {\n    action = action.perform(restruct);\n  }\n\n  action.mergeWith(sGroupAttributeAction(id, attrs));\n\n  return action;\n}\n\nexport function fromSgroupAddition(\n  restruct,\n  type,\n  atoms,\n  attrs,\n  sgid,\n  attachmentPoints,\n  pp?,\n  expanded?,\n  name?,\n  oldSgroup?,\n) {\n  // eslint-disable-line\n  let action = new Action();\n\n  // TODO: shoud the id be generated when OpSGroupCreate is executed?\n  //      if yes, how to pass it to the following operations?\n  sgid = sgid - 0 === sgid ? sgid : restruct.molecule.sgroups.newId();\n\n  if (type === 'SUP') {\n    action.addOp(new SGroupCreate(sgid, type, pp, expanded, name, oldSgroup));\n  } else {\n    action.addOp(new SGroupCreate(sgid, type, pp));\n  }\n\n  atoms.forEach((atom) => {\n    action.addOp(new SGroupAtomAdd(sgid, atom));\n  });\n\n  if (type === 'SUP') {\n    attachmentPoints.forEach((attachmentPoint) => {\n      action.addOp(new SGroupAttachmentPointAdd(sgid, attachmentPoint));\n    });\n  }\n\n  action.addOp(\n    type !== 'DAT'\n      ? new SGroupAddToHierarchy(sgid)\n      : new SGroupAddToHierarchy(sgid, -1, []),\n  );\n\n  action = action.perform(restruct);\n\n  if (type === 'SRU') {\n    restruct.molecule.sGroupsRecalcCrossBonds();\n    let asteriskAction = new Action();\n\n    restruct.sgroups.get(sgid).item.neiAtoms.forEach((aid) => {\n      const plainCarbon = restruct.atoms.get(aid).a.isPlainCarbon();\n\n      if (atomGetDegree(restruct, aid) === 1 && plainCarbon) {\n        asteriskAction.addOp(new AtomAttr(aid, 'label', '*'));\n      }\n    });\n\n    asteriskAction = asteriskAction.perform(restruct);\n    asteriskAction.mergeWith(action);\n    action = asteriskAction;\n  }\n\n  return fromSgroupAttrs(restruct, sgid, attrs).mergeWith(action);\n}\n\nexport function fromSgroupAction(\n  context,\n  restruct,\n  newSg,\n  sourceAtoms,\n  selection,\n) {\n  if (context === SgContexts.Bond) {\n    return fromBondAction(restruct, newSg, sourceAtoms, selection);\n  }\n\n  const atomsFromBonds = getAtomsFromBonds(restruct.molecule, selection.bonds);\n  const newSourceAtoms = uniq(sourceAtoms.concat(atomsFromBonds));\n\n  if (context === SgContexts.Fragment) {\n    return fromGroupAction(\n      restruct,\n      newSg,\n      newSourceAtoms,\n      Array.from(restruct.atoms.keys()),\n    );\n  }\n\n  if (context === SgContexts.Multifragment) {\n    return fromMultiFragmentAction(restruct, newSg, newSourceAtoms);\n  }\n\n  if (context === SgContexts.Group) {\n    return fromGroupAction(restruct, newSg, newSourceAtoms, newSourceAtoms);\n  }\n\n  if (context === SgContexts.Atom) {\n    return fromAtomAction(restruct, newSg, newSourceAtoms);\n  }\n\n  if (SGroup.isQuerySGroup(newSg)) {\n    return fromQueryComponentSGroupAction(\n      restruct,\n      newSg,\n      newSourceAtoms as number[],\n      Array.from(restruct.atoms.keys()),\n    );\n  }\n\n  return {\n    action: fromSeveralSgroupAddition(\n      restruct,\n      newSg.type,\n      newSourceAtoms,\n      newSg.attrs,\n    ),\n  };\n}\n\nfunction fromAtomAction(restruct, newSg, sourceAtoms) {\n  return sourceAtoms.reduce(\n    (acc, atom) => {\n      acc.action = acc.action.mergeWith(\n        fromSeveralSgroupAddition(restruct, newSg.type, [atom], newSg.attrs),\n      );\n      return acc;\n    },\n    {\n      action: new Action(),\n      selection: {\n        atoms: sourceAtoms,\n        bonds: [],\n      },\n    },\n  );\n}\n\nfunction fromQueryComponentSGroupAction(\n  restruct: Restruct,\n  newSg: {\n    type: string;\n    attrs: object;\n  },\n  sourceAtoms: number[],\n  targetAtoms: number[],\n) {\n  const selection: {\n    atoms: number[];\n    bonds: number[];\n  } = {\n    atoms: [],\n    bonds: [],\n  };\n\n  const allFragments = new Pile(\n    sourceAtoms.map((aid) => restruct.atoms.get(aid)?.a.fragment),\n  );\n\n  Array.from(allFragments).forEach((fragId) => {\n    const atoms = targetAtoms.reduce((res: number[], aid: number) => {\n      const atom = restruct.atoms.get(aid)?.a;\n      if (fragId === atom?.fragment) res.push(aid);\n\n      return res;\n    }, []);\n\n    const bonds = getAtomsBondIds(restruct.molecule, atoms) as number[];\n\n    selection.atoms = selection.atoms.concat(atoms);\n    selection.bonds = selection.bonds.concat(bonds);\n  });\n\n  return {\n    action: fromSeveralSgroupAddition(\n      restruct,\n      newSg.type,\n      selection.atoms,\n      newSg.attrs,\n    ),\n    selection,\n  };\n}\n\nfunction fromGroupAction(restruct, newSg, sourceAtoms, targetAtoms) {\n  const allFragments = new Pile(\n    sourceAtoms.map((aid) => restruct.atoms.get(aid).a.fragment),\n  );\n\n  return Array.from(allFragments).reduce(\n    (acc, fragId) => {\n      const atoms = targetAtoms.reduce((res, aid) => {\n        const atom = restruct.atoms.get(aid).a;\n        if (fragId === atom.fragment) res.push(aid);\n\n        return res;\n      }, []);\n\n      const bonds = getAtomsBondIds(restruct.molecule, atoms);\n\n      acc.action = acc.action.mergeWith(\n        fromSeveralSgroupAddition(restruct, newSg.type, atoms, newSg.attrs),\n      );\n\n      acc.selection.atoms = acc.selection.atoms.concat(atoms);\n      acc.selection.bonds = acc.selection.bonds.concat(bonds);\n\n      return acc;\n    },\n    {\n      action: new Action(),\n      selection: {\n        atoms: [],\n        bonds: [],\n      },\n    },\n  );\n}\n\nfunction fromBondAction(restruct, newSg, sourceAtoms, currSelection) {\n  const struct = restruct.molecule;\n  let bonds = getAtomsBondIds(struct, sourceAtoms);\n\n  if (currSelection.bonds) bonds = uniq(bonds.concat(currSelection.bonds));\n\n  return bonds.reduce(\n    (acc: any, bondid) => {\n      const bond = struct.bonds.get(bondid);\n\n      acc.action = acc.action.mergeWith(\n        fromSeveralSgroupAddition(\n          restruct,\n          newSg.type,\n          [bond.begin, bond.end],\n          newSg.attrs,\n        ),\n      );\n\n      acc.selection.bonds.push(bondid);\n\n      return acc;\n    },\n    {\n      action: new Action(),\n      selection: {\n        atoms: sourceAtoms,\n        bonds: [],\n      },\n    },\n  );\n}\n\nfunction fromMultiFragmentAction(restruct, newSg, atoms) {\n  const bonds = getAtomsBondIds(restruct.molecule, atoms);\n  return {\n    action: fromSeveralSgroupAddition(restruct, newSg.type, atoms, newSg.attrs),\n    selection: {\n      atoms,\n      bonds,\n    },\n  };\n}\n\n// Add action operation to remove atom from s-group if needed\nexport function removeAtomFromSgroupIfNeeded(action, restruct, id) {\n  const sgroups = atomGetSGroups(restruct, id);\n\n  if (sgroups.length > 0) {\n    sgroups.forEach((sid) => {\n      action.addOp(new SGroupAtomRemove(sid, id));\n    });\n\n    return true;\n  }\n\n  return false;\n}\n\n// Add action operations to remove whole s-group if needed\nexport function removeSgroupIfNeeded(action, restruct: Restruct, atoms) {\n  const struct = restruct.molecule;\n  const sgCounts = new Map();\n\n  atoms.forEach((atomId) => {\n    const sgroups = atomGetSGroups(restruct, atomId);\n\n    sgroups.forEach((sid) => {\n      sgCounts.set(sid, sgCounts.has(sid) ? sgCounts.get(sid) + 1 : 1);\n    });\n  });\n\n  sgCounts.forEach((count, sid) => {\n    const sGroup = restruct.sgroups.get(sid)?.item;\n    const sgAtoms = SGroup.getAtoms(restruct.molecule, sGroup);\n\n    if (sgAtoms.length === count && !sGroup?.isSuperatomWithoutLabel) {\n      // delete whole s-group\n      const sgroup = struct.sgroups.get(sid) as SGroup;\n      action.mergeWith(sGroupAttributeAction(sid, sgroup.getAttrs()));\n      action.addOp(new SGroupRemoveFromHierarchy(sid));\n      sgroup.getAttachmentPoints().forEach((attachmentPoint) => {\n        action.addOp(new SGroupAttachmentPointRemove(sid, attachmentPoint));\n      });\n      action.addOp(new SGroupDelete(sid));\n    }\n\n    if (\n      sGroup?.isSuperatomWithoutLabel &&\n      sGroup.getAttachmentPoints().length === 0\n    ) {\n      action.mergeWith(fromSgroupDeletion(restruct, sid, false));\n    }\n  });\n}\n\nfunction getAtomsBondIds(struct, atoms) {\n  const atomSet = new Pile(atoms);\n\n  return Array.from(struct.bonds.keys()).filter((bid) => {\n    const bond = struct.bonds.get(bid);\n    return atomSet.has(bond.begin) && atomSet.has(bond.end);\n  });\n}\n\nfunction getAtomsFromBonds(struct, bonds) {\n  bonds = bonds || [];\n  return bonds.reduce((acc, bondid) => {\n    const bond = struct.bonds.get(bondid);\n    acc = acc.concat([bond.begin, bond.end]);\n    return acc;\n  }, []);\n}\n\nexport function fromSgroupAttachmentPointAddition(\n  restruct: Restruct,\n  sgroupId: number,\n  attachmentPoint: SGroupAttachmentPoint,\n) {\n  let action = new Action();\n\n  action.addOp(new SGroupAttachmentPointAdd(sgroupId, attachmentPoint));\n  action = action.perform(restruct);\n\n  return action;\n}\n\nexport function fromSgroupAttachmentPointRemove(\n  restruct: Restruct,\n  sgroupId: number,\n  atomId: number,\n  leaveAtomId?: number,\n  needPerform = true,\n) {\n  let action = new Action();\n  const struct = restruct.molecule;\n  const sgroup = struct.sgroups.get(sgroupId);\n  const atomAttachmentPoints = sgroup\n    ?.getAttachmentPoints()\n    .filter((attachmentPoint) => attachmentPoint.atomId === atomId);\n  atomAttachmentPoints?.forEach((attachmentPoint) => {\n    if (\n      sgroup &&\n      (!isNumber(attachmentPoint.leaveAtomId) ||\n        attachmentPoint.leaveAtomId === leaveAtomId)\n    ) {\n      action.addOp(new SGroupAttachmentPointRemove(sgroupId, attachmentPoint));\n    }\n  });\n\n  if (needPerform) {\n    action = action.perform(restruct);\n  }\n\n  return action;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  Bond,\n  Vec2,\n  AtomAttributes,\n  BondAttributes,\n  FunctionalGroup,\n  SGroupAttachmentPoint,\n  SGroup,\n} from 'domain/entities';\nimport {\n  AtomAdd,\n  AtomAttr,\n  BondAdd,\n  BondAttr,\n  BondDelete,\n  CalcImplicitH,\n  FragmentAdd,\n  FragmentStereoFlag,\n} from '../operations';\nimport { atomForNewBond, atomGetAttr } from './utils';\nimport {\n  fromAtomMerge,\n  fromStereoAtomAttrs,\n  mergeFragmentsIfNeeded,\n  mergeSgroups,\n} from './atom';\n\nimport { Action } from './action';\nimport { ReSGroup, ReStruct } from '../../render';\nimport utils from '../shared/utils';\nimport { fromSgroupAttachmentPointRemove } from 'application/editor';\nimport { getStereoAtomsMap } from 'application/editor/actions/helpers';\n\nexport function fromBondAddition(\n  reStruct: ReStruct,\n  bond: Partial<BondAttributes>,\n  begin: number | AtomAttributes,\n  end: number | AtomAttributes,\n  beginAtomPos?: Vec2,\n  endAtomPos?: Vec2,\n): [Action, number, number, number] {\n  const action = new Action();\n  const struct = reStruct.molecule;\n\n  const mouseDownNothingAndUpNothing = (\n    beginAtomAttr: AtomAttributes,\n    endAtomAttr: AtomAttributes,\n  ) => {\n    const newFragmentId = (\n      action.addOp(new FragmentAdd().perform(reStruct)) as FragmentAdd\n    ).frid;\n\n    const newBeginAtomId: number = (\n      action.addOp(\n        new AtomAdd(\n          { ...beginAtomAttr, fragment: newFragmentId },\n          beginAtomPos,\n        ).perform(reStruct),\n      ) as AtomAdd\n    ).data.aid;\n\n    const newEndAtomId: number = (\n      action.addOp(\n        new AtomAdd(\n          { ...endAtomAttr, fragment: newFragmentId },\n          endAtomPos,\n        ).perform(reStruct),\n      ) as AtomAdd\n    ).data.aid;\n\n    return [newBeginAtomId, newEndAtomId] as const;\n  };\n\n  const mouseDownNothingAndUpAtom = (\n    beginAtomAttr: AtomAttributes,\n    endAtomId: number,\n  ) => {\n    const fragmentId = atomGetAttr(reStruct, endAtomId, 'fragment');\n\n    const newBeginAtomId: number = (\n      action.addOp(\n        new AtomAdd(\n          { ...beginAtomAttr, fragment: fragmentId },\n          beginAtomPos,\n        ).perform(reStruct),\n      ) as AtomAdd\n    ).data.aid;\n\n    const endAtom = struct.atoms.get(endAtomId);\n    if (\n      endAtom &&\n      !FunctionalGroup.isAtomInContractedFunctionalGroup(\n        endAtom,\n        struct.sgroups,\n        struct.functionalGroups,\n        false,\n      )\n    ) {\n      mergeSgroups(action, reStruct, [newBeginAtomId], endAtomId);\n    }\n    return [newBeginAtomId, endAtomId] as const;\n  };\n\n  const mouseDownAtomAndUpNothing = (\n    beginAtomId: number,\n    endAtomAttr: AtomAttributes,\n  ) => {\n    const fragmentId = atomGetAttr(reStruct, beginAtomId, 'fragment');\n\n    const newEndAtomId: number = (\n      action.addOp(\n        new AtomAdd(\n          {\n            ...endAtomAttr,\n            fragment: fragmentId,\n          },\n          endAtomPos ?? atomForNewBond(reStruct, begin, bond).pos,\n        ).perform(reStruct),\n      ) as AtomAdd\n    ).data.aid;\n\n    const beginAtom = struct.atoms.get(beginAtomId);\n    if (\n      beginAtom &&\n      !FunctionalGroup.isAtomInContractedFunctionalGroup(\n        beginAtom,\n        struct.sgroups,\n        struct.functionalGroups,\n        false,\n      )\n    ) {\n      mergeSgroups(action, reStruct, [newEndAtomId], beginAtomId);\n    }\n\n    return [beginAtomId, newEndAtomId] as const;\n  };\n\n  let beginAtomId: number, endAtomId: number;\n\n  const startsOnAtom = typeof begin === 'number';\n  const endsOnAtom = typeof end === 'number';\n\n  if (!startsOnAtom && !endsOnAtom) {\n    [beginAtomId, endAtomId] = mouseDownNothingAndUpNothing(begin, end);\n  } else if (!startsOnAtom && endsOnAtom) {\n    [beginAtomId, endAtomId] = mouseDownNothingAndUpAtom(begin, end);\n  } else if (startsOnAtom && !endsOnAtom) {\n    [beginAtomId, endAtomId] = mouseDownAtomAndUpNothing(begin, end);\n  } else {\n    [beginAtomId, endAtomId] = [begin as number, end as number];\n\n    if (reStruct.sgroups && reStruct.sgroups.size > 0) {\n      reStruct.sgroups.forEach((sgroup) => {\n        if (sgroup.item?.type && sgroup.item?.type === 'SUP') {\n          addAttachmentPointToSuperatom(sgroup, beginAtomId, endAtomId);\n        }\n      });\n    }\n  }\n\n  if (atomGetAttr(reStruct, beginAtomId, 'label') === '*') {\n    action.addOp(new AtomAttr(beginAtomId, 'label', 'C').perform(reStruct));\n  }\n\n  if (atomGetAttr(reStruct, endAtomId, 'label') === '*') {\n    action.addOp(new AtomAttr(endAtomId, 'label', 'C').perform(reStruct));\n  }\n\n  const newBondId = (\n    action.addOp(\n      new BondAdd(beginAtomId, endAtomId, bond).perform(reStruct),\n    ) as BondAdd\n  ).data.bid;\n  const newBond = struct.bonds.get(newBondId);\n  if (newBond) {\n    action.addOp(\n      new CalcImplicitH([newBond.begin, newBond.end]).perform(reStruct),\n    );\n    action.mergeWith(fromBondStereoUpdate(reStruct, newBond));\n  }\n\n  action.operations.reverse();\n\n  const mergedFragmentId = mergeFragmentsIfNeeded(\n    action,\n    reStruct,\n    beginAtomId,\n    endAtomId,\n  );\n  if (struct.frags.get(mergedFragmentId || 0)?.stereoAtoms && !bond.stereo) {\n    action.addOp(\n      new FragmentStereoFlag(mergedFragmentId || 0).perform(reStruct),\n    );\n  }\n\n  return [action, beginAtomId, endAtomId, newBondId];\n}\n\nexport function fromBondsAttrs(\n  restruct: ReStruct,\n  ids: Array<number> | number,\n  attrs: Bond,\n  reset?: boolean,\n): Action {\n  const struct = restruct.molecule;\n  const action = new Action();\n  const bids = Array.isArray(ids) ? ids : [ids];\n\n  bids.forEach((bid) => {\n    Object.keys(Bond.attrlist).forEach((key) => {\n      if (!(key in attrs) && !reset) return;\n\n      const value = key in attrs ? attrs[key] : Bond.attrGetDefault(key);\n\n      action.addOp(new BondAttr(bid, key, value).perform(restruct));\n      if (key === 'stereo' && key in attrs) {\n        const bond = struct.bonds.get(bid);\n        if (bond) {\n          action.addOp(\n            new CalcImplicitH([bond.begin, bond.end]).perform(restruct),\n          );\n          action.mergeWith(fromBondStereoUpdate(restruct, bond));\n        }\n      }\n    });\n  });\n\n  return action;\n}\n\nexport function fromBondsMerge(\n  restruct: ReStruct,\n  mergeMap: Map<number, number>,\n): Action {\n  const struct = restruct.molecule;\n\n  const atomPairs = new Map();\n  let action = new Action();\n\n  mergeMap.forEach((dstId, srcId) => {\n    const bond = struct.bonds.get(srcId);\n    const bondCI = struct.bonds.get(dstId);\n    if (!bond || !bondCI) return;\n    const params = utils.mergeBondsParams(struct, bond, struct, bondCI);\n    if (!params.merged) return;\n    atomPairs.set(bond.begin, !params.cross ? bondCI.begin : bondCI.end);\n    atomPairs.set(bond.end, !params.cross ? bondCI.end : bondCI.begin);\n  });\n\n  atomPairs.forEach((dst, src) => {\n    action = fromAtomMerge(restruct, src, dst).mergeWith(action);\n  });\n\n  return action;\n}\n\nexport function fromBondFlipping(restruct: ReStruct, id: number): Action {\n  const bond = restruct.molecule.bonds.get(id);\n\n  const action = new Action();\n  action.addOp(new BondDelete(id).perform(restruct));\n\n  // TODO: find better way to avoid problem with bond.begin = 0\n  if (Number.isInteger(bond?.end) && Number.isInteger(bond?.begin)) {\n    action.addOp(new BondAdd(bond?.end, bond?.begin, bond).perform(restruct));\n  }\n\n  // todo: swap atoms stereoLabels and stereoAtoms in fragment\n\n  return action;\n}\n\nexport function fromBondStereoUpdate(\n  restruct: ReStruct,\n  bond: Bond,\n  withReverse?: boolean,\n): Action {\n  const action = new Action();\n  const struct = restruct.molecule;\n\n  const beginFrId = struct.atoms.get(bond?.begin)?.fragment;\n  const endFrId = struct.atoms.get(bond?.end)?.fragment;\n\n  const fragmentStereoBonds: Array<Bond> = [];\n\n  struct.bonds.forEach((bond) => {\n    if (struct.atoms.get(bond.begin)?.fragment === beginFrId) {\n      fragmentStereoBonds.push(bond);\n    }\n\n    if (\n      beginFrId !== endFrId &&\n      struct.atoms.get(bond.begin)?.fragment === endFrId\n    ) {\n      fragmentStereoBonds.push(bond);\n    }\n  });\n\n  const stereoAtomsMap = getStereoAtomsMap(struct, fragmentStereoBonds, bond);\n\n  stereoAtomsMap.forEach((stereoProp, aId) => {\n    if (struct.atoms.get(aId)?.stereoLabel !== stereoProp.stereoLabel) {\n      action.mergeWith(\n        fromStereoAtomAttrs(restruct, aId, stereoProp, withReverse),\n      );\n    }\n  });\n\n  return action;\n}\n\nconst plainBondTypes = [\n  Bond.PATTERN.TYPE.SINGLE,\n  Bond.PATTERN.TYPE.DOUBLE,\n  Bond.PATTERN.TYPE.TRIPLE,\n];\n\nexport function bondChangingAction(\n  restruct: ReStruct,\n  itemID: number,\n  bond: Bond,\n  bondProps: any,\n): Action {\n  const action = new Action();\n  let newItemId = itemID;\n  if (\n    ((bondProps.stereo !== Bond.PATTERN.STEREO.NONE && //\n      bondProps.type === Bond.PATTERN.TYPE.SINGLE) ||\n      bond.type === Bond.PATTERN.TYPE.DATIVE) &&\n    bond.type === bondProps.type &&\n    bond.stereo === bondProps.stereo\n  ) {\n    action.mergeWith(fromBondFlipping(restruct, itemID));\n    newItemId = (action.operations[1] as BondAdd).data.bid;\n  }\n  // if bondTool is stereo and equal to bond for change\n\n  const loop = plainBondTypes.includes(bondProps.type) ? plainBondTypes : null;\n  if (\n    bondProps.stereo === Bond.PATTERN.STEREO.NONE &&\n    bondProps.type === Bond.PATTERN.TYPE.SINGLE &&\n    bond.stereo === Bond.PATTERN.STEREO.NONE &&\n    loop\n  ) {\n    // if `Single bond` tool is chosen and bond for change in `plainBondTypes`\n    bondProps.type = loop[(loop.indexOf(bond.type) + 1) % loop.length];\n  }\n\n  return fromBondsAttrs(restruct, newItemId, bondProps).mergeWith(action);\n}\n\nfunction addAttachmentPointToSuperatom(\n  sgroup: ReSGroup,\n  beginAtomId: number,\n  endAtomId: number,\n) {\n  (sgroup.item?.atoms as number[]).forEach((atomId) => {\n    if (beginAtomId === atomId || endAtomId === atomId) {\n      if (\n        !(sgroup.item as SGroup)\n          .getAttachmentPoints()\n          .map((attachmentPoint) => attachmentPoint.atomId)\n          .includes(atomId)\n      )\n        sgroup.item?.addAttachmentPoint(\n          new SGroupAttachmentPoint(atomId, undefined, undefined),\n        );\n    }\n  });\n}\n\nexport function removeAttachmentPointFromSuperatom(\n  sgroup: ReSGroup,\n  beginAtomId: number | undefined,\n  endAtomId: number | undefined,\n  action: Action,\n  restruct: ReStruct,\n) {\n  (sgroup.item?.atoms as number[]).forEach((atomId) => {\n    if (beginAtomId === atomId || endAtomId === atomId) {\n      const anotherSideAtomId =\n        beginAtomId === atomId ? endAtomId : beginAtomId;\n      action.mergeWith(\n        fromSgroupAttachmentPointRemove(\n          restruct,\n          sgroup.item?.id as number,\n          atomId as number,\n          anotherSideAtomId,\n          false,\n        ),\n      );\n    }\n  });\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  Atom,\n  Bond,\n  MonomerMicromolecule,\n  RGroup,\n  SGroupAttachmentPoint,\n} from 'domain/entities';\nimport {\n  AtomAdd,\n  AtomAttr,\n  AtomDelete,\n  BondAdd,\n  BondAttr,\n  BondDelete,\n  CalcImplicitH,\n  FragmentAdd,\n  FragmentAddStereoAtom,\n  FragmentDelete,\n  FragmentDeleteStereoAtom,\n  SGroupAtomAdd,\n} from '../operations';\nimport { atomGetAttr, atomGetDegree, atomGetSGroups } from './utils';\nimport { fromRGroupFragment, fromUpdateIfThen } from './rgroup';\nimport { removeAtomFromSgroupIfNeeded, removeSgroupIfNeeded } from './sgroup';\n\nimport { Action } from './action';\nimport { fromBondStereoUpdate } from './bond';\nimport { without } from 'lodash/fp';\nimport ReStruct from 'application/render/restruct/restruct';\nimport assert from 'assert';\nimport { SGroupAttachmentPointRemove } from '../operations/sgroup/sgroupAttachmentPoints';\n\nexport function fromAtomAddition(restruct, pos, atom) {\n  atom = Object.assign({}, atom);\n  const action = new Action();\n  atom.fragment = (\n    action.addOp(new FragmentAdd().perform(restruct)) as FragmentAdd\n  ).frid;\n\n  const aid = (\n    action.addOp(new AtomAdd(atom, pos).perform(restruct)) as AtomAdd\n  ).data.aid;\n  action.addOp(new CalcImplicitH([aid]).perform(restruct));\n\n  return action;\n}\n\nexport function fromAtomsAttrs(\n  restruct: ReStruct,\n  ids: Array<number> | number,\n  attrs: any,\n  reset: boolean | null,\n) {\n  const action = new Action();\n  const aids = Array.isArray(ids) ? ids : [ids];\n\n  aids.forEach((atomId) => {\n    Object.keys(Atom.attrlist).forEach((key) => {\n      if (key === 'attachmentPoints' && !(key in attrs)) return;\n      if (!(key in attrs) && !reset) return;\n\n      const value = key in attrs ? attrs[key] : Atom.attrGetDefault(key);\n\n      switch (key) {\n        case 'stereoLabel':\n          if (key in attrs && value) {\n            action.addOp(new AtomAttr(atomId, key, value).perform(restruct));\n          }\n          break;\n        case 'stereoParity':\n          if (key in attrs && value) {\n            action.addOp(new AtomAttr(atomId, key, value).perform(restruct));\n          }\n          break;\n        default:\n          action.addOp(new AtomAttr(atomId, key, value).perform(restruct));\n          break;\n      }\n    });\n\n    if (\n      !reset &&\n      'label' in attrs &&\n      attrs.label !== null &&\n      attrs.label !== 'L#' &&\n      !('atomList' in attrs)\n    ) {\n      action.addOp(new AtomAttr(atomId, 'atomList', null).perform(restruct));\n    }\n\n    action.addOp(new CalcImplicitH([atomId]).perform(restruct));\n\n    const atomNeighbors = restruct.molecule.atomGetNeighbors(atomId);\n    const bond = restruct.molecule.bonds.get(atomNeighbors?.[0]?.bid as number);\n    if (bond) {\n      action.mergeWith(fromBondStereoUpdate(restruct, bond));\n    }\n    // when a heteroatom connects to an aromatic ring it's necessary to add a ImplicitHCount\n    // property to this atom to specify the number of hydrogens on it.\n    const atom = restruct.molecule.atoms.get(atomId);\n    assert(atom != null);\n\n    if (Atom.isInAromatizedRing(restruct.molecule, atomId)) {\n      action.addOp(\n        new AtomAttr(atomId, 'implicitHCount', atom.implicitH).perform(\n          restruct,\n        ),\n      );\n    }\n  });\n\n  return action;\n}\n\nexport function fromStereoAtomAttrs(restruct, aid, attrs, withReverse) {\n  const action = new Action();\n  const atom = restruct.molecule.atoms.get(aid);\n  const sgroup = restruct.molecule.getGroupFromAtomId(aid);\n  if (atom && !(sgroup instanceof MonomerMicromolecule)) {\n    const frid = atom.fragment;\n\n    if ('stereoParity' in attrs) {\n      action.addOp(\n        new AtomAttr(aid, 'stereoParity', attrs.stereoParity).perform(restruct),\n      );\n    }\n    if ('stereoLabel' in attrs) {\n      action.addOp(\n        new AtomAttr(aid, 'stereoLabel', attrs.stereoLabel).perform(restruct),\n      );\n      if (attrs.stereoLabel === null) {\n        action.addOp(new FragmentDeleteStereoAtom(frid, aid).perform(restruct));\n      } else {\n        action.addOp(new FragmentAddStereoAtom(frid, aid).perform(restruct));\n      }\n    }\n    if (withReverse) action.operations.reverse();\n  }\n\n  return action;\n}\n\nexport function fromAtomsFragmentAttr(restruct, aids, newfrid) {\n  const action = new Action();\n\n  aids.forEach((aid) => {\n    const atom = restruct.molecule.atoms.get(aid);\n    const sgroup = restruct.molecule.getGroupFromAtomId(aid);\n    const oldfrid = atom.fragment;\n\n    if (sgroup instanceof MonomerMicromolecule) {\n      return;\n    }\n\n    action.addOp(new AtomAttr(aid, 'fragment', newfrid));\n\n    if (atom.stereoLabel !== null) {\n      action.addOp(new FragmentAddStereoAtom(newfrid, aid));\n      action.addOp(new FragmentDeleteStereoAtom(oldfrid, aid));\n    }\n  });\n\n  return action.perform(restruct);\n}\n\n/**\n * @param restruct { ReStruct }\n * @param srcId { number }\n * @param dstId { number }\n * @return { Action }\n */\nexport function fromAtomMerge(restruct, srcId, dstId) {\n  if (srcId === dstId) return new Action();\n\n  const fragAction = new Action();\n  mergeFragmentsIfNeeded(fragAction, restruct, srcId, dstId);\n\n  const action = new Action();\n\n  const atomNeighbors = restruct.molecule.atomGetNeighbors(srcId);\n  atomNeighbors.forEach((nei) => {\n    const bond = restruct.molecule.bonds.get(nei.bid);\n\n    if (dstId === bond.begin || dstId === bond.end) {\n      // src & dst have one nei\n      action.addOp(new BondDelete(nei.bid));\n      return;\n    }\n\n    const begin = bond.begin === nei.aid ? nei.aid : dstId;\n    const end = bond.begin === nei.aid ? dstId : nei.aid;\n\n    const mergeBondId = restruct.molecule.findBondId(begin, end);\n\n    if (mergeBondId === null) {\n      action.addOp(new BondAdd(begin, end, bond));\n    } else {\n      // replace old bond with new bond\n      const attrs = Bond.getAttrHash(bond);\n      Object.keys(attrs).forEach((key) => {\n        action.addOp(new BondAttr(mergeBondId, key, attrs[key]));\n      });\n    }\n\n    action.addOp(new BondDelete(nei.bid));\n  });\n\n  const attrs = Atom.getAttrHash(restruct.molecule.atoms.get(srcId));\n\n  if (atomGetDegree(restruct, srcId) === 1 && attrs.label === '*') {\n    attrs.label = 'C';\n  }\n\n  Object.keys(attrs).forEach((key) => {\n    if (key !== 'stereoLabel' && key !== 'stereoParity') {\n      action.addOp(new AtomAttr(dstId, key, attrs[key]));\n    }\n  });\n\n  const sgChanged = removeAtomFromSgroupIfNeeded(action, restruct, srcId);\n\n  if (sgChanged) removeSgroupIfNeeded(action, restruct, [srcId]);\n\n  const sgroups = atomGetSGroups(restruct, srcId);\n  sgroups.forEach((sgroupId: number) => {\n    const sgroup = restruct.sgroups.get(sgroupId).item;\n    for (let i = 0; i < sgroup.attachmentPoints.length; ++i) {\n      if (sgroup.attachmentPoints[i].atomId === srcId) {\n        action.addOp(\n          new SGroupAttachmentPointRemove(\n            sgroupId,\n            new SGroupAttachmentPoint(srcId, undefined, undefined),\n          ),\n        );\n        return;\n      }\n    }\n  });\n\n  action.addOp(new AtomDelete(srcId));\n  const dstAtomNeighbors = restruct.molecule.atomGetNeighbors(dstId);\n  const bond = restruct.molecule.bonds.get(\n    dstAtomNeighbors[0]?.bid || atomNeighbors[0]?.bid,\n  );\n\n  return action\n    .perform(restruct)\n    .mergeWith(fragAction)\n    .mergeWith(fromBondStereoUpdate(restruct, bond));\n}\n\nexport function mergeFragmentsIfNeeded(action, restruct, srcId, dstId) {\n  const frid = atomGetAttr(restruct, srcId, 'fragment') as number;\n  const frid2 = atomGetAttr(restruct, dstId, 'fragment');\n  if (frid2 === frid || typeof frid !== 'number' || typeof frid2 !== 'number') {\n    return frid;\n  }\n\n  const struct = restruct.molecule;\n\n  const rgid = RGroup.findRGroupByFragment(struct.rgroups, frid2);\n  if (!(typeof rgid === 'undefined')) {\n    action\n      .mergeWith(fromRGroupFragment(restruct, null, frid2))\n      .mergeWith(fromUpdateIfThen(restruct, 0, rgid));\n  }\n\n  const fridAtoms = struct.getFragmentIds(frid);\n\n  const atomsToNewFrag: Array<any> = [];\n  struct.atoms.forEach((atom, aid) => {\n    if (atom.fragment === frid2) atomsToNewFrag.push(aid);\n  });\n  const moveAtomsAction = fromAtomsFragmentAttr(restruct, atomsToNewFrag, frid);\n\n  mergeSgroups(action, restruct, fridAtoms, dstId);\n  action.addOp(new FragmentDelete(frid2).perform(restruct));\n  action.mergeWith(moveAtomsAction);\n\n  return frid;\n}\n\nexport function mergeSgroups(action, restruct, srcAtoms, dstAtom) {\n  const sgroups = atomGetSGroups(restruct, dstAtom);\n\n  sgroups.forEach((sid) => {\n    const sgroup = restruct.molecule.sgroups.get(sid);\n    const notExpandedContexts = ['Atom', 'Bond', 'Group'];\n    if (\n      sgroup.type === 'DAT' &&\n      notExpandedContexts.includes(sgroup.data.context)\n    ) {\n      return;\n    }\n    const atomsToSgroup: any = without(sgroup.atoms, srcAtoms);\n    atomsToSgroup.forEach((aid) =>\n      action.addOp(new SGroupAtomAdd(sid, aid).perform(restruct)),\n    );\n  });\n}\n\nexport function checkAtomValence(restruct, atomId) {\n  const action = new Action();\n\n  if (!restruct.atoms.has(atomId)) return action;\n\n  action.addOp(new CalcImplicitH([atomId]));\n\n  return action.perform(restruct);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { AlignDescriptors, CanvasLoad } from '../operations';\n\nimport { Action } from './action';\n\nexport function fromNewCanvas(restruct, struct) {\n  const action = new Action();\n\n  action.addOp(new CanvasLoad(struct));\n  return action.perform(restruct);\n}\n\nexport function fromDescriptorsAlign(restruct) {\n  const action = new Action();\n  action.addOp(new AlignDescriptors());\n  return action.perform(restruct);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { AtomAdd, FragmentAdd } from '../operations';\n\nimport { Action } from './action';\nimport { Vec2 } from 'domain/entities';\nimport { atomGetAttr } from './utils';\nimport { fromBondAddition } from './bond';\n\nexport function fromChain(restruct, p0, v, nSect, atomId) {\n  // eslint-disable-line max-params\n  const dx = Math.cos(Math.PI / 6);\n  const dy = Math.sin(Math.PI / 6);\n\n  let action = new Action();\n\n  const frid =\n    atomId !== null\n      ? atomGetAttr(restruct, atomId, 'fragment')\n      : (action.addOp(new FragmentAdd().perform(restruct)) as FragmentAdd).frid;\n\n  const chainItems: any = {\n    atoms: [],\n    bonds: [],\n  };\n\n  let id0 =\n    atomId !== null\n      ? atomId\n      : (\n          action.addOp(\n            new AtomAdd({ label: 'C', fragment: frid }, p0).perform(restruct),\n          ) as AtomAdd\n        ).data.aid;\n\n  chainItems.atoms.push(id0);\n  action.operations.reverse();\n\n  for (let i = 0; i < nSect; i++) {\n    const pos = new Vec2(dx * (i + 1), i & 1 ? 0 : dy).rotate(v).add(p0);\n\n    const ret = fromBondAddition(\n      restruct,\n      {},\n      id0,\n      { label: 'C' },\n      undefined,\n      pos,\n    );\n    action = ret[0].mergeWith(action);\n    id0 = ret[2];\n    chainItems.bonds.push(ret[3]);\n    chainItems.atoms.push(id0);\n  }\n\n  return [action, chainItems];\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Action } from './action';\nimport { checkAtomValence, fromAtomMerge } from './atom';\nimport { fromBondsMerge } from './bond';\nimport utils from '../shared/utils';\n\nexport function fromItemsFuse(restruct, items) {\n  let action = new Action();\n\n  if (!items) return action;\n\n  const usedAtoms = new Set();\n\n  const connectedAtomIds = getAllConnectedAtomsIds(\n    restruct,\n    mergeMapOfItemsToSet(items.atoms),\n    mergeMapOfItemsToSet(items.bonds),\n  );\n\n  // merge single atoms\n  items.atoms.forEach((dst, src) => {\n    if (usedAtoms.has(dst) || usedAtoms.has(src)) return;\n\n    action = fromAtomMerge(restruct, src, dst).mergeWith(action);\n    usedAtoms.add(dst).add(src);\n  });\n\n  // merge bonds\n  action = fromBondsMerge(restruct, items.bonds).mergeWith(action);\n\n  action = valenceCheck(restruct, connectedAtomIds).mergeWith(action);\n\n  return action;\n}\n\nexport function getItemsToFuse(editor, items) {\n  const struct = editor.render.ctab.molecule;\n\n  const mergeItems = items || {\n    atoms: Array.from(struct.atoms.keys()),\n    bonds: Array.from(struct.bonds.keys()),\n  };\n\n  return closestToMerge(\n    struct,\n    editor.findMerge(mergeItems, ['atoms', 'bonds']),\n  );\n}\n\nexport function getHoverToFuse(items) {\n  if (!items) return null;\n\n  const hoverItems = {\n    atoms: Array.from(items.atoms.values()),\n    bonds: Array.from(items.bonds.values()),\n    ...(items.functionalGroups && {\n      functionalGroups: Array.from(items.functionalGroups.values()),\n    }),\n    ...(items.atomToFunctionalGroup && {\n      sgroups: Array.from(items.atomToFunctionalGroup.values()),\n    }),\n  };\n\n  return { map: 'merge', id: +Date.now(), items: hoverItems };\n}\n\nexport function mergeMapOfItemsToSet(items: Map<number, number>): Set<number> {\n  const itemsSet = new Set<number>();\n  items.forEach((value, key) => {\n    itemsSet.add(value).add(key);\n  });\n  return itemsSet;\n}\n\n/**\n * @param struct\n * @param closestMap {{\n * \t\tatoms: Map<number, number>,\n * \t\tbonds: Map<number, number>,\n *    atomToFunctionalGroup: Map<number, number>\n * }}\n * @return {{\n * \t\tatoms: Map<number, number>,\n * \t\tbonds: Map<number, number>,\n *    atomToFunctionalGroup: Map<number, number>\n * }}\n */\nfunction closestToMerge(struct, closestMap) {\n  const mergeMap = {\n    atoms: new Map(closestMap.atoms),\n    bonds: new Map(closestMap.bonds),\n    atomToFunctionalGroup: new Map(closestMap.atomToFunctionalGroup),\n  };\n\n  closestMap.bonds.forEach((dstId, srcId) => {\n    const bond = struct.bonds.get(srcId);\n    const bondCI = struct.bonds.get(dstId);\n\n    if (utils.mergeBondsParams(struct, bond, struct, bondCI).merged) {\n      mergeMap.atoms.delete(bond.begin);\n      mergeMap.atoms.delete(bond.end);\n    } else {\n      mergeMap.bonds.delete(srcId);\n    }\n  });\n\n  if (\n    mergeMap.atoms.size === 0 &&\n    mergeMap.bonds.size === 0 &&\n    mergeMap.atomToFunctionalGroup.size === 0\n  ) {\n    return null;\n  }\n\n  return mergeMap;\n}\n\nfunction getAllConnectedAtomsIds(restruct, atomsIds, bondsIds) {\n  const initialAtoms = new Set(atomsIds);\n  const connectedAtoms = new Set();\n\n  for (const bondId of bondsIds) {\n    const bond = restruct.bonds.get(bondId);\n    if (bond) {\n      const { begin, end } = bond.b;\n      initialAtoms.add(begin).add(end);\n    }\n  }\n\n  for (const initialAtom of initialAtoms) {\n    if (connectedAtoms.has(initialAtom)) continue;\n    const relevantConnectedComponent = [\n      ...restruct.connectedComponents.values(),\n    ].find((component) => component.has(initialAtom));\n    if (relevantConnectedComponent)\n      relevantConnectedComponent.forEach((id) => connectedAtoms.add(id));\n  }\n\n  return connectedAtoms;\n}\n\nfunction valenceCheck(restruct, atomIds) {\n  let action = new Action();\n\n  if (!atomIds) return action;\n  const usedAtoms = new Set();\n\n  // merge single atoms\n  atomIds.forEach((atomId) => {\n    if (usedAtoms.has(atomId)) return;\n\n    action = checkAtomValence(restruct, atomId).mergeWith(action);\n    usedAtoms.add(atomId);\n  });\n\n  return action;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  AtomMove,\n  BondMove,\n  EnhancedFlagMove,\n  FragmentAdd,\n  FragmentDelete,\n  FragmentDeleteStereoAtom,\n  FragmentStereoFlag,\n  LoopMove,\n  RxnArrowMove,\n  RxnPlusMove,\n  SGroupDataMove,\n  SimpleObjectMove,\n  TextMove,\n  ImageMove,\n  MultitailArrowMove,\n} from '../operations';\nimport { Pile, RGroup, Vec2 } from 'domain/entities';\nimport { fromRGroupFragment, fromUpdateIfThen } from './rgroup';\n\nimport { Action } from './action';\nimport { fromAtomsFragmentAttr } from './atom';\nimport { getRelSGroupsBySelection } from './utils';\nimport { IMAGE_KEY, MULTITAIL_ARROW_KEY } from 'domain/constants';\n\nexport function fromMultipleMove(\n  restruct,\n  lists,\n  d: Vec2,\n  shouldPerform = true,\n) {\n  d = new Vec2(d);\n\n  const action = new Action();\n  const struct = restruct.molecule;\n  const loops = new Pile();\n  const atomsToInvalidate = new Pile();\n\n  if (lists.atoms) {\n    const atomSet = new Pile(lists.atoms);\n    const bondlist: Array<number> = [];\n\n    restruct.bonds.forEach((bond, bid) => {\n      if (atomSet.has(bond.b.begin) && atomSet.has(bond.b.end)) {\n        bondlist.push(bid);\n        // add all adjacent loops\n        // those that are not completely inside the structure will get redrawn anyway\n        ['hb1', 'hb2'].forEach((hb) => {\n          const loop = struct.halfBonds.get(bond.b[hb]).loop;\n          if (loop >= 0) loops.add(loop);\n        });\n        return;\n      }\n\n      if (atomSet.has(bond.b.begin)) {\n        atomsToInvalidate.add(bond.b.begin);\n        return;\n      }\n\n      if (atomSet.has(bond.b.end)) atomsToInvalidate.add(bond.b.end);\n    });\n\n    bondlist.forEach((bond) => {\n      action.addOp(new BondMove(bond, d));\n    });\n\n    loops.forEach((loopId) => {\n      if (restruct.reloops.get(loopId) && restruct.reloops.get(loopId).visel) {\n        // hack\n        action.addOp(new LoopMove(loopId, d));\n      }\n    });\n\n    lists.atoms.forEach((aid) => {\n      action.addOp(new AtomMove(aid, d, !atomsToInvalidate.has(aid)));\n    });\n\n    if (lists.sgroupData && lists.sgroupData.length === 0) {\n      const sgroups = getRelSGroupsBySelection(struct, lists.atoms);\n      sgroups.forEach((sg) => {\n        action.addOp(new SGroupDataMove(sg.id, d));\n      });\n    }\n  }\n\n  if (lists.rxnArrows) {\n    lists.rxnArrows.forEach((rxnArrow) => {\n      action.addOp(new RxnArrowMove(rxnArrow, d, true));\n    });\n  }\n\n  if (lists.rxnPluses) {\n    lists.rxnPluses.forEach((rxnPulse) => {\n      action.addOp(new RxnPlusMove(rxnPulse, d, true));\n    });\n  }\n\n  if (lists.simpleObjects) {\n    lists.simpleObjects.forEach((simpleObject) => {\n      action.addOp(new SimpleObjectMove(simpleObject, d, true));\n    });\n  }\n\n  if (lists.sgroupData) {\n    lists.sgroupData.forEach((sgData) => {\n      action.addOp(new SGroupDataMove(sgData, d));\n    });\n  }\n\n  if (lists.enhancedFlags) {\n    lists.enhancedFlags.forEach((fid) => {\n      action.addOp(new EnhancedFlagMove(fid, d));\n    });\n  }\n\n  if (lists.texts) {\n    lists.texts.forEach((text) => {\n      action.addOp(new TextMove(text, d, true));\n    });\n  }\n\n  if (lists[IMAGE_KEY]) {\n    lists[IMAGE_KEY].forEach((image) => {\n      action.addOp(new ImageMove(image, d));\n    });\n  }\n\n  if (lists[MULTITAIL_ARROW_KEY]) {\n    lists[MULTITAIL_ARROW_KEY].forEach((multitailArrow) => {\n      action.addOp(new MultitailArrowMove(multitailArrow, d));\n    });\n  }\n\n  return shouldPerform ? action.perform(restruct) : action;\n}\n\nexport function fromStereoFlagUpdate(restruct, frid, flag = null) {\n  const action = new Action();\n\n  if (!flag) {\n    const struct = restruct.molecule;\n    const frag = restruct.molecule.frags.get(frid);\n    if (frag) {\n      frag.stereoAtoms.forEach((aid) => {\n        if (struct.atoms.get(aid).stereoLabel === null) {\n          action.addOp(new FragmentDeleteStereoAtom(frid, aid));\n        }\n      });\n    }\n  }\n\n  action.addOp(new FragmentStereoFlag(frid));\n  return action.perform(restruct);\n}\n\n/**\n * @param restruct { ReStruct }\n * @param aid { number }\n * @param frid { number }\n * @param newfrid { number }\n * @returns { Action }\n */\nfunction processAtom(restruct, aid, frid, newfrid) {\n  const queue = [aid];\n  const usedIds = new Pile(queue);\n\n  while (queue.length > 0) {\n    const id = queue.shift();\n\n    restruct.molecule.atomGetNeighbors(id).forEach((nei) => {\n      if (\n        restruct.molecule.atoms.get(nei.aid).fragment === frid &&\n        !usedIds.has(nei.aid)\n      ) {\n        usedIds.add(nei.aid);\n        queue.push(nei.aid);\n      }\n    });\n  }\n\n  return fromAtomsFragmentAttr(restruct, usedIds, newfrid);\n}\n\n/**\n * @param restruct { ReStruct }\n * @param frid { number }\n * @param rgForRemove\n * @return { Action }\n */\n// TODO [RB] the thing is too tricky :) need something else in future\nexport function fromFragmentSplit(\n  restruct,\n  frid,\n  rgForRemove: Array<number> = [],\n) {\n  const action = new Action();\n  const rgid = RGroup.findRGroupByFragment(restruct.molecule.rgroups, frid);\n\n  restruct.molecule.atoms.forEach((atom, aid) => {\n    if (atom.fragment === frid) {\n      const newfrid = (\n        action.addOp(new FragmentAdd().perform(restruct)) as FragmentAdd\n      ).frid;\n\n      action.mergeWith(processAtom(restruct, aid, frid, newfrid));\n\n      if (rgid) action.mergeWith(fromRGroupFragment(restruct, rgid, newfrid));\n    }\n  });\n\n  if (frid !== -1) {\n    action.mergeWith(fromRGroupFragment(restruct, 0, frid));\n    action.addOp(new FragmentDelete(frid).perform(restruct));\n    action.mergeWith(fromUpdateIfThen(restruct, 0, rgid, rgForRemove));\n  }\n\n  action.operations.reverse();\n  return action;\n}\n","import assert from 'assert';\nimport { ReStruct } from 'application/render';\nimport { AttachmentPoints, Struct } from 'domain/entities';\nimport {\n  RGroupAttachmentPointAdd,\n  RGroupAttachmentPointRemove,\n} from '../operations';\nimport { Action } from './action';\nimport { fromAtomsAttrs } from '.';\n\nexport function fromRGroupAttachmentPointUpdate(\n  restruct: ReStruct,\n  atomId: number,\n  attachmentPoints: AttachmentPoints | null,\n) {\n  const action = new Action();\n  action.mergeWith(fromRGroupAttachmentPointsDeletionByAtom(restruct, atomId));\n  action.mergeWith(\n    fromRGroupAttachmentPointAddition(restruct, attachmentPoints, atomId),\n  );\n  return action;\n}\n\nexport function fromRGroupAttachmentPointAddition(\n  restruct: ReStruct,\n  attachmentPoints: AttachmentPoints | null,\n  atomId: number,\n) {\n  const action = new Action();\n  switch (attachmentPoints) {\n    case AttachmentPoints.FirstSideOnly:\n      action.addOp(\n        new RGroupAttachmentPointAdd({\n          atomId,\n          attachmentPointType: 'primary',\n        }),\n      );\n      break;\n\n    case AttachmentPoints.SecondSideOnly:\n      action.addOp(\n        new RGroupAttachmentPointAdd({\n          atomId,\n          attachmentPointType: 'secondary',\n        }),\n      );\n      break;\n\n    case AttachmentPoints.BothSides:\n      action.addOp(\n        new RGroupAttachmentPointAdd({\n          atomId,\n          attachmentPointType: 'primary',\n        }),\n      );\n      action.addOp(\n        new RGroupAttachmentPointAdd({\n          atomId,\n          attachmentPointType: 'secondary',\n        }),\n      );\n      break;\n\n    default:\n      break;\n  }\n  return action.perform(restruct);\n}\n\nfunction fromRGroupAttachmentPointsDeletionByAtom(\n  restruct: ReStruct,\n  atomId: number,\n) {\n  const action = new Action();\n  const attachmentPointsToDelete =\n    restruct.molecule.getRGroupAttachmentPointsByAtomId(atomId);\n  attachmentPointsToDelete.forEach((rgroupAttachmentPointId) => {\n    action.addOp(new RGroupAttachmentPointRemove(rgroupAttachmentPointId));\n  });\n  return action.perform(restruct);\n}\n\nexport function fromRGroupAttachmentPointDeletion(\n  restruct: ReStruct,\n  id: number,\n) {\n  const { atomId, newAttachmentPoints } = getNewAtomAttachmentPoints(\n    restruct.molecule,\n    id,\n  );\n  const actionToUpdateAtomsAttrs = fromAtomsAttrs(\n    restruct,\n    atomId,\n    { attachmentPoints: newAttachmentPoints },\n    null,\n  );\n\n  const actionToDeletePoint = new Action();\n  actionToDeletePoint.addOp(new RGroupAttachmentPointRemove(id));\n\n  return actionToDeletePoint\n    .perform(restruct)\n    .mergeWith(actionToUpdateAtomsAttrs);\n}\n\nfunction getNewAtomAttachmentPoints(\n  struct: Struct,\n  rgroupAttachmentPointToDelete: number,\n) {\n  const pointToDelete = struct.rgroupAttachmentPoints.get(\n    rgroupAttachmentPointToDelete,\n  );\n  assert(pointToDelete != null);\n  const attachedAtomId = pointToDelete.atomId;\n  const attachedAtom = struct.atoms.get(attachedAtomId);\n  const currentAttachmentPoints = attachedAtom?.attachmentPoints;\n\n  let newAttachmentPoints = AttachmentPoints.None;\n  if (currentAttachmentPoints === AttachmentPoints.BothSides) {\n    const pointToDeleteType = pointToDelete.type;\n    if (pointToDeleteType === 'primary') {\n      newAttachmentPoints = AttachmentPoints.SecondSideOnly;\n    } else if (pointToDeleteType === 'secondary') {\n      newAttachmentPoints = AttachmentPoints.FirstSideOnly;\n    }\n  }\n\n  return { atomId: attachedAtomId, newAttachmentPoints };\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  AtomDelete,\n  BondDelete,\n  CalcImplicitH,\n  ImageDelete,\n  MultitailArrowDelete,\n  RGroupAttachmentPointRemove,\n  RxnArrowDelete,\n  RxnPlusDelete,\n  SGroupAtomRemove,\n  SimpleObjectDelete,\n  TextDelete,\n} from '../operations';\nimport { RGroup } from 'domain/entities';\nimport { removeAtomFromSgroupIfNeeded, removeSgroupIfNeeded } from './sgroup';\n\nimport { Action } from './action';\nimport assert from 'assert';\nimport { atomGetDegree, formatSelection } from './utils';\nimport {\n  fromBondStereoUpdate,\n  removeAttachmentPointFromSuperatom,\n} from '../actions/bond';\nimport { fromFragmentSplit } from './fragment';\nimport { fromRGroupAttachmentPointDeletion } from './rgroupAttachmentPoint';\nimport { ReStruct } from 'application/render';\nimport { isNumber } from 'lodash';\nimport { IMAGE_KEY, MULTITAIL_ARROW_KEY } from 'domain/constants';\n\nexport function fromOneAtomDeletion(restruct, atomId: number) {\n  return fromFragmentDeletion(restruct, { atoms: [atomId] });\n}\n\nfunction fromBondDeletion(\n  restruct: ReStruct,\n  bid: number,\n  skipAtoms: Array<any> = [],\n) {\n  let action = new Action();\n\n  if (restruct.sgroups && restruct.sgroups.size > 0) {\n    restruct.sgroups.forEach((sgroup) => {\n      if (sgroup.item?.type && sgroup.item?.type === 'SUP') {\n        const beginAtomConnectedToBond = restruct.bonds.get(bid)?.b.begin;\n        const endAtomConnectedToBond = restruct.bonds.get(bid)?.b.end;\n\n        removeAttachmentPointFromSuperatom(\n          sgroup,\n          beginAtomConnectedToBond,\n          endAtomConnectedToBond,\n          action,\n          restruct,\n        );\n      }\n    });\n  }\n\n  const bond: any = restruct.molecule.bonds.get(bid);\n  const atomsToRemove: Array<any> = [];\n\n  action.addOp(new BondDelete(bid));\n\n  if (\n    !skipAtoms.includes(bond.begin) &&\n    atomGetDegree(restruct, bond.begin) === 0\n  ) {\n    if (removeAtomFromSgroupIfNeeded(action, restruct, bond.begin)) {\n      atomsToRemove.push(bond.begin);\n    }\n\n    action.addOp(new AtomDelete(bond.begin));\n  }\n\n  if (\n    !skipAtoms.includes(bond.end) &&\n    atomGetDegree(restruct, bond.end) === 0\n  ) {\n    if (removeAtomFromSgroupIfNeeded(action, restruct, bond.end)) {\n      atomsToRemove.push(bond.end);\n    }\n\n    action.addOp(new AtomDelete(bond.end));\n  }\n\n  removeSgroupIfNeeded(action, restruct, atomsToRemove);\n  action = action.perform(restruct);\n  action.addOp(new CalcImplicitH([bond.begin, bond.end]).perform(restruct));\n  action.mergeWith(fromBondStereoUpdate(restruct, bond, false));\n\n  action.operations.reverse();\n\n  return action;\n}\n\nexport function fromOneBondDeletion(restruct, id) {\n  const frid = restruct.molecule.getBondFragment(id);\n  let action = fromBondDeletion(restruct, id);\n\n  action = fromFragmentSplit(restruct, frid).mergeWith(action);\n\n  return action;\n}\n\nexport function fromFragmentDeletion(restruct, rawSelection) {\n  assert(!!rawSelection != null);\n\n  let action = new Action();\n  const atomsToRemove: Array<number> = [];\n  const frids: Array<number> = [];\n  const struct = restruct.molecule;\n  const selection = formatSelection(rawSelection);\n\n  selection.sgroups.forEach((sgroupId) => {\n    const sgroup = restruct.sgroups.get(sgroupId);\n    const sgroupAtoms = sgroup.item.atoms;\n\n    selection.atoms = selection.atoms.concat(sgroupAtoms);\n\n    restruct.molecule.bonds.forEach((bond, bondId) => {\n      if (\n        sgroupAtoms.indexOf(bond.begin) >= 0 &&\n        sgroupAtoms.indexOf(bond.end) >= 0\n      ) {\n        selection.bonds.push(bondId);\n      }\n    });\n  });\n\n  selection.atoms = Array.from(new Set(selection.atoms));\n  selection.bonds = Array.from(new Set(selection.bonds));\n\n  selection.atoms.forEach((atomId) => {\n    const sgroup = struct.getGroupFromAtomId(atomId);\n    if (sgroup && sgroup.isSuperatomWithoutLabel) {\n      const attachmentPoints = sgroup.getAttachmentPoints();\n      attachmentPoints.forEach((attachmentPoint) => {\n        if (\n          attachmentPoint.atomId === atomId &&\n          isNumber(attachmentPoint.leaveAtomId) &&\n          !selection.atoms.includes(attachmentPoint.leaveAtomId)\n        ) {\n          action.addOp(\n            new SGroupAtomRemove(sgroup.id, attachmentPoint.leaveAtomId),\n          );\n          action.addOp(new AtomDelete(attachmentPoint.leaveAtomId));\n        }\n      });\n    }\n  });\n\n  selection.atoms.forEach((aid) => {\n    restruct.molecule.atomGetNeighbors(aid).forEach((nei) => {\n      if (selection.bonds.indexOf(nei.bid) === -1) {\n        selection.bonds = selection.bonds.concat([nei.bid]);\n      }\n    });\n  });\n\n  const actionRemoveBonds = new Action();\n  selection.bonds.forEach((bid) => {\n    const frid = restruct.molecule.getBondFragment(bid);\n    if (frids.indexOf(frid) < 0) frids.push(frid);\n\n    actionRemoveBonds.mergeWith(\n      fromBondDeletion(restruct, bid, selection.atoms),\n    );\n  });\n\n  const removedRGroupAttachmentPoints: number[] = [];\n  selection.atoms.forEach((aid) => {\n    const frid3 = restruct.molecule.atoms.get(aid).fragment;\n    if (frids.indexOf(frid3) < 0) frids.push(frid3);\n\n    if (removeAtomFromSgroupIfNeeded(action, restruct, aid)) {\n      atomsToRemove.push(aid);\n    }\n\n    action.addOp(new AtomDelete(aid));\n\n    const attachmentPointsToDelete =\n      restruct.molecule.getRGroupAttachmentPointsByAtomId(aid);\n    attachmentPointsToDelete.forEach((id) => {\n      action.addOp(new RGroupAttachmentPointRemove(id));\n      removedRGroupAttachmentPoints.push(id);\n    });\n  });\n\n  removeSgroupIfNeeded(action, restruct, atomsToRemove);\n\n  selection.rxnArrows.forEach((id) => {\n    action.addOp(new RxnArrowDelete(id));\n  });\n\n  selection.rxnPluses.forEach((id) => {\n    action.addOp(new RxnPlusDelete(id));\n  });\n\n  selection.simpleObjects.forEach((id) => {\n    action.addOp(new SimpleObjectDelete(id));\n  });\n\n  selection.texts.forEach((id) => {\n    action.addOp(new TextDelete(id));\n  });\n\n  selection[IMAGE_KEY].forEach((id) => {\n    action.addOp(new ImageDelete(id));\n  });\n\n  selection[MULTITAIL_ARROW_KEY].forEach((id) => {\n    action.addOp(new MultitailArrowDelete(id));\n  });\n\n  const actionToDeleteRGroupAttachmentPoints = new Action();\n  selection.rgroupAttachmentPoints.forEach((id) => {\n    if (!removedRGroupAttachmentPoints.includes(id)) {\n      actionToDeleteRGroupAttachmentPoints.mergeWith(\n        fromRGroupAttachmentPointDeletion(restruct, id),\n      );\n    }\n  });\n\n  action = action.perform(restruct);\n  action\n    .mergeWith(actionRemoveBonds)\n    .mergeWith(actionToDeleteRGroupAttachmentPoints);\n\n  const rgForRemove: Array<number> = frids.map(\n    (frid) => RGroup.findRGroupByFragment(restruct.molecule.rgroups, frid)!,\n  );\n\n  while (frids.length > 0) {\n    action = fromFragmentSplit(restruct, frids.pop(), rgForRemove).mergeWith(\n      action,\n    );\n  }\n\n  return action;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  AtomAdd,\n  BondAdd,\n  FragmentAdd,\n  FragmentAddStereoAtom,\n  RGroupFragment,\n  RxnArrowAdd,\n  RxnPlusAdd,\n  SimpleObjectAdd,\n  TextCreate,\n  CalcImplicitH,\n  FragmentSetProperties,\n  BondAttr,\n  AtomAttr,\n  ImageUpsert,\n  MultitailArrowUpsert,\n} from '../operations';\nimport { fromRGroupAttrs, fromUpdateIfThen } from './rgroup';\n\nimport { Action } from './action';\nimport { MultitailArrow, SGroup, Struct, Vec2 } from 'domain/entities';\nimport { fromSgroupAddition } from './sgroup';\nimport { fromRGroupAttachmentPointAddition } from './rgroupAttachmentPoint';\nimport { MonomerMicromolecule } from 'domain/entities/monomerMicromolecule';\nimport { Image } from 'domain/entities/image';\n\ntype CreatedItems = {\n  atoms: number[];\n  bonds: number[];\n  rxnArrows: number[];\n  rxnPluses: number[];\n  texts: number[];\n  images: number[];\n  simpleObjects: number[];\n  multitailArrows: number[];\n};\n\nexport function fromPaste(\n  restruct,\n  pstruct,\n  point,\n  angle = 0,\n  isPreview = false,\n): [Action, { atoms: number[]; bonds: number[] }, CreatedItems] {\n  const xy0 = getStructCenter(pstruct);\n  const offset = Vec2.diff(point, xy0);\n\n  const action = new Action();\n\n  const aidMap = new Map();\n  const fridMap = new Map();\n\n  const pasteItems = {\n    // only atoms and bonds now\n    atoms: [] as number[],\n    bonds: [] as number[],\n  };\n\n  const items: CreatedItems = {\n    atoms: [],\n    bonds: [],\n    rxnArrows: [],\n    rxnPluses: [],\n    texts: [],\n    images: [],\n    simpleObjects: [],\n    multitailArrows: [],\n  };\n\n  pstruct.atoms.forEach((atom, aid) => {\n    if (!fridMap.has(atom.fragment) && !pstruct.isAtomFromMacromolecule(aid)) {\n      fridMap.set(\n        atom.fragment,\n        (\n          action.addOp(\n            new FragmentAdd(null, atom.fragment.properties).perform(restruct),\n          ) as FragmentAdd\n        ).frid,\n      );\n    }\n\n    const tmpAtom = Object.assign(atom.clone(), {\n      fragment: fridMap.get(atom.fragment),\n    });\n    const operation = new AtomAdd(\n      tmpAtom,\n      Vec2.diff(atom.pp, xy0).rotate(angle).add(point),\n    ).perform(restruct) as AtomAdd;\n    action.addOp(operation);\n    aidMap.set(aid, operation.data.aid);\n\n    pasteItems.atoms.push(operation.data.aid);\n    items.atoms.push(operation.data.aid);\n\n    action.mergeWith(\n      fromRGroupAttachmentPointAddition(\n        restruct,\n        tmpAtom.attachmentPoints,\n        operation.data.aid,\n      ),\n    );\n  });\n\n  pstruct.frags.forEach((frag, frid) => {\n    if (!frag) return;\n    if (frag.properties) {\n      action.addOp(\n        new FragmentSetProperties(fridMap.get(frid), frag.properties).perform(\n          restruct,\n        ),\n      );\n    }\n    frag.stereoAtoms.forEach((aid) =>\n      action.addOp(\n        new FragmentAddStereoAtom(fridMap.get(frid), aidMap.get(aid)).perform(\n          restruct,\n        ),\n      ),\n    );\n  });\n\n  pstruct.bonds.forEach((bond) => {\n    const operation = new BondAdd(\n      aidMap.get(bond.begin),\n      aidMap.get(bond.end),\n      bond,\n      false,\n    ).perform(restruct) as BondAdd;\n    action.addOp(operation);\n\n    pasteItems.bonds.push(operation.data.bid);\n    items.bonds.push(operation.data.bid);\n    new BondAttr(operation.data.bid, 'isPreview', isPreview, false).perform(\n      restruct,\n    );\n  });\n\n  pstruct.sgroups.forEach((sg: SGroup) => {\n    const newsgid = restruct.molecule.sgroups.newId();\n    const sgAtoms = sg.atoms.map((aid) => aidMap.get(aid));\n    const attachmentPoints = sg.cloneAttachmentPoints(aidMap);\n    if (\n      sg.isNotContractible(pstruct) &&\n      !(sg instanceof MonomerMicromolecule)\n    ) {\n      sg.setAttr('expanded', true);\n    }\n    const sgAction = fromSgroupAddition(\n      restruct,\n      sg.type,\n      sgAtoms,\n      sg.data,\n      newsgid,\n      attachmentPoints,\n      sg.pp ? sg.pp.add(offset) : null,\n      sg.type === 'SUP' ? sg.isExpanded() : null,\n      sg.data.name,\n      sg,\n    );\n    sgAction.operations.reverse().forEach((oper) => {\n      action.addOp(oper);\n    });\n  });\n\n  pasteItems.atoms.forEach((aid) => {\n    action.addOp(new CalcImplicitH([aid]).perform(restruct));\n    new AtomAttr(aid, 'isPreview', isPreview).perform(restruct);\n  });\n\n  pstruct.rxnArrows.forEach((rxnArrow) => {\n    const operation = new RxnArrowAdd(\n      rxnArrow.pos.map((p) => p.add(offset)),\n      rxnArrow.mode,\n    ).perform(restruct);\n    action.addOp(operation);\n    items.rxnArrows.push(operation.data.id);\n  });\n\n  pstruct.rxnPluses.forEach((plus) => {\n    const operation = new RxnPlusAdd(plus.pp.add(offset)).perform(restruct);\n    action.addOp(operation);\n    items.rxnPluses.push(operation.data.plid);\n  });\n\n  pstruct.simpleObjects.forEach((simpleObject) => {\n    const operation = new SimpleObjectAdd(\n      simpleObject.pos.map((p) => p.add(offset)),\n      simpleObject.mode,\n    ).perform(restruct);\n    action.addOp(operation);\n    items.simpleObjects.push(operation.data.id);\n  });\n\n  pstruct.texts.forEach((text) => {\n    const operation = new TextCreate(\n      text.content,\n      text.position.add(offset),\n      text.pos.map((p) => p.add(offset)),\n    ).perform(restruct);\n    action.addOp(operation);\n    items.texts.push(operation.data.id);\n  });\n\n  pstruct.images.forEach((image: Image) => {\n    const clonedImage = image.clone();\n    clonedImage.addPositionOffset(offset);\n    const operation = new ImageUpsert(clonedImage).perform(restruct);\n    action.addOp(operation);\n    items.images.push(operation.data.id);\n  });\n\n  pstruct.multitailArrows.forEach((multitailArrow: MultitailArrow) => {\n    const clonedMultitailArrow = multitailArrow.clone();\n    clonedMultitailArrow.move(offset);\n    const operation = new MultitailArrowUpsert(clonedMultitailArrow).perform(\n      restruct,\n    );\n    action.addOp(operation);\n    items.multitailArrows.push(operation.data.id);\n  });\n\n  pstruct.rgroups.forEach((rg, rgid) => {\n    rg.frags.forEach((__frag, frid) => {\n      action.addOp(\n        new RGroupFragment(rgid, fridMap.get(frid)).perform(restruct),\n      );\n    });\n    const ifThen = pstruct.rgroups.get(rgid).ifthen;\n    const newRgId = pstruct.rgroups.get(ifThen) ? ifThen : 0;\n    action\n      .mergeWith(fromRGroupAttrs(restruct, rgid, rg.getAttrs()))\n      .mergeWith(fromUpdateIfThen(restruct, newRgId, rg.ifthen));\n  });\n\n  action.operations.reverse();\n  return [action, pasteItems, items];\n}\n\nfunction getStructCenter(struct: Struct): Vec2 {\n  const isOnlyOneSGroup = struct.sgroups.size === 1;\n  if (isOnlyOneSGroup) {\n    const onlyOneStructsSgroupId = struct.sgroups.keys().next().value;\n    const sgroup = struct.sgroups.get(onlyOneStructsSgroupId) as SGroup;\n    if (sgroup.isContracted()) {\n      return sgroup.getContractedPosition(struct).position;\n    }\n  }\n  if (struct.atoms.size > 0) {\n    let xmin = 1e50;\n    let ymin = xmin;\n    let xmax = -xmin;\n    let ymax = -ymin;\n\n    struct.atoms.forEach((atom) => {\n      xmin = Math.min(xmin, atom.pp.x);\n      ymin = Math.min(ymin, atom.pp.y);\n      xmax = Math.max(xmax, atom.pp.x);\n      ymax = Math.max(ymax, atom.pp.y);\n    });\n    return new Vec2((xmin + xmax) / 2, (ymin + ymax) / 2); // TODO: check\n  }\n  // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion\n  if (struct.rxnArrows.size > 0) return struct.rxnArrows.get(0)!.center();\n  // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion\n  if (struct.rxnPluses.size > 0) return struct.rxnPluses.get(0)!.pp;\n  if (struct.simpleObjects.size > 0)\n    // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion\n    return struct.simpleObjects.get(0)!.center();\n  // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion\n  if (struct.texts.size > 0) return struct.texts.get(0)!.position;\n  // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion\n  if (struct.images.size > 0) return struct.images.get(0)!.center();\n  if (struct.multitailArrows.size > 0)\n    // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion\n    return struct.multitailArrows.get(0)!.center();\n\n  return new Vec2(0, 0);\n}\n","import { ReStruct } from 'application/render';\nimport { ImageReferencePositionInfo, Vec2 } from 'domain/entities';\nimport {\n  Action,\n  ImageDelete,\n  ImageMove,\n  ImageResize,\n  ImageUpsert,\n} from 'application/editor';\nimport { Image } from 'domain/entities/image';\n\nexport function fromImageCreation(\n  reStruct: ReStruct,\n  bitmap: string,\n  center: Vec2,\n  halfSize: Vec2,\n) {\n  const action = new Action();\n  const image = new Image(bitmap, center, halfSize);\n  action.addOp(new ImageUpsert(image));\n  return action.perform(reStruct);\n}\n\nexport function fromImageDeletion(reStruct: ReStruct, id: number) {\n  const action = new Action();\n  action.addOp(new ImageDelete(id));\n  return action.perform(reStruct);\n}\n\nexport function fromImageMove(reStruct: ReStruct, id: number, offset: Vec2) {\n  const action = new Action();\n  action.addOp(new ImageMove(id, offset));\n  return action.perform(reStruct);\n}\n\nexport function fromImageResize(\n  reStruct: ReStruct,\n  id: number,\n  position: Vec2,\n  referencePositionInfo: ImageReferencePositionInfo,\n) {\n  const action = new Action();\n  const positionWithOffset = position.add(referencePositionInfo.offset);\n  action.addOp(\n    new ImageResize(id, positionWithOffset, referencePositionInfo.name),\n  );\n  return action.perform(reStruct);\n}\n","import { MultitailArrowReferencePosition, ReStruct } from 'application/render';\nimport {\n  Action,\n  MultitailArrowDelete,\n  MultitailArrowUpsert,\n  MultitailArrowMove,\n  MultitailArrowAddTail,\n  MultitailArrowRemoveTail,\n  MultitailArrowResizeTailHead,\n  MultitailArrowMoveHeadTail,\n} from 'application/editor';\nimport { Vec2, MultitailArrow } from 'domain/entities';\n\nexport function fromMultitailArrowCreation(\n  reStruct: ReStruct,\n  topLeft: Vec2,\n  bottomRight: Vec2,\n) {\n  const action = new Action();\n  const multitailArrow = MultitailArrow.fromTwoPoints(topLeft, bottomRight);\n  action.addOp(new MultitailArrowUpsert(multitailArrow));\n  return action.perform(reStruct);\n}\n\nexport function fromMultitailArrowDeletion(reStruct: ReStruct, id: number) {\n  const action = new Action();\n  action.addOp(new MultitailArrowDelete(id));\n  return action.perform(reStruct);\n}\n\nexport function fromMultitailArrowMove(\n  reStruct: ReStruct,\n  id: number,\n  offset: Vec2,\n) {\n  const action = new Action();\n\n  action.addOp(new MultitailArrowMove(id, offset));\n  return action.perform(reStruct);\n}\n\nexport function fromMultitailArrowTailAdd(reStruct: ReStruct, id: number) {\n  const action = new Action();\n\n  action.addOp(new MultitailArrowAddTail(id));\n  return action.perform(reStruct);\n}\n\nexport function fromMultitailArrowTailRemove(\n  reStruct: ReStruct,\n  id: number,\n  tailId: number,\n) {\n  const action = new Action();\n\n  action.addOp(new MultitailArrowRemoveTail(id, tailId));\n  return action.perform(reStruct);\n}\n\nexport function fromMultitailArrowHeadTailsResize(\n  reStruct: ReStruct,\n  id: number,\n  ref: MultitailArrowReferencePosition,\n  offset: number,\n) {\n  const action = new Action();\n  action.addOp(\n    new MultitailArrowResizeTailHead(id, offset, ref.name === 'head'),\n  );\n  return action.perform(reStruct);\n}\n\nexport function fromMultitailArrowHeadTailMove(\n  reStruct: ReStruct,\n  id: number,\n  ref: MultitailArrowReferencePosition,\n  offset: number,\n  normalize?: true,\n) {\n  const action = new Action();\n  action.addOp(\n    new MultitailArrowMoveHeadTail(id, offset, ref.name, ref.tailId, normalize),\n  );\n  return action.perform(reStruct);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { ReStruct } from 'application/render';\nimport { Vec2 } from 'domain/entities';\nimport {\n  RxnArrowAdd,\n  RxnArrowDelete,\n  RxnArrowResize,\n  RxnPlusAdd,\n  RxnPlusDelete,\n} from '../operations';\n\nimport { Action } from './action';\n\nexport function fromArrowAddition(restruct, pos, mode) {\n  const action = new Action();\n  action.addOp(new RxnArrowAdd(pos, mode));\n  return action.perform(restruct);\n}\n\nexport function fromArrowResizing(\n  restruct: ReStruct,\n  id: number,\n  d: Vec2,\n  current: Vec2,\n  anchor: Vec2 | null,\n  isSnappingEnabled: boolean,\n) {\n  const action = new Action();\n  action.addOp(\n    new RxnArrowResize(id, d, current, anchor, false, isSnappingEnabled),\n  );\n  return action.perform(restruct);\n}\n\nexport function fromArrowDeletion(restruct, id) {\n  const action = new Action();\n  action.addOp(new RxnArrowDelete(id));\n  return action.perform(restruct);\n}\n\nexport function fromPlusAddition(restruct, pos) {\n  const action = new Action();\n  action.addOp(new RxnPlusAdd(pos).perform(restruct));\n  return action;\n}\n\nexport function fromPlusDeletion(restruct, id) {\n  const action = new Action();\n  action.addOp(new RxnPlusDelete(id));\n  return action.perform(restruct);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  AtomMove,\n  BondAttr,\n  EnhancedFlagMove,\n  RxnArrowMove,\n  RxnArrowRotate,\n  RxnPlusMove,\n  SGroupDataMove,\n  TextMove,\n} from '../operations';\nimport { Bond, Fragment, Struct, Vec2 } from 'domain/entities';\nimport { ReStruct } from 'application/render';\nimport { getRelSGroupsBySelection, structSelection } from './utils';\nimport { Action } from './action';\nimport { EditorSelection } from '../editor.types';\n\nexport type FlipDirection = 'horizontal' | 'vertical';\n\nexport function fromFlip(\n  reStruct: ReStruct,\n  selection: EditorSelection | null,\n  flipDirection: FlipDirection,\n  center: Vec2,\n) {\n  const action = new Action();\n  const structToFlip = selection || structSelection(reStruct.molecule);\n\n  action.mergeWith(\n    fromStructureFlip(reStruct, structToFlip, flipDirection, center),\n  );\n\n  if (structToFlip.rxnArrows) {\n    action.mergeWith(\n      fromRxnArrowFlip(reStruct, structToFlip.rxnArrows, flipDirection, center),\n    );\n  }\n\n  if (structToFlip.rxnPluses) {\n    action.mergeWith(\n      fromRxnPlusFlip(reStruct, structToFlip.rxnPluses, flipDirection, center),\n    );\n  }\n\n  if (structToFlip.texts) {\n    action.mergeWith(\n      fromTextFlip(reStruct, structToFlip.texts, flipDirection, center),\n    );\n  }\n\n  return action;\n}\n\nfunction fromRxnArrowFlip(\n  reStruct: ReStruct,\n  rxnArrowIds: number[],\n  flipDirection: FlipDirection,\n  center: Vec2,\n) {\n  const action = new Action();\n\n  rxnArrowIds.forEach((arrowId) => {\n    const rxnArrow = reStruct.molecule.rxnArrows.get(arrowId);\n    if (!rxnArrow) {\n      return;\n    }\n\n    const [start, end] = rxnArrow.pos;\n    const oxAngle = end.sub(start).oxAngle();\n    const oyAngle = oxAngle - Math.PI / 2;\n    const rotateAngle =\n      flipDirection === 'vertical' ? -2 * oxAngle : -2 * oyAngle;\n    action.addOp(new RxnArrowRotate(arrowId, rotateAngle, rxnArrow.center()));\n\n    const difference = flipPointByCenter(\n      rxnArrow.center(),\n      center,\n      flipDirection,\n    );\n    action.addOp(new RxnArrowMove(arrowId, difference));\n  });\n\n  return action.perform(reStruct);\n}\n\nfunction fromRxnPlusFlip(\n  reStruct: ReStruct,\n  rxnPlusIds: number[],\n  flipDirection: FlipDirection,\n  center: Vec2,\n) {\n  const action = new Action();\n\n  rxnPlusIds.forEach((plusId) => {\n    const rxnPlus = reStruct.molecule.rxnPluses.get(plusId);\n    if (!rxnPlus) {\n      return;\n    }\n\n    const difference = flipPointByCenter(rxnPlus.pp, center, flipDirection);\n    action.addOp(new RxnPlusMove(plusId, difference));\n  });\n\n  return action.perform(reStruct);\n}\n\nfunction fromTextFlip(\n  reStruct: ReStruct,\n  textIds: number[],\n  flipDirection: FlipDirection,\n  center: Vec2,\n) {\n  const action = new Action();\n\n  textIds.forEach((textId) => {\n    const text = reStruct.molecule.texts.get(textId);\n    if (!text) {\n      return;\n    }\n\n    // Note: text has two position properties\n    //      `position`: the middle left point\n    //      `pos`: a box (not bounding box)\n    // `TextMove` is to move `position`, so we have to calculate the flipped `position`\n    const textMiddleLeft = text.pos[0];\n    const textMiddleRight = text.pos[2];\n    const textCenter = Vec2.centre(textMiddleLeft, textMiddleRight);\n\n    const difference = flipPointByCenter(textCenter, center, flipDirection);\n    action.addOp(new TextMove(textId, difference));\n  });\n\n  return action.perform(reStruct);\n}\n\nfunction fromStructureFlip(\n  reStruct: ReStruct,\n  selection: EditorSelection | null,\n  flipDirection: FlipDirection,\n  center: Vec2,\n) {\n  const struct = reStruct.molecule;\n  const action = new Action();\n\n  selection?.atoms?.forEach((atomId) => {\n    const atom = struct.atoms.get(atomId);\n    if (!atom) {\n      return;\n    }\n\n    const difference = flipPointByCenter(atom.pp, center, flipDirection);\n    action.addOp(new AtomMove(atomId, difference));\n  });\n\n  const sGroups = getRelSGroupsBySelection(struct, selection?.atoms || []);\n  sGroups.forEach((sGroup) => {\n    if (!sGroup.pp) {\n      return;\n    }\n    const difference = flipPointByCenter(sGroup.pp, center, flipDirection);\n    action.addOp(new SGroupDataMove(sGroup.id, difference));\n  });\n\n  if (selection?.bonds) {\n    flipBonds(selection.bonds, struct, action);\n  }\n\n  return action.perform(reStruct);\n}\n\nfunction flipBonds(bondIds: number[], struct: Struct, action: Action) {\n  bondIds.forEach((bondId) => {\n    const bond = struct.bonds.get(bondId);\n\n    if (!bond) {\n      return;\n    }\n\n    if (bond.type !== Bond.PATTERN.TYPE.SINGLE) {\n      return;\n    }\n\n    if (bond.stereo === Bond.PATTERN.STEREO.UP) {\n      action.addOp(new BondAttr(bondId, 'stereo', Bond.PATTERN.STEREO.DOWN));\n      return;\n    }\n\n    if (bond.stereo === Bond.PATTERN.STEREO.DOWN) {\n      action.addOp(new BondAttr(bondId, 'stereo', Bond.PATTERN.STEREO.UP));\n    }\n  });\n}\n\nfunction flipPointByCenter(\n  pointToFlip: Vec2,\n  center: Vec2,\n  flipDirection: FlipDirection,\n) {\n  const d = new Vec2();\n  if (flipDirection === 'horizontal') {\n    d.x =\n      center.x > pointToFlip.x\n        ? 2 * (center.x - pointToFlip.x)\n        : -2 * (pointToFlip.x - center.x);\n  } else {\n    // 'vertical'\n    d.y =\n      center.y > pointToFlip.y\n        ? 2 * (center.y - pointToFlip.y)\n        : -2 * (pointToFlip.y - center.y);\n  }\n  return d;\n}\n\nexport function fromRotate(restruct, selection, center, angle) {\n  // eslint-disable-line\n  const struct = restruct.molecule;\n\n  const action = new Action();\n\n  if (!selection) {\n    selection = structSelection(struct);\n  }\n\n  if (selection.atoms) {\n    selection.atoms.forEach((aid) => {\n      const atom = struct.atoms.get(aid);\n      action.addOp(new AtomMove(aid, rotateDelta(atom.pp, center, angle)));\n    });\n\n    if (!selection.sgroupData) {\n      const sgroups = getRelSGroupsBySelection(struct, selection.atoms);\n\n      sgroups.forEach((sg) => {\n        action.addOp(\n          new SGroupDataMove(sg.id, rotateDelta(sg.pp, center, angle)),\n        );\n      });\n    }\n  }\n\n  if (selection.rxnArrows) {\n    selection.rxnArrows.forEach((arrowId) => {\n      action.addOp(new RxnArrowRotate(arrowId, angle, center));\n    });\n  }\n\n  if (selection.rxnPluses) {\n    selection.rxnPluses.forEach((pid) => {\n      const plus = struct.rxnPluses.get(pid);\n      action.addOp(new RxnPlusMove(pid, rotateDelta(plus.pp, center, angle)));\n    });\n  }\n\n  if (selection.texts) {\n    selection.texts.forEach((textId) => {\n      const text = struct.texts.get(textId);\n      action.addOp(\n        new TextMove(textId, rotateDelta(text.position, center, angle)),\n      );\n    });\n  }\n\n  if (selection.sgroupData) {\n    selection.sgroupData.forEach((did) => {\n      const data = struct.sgroups.get(did);\n      action.addOp(\n        new SGroupDataMove(did, rotateDelta(data.pp, center, angle)),\n      );\n    });\n  }\n\n  if (selection.enhancedFlags) {\n    selection.enhancedFlags.forEach((flagId) => {\n      const frId = flagId;\n      const frag = restruct.molecule.frags.get(frId);\n      action.addOp(\n        new EnhancedFlagMove(\n          flagId,\n          rotateDelta(\n            frag.stereoFlagPosition ||\n              Fragment.getDefaultStereoFlagPosition(restruct.molecule, frId),\n            center,\n            angle,\n          ),\n        ),\n      );\n    });\n  }\n\n  return action.perform(restruct);\n}\n\nfunction rotateDelta(v, center, angle) {\n  let v1 = v.sub(center);\n  v1 = v1.rotate(angle);\n  v1.add_(center); // eslint-disable-line no-underscore-dangle\n  return v1.sub(v);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  SimpleObjectAdd,\n  SimpleObjectDelete,\n  SimpleObjectResize,\n} from '../operations';\n\nimport { Action } from './action';\n\nexport function fromSimpleObjectDeletion(restruct, id) {\n  const action = new Action();\n  action.addOp(new SimpleObjectDelete(id));\n  return action.perform(restruct);\n}\n\nexport function fromSimpleObjectAddition(restruct, pos, mode, toCircle) {\n  const action = new Action();\n  action.addOp(new SimpleObjectAdd(pos, mode, toCircle));\n  return action.perform(restruct);\n}\n\nexport function fromSimpleObjectResizing(\n  restruct,\n  id,\n  d,\n  current,\n  anchor,\n  toCircle,\n) {\n  const action = new Action();\n  action.addOp(new SimpleObjectResize(id, d, current, anchor, false, toCircle));\n  return action.perform(restruct);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Atom, Bond, SGroup, Struct, Vec2 } from 'domain/entities';\nimport { AtomAdd, BondAdd, BondAttr, CalcImplicitH } from '../operations';\nimport { atomForNewBond, atomGetAttr } from './utils';\nimport { fromAtomsAttrs, mergeSgroups } from './atom';\nimport { fromBondStereoUpdate, fromBondsAttrs, fromBondAddition } from './bond';\n\nimport { Action } from './action';\nimport closest from '../shared/closest';\nimport { fromAromaticTemplateOnBond } from './aromaticFusing';\nimport { fromPaste } from './paste';\nimport utils from '../shared/utils';\nimport { fromSgroupAddition } from './sgroup';\n\nconst benzeneMoleculeName = 'Benzene';\nconst cyclopentadieneMoleculeName = 'Cyclopentadiene';\nconst benzeneDoubleBondIndexes = [2, 4];\n\nexport function fromTemplateOnCanvas(\n  restruct,\n  template,\n  pos,\n  angle = 0,\n  isPreview = true,\n): [Action, { atoms: number[]; bonds: number[] }] {\n  const [action, pasteItems] = fromPaste(\n    restruct,\n    template.molecule,\n    pos,\n    angle,\n    isPreview,\n  );\n\n  action.addOp(new CalcImplicitH(pasteItems.atoms).perform(restruct));\n\n  return [action, pasteItems];\n}\n\nfunction extraBondAction(restruct, aid, angle) {\n  let action = new Action();\n  const frid = atomGetAttr(restruct, aid, 'fragment');\n  let additionalAtom: any = null;\n\n  if (angle === null) {\n    const middleAtom = atomForNewBond(restruct, aid);\n    const actionRes = fromBondAddition(\n      restruct,\n      { type: 1 },\n      aid,\n      middleAtom.atom,\n      undefined,\n      middleAtom.pos.get_xy0(),\n    );\n    action = actionRes[0];\n    action.operations.reverse();\n    additionalAtom = actionRes[2];\n  } else {\n    const operation = new AtomAdd(\n      { label: 'C', fragment: frid },\n      new Vec2(1, 0)\n        .rotate(angle)\n        .add(restruct.molecule.atoms.get(aid).pp)\n        .get_xy0(),\n    ).perform(restruct) as AtomAdd;\n\n    action.addOp(operation);\n    action.addOp(\n      new BondAdd(aid, operation.data.aid, { type: 1 }).perform(restruct),\n    );\n\n    additionalAtom = operation.data.aid;\n  }\n\n  return { action, aid1: additionalAtom };\n}\n\nexport function fromTemplateOnAtom(\n  restruct,\n  template,\n  aid,\n  angle,\n  extraBond,\n  isPreview = false,\n): [Action, { atoms: number[]; bonds: number[] }] {\n  let action = new Action();\n\n  const tmpl = template.molecule;\n  const struct = restruct.molecule;\n\n  const isTmplSingleGroup = template.molecule.isSingleGroup();\n\n  let atom = struct.atoms.get(aid); // aid - the atom that was clicked on\n  let aid1 = aid; // aid1 - the atom on the other end of the extra bond || aid\n\n  let delta: any = null;\n\n  if (extraBond) {\n    // create extra bond after click on atom\n    const extraRes = extraBondAction(restruct, aid, angle);\n    action = extraRes.action;\n    aid1 = extraRes.aid1;\n\n    atom = struct.atoms.get(aid1);\n    delta =\n      utils.calcAngle(struct.atoms.get(aid).pp, atom.pp) - template.angle0;\n  } else {\n    if (angle === null) {\n      angle = utils.calcAngle(atom.pp, atomForNewBond(restruct, aid).pos);\n    }\n    delta = angle - template.angle0;\n  }\n\n  const map = new Map();\n  const xy0 = tmpl.atoms.get(template.aid).pp;\n  const frid = atomGetAttr(restruct, aid, 'fragment');\n\n  /* For merge */\n  const pasteItems = {\n    // only atoms and bonds now\n    atoms: [] as number[],\n    bonds: [] as number[],\n  };\n  /* ----- */\n\n  tmpl.atoms.forEach((a, id) => {\n    const attrs: any = Atom.getAttrHash(a);\n    attrs.fragment = frid;\n\n    if (id === template.aid) {\n      action.mergeWith(fromAtomsAttrs(restruct, aid1, attrs, true));\n      map.set(id, aid1);\n      pasteItems.atoms.push(aid1);\n    } else {\n      const v = Vec2.diff(a.pp, xy0).rotate(delta).add(atom.pp);\n\n      const operation = new AtomAdd(attrs, v.get_xy0()).perform(\n        restruct,\n      ) as AtomAdd;\n      action.addOp(operation);\n      map.set(id, operation.data.aid);\n      pasteItems.atoms.push(operation.data.aid);\n    }\n  });\n\n  if (!isTmplSingleGroup) mergeSgroups(action, restruct, pasteItems.atoms, aid);\n\n  tmpl.bonds.forEach((bond) => {\n    const operation = new BondAdd(\n      map.get(bond.begin),\n      map.get(bond.end),\n      bond,\n    ).perform(restruct) as BondAdd;\n    action.addOp(operation);\n    new BondAttr(operation.data.bid, 'isPreview', isPreview).perform(restruct);\n\n    pasteItems.bonds.push(operation.data.bid);\n  });\n\n  tmpl.sgroups.forEach((sg: SGroup) => {\n    const newsgid = restruct.molecule.sgroups.newId();\n    const sgAtoms = sg.atoms.map((aid) => map.get(aid));\n    const attachmentPoints = sg.cloneAttachmentPoints(map);\n    const sgAction = fromSgroupAddition(\n      restruct,\n      sg.type,\n      sgAtoms,\n      {\n        ...sg.data,\n        expanded: isPreview ? true : sg.data.expanded,\n      },\n      newsgid,\n      attachmentPoints,\n      atom.pp,\n      sg.type === 'SUP' ? sg.isExpanded() : null,\n      sg.data.name,\n    );\n    sgAction.operations.reverse().forEach((oper) => {\n      action.addOp(oper);\n    });\n  });\n\n  action.operations.reverse();\n\n  action.addOp(new CalcImplicitH([...pasteItems.atoms, aid]).perform(restruct));\n  action.mergeWith(\n    fromBondStereoUpdate(\n      restruct,\n      restruct.molecule.bonds.get(pasteItems.bonds[0]),\n    ),\n  );\n\n  return [action, pasteItems];\n}\n\nexport function fromTemplateOnBondAction(\n  restruct,\n  template,\n  bid,\n  events,\n  flip,\n  force,\n  isPreview = false,\n) {\n  if (!force) return fromTemplateOnBond(restruct, template, bid, flip);\n\n  const simpleFusing = (restruct, template, bid) =>\n    fromTemplateOnBond(restruct, template, bid, flip, isPreview); // eslint-disable-line\n  /* aromatic merge (Promise) */\n  return fromAromaticTemplateOnBond(\n    restruct,\n    template,\n    bid,\n    events,\n    simpleFusing,\n  );\n}\n\nfunction getConnectingBond(\n  template: Struct,\n  struct: Struct,\n  bondId: number,\n  bond: Bond,\n) {\n  const isBenzeneTemplate = template.name === benzeneMoleculeName;\n  const isCyclopentadieneTemplate =\n    template.name === cyclopentadieneMoleculeName;\n  if (template.bonds.size && (isBenzeneTemplate || isCyclopentadieneTemplate)) {\n    const { beginBondIds, endBondIds } = Bond.getBondNeighbourIds(\n      struct,\n      bondId,\n    );\n    const isOnlyTwoConnectingBonds =\n      beginBondIds.length === 1 && endBondIds.length === 1;\n\n    if (!isOnlyTwoConnectingBonds) {\n      return null;\n    }\n    const beginBond = struct.bonds.get(beginBondIds[0]);\n    const endBond = struct.bonds.get(endBondIds[0]);\n\n    if (!beginBond || !endBond) {\n      throw new Error('Incorrect bond id was provided');\n    }\n\n    if (isBenzeneTemplate) {\n      return Bond.getBenzeneConnectingBondType(bond, beginBond, endBond);\n    }\n\n    if (isCyclopentadieneTemplate) {\n      return Bond.getCyclopentadieneFusingBondType(bond, beginBond, endBond);\n    }\n  }\n  return null;\n}\n\nfunction fromTemplateOnBond(restruct, template, bid, flip, isPreview = false) {\n  // TODO: refactor function !!\n  const action = new Action();\n\n  const tmpl = template.molecule;\n  const struct = restruct.molecule;\n\n  const bond = struct.bonds.get(bid);\n  const tmplBond = tmpl.bonds.get(template.bid);\n\n  const tmplBegin = tmpl.atoms.get(flip ? tmplBond.end : tmplBond.begin);\n\n  const atomsMap = new Map([\n    [tmplBond.begin, flip ? bond.end : bond.begin],\n    [tmplBond.end, flip ? bond.begin : bond.end],\n  ]);\n\n  // calc angle\n  const bondAtoms = {\n    begin: flip ? tmplBond.end : tmplBond.begin,\n    end: flip ? tmplBond.begin : tmplBond.end,\n  };\n  const { angle, scale } = utils.mergeBondsParams(\n    struct,\n    bond,\n    tmpl,\n    bondAtoms,\n  );\n\n  const frid = struct.getBondFragment(bid);\n\n  /* For merge */\n  const pasteItems: any = {\n    // only atoms and bonds now\n    atoms: [],\n    bonds: [],\n  };\n  /* ----- */\n\n  tmpl.atoms.forEach((atom, id) => {\n    const attrs: any = Atom.getAttrHash(atom);\n    attrs.fragment = frid;\n    if (id === tmplBond.begin || id === tmplBond.end) {\n      action.mergeWith(fromAtomsAttrs(restruct, atomsMap.get(id), attrs, true));\n      return;\n    }\n\n    const v = Vec2.diff(atom.pp, tmplBegin.pp)\n      .rotate(angle)\n      .scaled(scale)\n      .add(struct.atoms.get(bond.begin).pp);\n    const mergeA = closest.atom(restruct, v, null, 0.1);\n\n    if (mergeA === null) {\n      const operation = new AtomAdd(attrs, v).perform(restruct) as AtomAdd;\n      action.addOp(operation);\n      atomsMap.set(id, operation.data.aid);\n      pasteItems.atoms.push(operation.data.aid);\n    } else {\n      atomsMap.set(id, mergeA.id);\n\n      action.mergeWith(fromAtomsAttrs(restruct, atomsMap.get(id), attrs, true));\n      // TODO [RB] need to merge fragments?\n    }\n  });\n  mergeSgroups(action, restruct, pasteItems.atoms, bond.begin);\n\n  // When a template of \"Benzene\" molecule is attached it\n  // uses specific fusing rules when attaching to a bond\n  // that is connected exactly to one bond on each side.\n  // For more info please refer to: https://github.com/epam/ketcher/issues/1855\n  const fusingBondType = getConnectingBond(tmpl, struct, bid, bond);\n  const isFusingBenzeneBySpecialRules = fusingBondType !== null;\n\n  tmpl.bonds.forEach((tBond, tBondIndex) => {\n    const existId = struct.findBondId(\n      atomsMap.get(tBond.begin),\n      atomsMap.get(tBond.end),\n    );\n    let previewBondId = null;\n    if (existId === null) {\n      const operation = new BondAdd(\n        atomsMap.get(tBond.begin),\n        atomsMap.get(tBond.end),\n        tBond,\n      ).perform(restruct) as BondAdd;\n      action.addOp(operation);\n      const newBondId = operation.data.bid;\n      previewBondId = newBondId;\n\n      if (isFusingBenzeneBySpecialRules) {\n        const isBenzeneTemplate = tmpl.name === benzeneMoleculeName;\n        const isCyclopentadieneTemplate =\n          tmpl.name === cyclopentadieneMoleculeName;\n        if (isBenzeneTemplate) {\n          const newBondType = benzeneDoubleBondIndexes.includes(tBondIndex)\n            ? Bond.PATTERN.TYPE.DOUBLE\n            : Bond.PATTERN.TYPE.SINGLE;\n          action.addOp(\n            new BondAttr(newBondId, 'type', newBondType).perform(restruct),\n          );\n        }\n        if (isCyclopentadieneTemplate) {\n          const { beginBondIds, endBondIds } = Bond.getBondNeighbourIds(\n            struct,\n            bid,\n          );\n          const bondBegin = struct.bonds.get(beginBondIds[0])!;\n          const bondEnd = struct.bonds.get(endBondIds[0])!;\n          const newBondType = Bond.getCyclopentadieneDoubleBondIndexes(\n            bond,\n            bondBegin,\n            bondEnd,\n          ).includes(tBondIndex)\n            ? Bond.PATTERN.TYPE.DOUBLE\n            : Bond.PATTERN.TYPE.SINGLE;\n          action.addOp(\n            new BondAttr(newBondId, 'type', newBondType).perform(restruct),\n          );\n        }\n      }\n\n      pasteItems.bonds.push(newBondId);\n    } else {\n      const commonBond = bond.type > tmplBond.type ? bond : tmplBond;\n      action.mergeWith(fromBondsAttrs(restruct, existId, commonBond, true));\n\n      if (isFusingBenzeneBySpecialRules && fusingBondType) {\n        action.addOp(\n          new BondAttr(bid, 'type', fusingBondType).perform(restruct),\n        );\n      }\n      previewBondId = bid;\n    }\n    action.addOp(\n      new BondAttr(previewBondId, 'isPreview', isPreview).perform(restruct),\n    );\n  });\n\n  if (pasteItems.atoms.length) {\n    action.addOp(\n      new CalcImplicitH([bond.begin, bond.end, ...pasteItems.atoms]).perform(\n        restruct,\n      ),\n    );\n  }\n\n  if (pasteItems.bonds.length) {\n    action.mergeWith(\n      fromBondStereoUpdate(\n        restruct,\n        restruct.molecule.bonds.get(pasteItems.bonds[0]),\n      ),\n    );\n  }\n\n  action.operations.reverse();\n\n  return [action, pasteItems];\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { TextCreate, TextDelete, TextUpdate } from '../operations';\n\nimport { Action } from './action';\nimport { ReStruct } from '../../render';\nimport { Vec2 } from 'domain/entities';\n\nexport function fromTextCreation(\n  restruct: ReStruct,\n  content: string,\n  position: Vec2,\n  pos: Array<Vec2>,\n) {\n  const action = new Action();\n  action.addOp(new TextCreate(content, position, pos));\n  return action.perform(restruct);\n}\n\nexport function fromTextUpdating(\n  restruct: ReStruct,\n  id: number,\n  content: string,\n) {\n  const action = new Action();\n  action.addOp(new TextUpdate(id, content));\n  return action.perform(restruct);\n}\n\nexport function fromTextDeletion(restruct: ReStruct, id: number) {\n  const action = new Action();\n\n  action.addOp(new TextDelete(id));\n\n  return action.perform(restruct);\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { Highlight } from 'domain/entities';\nimport { ReStruct } from '../../render';\n\nimport { BaseOperation } from './base';\nimport { OperationType } from './OperationType';\n\ntype Data = {\n  atoms: Array<number>;\n  bonds: Array<number>;\n  rgroupAttachmentPoints: Array<number>;\n  color: string;\n  highlightId?: number;\n};\n\nexport class HighlightAdd extends BaseOperation {\n  data: Data;\n\n  constructor(\n    atoms: Array<number>,\n    bonds: Array<number>,\n    rgroupAttachmentPoints: Array<number>,\n    color: string,\n    highlightId?: number,\n  ) {\n    super(OperationType.ADD_HIGHLIGHT);\n    this.data = {\n      atoms,\n      bonds,\n      rgroupAttachmentPoints,\n      color,\n      highlightId,\n    };\n  }\n\n  execute(restruct: ReStruct) {\n    const { atoms, bonds, rgroupAttachmentPoints, color } = this.data;\n\n    if (!color) {\n      return;\n    }\n\n    const struct = restruct.molecule;\n    const highlight = new Highlight({\n      atoms,\n      bonds,\n      rgroupAttachmentPoints,\n      color,\n    });\n\n    if (typeof this.data.highlightId !== 'number') {\n      this.data.highlightId = struct.highlights.add(highlight);\n    } else {\n      struct.highlights.set(this.data.highlightId, highlight);\n    }\n\n    notifyChanged(restruct, atoms, bonds, rgroupAttachmentPoints);\n  }\n\n  invert() {\n    const { atoms, bonds, rgroupAttachmentPoints, color, highlightId } =\n      this.data;\n    const inverted = new HighlightDelete(\n      highlightId,\n      atoms,\n      bonds,\n      rgroupAttachmentPoints,\n      color,\n    );\n    return inverted;\n  }\n}\n\nexport class HighlightDelete extends BaseOperation {\n  data: Data;\n\n  constructor(\n    highlightId?: number,\n    atoms?: Array<number>,\n    bonds?: Array<number>,\n    rgroupAttachmentPoints?: Array<number>,\n    color?: string,\n  ) {\n    super(OperationType.REMOVE_HIGHLIGHT, 5);\n    this.data = {\n      highlightId,\n      atoms: atoms || [],\n      bonds: bonds || [],\n      rgroupAttachmentPoints: rgroupAttachmentPoints || [],\n      color: color || 'white',\n    };\n  }\n\n  execute(restruct: ReStruct) {\n    if (typeof this.data.highlightId === 'number') {\n      const struct = restruct.molecule;\n\n      const highlightToRemove = struct.highlights.get(this.data.highlightId);\n      if (typeof highlightToRemove === 'undefined') {\n        return;\n      }\n\n      const { atoms, bonds, color } = highlightToRemove;\n\n      this.data.atoms = atoms;\n      this.data.bonds = bonds;\n      this.data.color = color;\n\n      struct.highlights.delete(this.data.highlightId);\n      notifyChanged(restruct, atoms, bonds);\n    }\n  }\n\n  invert() {\n    const { atoms, bonds, rgroupAttachmentPoints, color, highlightId } =\n      this.data;\n    const inverted = new HighlightAdd(\n      atoms,\n      bonds,\n      rgroupAttachmentPoints,\n      color,\n      highlightId,\n    );\n    inverted.data = this.data;\n    return inverted;\n  }\n}\n\nexport class HighlightUpdate extends BaseOperation {\n  // making sure highlightId is not optional\n  newData: Data & { highlightId: number };\n  oldData: Data & { highlightId: number };\n\n  constructor(\n    highlightId: number,\n    atoms: Array<number>,\n    bonds: Array<number>,\n    rgroupAttachmentPoints: Array<number>,\n    color: string,\n  ) {\n    super(OperationType.UPDATE_HIGHLIGHT);\n    this.newData = {\n      atoms,\n      bonds,\n      rgroupAttachmentPoints,\n      color,\n      highlightId,\n    };\n\n    // pre-filling with new data. Upon execution this will be replaced\n    this.oldData = {\n      atoms,\n      bonds,\n      rgroupAttachmentPoints,\n      color,\n      highlightId,\n    };\n  }\n\n  execute(restruct: ReStruct) {\n    const { atoms, bonds, rgroupAttachmentPoints, color } = this.newData;\n    if (!color) {\n      return;\n    }\n\n    const highlightId = this.newData.highlightId;\n    const struct = restruct.molecule;\n\n    const highlightToUpdate = struct.highlights.get(highlightId);\n\n    if (highlightToUpdate) {\n      // saving data of existing highlight\n      const {\n        atoms: oldAtoms,\n        bonds: oldBonds,\n        rgroupAttachmentPoints: oldRgroupAttachmentPoints,\n        color: oldColor,\n      } = highlightToUpdate;\n      this.oldData = {\n        atoms: oldAtoms,\n        bonds: oldBonds,\n        rgroupAttachmentPoints: oldRgroupAttachmentPoints,\n        color: oldColor,\n        highlightId,\n      };\n\n      // creating new highlight with new data\n      const updatedHighlight = new Highlight({\n        atoms,\n        bonds,\n        rgroupAttachmentPoints,\n        color,\n      });\n\n      // setting the new highlight\n      struct.highlights.set(this.newData.highlightId, updatedHighlight);\n\n      // notify atoms from both collections that repaint is needed\n      notifyChanged(restruct, [...atoms, ...oldAtoms], [...bonds, ...oldBonds]);\n    }\n  }\n\n  invert() {\n    const { atoms, bonds, rgroupAttachmentPoints, color } = this.oldData;\n    const inverted = new HighlightUpdate(\n      this.newData.highlightId,\n      atoms,\n      bonds,\n      rgroupAttachmentPoints,\n      color,\n    );\n    return inverted;\n  }\n}\n\nfunction notifyChanged(\n  restruct: ReStruct,\n  atoms?: number[],\n  bonds?: number[],\n  rgroupAttachmentPoints?: number[],\n) {\n  // Notifying ReStruct that repaint needed\n  const reAtoms = restruct.atoms;\n  const reBonds = restruct.bonds;\n  const reRgroupAttachmentPoints = restruct.rgroupAttachmentPoints;\n\n  if (atoms) {\n    atoms.forEach((atomId) => {\n      if (typeof reAtoms.get(atomId) !== 'undefined') {\n        restruct.markAtom(atomId, 1);\n      }\n    });\n  }\n\n  if (bonds) {\n    bonds.forEach((bondId) => {\n      if (typeof reBonds.get(bondId) !== 'undefined') {\n        restruct.markBond(bondId, 1);\n      }\n    });\n  }\n\n  if (rgroupAttachmentPoints) {\n    rgroupAttachmentPoints.forEach((rgroupAPid) => {\n      if (typeof reRgroupAttachmentPoints.get(rgroupAPid) !== 'undefined') {\n        restruct.markRgroupAttachmentPoint(rgroupAPid, 1);\n      }\n    });\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { ReStruct } from '../../render';\n\nimport { HighlightAdd, HighlightDelete } from '../operations/highlight';\n\nimport { Action } from './action';\n\ntype HighlightType = {\n  atoms: number[];\n  bonds: number[];\n  rgroupAttachmentPoints: number[];\n  color: string;\n};\n\nexport function fromHighlightCreate(\n  restruct: ReStruct,\n  highlights: HighlightType[],\n): Action {\n  const action = new Action();\n\n  highlights.forEach((highlight) => {\n    const { atoms, bonds, rgroupAttachmentPoints, color } = highlight;\n\n    action.addOp(new HighlightAdd(atoms, bonds, rgroupAttachmentPoints, color));\n  });\n  return action.perform(restruct);\n}\n\nexport function fromHighlightClear(restruct: ReStruct): Action {\n  const action = new Action();\n\n  const highlights = restruct.molecule.highlights;\n\n  highlights.forEach((_, key) => {\n    action.addOp(new HighlightDelete(key));\n  });\n\n  return action.perform(restruct);\n}\n\n/*\n// Update highlight by placing new one on the given id\nexport function fromHighlightUpdate(\n  highlightId: number,\n  restruct: ReStruct,\n  atoms: number[],\n  bonds: number[],\n  color: string\n): Action {\n  const action = new Action()\n\n  const highlights = restruct.molecule.highlights\n\n  const selectedHighlight = highlights.get(highlightId)\n  if (!selectedHighlight) {\n    return action\n  }\n\n  const updateOperation = new HighlightUpdate(highlightId, atoms, bonds, color)\n  action.addOp(updateOperation)\n\n  return action.perform(restruct)\n}\n*/\n\n/*\n// Delete single highlight by id\nexport function fromHighlightDelete(\n  restruct: ReStruct,\n  highlightId: number\n): Action {\n  const action = new Action()\n\n  const highlights = restruct.molecule.highlights\n  if (highlights.has(highlightId)) {\n    action.addOp(new HighlightDelete(highlightId))\n\n    return action.perform(restruct)\n  }\n  return action\n}\n*/\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Command } from 'domain/entities/Command';\nimport { CoreEditor } from './Editor';\nimport assert from 'assert';\nconst HISTORY_SIZE = 32; // put me to options\n\nexport type HistoryOperationType = 'undo' | 'redo';\n\nexport class EditorHistory {\n  historyStack: Command[] | [] = [];\n  historyPointer = 0;\n  editor: CoreEditor | undefined;\n\n  private static _instance;\n  constructor(editor: CoreEditor) {\n    if (EditorHistory._instance) {\n      return EditorHistory._instance;\n    }\n    this.editor = editor;\n    this.historyPointer = 0;\n\n    EditorHistory._instance = this;\n\n    return this;\n  }\n\n  update(command: Command, megreWithLatestHistoryCommand?: boolean) {\n    const latestCommand = this.historyStack[this.historyStack.length - 1];\n    if (megreWithLatestHistoryCommand && latestCommand) {\n      latestCommand.merge(command);\n    } else {\n      this.historyStack.splice(this.historyPointer, HISTORY_SIZE + 1, command);\n      if (this.historyStack.length > HISTORY_SIZE) {\n        this.historyStack.shift();\n      }\n      this.historyPointer = this.historyStack.length;\n    }\n  }\n\n  undo() {\n    if (this.historyPointer === 0) {\n      return;\n    }\n\n    assert(this.editor);\n\n    this.historyPointer--;\n    const lastCommand = this.historyStack[this.historyPointer];\n    lastCommand.invert(this.editor.renderersContainer);\n    const turnOffSelectionCommand =\n      this.editor?.drawingEntitiesManager.unselectAllDrawingEntities();\n    this.editor?.renderersContainer.update(turnOffSelectionCommand);\n  }\n\n  redo() {\n    if (this.historyPointer === this.historyStack.length) {\n      return;\n    }\n\n    assert(this.editor);\n\n    const lastCommand = this.historyStack[this.historyPointer];\n    lastCommand.execute(this.editor.renderersContainer);\n    lastCommand.executeAfterAllOperations(this.editor.renderersContainer);\n    this.historyPointer++;\n  }\n\n  destroy() {\n    EditorHistory._instance = null;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { BaseTool } from 'application/editor/tools/Tool';\nimport { BaseMonomer, AmbiguousMonomer, Vec2 } from 'domain/entities';\nimport { CoreEditor, EditorHistory } from 'application/editor/internal';\nimport {\n  BaseMonomerRenderer,\n  AmbiguousMonomerRenderer,\n} from 'application/render/renderers';\nimport { MonomerOrAmbiguousType } from 'domain/types';\nimport { monomerFactory } from '../operations/monomer/monomerFactory';\nimport assert from 'assert';\nimport { Coordinates } from '../shared/coordinates';\nimport { isAmbiguousMonomerLibraryItem } from 'domain/helpers/monomers';\n\nclass MonomerTool implements BaseTool {\n  private monomerPreview: BaseMonomer | AmbiguousMonomer | undefined;\n\n  private monomerPreviewRenderer:\n    | BaseMonomerRenderer\n    | AmbiguousMonomerRenderer\n    | undefined;\n\n  readonly MONOMER_PREVIEW_SCALE_FACTOR = 0.8;\n  readonly MONOMER_PREVIEW_OFFSET_X = 30;\n  readonly MONOMER_PREVIEW_OFFSET_Y = 30;\n  history: EditorHistory;\n  constructor(\n    private editor: CoreEditor,\n    private monomer: MonomerOrAmbiguousType,\n  ) {\n    this.editor = editor;\n    this.monomer = monomer;\n    this.history = new EditorHistory(this.editor);\n  }\n\n  mousedown() {\n    assert(this.monomerPreviewRenderer);\n    let modelChanges;\n    const position = Coordinates.canvasToModel(\n      new Vec2(\n        this.editor.lastCursorPositionOfCanvas.x,\n        this.editor.lastCursorPositionOfCanvas.y,\n      ),\n    );\n    if (isAmbiguousMonomerLibraryItem(this.monomer)) {\n      modelChanges = this.editor.drawingEntitiesManager.addAmbiguousMonomer(\n        this.monomer,\n        position,\n      );\n    } else {\n      modelChanges = this.editor.drawingEntitiesManager.addMonomer(\n        this.monomer,\n        // We convert monomer coordinates from pixels to angstroms\n        // because the model layer (like BaseMonomer) should not work with pixels\n        position,\n      );\n    }\n\n    this.history.update(modelChanges);\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  mousemove() {\n    const position = Coordinates.canvasToModel(\n      new Vec2(\n        this.editor.lastCursorPosition.x + this.MONOMER_PREVIEW_OFFSET_X,\n        this.editor.lastCursorPosition.y + this.MONOMER_PREVIEW_OFFSET_Y,\n      ),\n    );\n    this.monomerPreview?.moveAbsolute(position);\n    this.monomerPreviewRenderer?.move();\n  }\n\n  public mouseLeaveClientArea() {\n    this.hidePreview();\n  }\n\n  public mouseover() {\n    if (!this.monomerPreview) {\n      if (isAmbiguousMonomerLibraryItem(this.monomer)) {\n        const variantMonomer = new AmbiguousMonomer(this.monomer);\n        this.monomerPreview = variantMonomer;\n        this.monomerPreviewRenderer = new AmbiguousMonomerRenderer(\n          variantMonomer,\n          this.MONOMER_PREVIEW_SCALE_FACTOR,\n        );\n      } else {\n        const [Monomer, MonomerRenderer] = monomerFactory(this.monomer);\n\n        this.monomerPreview = new Monomer(this.monomer);\n        this.monomerPreviewRenderer = new MonomerRenderer(\n          this.monomerPreview,\n          this.MONOMER_PREVIEW_SCALE_FACTOR,\n          false,\n        );\n      }\n\n      this.monomerPreviewRenderer?.show(this.editor.theme);\n    }\n  }\n\n  hidePreview() {\n    this.monomerPreviewRenderer?.remove();\n    this.monomerPreviewRenderer = undefined;\n    this.monomerPreview = undefined;\n  }\n\n  destroy(): void {\n    this.hidePreview();\n  }\n}\n\nexport { MonomerTool };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { CoreEditor, EditorHistory } from 'application/editor/internal';\nimport { BaseRenderer } from 'application/render/renderers/BaseRenderer';\nimport { BaseTool } from 'application/editor/tools/Tool';\nimport { BaseSequenceRenderer } from 'application/render/renderers/sequence/BaseSequenceRenderer';\nimport { SequenceMode } from '../modes';\n\nclass EraserTool implements BaseTool {\n  private history: EditorHistory;\n  constructor(private editor: CoreEditor) {\n    this.editor = editor;\n    this.history = new EditorHistory(editor);\n    if (\n      this.editor.drawingEntitiesManager.selectedEntities.length &&\n      !(this.editor.mode instanceof SequenceMode)\n    ) {\n      const modelChanges =\n        this.editor.drawingEntitiesManager.deleteSelectedEntities();\n      this.history.update(modelChanges);\n      this.editor.renderersContainer.update(modelChanges);\n    }\n  }\n\n  mousedown(event) {\n    const selectedItemRenderer = event.target.__data__;\n\n    if (selectedItemRenderer instanceof BaseSequenceRenderer) {\n      return;\n    }\n\n    if (selectedItemRenderer instanceof BaseRenderer) {\n      const modelChanges =\n        this.editor.drawingEntitiesManager.deleteDrawingEntity(\n          selectedItemRenderer.drawingEntity,\n        );\n      this.history.update(modelChanges);\n      this.editor.renderersContainer.update(modelChanges);\n    }\n  }\n\n  // TODO move hover logic somewhere to apply it for all or several tools from one place.\n  //  Currently it is duplicated from select-rectangle tool\n  mouseOverDrawingEntity(event) {\n    const renderer = event.target.__data__;\n    const modelChanges =\n      this.editor.drawingEntitiesManager.intendToSelectDrawingEntity(\n        renderer.drawingEntity,\n      );\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  mouseLeaveDrawingEntity(event) {\n    const renderer: BaseRenderer = event.target.__data__;\n\n    const modelChanges =\n      this.editor.drawingEntitiesManager.cancelIntentionToSelectDrawingEntity(\n        renderer.drawingEntity,\n      );\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  destroy() {}\n}\n\nexport { EraserTool };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { Vec2 } from 'domain/entities';\nimport { CoreEditor, EditorHistory } from 'application/editor/internal';\nimport { brush as d3Brush, select } from 'd3';\nimport { BaseRenderer } from 'application/render/renderers/BaseRenderer';\nimport { Command } from 'domain/entities/Command';\nimport { BaseTool } from 'application/editor/tools/Tool';\nimport { Coordinates } from '../shared/coordinates';\nimport { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\nimport { DrawingEntity } from 'domain/entities/DrawingEntity';\nimport { Nucleoside } from 'domain/entities/Nucleoside';\nimport { Nucleotide } from 'domain/entities/Nucleotide';\nimport { SequenceMode } from '../modes';\nimport { isMacOs } from 'react-device-detect';\nimport { EraserTool } from './Erase';\nimport { DeprecatedFlexModeOrSnakeModePolymerBondRenderer } from 'application/render';\n\nclass SelectRectangle implements BaseTool {\n  private brush;\n  private brushArea;\n  private moveStarted;\n  private mousePositionAfterMove = new Vec2(0, 0, 0);\n  private mousePositionBeforeMove = new Vec2(0, 0, 0);\n  private canvasResizeObserver?: ResizeObserver;\n  private history: EditorHistory;\n  private previousSelectedEntities: [number, DrawingEntity][] = [];\n\n  constructor(private editor: CoreEditor) {\n    this.editor = editor;\n    this.history = new EditorHistory(this.editor);\n    this.destroy();\n    this.createBrush();\n  }\n\n  private createBrush() {\n    this.brushArea = select(this.editor.canvas)\n      .insert('g', ':first-child')\n      .attr('id', 'rectangle-selection-area');\n\n    this.brush = d3Brush();\n\n    const brushed = (mo) => {\n      this.setSelectedEntities();\n      if (mo.selection) {\n        this.brushArea?.call(this.brush?.clear);\n      }\n    };\n\n    const onStartBrush = () => {\n      const editor = CoreEditor.provideEditorInstance();\n      if (editor.isSequenceEditInRNABuilderMode) {\n        this.brushArea.select('rect.selection').style('stroke', 'transparent');\n      } else {\n        this.brushArea.select('rect.selection').style('stroke', 'darkgrey');\n      }\n    };\n\n    const onBrush = (brushEvent) => {\n      const selection = brushEvent.selection;\n      const editor = CoreEditor.provideEditorInstance();\n      if (\n        !selection ||\n        editor.isSequenceEditMode ||\n        editor.isSequenceEditInRNABuilderMode\n      )\n        return;\n      requestAnimationFrame(() => {\n        const topLeftPoint = Coordinates.viewToCanvas(\n          new Vec2(selection[0][0], selection[0][1]),\n        );\n        const bottomRightPoint = Coordinates.viewToCanvas(\n          new Vec2(selection[1][0], selection[1][1]),\n        );\n\n        const modelChanges =\n          this.editor.drawingEntitiesManager.selectIfLocatedInRectangle(\n            topLeftPoint,\n            bottomRightPoint,\n            this.previousSelectedEntities,\n            brushEvent.sourceEvent.shiftKey,\n          );\n\n        this.editor.renderersContainer.update(modelChanges);\n      });\n    };\n\n    this.brush.on('start', onStartBrush);\n    this.brush.on('brush', onBrush);\n    this.brush.on('end', brushed);\n\n    this.brushArea.call(this.brush);\n\n    this.brushArea.select('rect.selection').style('fill', 'transparent');\n    this.brushArea.select('rect.overlay').attr('cursor', 'default');\n\n    const handleResizeCanvas = () => {\n      const { canvas } = this.editor;\n      if (canvas.clientWidth === 0 || canvas.clientHeight === 0) {\n        return;\n      }\n\n      this.brush\n        .extent([\n          [0, 0],\n          [canvas.width.baseVal.value, canvas.height.baseVal.value],\n        ])\n        .keyModifiers(false)\n        .filter((e) => {\n          e.preventDefault();\n          if (e.shiftKey) {\n            e.stopPropagation();\n          }\n          return true;\n        });\n\n      this.brushArea.call(this.brush);\n    };\n\n    const canvasElement = this.editor.canvas;\n\n    if (canvasElement) {\n      this.canvasResizeObserver = new ResizeObserver(handleResizeCanvas);\n      this.canvasResizeObserver.observe(canvasElement);\n    }\n  }\n\n  mousedown(event) {\n    if (CoreEditor.provideEditorInstance().isSequenceAnyEditMode) return;\n\n    const renderer = event.target.__data__;\n    this.mousePositionAfterMove = this.editor.lastCursorPositionOfCanvas;\n    this.mousePositionBeforeMove = this.editor.lastCursorPositionOfCanvas;\n    const ModKey = isMacOs ? event.metaKey : event.ctrlKey;\n\n    let modelChanges: Command;\n    if (renderer instanceof BaseRenderer && !event.shiftKey && !ModKey) {\n      this.moveStarted = true;\n      if (\n        renderer.drawingEntity.selected &&\n        !(this.editor.mode instanceof SequenceMode)\n      ) {\n        return;\n      }\n      modelChanges =\n        this.editor.drawingEntitiesManager.unselectAllDrawingEntities();\n      const { command: selectModelChanges } =\n        this.editor.drawingEntitiesManager.getAllSelectedEntitiesForSingleEntity(\n          renderer.drawingEntity,\n        );\n      modelChanges.merge(selectModelChanges);\n    } else if (renderer instanceof BaseRenderer && event.shiftKey) {\n      if (renderer.drawingEntity.selected) {\n        return;\n      }\n      const drawingEntities: DrawingEntity[] = [\n        ...this.editor.drawingEntitiesManager.selectedEntitiesArr,\n        renderer.drawingEntity,\n      ];\n      ({ command: modelChanges } =\n        this.editor.drawingEntitiesManager.getAllSelectedEntitiesForEntities(\n          drawingEntities,\n        ));\n    } else if (renderer instanceof BaseSequenceItemRenderer && ModKey) {\n      let drawingEntities: DrawingEntity[] = renderer.currentSubChain.nodes\n        .map((node) => {\n          if (node instanceof Nucleoside || node instanceof Nucleotide) {\n            return node.monomers;\n          } else {\n            return node.monomer;\n          }\n        })\n        .flat();\n      drawingEntities.forEach((entity) => entity.turnOnSelection());\n      const bondsInsideCurrentChain = renderer.currentSubChain.bonds.filter(\n        (bond) => bond.firstMonomer.selected && bond.secondMonomer?.selected,\n      );\n      drawingEntities = drawingEntities.concat(bondsInsideCurrentChain);\n      modelChanges =\n        this.editor.drawingEntitiesManager.selectDrawingEntities(\n          drawingEntities,\n        );\n    } else {\n      modelChanges =\n        this.editor.drawingEntitiesManager.unselectAllDrawingEntities();\n    }\n    this.editor.renderersContainer.update(modelChanges);\n    this.setSelectedEntities();\n  }\n\n  mousemove() {\n    if (this.editor.mode instanceof SequenceMode) {\n      return;\n    }\n    if (this.moveStarted) {\n      const modelChanges =\n        this.editor.drawingEntitiesManager.moveSelectedDrawingEntities(\n          Coordinates.canvasToModel(\n            new Vec2(\n              this.editor.lastCursorPositionOfCanvas.x -\n                this.mousePositionAfterMove.x,\n              this.editor.lastCursorPositionOfCanvas.y -\n                this.mousePositionAfterMove.y,\n            ),\n          ),\n        );\n      this.mousePositionAfterMove = this.editor.lastCursorPositionOfCanvas;\n      requestAnimationFrame(() => {\n        this.editor.renderersContainer.update(modelChanges);\n      });\n    }\n  }\n\n  mouseup(event) {\n    const renderer = event.target.__data__;\n    if (this.moveStarted && renderer?.drawingEntity?.selected) {\n      this.moveStarted = false;\n\n      if (\n        Vec2.diff(\n          this.mousePositionAfterMove,\n          this.mousePositionBeforeMove,\n        ).length() === 0\n      ) {\n        return;\n      }\n      const modelChanges =\n        this.editor.drawingEntitiesManager.moveSelectedDrawingEntities(\n          new Vec2(0, 0),\n          Coordinates.canvasToModel(\n            new Vec2(\n              this.mousePositionAfterMove.x - this.mousePositionBeforeMove.x,\n              this.mousePositionAfterMove.y - this.mousePositionBeforeMove.y,\n            ),\n          ),\n        );\n      this.history.update(modelChanges);\n    }\n  }\n\n  mouseOverDrawingEntity(event) {\n    const renderer = event.target.__data__;\n    const modelChanges =\n      this.editor.drawingEntitiesManager.intendToSelectDrawingEntity(\n        renderer.drawingEntity,\n      );\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  mouseLeaveDrawingEntity(event) {\n    const renderer: BaseRenderer = event.target.__data__;\n\n    const modelChanges =\n      this.editor.drawingEntitiesManager.cancelIntentionToSelectDrawingEntity(\n        renderer.drawingEntity,\n      );\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  public mouseOverPolymerBond(event) {\n    const renderer: DeprecatedFlexModeOrSnakeModePolymerBondRenderer =\n      event.target.__data__;\n\n    const modelChanges =\n      this.editor.drawingEntitiesManager.showPolymerBondInformation(\n        renderer.polymerBond,\n      );\n    this.editor.renderersContainer.markForRecalculateBegin();\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  public mouseLeavePolymerBond(event) {\n    const renderer: DeprecatedFlexModeOrSnakeModePolymerBondRenderer =\n      event.target.__data__;\n    if (!renderer.polymerBond) {\n      return;\n    }\n\n    const modelChanges =\n      this.editor.drawingEntitiesManager.hidePolymerBondInformation(\n        renderer.polymerBond,\n      );\n    this.editor.renderersContainer.markForRecalculateBegin();\n    this.editor.renderersContainer.update(modelChanges);\n  }\n\n  setSelectedEntities() {\n    this.previousSelectedEntities =\n      this.editor.drawingEntitiesManager.allEntities.filter(\n        ([, drawingEntity]) => drawingEntity.selected,\n      );\n  }\n\n  destroy() {\n    if (this.brush) {\n      this.brushArea.remove();\n      this.brush = null;\n      this.brushArea = null;\n    }\n\n    this.canvasResizeObserver?.disconnect();\n\n    if (!(this.editor.selectedTool instanceof EraserTool)) {\n      const modelChanges =\n        this.editor.drawingEntitiesManager.unselectAllDrawingEntities();\n\n      this.editor.renderersContainer.update(modelChanges);\n    }\n  }\n}\n\nexport { SelectRectangle };\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { CoreEditor, EditorHistory } from 'application/editor/internal';\nimport { isSequenceMode } from 'application/editor/modes';\nimport { BaseTool } from 'application/editor/tools/Tool';\nimport { ReinitializeModeOperation } from 'application/editor/operations/modes';\n\nclass ClearTool implements BaseTool {\n  private history: EditorHistory;\n\n  constructor(private editor: CoreEditor) {\n    this.editor = editor;\n    this.history = new EditorHistory(editor);\n    const mode = editor.mode;\n    const isCurrentModeSequence = isSequenceMode(mode);\n    const isSequenceEditMode = isCurrentModeSequence && mode.isEditMode;\n\n    const modelChanges = this.editor.drawingEntitiesManager.deleteAllEntities();\n\n    if (isCurrentModeSequence) {\n      modelChanges.addOperation(new ReinitializeModeOperation());\n    }\n\n    this.editor.renderersContainer.update(modelChanges);\n    this.history.update(modelChanges);\n\n    if (isSequenceEditMode) {\n      mode.startNewSequence();\n    }\n  }\n\n  destroy() {}\n}\n\nexport { ClearTool };\n","import { BaseTool, CoreEditor, ZoomTool } from 'application/editor';\nimport { D3DragEvent, drag, DragBehavior, select } from 'd3';\n\nexport class HandTool implements BaseTool {\n  private readonly dragBehavior: DragBehavior<SVGSVGElement, unknown, unknown>;\n\n  constructor(private editor: CoreEditor) {\n    this.editor.canvas.classList.add('handCursor');\n\n    this.dragBehavior = drag<SVGSVGElement, unknown, unknown>()\n      .on('start', this.handleDragStart.bind(this))\n      .on('drag', this.handleDragging.bind(this))\n      .on('end', this.handleDragEnd.bind(this));\n\n    select(this.editor.canvas).call(this.dragBehavior);\n  }\n\n  private handleDragStart() {\n    this.editor.canvas.classList.add('handCursorGrabbing');\n  }\n\n  private handleDragging(event: D3DragEvent<SVGSVGElement, unknown, unknown>) {\n    ZoomTool.instance.scrollBy(event.dx, event.dy);\n  }\n\n  private handleDragEnd() {\n    this.editor.canvas.classList.remove('handCursorGrabbing');\n  }\n\n  destroy() {\n    this.editor.canvas.classList.remove('handCursor');\n    select(this.editor.canvas).on('.drag', null);\n  }\n}\n","import { MonomerItemType, Entities } from 'domain/types';\nimport { IKetMonomerGroupTemplate } from 'application/formatters';\n\ninterface ToolEventHandler {\n  click?(event: Event): void;\n\n  dblclick?(event: Event): void;\n\n  mousedown?(event: Event): void;\n\n  mousemove?(event: Event): void;\n\n  mouseup?(event: Event): void;\n\n  mouseleave?(event: Event): void;\n\n  mouseLeaveClientArea?(event: Event): void;\n\n  mouseover?(event: Event): void;\n\n  mouseOverPolymerBond?(event: Event): void;\n\n  mouseLeavePolymerBond?(event: Event): void;\n\n  mouseOnMovePolymerBond?(event: Event): void;\n\n  mouseOverMonomer?(event: Event): void;\n\n  mouseOverAttachmentPoint?(event: Event): void;\n\n  mouseLeaveAttachmentPoint?(event: Event): void;\n\n  mouseUpAttachmentPoint?(event: Event): void;\n\n  mouseDownAttachmentPoint?(event: Event): void;\n\n  mouseOnMoveMonomer?(event: Event): void;\n\n  mouseLeaveMonomer?(event: Event): void;\n\n  mouseOverDrawingEntity?(event: Event): void;\n\n  mouseLeaveDrawingEntity?(event: Event): void;\n\n  mouseUpMonomer?(event: Event): void;\n\n  rightClickSequence?(event: Event): void;\n\n  rightClickCanvas?(event: Event): void;\n\n  rightClickPolymerBond?(event: Event): void;\n\n  editSequence?(): void;\n\n  startNewSequence?(): void;\n\n  turnOnSequenceEditInRNABuilderMode?(): void;\n\n  turnOffSequenceEditInRNABuilderMode?(): void;\n\n  modifySequenceInRnaBuilder?(): void;\n\n  mouseOverSequenceItem?(event: Event): void;\n\n  mouseOnMoveSequenceItem?(event: Event): void;\n\n  mouseLeaveSequenceItem?(event: Event): void;\n\n  changeSequenceTypeEnterMode?(event: Event): void;\n\n  toggleSequenceEditMode?(event: Event): void;\n\n  toggleSequenceEditInRNABuilderMode?(event: Event): void;\n\n  clickOnSequenceItem?(event: Event): void;\n\n  mousedownBetweenSequenceItems?(event: Event): void;\n\n  mouseDownOnSequenceItem?(event: Event): void;\n\n  doubleClickOnSequenceItem?(event: Event): void;\n\n  mouseUpAtom?(event: Event): void;\n}\n\nexport interface IRnaPreset {\n  name?: string;\n  nameInList?: string;\n  base?: MonomerItemType;\n  sugar?: MonomerItemType;\n  phosphate?: MonomerItemType;\n  default?: boolean;\n  favorite?: boolean;\n  editedName?: boolean;\n}\n\nexport interface IRnaLabeledPreset\n  extends Omit<IRnaPreset, 'base' | 'sugar' | 'phosphate'>,\n    Pick<IKetMonomerGroupTemplate, 'templates'> {}\n\nexport type LabeledNodesWithPositionInSequence = {\n  type: Entities;\n  nodeIndexOverall: number;\n  baseLabel?: string;\n  sugarLabel?: string;\n  phosphateLabel?: string;\n  isNucleosideConnectedAndSelectedWithPhosphate?: boolean;\n  hasR1Connection?: boolean;\n};\n\nexport interface Tool extends ToolEventHandler {\n  cancel?(): void;\n\n  isSelectionRunning?(): boolean;\n\n  isNotActiveTool?: boolean;\n}\n\nexport interface BaseTool extends Tool {\n  destroy(): void;\n}\n\nexport type PeptideToolOptions = MonomerItemType;\n\n// export type ToolOptions = MonomerItemType;\n// !todo\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ToolOptions = any;\nexport type ToolConstructorInterface = {\n  new (editor, ...args: ToolOptions[]): Tool | BaseTool;\n};\n\nexport type ToolEventHandlerName = keyof ToolEventHandler;\n\nexport function isBaseTool(\n  tool: Tool | BaseTool | undefined,\n): tool is BaseTool {\n  return (tool as BaseTool)?.destroy !== undefined;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { ToolConstructorInterface } from './Tool';\nimport { MonomerTool } from 'application/editor/tools/Monomer';\nimport { RnaPresetTool } from 'application/editor/tools/RnaPreset';\nimport { SelectRectangle } from 'application/editor/tools/SelectRectangle';\nimport { PolymerBond } from 'application/editor/tools/Bond';\nimport { EraserTool } from 'application/editor/tools/Erase';\nimport { ClearTool } from 'application/editor/tools/Clear';\nimport { HandTool } from 'application/editor/tools/Hand';\nimport { ToolName } from 'application/editor/tools/types';\n\nexport const toolsMap: Record<ToolName, ToolConstructorInterface> = {\n  [ToolName.monomer]: MonomerTool,\n  [ToolName.preset]: RnaPresetTool,\n  [ToolName.selectRectangle]: SelectRectangle,\n  [ToolName.bondSingle]: PolymerBond,\n  [ToolName.bondHydrogen]: PolymerBond,\n  [ToolName.erase]: EraserTool,\n  [ToolName.clear]: ClearTool,\n  [ToolName.hand]: HandTool,\n};\n\nexport * from './Tool';\nexport * from './Zoom';\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport utils from './shared/utils';\n\nexport const vectorUtils = {\n  fracAngle: utils.fracAngle,\n  calcAngle: utils.calcAngle,\n  degrees: utils.degrees,\n  calcNewAtomPos: utils.calcNewAtomPos,\n};\n\nexport * from './operations';\nexport * from './actions';\nexport * from './shared/constants';\nexport * from './shared/coordinates';\nexport * from './editor.types';\nexport * from './Editor';\nexport * from './EditorHistory';\nexport * from './modes';\nexport * from './editorEvents';\nexport * from './editorSettings';\nexport * from './tools';\nexport * from 'application/editor/tools/types';\n","import { Struct, Vec2 } from 'domain/entities';\nimport { isEqual } from 'lodash';\nimport { Render } from './raphaelRender';\nimport ReAtom from './restruct/reatom';\nimport { Coordinates } from 'application/editor';\n\n/**\n * Is used to improve search and opening tab performance in Template Dialog\n * Rendering a lot of structures causes great delay\n */\nconst renderCache = new Map();\nlet previousOptions: any;\nconst MIN_ATTACHMENT_POINT_SIZE = 8;\nconst attachmentPointRegExp = /^R[1-8]$/;\n\nexport class RenderStruct {\n  /**\n   * for S-Groups we want to show expanded structure\n   * without brackets\n   */\n  static prepareStruct(struct: Struct) {\n    if (struct.sgroups.size > 0) {\n      const newStruct = struct.clone();\n      convertAllSGroupAttachmentPointsToRGroupAttachmentPoints(newStruct);\n      if (!newStruct.sgroups.get(0)?.isSuperatomWithoutLabel) {\n        newStruct.sgroups.delete(0);\n      }\n      return newStruct;\n    }\n    return struct;\n  }\n\n  static removeSmallAttachmentPointLabelsInModal(\n    render: Render,\n    options: any = {},\n  ) {\n    if (!options.labelInMonomerConnectionsModal) {\n      return;\n    }\n\n    render.ctab.atoms.forEach((atom: ReAtom) => {\n      if (!atom.label) {\n        return;\n      }\n      const isAttachmentPointAtom = attachmentPointRegExp.test(atom.label.text);\n\n      if (!isAttachmentPointAtom) {\n        return;\n      }\n\n      const isSmall =\n        atom.label.path.node.getBoundingClientRect().width <\n        MIN_ATTACHMENT_POINT_SIZE;\n\n      if (isSmall) {\n        atom.label.path.node.remove();\n      }\n    });\n  }\n\n  static render(\n    wrapperElement: HTMLElement | null,\n    struct: Struct | null,\n    options: any = {},\n  ) {\n    if (wrapperElement && struct) {\n      const { cachePrefix = '', needCache = true } = options;\n      const cacheKey = `${cachePrefix}${struct.name}`;\n\n      if (!isEqual(previousOptions, options)) {\n        renderCache.clear();\n        previousOptions = options;\n      }\n\n      if (renderCache.has(cacheKey) && needCache) {\n        wrapperElement.innerHTML = renderCache.get(cacheKey);\n        return;\n      }\n\n      const preparedStruct = this.prepareStruct(struct.clone());\n      preparedStruct.initHalfBonds();\n      preparedStruct.initNeighbors();\n      preparedStruct.setImplicitHydrogen();\n      preparedStruct.markFragments();\n      const structureSize = preparedStruct.getCoordBoundingBox();\n      const structureSizeInPixels = Coordinates.modelToCanvas(\n        new Vec2(\n          structureSize.max.x - structureSize.min.x,\n          structureSize.max.y - structureSize.min.y,\n        ),\n      );\n      const wrapperElementBoundingRect = wrapperElement.getBoundingClientRect();\n      const isStructureLessThanWrapper =\n        structureSizeInPixels.x < wrapperElementBoundingRect.width &&\n        structureSizeInPixels.y < wrapperElementBoundingRect.height;\n      const structureRectangleSize = Math.max(\n        structureSizeInPixels.x,\n        structureSizeInPixels.y,\n      );\n      const svgSize = isStructureLessThanWrapper\n        ? Math.min(\n            structureRectangleSize,\n            wrapperElementBoundingRect.width,\n            wrapperElementBoundingRect.height,\n          )\n        : undefined;\n      const extendedOptions = {\n        autoScale: true,\n        ...options,\n      };\n\n      if (window.isPolymerEditorTurnedOn) {\n        extendedOptions.fontsz = 40;\n        extendedOptions.fontszsub = 30;\n        extendedOptions.width = svgSize;\n        extendedOptions.height = svgSize;\n      }\n\n      const rnd = new Render(wrapperElement, extendedOptions);\n\n      if (!window.isPolymerEditorTurnedOn) {\n        preparedStruct.rescale();\n      }\n\n      rnd.setMolecule(preparedStruct);\n      this.removeSmallAttachmentPointLabelsInModal(rnd, options);\n\n      if (needCache) {\n        renderCache.set(cacheKey, rnd.clientArea.innerHTML);\n      }\n    }\n  }\n}\n\n/**\n * Why?\n * We need somehow display sgroup attachment points (tooltips, preview, templates),\n * But due to current rendering approach for sgroups (ungrouping sgroups)\n * - we have to use RGroup attachment points on atoms for this purposes\n */\nfunction convertAllSGroupAttachmentPointsToRGroupAttachmentPoints(\n  struct: Struct,\n) {\n  struct.sgroups.forEach((sgroup) => {\n    if (sgroup.isSuperatomWithoutLabel) {\n      return;\n    }\n\n    sgroup.getAttachmentPoints().forEach((attachmentPoint) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const attachmentPointAtom = struct.atoms.get(attachmentPoint.atomId)!;\n      attachmentPointAtom.setRGAttachmentPointForDisplayPurpose();\n      const rgroupAttachmentPoint =\n        attachmentPoint.convertToRGroupAttachmentPointForDisplayPurpose(\n          attachmentPoint.atomId,\n        );\n      struct.rgroupAttachmentPoints.add(rgroupAttachmentPoint);\n    });\n  });\n}\n","import {\n  AmbiguousMonomer,\n  Atom as MicromoleculesAtom,\n  Bond,\n  FunctionalGroup,\n  Pile,\n  SGroup,\n  SGroupAttachmentPoint,\n  Struct,\n  Vec2,\n} from 'domain/entities';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport { ReAtom, ReBond, ReSGroup, ReStruct } from 'application/render';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { MonomerMicromolecule } from 'domain/entities/monomerMicromolecule';\nimport { Command } from 'domain/entities/Command';\nimport { MONOMER_CONST } from 'application/editor/operations/monomer/monomerFactory';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport assert from 'assert';\nimport { AttachmentPointName } from 'domain/types';\nimport {\n  getAttachmentPointLabel,\n  getAttachmentPointNumberFromLabel,\n} from 'domain/helpers/attachmentPointCalculations';\nimport { invert, isNumber } from 'lodash';\nimport { IKetAttachmentPoint } from 'application/formatters';\nimport { MonomerToAtomBond } from 'domain/entities/MonomerToAtomBond';\nimport { CoreEditor } from 'application/editor/Editor';\nimport { Atom } from 'domain/entities/CoreAtom';\nimport { AtomLabel } from 'domain/constants';\nimport { isMonomerSgroupWithAttachmentPoints } from '../../utilities/monomers';\nimport { HydrogenBond } from 'domain/entities/HydrogenBond';\nimport { MACROMOLECULES_BOND_TYPES } from 'application/editor/tools/Bond';\n\nexport class MacromoleculesConverter {\n  private static convertMonomerToMonomerMicromolecule(\n    monomer: BaseMonomer,\n    struct: Struct,\n  ) {\n    const monomerMicromolecule = new MonomerMicromolecule(\n      SGroup.TYPES.SUP,\n      monomer,\n    );\n    const sgroupId = struct.sgroups.add(monomerMicromolecule);\n\n    monomerMicromolecule.data.name = monomer.monomerItem.label;\n    monomerMicromolecule.data.expanded = false;\n    monomerMicromolecule.id = sgroupId;\n    monomerMicromolecule.pp = monomer.position;\n\n    return monomerMicromolecule;\n  }\n\n  private static addMonomerAtomToStruct(\n    atom: MicromoleculesAtom,\n    monomer: BaseMonomer,\n    monomerMicromolecule: MonomerMicromolecule,\n    struct: Struct,\n  ) {\n    const atomClone = atom.clone();\n    atomClone.pp = monomer.position.add(atom.pp);\n    atomClone.sgs = new Pile<number>([monomerMicromolecule.id]);\n    atomClone.fragment = -1;\n    const atomId = struct.atoms.add(atomClone);\n    monomerMicromolecule.atoms.push(atomId);\n\n    return { atomId, atom: atomClone };\n  }\n\n  public static convertAttachmentPointNameToNumber(\n    attachmentPointName: AttachmentPointName,\n  ) {\n    return Number(attachmentPointName?.replace('R', ''));\n  }\n\n  public static findAttachmentPointAtom(\n    polymerBond: PolymerBond | MonomerToAtomBond,\n    monomer: BaseMonomer,\n    monomerToAtomIdMap: Map<BaseMonomer, Map<number, number>>,\n  ) {\n    const attachmentPointName = monomer.getAttachmentPointByBond(polymerBond);\n\n    if (!attachmentPointName) {\n      return {\n        attachmentAtomId: undefined,\n        attachmentPointNumber: undefined,\n      };\n    }\n\n    const attachmentPointNumber =\n      MacromoleculesConverter.convertAttachmentPointNameToNumber(\n        attachmentPointName,\n      );\n    const attachmentPointIndex =\n      monomer.listOfAttachmentPoints.indexOf(attachmentPointName);\n    const attachmentPoint =\n      monomer.monomerItem.attachmentPoints?.[attachmentPointIndex];\n    const atomIdMap = monomerToAtomIdMap.get(monomer);\n    const attachmentPointAtomId =\n      monomer instanceof AmbiguousMonomer ? 0 : attachmentPoint?.attachmentAtom;\n\n    return {\n      globalAttachmentAtomId:\n        isNumber(attachmentPointAtomId) &&\n        atomIdMap?.get(attachmentPointAtomId as number),\n      attachmentAtomId:\n        isNumber(attachmentPointAtomId) && attachmentPointAtomId,\n      attachmentPointNumber,\n    };\n  }\n\n  public static convertDrawingEntitiesToStruct(\n    drawingEntitiesManager: DrawingEntitiesManager,\n    struct: Struct,\n    reStruct?: ReStruct,\n  ) {\n    const monomerToAtomIdMap = new Map<BaseMonomer, Map<number, number>>();\n    const monomerToMonomerMicromolecule = new Map<\n      BaseMonomer,\n      MonomerMicromolecule\n    >();\n\n    drawingEntitiesManager.micromoleculesHiddenEntities.mergeInto(struct);\n\n    drawingEntitiesManager.clearMicromoleculesHiddenEntities();\n    drawingEntitiesManager.monomers.forEach((monomer) => {\n      if (monomer.monomerItem.props.isMicromoleculeFragment) {\n        const atomIdMap = new Map<number, number>();\n        monomer.monomerItem.struct.mergeInto(\n          struct,\n          null,\n          null,\n          false,\n          false,\n          atomIdMap,\n        );\n        monomerToAtomIdMap.set(monomer, atomIdMap);\n      } else {\n        const atomIdsMap = new Map<number, number>();\n        const monomerMicromolecule = this.convertMonomerToMonomerMicromolecule(\n          monomer,\n          struct,\n        );\n        reStruct?.sgroups.set(\n          monomerMicromolecule.id,\n          new ReSGroup(monomerMicromolecule),\n        );\n        const monomerAtoms =\n          monomer instanceof AmbiguousMonomer\n            ? monomer.monomers[0].monomerItem.struct.atoms\n            : monomer.monomerItem.struct.atoms;\n        const monomerBonds =\n          monomer instanceof AmbiguousMonomer\n            ? monomer.monomers[0].monomerItem.struct.bonds\n            : monomer.monomerItem.struct.bonds;\n\n        monomerToMonomerMicromolecule.set(monomer, monomerMicromolecule);\n\n        monomerAtoms.forEach((oldAtom, oldAtomId) => {\n          const { atom, atomId } = this.addMonomerAtomToStruct(\n            oldAtom,\n            monomer,\n            monomerMicromolecule,\n            struct,\n          );\n          atomIdsMap.set(oldAtomId, atomId);\n          monomerToAtomIdMap.set(monomer, atomIdsMap);\n          reStruct?.atoms.set(atomId, new ReAtom(atom));\n        });\n\n        monomerMicromolecule.addAttachmentPoints(\n          monomer.listOfAttachmentPoints.map(\n            (attachmentPointName, attachmentPointIndex) => {\n              const attachmentPointNumber =\n                getAttachmentPointNumberFromLabel(attachmentPointName);\n              const attachmentPoint = monomer.monomerItem.attachmentPoints?.[\n                attachmentPointIndex\n              ] as IKetAttachmentPoint;\n\n              return new SGroupAttachmentPoint(\n                atomIdsMap.get(attachmentPoint.attachmentAtom) as number,\n                atomIdsMap.get(attachmentPoint.leavingGroup?.atoms[0]),\n                undefined,\n                attachmentPointNumber,\n              );\n            },\n          ) || [],\n          false,\n        );\n        struct.sGroupForest.insert(monomerMicromolecule);\n        monomerBonds.forEach((bond) => {\n          const bondClone = bond.clone();\n          bondClone.begin = atomIdsMap.get(bondClone.begin) as number;\n          bondClone.end = atomIdsMap.get(bondClone.end) as number;\n          const bondId = struct.bonds.add(bondClone);\n          reStruct?.bonds.set(bondId, new ReBond(bondClone));\n        });\n\n        struct.functionalGroups.add(new FunctionalGroup(monomerMicromolecule));\n      }\n    });\n\n    let conversionErrorMessage = '';\n\n    drawingEntitiesManager.polymerBonds.forEach((polymerBond) => {\n      assert(polymerBond.secondMonomer);\n\n      if (polymerBond instanceof HydrogenBond) {\n        const bond = new Bond({\n          type: Bond.PATTERN.TYPE.HYDROGEN,\n          begin: monomerToAtomIdMap\n            .get(polymerBond.firstMonomer)\n            ?.values()\n            .next().value,\n          end: monomerToAtomIdMap\n            .get(polymerBond.secondMonomer)\n            ?.values()\n            .next().value,\n        });\n        const bondId = struct.bonds.add(bond);\n\n        reStruct?.bonds.set(bondId, new ReBond(bond));\n\n        return;\n      }\n\n      const {\n        globalAttachmentAtomId: beginAtom,\n        attachmentPointNumber: beginSuperatomAttachmentPointNumber,\n      } = this.findAttachmentPointAtom(\n        polymerBond,\n        polymerBond.firstMonomer,\n        monomerToAtomIdMap,\n      );\n      const {\n        globalAttachmentAtomId: endAtom,\n        attachmentPointNumber: endSuperatomAttachmentPointNumber,\n      } = this.findAttachmentPointAtom(\n        polymerBond,\n        polymerBond.secondMonomer,\n        monomerToAtomIdMap,\n      );\n\n      if (!isNumber(beginAtom) || !isNumber(endAtom)) {\n        conversionErrorMessage =\n          'There is no atom for provided attachment point. Bond between monomers was not created.';\n\n        return;\n      }\n\n      const bond = new Bond({\n        type:\n          polymerBond instanceof HydrogenBond\n            ? Bond.PATTERN.TYPE.HYDROGEN\n            : Bond.PATTERN.TYPE.SINGLE,\n        begin: beginAtom,\n        end: endAtom,\n        beginSuperatomAttachmentPointNumber,\n        endSuperatomAttachmentPointNumber,\n      });\n      const bondId = struct.bonds.add(bond);\n      reStruct?.bonds.set(bondId, new ReBond(bond));\n    });\n\n    drawingEntitiesManager.monomerToAtomBonds.forEach((monomerToAtomBond) => {\n      const {\n        globalAttachmentAtomId: beginAtom,\n        attachmentPointNumber: beginSuperatomAttachmentPointNumber,\n      } = this.findAttachmentPointAtom(\n        monomerToAtomBond,\n        monomerToAtomBond.monomer,\n        monomerToAtomIdMap,\n      );\n\n      const endAtom = monomerToAtomIdMap\n        ?.get(monomerToAtomBond.atom.monomer)\n        ?.get(monomerToAtomBond.atom.atomIdInMicroMode);\n\n      if (!isNumber(beginAtom) || !isNumber(endAtom)) {\n        conversionErrorMessage =\n          'There is no atom for provided attachment point. Bond between monomers was not created.';\n\n        return;\n      }\n\n      const bond = new Bond({\n        type: Bond.PATTERN.TYPE.SINGLE,\n        begin: beginAtom,\n        end: endAtom,\n        beginSuperatomAttachmentPointNumber,\n      });\n      const bondId = struct.bonds.add(bond);\n\n      reStruct?.bonds.set(bondId, new ReBond(bond));\n    });\n\n    return { struct, reStruct, conversionErrorMessage };\n  }\n\n  private static convertMonomerMicromoleculeToMonomer(\n    monomerMicromolecule: MonomerMicromolecule,\n    drawingEntitiesManager: DrawingEntitiesManager,\n    sgroupToMonomer: Map<SGroup, BaseMonomer>,\n  ) {\n    const command = new Command();\n    const monomerAdditionCommand =\n      monomerMicromolecule.monomer instanceof AmbiguousMonomer\n        ? drawingEntitiesManager.addAmbiguousMonomer(\n            monomerMicromolecule.monomer.variantMonomerItem,\n            monomerMicromolecule.monomer.position,\n          )\n        : drawingEntitiesManager.addMonomer(\n            monomerMicromolecule.monomer.monomerItem,\n            monomerMicromolecule.pp as Vec2,\n          );\n    command.merge(monomerAdditionCommand);\n    sgroupToMonomer.set(\n      monomerMicromolecule,\n      monomerAdditionCommand.operations[0].monomer as BaseMonomer,\n    );\n\n    return command;\n  }\n\n  private static convertFragmentToChem(\n    fragmentNumber: number,\n    fragmentStruct: Struct,\n    drawingEntitiesManager: DrawingEntitiesManager,\n  ) {\n    const fragmentBbox = fragmentStruct.getCoordBoundingBox();\n    return drawingEntitiesManager.addMonomer(\n      {\n        struct: fragmentStruct,\n        label: 'F' + fragmentNumber,\n        colorScheme: undefined,\n        favorite: false,\n        props: {\n          Name: 'F' + fragmentNumber,\n          MonomerNaturalAnalogCode: '',\n          MonomerName: 'F' + fragmentNumber,\n          MonomerType: MONOMER_CONST.CHEM,\n          isMicromoleculeFragment: true,\n        },\n      },\n      new Vec2(\n        fragmentBbox.max.x - (fragmentBbox.max.x - fragmentBbox.min.x) / 2,\n        fragmentBbox.max.y - (fragmentBbox.max.y - fragmentBbox.min.y) / 2,\n      ),\n    );\n  }\n\n  public static getAttachmentPointLabel(atom: MicromoleculesAtom) {\n    let attachmentPointLabel = '';\n    const atomRglabel = Number(atom.rglabel);\n    assert(Number.isInteger(atomRglabel));\n    for (let rgi = 0; rgi < 32; rgi++) {\n      if (atomRglabel & (1 << rgi)) {\n        attachmentPointLabel = 'R' + (rgi + 1).toString();\n      }\n    }\n    return attachmentPointLabel;\n  }\n\n  // This method returns array of arrays of fragmentIds grouped by sgroup\n  // It needs to serialize/deserialize several molecules grouped by sgroup as a single molecule\n  public static getFragmentsGroupedBySgroup(struct: Struct) {\n    const groupedFragments: number[][] = [];\n    struct.frags.forEach((_fragment, fragmentId) => {\n      const isAlreadyGrouped = groupedFragments.find((fragmentsGroup) =>\n        fragmentsGroup.includes(fragmentId),\n      );\n      if (isAlreadyGrouped) {\n        return;\n      }\n\n      // Find all sgroups related to fragment\n      const fragmentSgroups = new Set<SGroup>();\n      struct.atoms.forEach((atom, atomId) => {\n        if (atom.fragment !== fragmentId) return;\n        const sgroup = struct.getGroupFromAtomId(atomId);\n        if (sgroup) {\n          fragmentSgroups.add(sgroup);\n        }\n      });\n\n      // Add new group of fragments with fragments related to one sgroup\n      const lastFragmentGroupIndex = groupedFragments.push([fragmentId]) - 1;\n      fragmentSgroups.forEach((sgroup) => {\n        sgroup.atoms.forEach((aid) => {\n          const atomFragmentId = struct.atoms.get(aid)?.fragment;\n          if (\n            atomFragmentId &&\n            !groupedFragments[lastFragmentGroupIndex].includes(atomFragmentId)\n          ) {\n            groupedFragments[lastFragmentGroupIndex].push(atomFragmentId);\n          }\n        });\n      });\n    });\n\n    return groupedFragments;\n  }\n\n  public static findAtomByMicromoleculeAtomId(\n    drawingEntitiesManager: DrawingEntitiesManager,\n    atomId: number,\n    monomer?: BaseMonomer,\n  ) {\n    return [...drawingEntitiesManager.atoms.values()].find(\n      (atom) =>\n        atom.atomIdInMicroMode === atomId &&\n        (!monomer || monomer === atom.monomer),\n    );\n  }\n\n  public static convertStructToDrawingEntities(\n    struct: Struct,\n    drawingEntitiesManager: DrawingEntitiesManager,\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n    const sgroupToMonomer = new Map<SGroup, BaseMonomer>();\n    const fragmentIdToMonomer = new Map<number, BaseMonomer>();\n    const command = new Command();\n    struct.sgroups.forEach((sgroup) => {\n      if (sgroup instanceof MonomerMicromolecule) {\n        command.merge(\n          this.convertMonomerMicromoleculeToMonomer(\n            sgroup,\n            drawingEntitiesManager,\n            sgroupToMonomer,\n          ),\n        );\n      }\n    });\n    const fragments = this.getFragmentsGroupedBySgroup(struct);\n\n    let fragmentNumber = 1;\n    const fragmentIdToAtomIdMap = new Map<number, Map<number, number>>();\n    const globalAtomIdToMonomerMap = new Map<number, BaseMonomer>();\n\n    fragments.forEach((_fragment) => {\n      const atomIdMap = new Map<number, number>();\n      const fragmentStruct = struct.getFragment(_fragment, false, atomIdMap);\n      const monomerAddCommand = this.convertFragmentToChem(\n        fragmentNumber,\n        fragmentStruct,\n        drawingEntitiesManager,\n      );\n      const monomer = monomerAddCommand.operations[0].monomer as BaseMonomer;\n      const atomIdMapObject = Object.fromEntries(atomIdMap.entries());\n      const localAtomIdToGlobalAtomId = invert(atomIdMapObject);\n      const atomsMap = new Map<number, Atom>();\n\n      _fragment.forEach((fragmentId) => {\n        fragmentIdToMonomer.set(fragmentId as number, monomer);\n        fragmentIdToAtomIdMap.set(fragmentId, atomIdMap);\n      });\n      command.merge(monomerAddCommand);\n\n      if (\n        monomer.monomerItem.props.isMicromoleculeFragment &&\n        !isMonomerSgroupWithAttachmentPoints(monomer)\n      ) {\n        monomer.monomerItem.struct.atoms.forEach((atom, atomId) => {\n          const atomAddCommand = drawingEntitiesManager.addAtom(\n            atom.pp,\n            monomer,\n            atomId,\n            atom.label as AtomLabel,\n          );\n\n          command.merge(atomAddCommand);\n          atomsMap.set(atomId, atomAddCommand.operations[0].atom as Atom);\n          globalAtomIdToMonomerMap.set(\n            Number(localAtomIdToGlobalAtomId[atomId]),\n            monomer,\n          );\n        });\n\n        monomer.monomerItem.struct.bonds.forEach((bond) => {\n          const firstAtom = atomsMap.get(bond.begin);\n          const secondAtom = atomsMap.get(bond.end);\n\n          if (!firstAtom || !secondAtom) {\n            return;\n          }\n\n          command.merge(\n            drawingEntitiesManager.addBond(\n              firstAtom,\n              secondAtom,\n              bond.type,\n              bond.stereo,\n            ),\n          );\n        });\n      }\n\n      fragmentNumber++;\n    });\n\n    const superatomAttachmentPointToBond = new Map<\n      SGroupAttachmentPoint,\n      Bond\n    >();\n\n    struct.bonds.forEach((bond) => {\n      const beginAtom = struct.atoms.get(bond.begin);\n      const endAtom = struct.atoms.get(bond.end);\n      const beginAtomSgroup = struct.getGroupFromAtomId(bond.begin);\n      beginAtomSgroup?.getAttachmentPoints();\n      const endAtomSgroup = struct.getGroupFromAtomId(bond.end);\n      const isConnectionBetweenMonomerAndMolecule =\n        (beginAtomSgroup instanceof MonomerMicromolecule &&\n          !(endAtomSgroup instanceof MonomerMicromolecule) &&\n          !endAtomSgroup?.isSuperatomWithoutLabel) ||\n        (endAtomSgroup instanceof MonomerMicromolecule &&\n          !(beginAtomSgroup instanceof MonomerMicromolecule) &&\n          !beginAtomSgroup?.isSuperatomWithoutLabel);\n\n      if (!isConnectionBetweenMonomerAndMolecule) {\n        return;\n      }\n\n      const moleculeAtomId =\n        beginAtomSgroup instanceof MonomerMicromolecule ? bond.end : bond.begin;\n      const moleculeAtom =\n        beginAtomSgroup instanceof MonomerMicromolecule ? endAtom : beginAtom;\n      const monomerSgroup =\n        beginAtomSgroup instanceof MonomerMicromolecule\n          ? beginAtomSgroup\n          : endAtomSgroup;\n\n      if (!moleculeAtom || !monomerSgroup) {\n        return;\n      }\n\n      const atomsMap = fragmentIdToAtomIdMap.get(moleculeAtom.fragment);\n      const atomIdInMicromolecules = atomsMap?.get(moleculeAtomId);\n      const monomer = sgroupToMonomer.get(monomerSgroup);\n\n      if (!isNumber(atomIdInMicromolecules) || !monomer) {\n        return;\n      }\n\n      const atomToConnect =\n        MacromoleculesConverter.findAtomByMicromoleculeAtomId(\n          drawingEntitiesManager,\n          atomIdInMicromolecules,\n          globalAtomIdToMonomerMap.get(moleculeAtomId),\n        );\n\n      if (\n        !atomToConnect ||\n        !isNumber(bond.beginSuperatomAttachmentPointNumber)\n      ) {\n        return;\n      }\n\n      command.merge(\n        drawingEntitiesManager.addMonomerToAtomBond(\n          monomer,\n          atomToConnect,\n          getAttachmentPointLabel(bond.beginSuperatomAttachmentPointNumber),\n        ),\n      );\n    });\n\n    struct.bonds.forEach((bond) => {\n      const beginAtom = struct.atoms.get(bond.begin);\n      const endAtom = struct.atoms.get(bond.end);\n\n      if (!beginAtom || !endAtom) {\n        return;\n      }\n\n      const beginAtomSgroup = struct.getGroupFromAtomId(bond.begin);\n      const beginAtomSgroupAttachmentPoints =\n        beginAtomSgroup?.getAttachmentPoints();\n      const endAtomSgroup = struct.getGroupFromAtomId(bond.end);\n      const endAtomSgroupAttachmentPoints =\n        endAtomSgroup?.getAttachmentPoints();\n      const beginAtomAttachmentPointNumber = isNumber(\n        bond.beginSuperatomAttachmentPointNumber,\n      )\n        ? bond.beginSuperatomAttachmentPointNumber\n        : beginAtomSgroupAttachmentPoints?.findIndex(\n            (sgroupAttachmentPoint) =>\n              sgroupAttachmentPoint.atomId === bond.begin &&\n              !superatomAttachmentPointToBond.has(sgroupAttachmentPoint),\n          );\n      const beginAtomAttachmentPoint =\n        isNumber(beginAtomAttachmentPointNumber) &&\n        beginAtomSgroupAttachmentPoints?.find(\n          (attachmentPoint) =>\n            attachmentPoint.attachmentPointNumber ===\n            beginAtomAttachmentPointNumber,\n        );\n      const endAtomAttachmentPointNumber = isNumber(\n        bond.endSuperatomAttachmentPointNumber,\n      )\n        ? bond.endSuperatomAttachmentPointNumber\n        : endAtomSgroupAttachmentPoints?.findIndex(\n            (sgroupAttachmentPoint) =>\n              sgroupAttachmentPoint.atomId === bond.end &&\n              !superatomAttachmentPointToBond.has(sgroupAttachmentPoint),\n          );\n      const endAtomAttachmentPoint =\n        isNumber(endAtomAttachmentPointNumber) &&\n        endAtomSgroupAttachmentPoints?.find(\n          (attachmentPoint) =>\n            attachmentPoint.attachmentPointNumber ===\n            endAtomAttachmentPointNumber,\n        );\n\n      if (beginAtomAttachmentPoint) {\n        superatomAttachmentPointToBond.set(beginAtomAttachmentPoint, bond);\n      }\n      if (endAtomAttachmentPoint) {\n        superatomAttachmentPointToBond.set(endAtomAttachmentPoint, bond);\n      }\n      if (\n        endAtomSgroup !== beginAtomSgroup &&\n        isNumber(beginAtomAttachmentPointNumber) &&\n        isNumber(endAtomAttachmentPointNumber) &&\n        beginAtomSgroup &&\n        endAtomSgroup &&\n        (beginAtomSgroup instanceof MonomerMicromolecule ||\n          beginAtomSgroup.isSuperatomWithoutLabel) &&\n        (endAtomSgroup instanceof MonomerMicromolecule ||\n          endAtomSgroup.isSuperatomWithoutLabel)\n      ) {\n        // Here we take monomers from sgroupToMonomer in case of macromolecules structure and\n        // from fragmentIdToMonomer in case of micromolecules structure.\n        const firstMonomer =\n          beginAtomSgroup instanceof MonomerMicromolecule\n            ? sgroupToMonomer.get(beginAtomSgroup)\n            : fragmentIdToMonomer.get(beginAtom.fragment);\n        const secondMonomer =\n          endAtomSgroup instanceof MonomerMicromolecule\n            ? sgroupToMonomer.get(endAtomSgroup)\n            : fragmentIdToMonomer.get(endAtom.fragment);\n\n        assert(firstMonomer);\n        assert(secondMonomer);\n\n        command.merge(\n          drawingEntitiesManager.createPolymerBond(\n            firstMonomer,\n            secondMonomer,\n            getAttachmentPointLabel(beginAtomAttachmentPointNumber),\n            getAttachmentPointLabel(endAtomAttachmentPointNumber),\n            bond.type === Bond.PATTERN.TYPE.HYDROGEN\n              ? MACROMOLECULES_BOND_TYPES.HYDROGEN\n              : MACROMOLECULES_BOND_TYPES.SINGLE,\n          ),\n        );\n      }\n    });\n\n    drawingEntitiesManager.setMicromoleculesHiddenEntities(struct);\n\n    if (editor) {\n      editor.viewModel.initialize([...drawingEntitiesManager.bonds.values()]);\n    }\n\n    return {\n      drawingEntitiesManager,\n      modelChanges: command,\n      fragmentIdToMonomer,\n      fragmentIdToAtomIdMap,\n    };\n  }\n}\n","import { Vec2 } from 'domain/entities';\nimport { Atom } from 'domain/entities/CoreAtom';\nimport { Bond } from 'domain/entities/CoreBond';\n\nexport class HalfEdge {\n  public direction: Vec2;\n  public loopId: number;\n  // eslint-disable-next-line no-use-before-define\n  public oppositeHalfEdge: HalfEdge | undefined;\n  // eslint-disable-next-line no-use-before-define\n  public nextHalfEdge: HalfEdge | undefined;\n  public sinToLeftNeighborHalfEdge: number;\n  public cosToLeftNeighborHalfEdge: number;\n  // eslint-disable-next-line no-use-before-define\n  public leftNeighborHalfEdge: HalfEdge | undefined;\n  public sinToRightNeighborHalfEdge: number;\n  public cosToRightNeighborHalfEdge: number;\n  // eslint-disable-next-line no-use-before-define\n  public rightNeighborHalfEdge: HalfEdge | undefined;\n\n  constructor(\n    public id: number,\n    public firstAtom: Atom,\n    public secondAtom: Atom,\n    public bond: Bond,\n  ) {\n    this.direction = new Vec2();\n    this.loopId = -1; // left loop id if the half-bond is in a loop, otherwise -1\n    this.sinToLeftNeighborHalfEdge = 0;\n    this.cosToLeftNeighborHalfEdge = 0;\n    this.sinToRightNeighborHalfEdge = 0;\n    this.cosToRightNeighborHalfEdge = 0;\n  }\n\n  public get leftNormal() {\n    return this.direction.turnLeft();\n  }\n\n  public get angle() {\n    // angle to (1,0), used for sorting the bonds\n    return this.direction.oxAngle();\n  }\n\n  public get position() {\n    return this.firstAtom.position || new Vec2(0, 0);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { HalfEdge } from 'application/render/view-model/HalfEdge';\nimport { Bond } from 'domain/entities';\n\nexport class Loop {\n  public doubleBondsAmount = 0;\n  public aromatic = true;\n\n  constructor(public halfEdges: Array<HalfEdge>, public isConvex = false) {\n    this.calculateDoubleBondsAmount();\n  }\n\n  private calculateDoubleBondsAmount() {\n    this.halfEdges.forEach((halfEdge) => {\n      if (halfEdge.bond.type !== Bond.PATTERN.TYPE.AROMATIC)\n        this.aromatic = false;\n      if (halfEdge.bond.type === Bond.PATTERN.TYPE.DOUBLE)\n        this.doubleBondsAmount++;\n    });\n  }\n}\n","import { HalfEdge } from 'application/render/view-model/HalfEdge';\nimport { Bond } from 'domain/entities/CoreBond';\nimport { KetcherLogger } from 'utilities';\nimport { Box2Abs, Pile, Vec2 } from 'domain/entities';\nimport { Atom } from 'domain/entities/CoreAtom';\nimport { Loop } from 'application/render/view-model/Loop';\n\nexport class ViewModel {\n  public halfEdges = new Map<number, HalfEdge>();\n  public atomsToHalfEdges = new Map<Atom, HalfEdge[]>();\n  public bondsToHalfEdges = new Map<Bond, HalfEdge[]>();\n  public loops = new Map<number, Loop>();\n\n  private setHalfBondProperties(\n    halfEdge: HalfEdge,\n    oppositeHalfEdge: HalfEdge,\n  ) {\n    const coordsDifference = Vec2.diff(\n      halfEdge.secondAtom.position,\n      halfEdge.firstAtom.position,\n    ).normalized();\n\n    halfEdge.oppositeHalfEdge = oppositeHalfEdge;\n    halfEdge.direction =\n      Vec2.dist(halfEdge.secondAtom.position, halfEdge.firstAtom.position) >\n      1e-4\n        ? coordsDifference\n        : new Vec2(1, 0);\n    if (halfEdge.loopId < 0) halfEdge.loopId = -1;\n  }\n\n  private setAtomsToHalfEdgesMap(atom: Atom, halfEdge: HalfEdge) {\n    const atomHalfEdges = this.atomsToHalfEdges.get(atom);\n\n    if (!atomHalfEdges) {\n      this.atomsToHalfEdges.set(atom, [halfEdge]);\n    } else {\n      atomHalfEdges.push(halfEdge);\n    }\n  }\n\n  private setBondsToHalfEdgesMap(bond: Bond, halfEdge: HalfEdge) {\n    const bondsToHalfEdges = this.bondsToHalfEdges.get(bond);\n\n    if (!bondsToHalfEdges) {\n      this.bondsToHalfEdges.set(bond, [halfEdge]);\n    } else {\n      bondsToHalfEdges.push(halfEdge);\n    }\n  }\n\n  private initHalfEdge(bond: Bond) {\n    const firstHalfEdgeId = 2 * bond.id;\n    const secondHalfEdgeId = 2 * bond.id + 1;\n    const firstHalfEdge = new HalfEdge(\n      firstHalfEdgeId,\n      bond.firstAtom,\n      bond.secondAtom,\n      bond,\n    );\n    const secondHalfEdge = new HalfEdge(\n      secondHalfEdgeId,\n      bond.secondAtom,\n      bond.firstAtom,\n      bond,\n    );\n\n    this.halfEdges.set(firstHalfEdgeId, firstHalfEdge);\n    this.halfEdges.set(secondHalfEdgeId, secondHalfEdge);\n    this.setAtomsToHalfEdgesMap(bond.firstAtom, firstHalfEdge);\n    this.setAtomsToHalfEdgesMap(bond.secondAtom, secondHalfEdge);\n    this.setBondsToHalfEdgesMap(bond, firstHalfEdge);\n    this.setBondsToHalfEdgesMap(bond, secondHalfEdge);\n    this.setHalfBondProperties(firstHalfEdge, secondHalfEdge);\n    this.setHalfBondProperties(secondHalfEdge, firstHalfEdge);\n  }\n\n  private initHalfEdges(bonds: Bond[]) {\n    bonds.forEach((bond) => {\n      this.initHalfEdge(bond);\n    });\n  }\n\n  private setHalfEdgesAngle(halfEdge: HalfEdge, nextHalfEdge: HalfEdge) {\n    halfEdge.cosToRightNeighborHalfEdge = Vec2.dot(\n      halfEdge.direction,\n      nextHalfEdge.direction,\n    );\n    nextHalfEdge.cosToLeftNeighborHalfEdge = Vec2.dot(\n      halfEdge.direction,\n      nextHalfEdge.direction,\n    );\n\n    halfEdge.sinToRightNeighborHalfEdge = Vec2.cross(\n      halfEdge.direction,\n      nextHalfEdge.direction,\n    );\n    nextHalfEdge.sinToLeftNeighborHalfEdge = Vec2.cross(\n      halfEdge.direction,\n      nextHalfEdge.direction,\n    );\n\n    nextHalfEdge.leftNeighborHalfEdge = halfEdge;\n    halfEdge.rightNeighborHalfEdge = nextHalfEdge;\n  }\n\n  private sortAtomsHalfEdges() {\n    this.atomsToHalfEdges.forEach((atomHalfEdges, atom) => {\n      atomHalfEdges\n        .sort((halfEdge1, halfEdge2) => halfEdge1.angle - halfEdge2.angle)\n        .forEach((halfEdge, halfEdgeIndex) => {\n          const nextHalfEdge =\n            atomHalfEdges[(halfEdgeIndex + 1) % atomHalfEdges.length];\n\n          if (!halfEdge.oppositeHalfEdge) {\n            KetcherLogger.warn(\n              `Failed to sort HalfEdges for atom ${atom.id}. HalfEdge ${halfEdge.id} has no opposite halfEdge`,\n            );\n\n            return;\n          }\n\n          halfEdge.oppositeHalfEdge.nextHalfEdge = nextHalfEdge;\n          this.setHalfEdgesAngle(halfEdge, nextHalfEdge);\n        });\n    });\n  }\n\n  private partitionLoop(halfEdgesInLoop: HalfEdge[]) {\n    const subloops: Array<HalfEdge[]> = [];\n    let continueFlag = true;\n\n    while (continueFlag) {\n      const atomToHalfBond = {}; // map from every atom in the loop to the index of the first half-bond starting from that atom in the uniqHb array\n      continueFlag = false;\n\n      for (let l = 0; l < halfEdgesInLoop.length; ++l) {\n        const halfEdge = halfEdgesInLoop[l];\n        const firstAtomId = halfEdge.firstAtom.id;\n        const secondAtomId = halfEdge.secondAtom.id;\n        if (secondAtomId in atomToHalfBond) {\n          // subloop found\n          const s = atomToHalfBond[secondAtomId]; // where the subloop begins\n          const subloop = halfEdgesInLoop.slice(s, l + 1);\n          subloops.push(subloop);\n          if (l < halfEdgesInLoop.length) {\n            // remove half-bonds corresponding to the subloop\n            halfEdgesInLoop.splice(s, l - s + 1);\n          }\n          continueFlag = true;\n          break;\n        }\n        atomToHalfBond[firstAtomId] = l;\n      }\n      if (!continueFlag) subloops.push(halfEdgesInLoop); // we're done, no more subloops found\n    }\n    return subloops;\n  }\n\n  private getAngleBetweenHalfEdges(\n    firstHalfEdge: HalfEdge,\n    secondHalfEdge: HalfEdge,\n  ): number {\n    return Math.atan2(\n      Vec2.cross(firstHalfEdge.direction, secondHalfEdge.direction),\n      Vec2.dot(firstHalfEdge.direction, secondHalfEdge.direction),\n    );\n  }\n\n  private loopIsInner(halfEdgesInLoop: HalfEdge[]): boolean {\n    let totalAngle = 2 * Math.PI;\n    halfEdgesInLoop.forEach((halfEdge, i, loopArr) => {\n      const nextHalfEdge = loopArr[(i + 1) % loopArr.length];\n      const angle = this.getAngleBetweenHalfEdges(halfEdge, nextHalfEdge);\n      totalAngle +=\n        nextHalfEdge.oppositeHalfEdge === halfEdge ? Math.PI : angle; // back and forth along the same edge\n    });\n    return Math.abs(totalAngle) < Math.PI;\n  }\n\n  private loopHasSelfIntersections(halfEdges: Array<HalfEdge>) {\n    for (let i = 0; i < halfEdges.length; ++i) {\n      const halfEdge = halfEdges[i];\n      const set = new Pile([halfEdge.firstAtom, halfEdge.secondAtom]);\n\n      for (let j = i + 2; j < halfEdges.length; ++j) {\n        const nextNextHalfEdge = halfEdges[j];\n        if (\n          set.has(nextNextHalfEdge.firstAtom) ||\n          set.has(nextNextHalfEdge.secondAtom)\n        )\n          continue; // skip edges sharing an atom\n\n        if (\n          Box2Abs.segmentIntersection(\n            halfEdge.firstAtom.position,\n            halfEdge.secondAtom.position,\n            nextNextHalfEdge.firstAtom.position,\n            nextNextHalfEdge.secondAtom.position,\n          )\n        )\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  private loopIsConvex(loop: HalfEdge[]): boolean {\n    return loop.every((halfEdge, k, loopArr) => {\n      const angle = this.getAngleBetweenHalfEdges(\n        halfEdge,\n        loopArr[(k + 1) % loopArr.length],\n      );\n      return angle <= 0;\n    });\n  }\n\n  private findLoops() {\n    const newLoops: Array<number[]> = [];\n    const bondsToMark = new Pile<number>();\n\n    /*\n      Starting from each half-bond not known to be in a loop yet,\n      follow the 'next' links until the initial half-bond is reached or\n      the length of the sequence exceeds the number of half-bonds available.\n      In a planar graph, as long as every bond is a part of some \"loop\" -\n      either an outer or an inner one - every iteration either yields a loop\n      or doesn't start at all. Thus this has linear complexity in the number\n      of bonds for planar graphs.\n   */\n\n    let currentHalfEdge;\n    let index = 0;\n    let halfEdgesInPotentialLoop: HalfEdge[] = [];\n\n    this.halfEdges.forEach((halfEdge) => {\n      if (halfEdge.loopId !== -1) return;\n\n      for (\n        currentHalfEdge = halfEdge, index = 0, halfEdgesInPotentialLoop = [];\n        index <= this.halfEdges.size;\n        currentHalfEdge = currentHalfEdge.nextHalfEdge, ++index\n      ) {\n        if (!(index > 0 && currentHalfEdge === halfEdge)) {\n          halfEdgesInPotentialLoop.push(currentHalfEdge);\n          continue; // eslint-disable-line no-continue\n        }\n\n        // loop found\n        const subloops = this.partitionLoop(halfEdgesInPotentialLoop);\n        subloops.forEach((halfEdgesInSubLoop) => {\n          let loopId;\n          if (\n            this.loopIsInner(halfEdgesInSubLoop) &&\n            !this.loopHasSelfIntersections(halfEdgesInSubLoop)\n          ) {\n            /*\n                        loop is internal\n                        use lowest half-bond id in the loop as the loop id\n                        this ensures that the loop gets the same id if it is discarded and then recreated,\n                        which in turn is required to enable redrawing while dragging, as actions store item id's\n                     */\n            loopId = Math.min(\n              ...halfEdgesInSubLoop.map((halfEdge) => halfEdge.id),\n            );\n            this.loops.set(\n              loopId,\n              new Loop(\n                halfEdgesInSubLoop,\n                this.loopIsConvex(halfEdgesInSubLoop),\n              ),\n            );\n          } else {\n            loopId = -2;\n          }\n\n          halfEdgesInSubLoop.forEach((halfEdge) => {\n            halfEdge.loopId = loopId;\n            bondsToMark.add(halfEdge.bond.id);\n          });\n\n          if (loopId >= 0) newLoops.push(loopId);\n        });\n        break;\n      }\n    });\n\n    return {\n      newLoops,\n      bondsToMark: Array.from(bondsToMark),\n    };\n  }\n\n  private clearState() {\n    this.halfEdges.clear();\n    this.loops.clear();\n    this.atomsToHalfEdges.clear();\n    this.bondsToHalfEdges.clear();\n  }\n\n  public initialize(bonds: Bond[]) {\n    this.clearState();\n    this.initHalfEdges(bonds);\n    this.sortAtomsHalfEdges();\n    this.findLoops();\n  }\n}\n","import { drawnStructuresSelector } from 'application/editor/constants';\nimport { Editor, EditorType } from 'application/editor/editor.types';\nimport {\n  editorEvents,\n  hotkeysConfiguration,\n  renderersEvents,\n  resetEditorEvents,\n} from 'application/editor/editorEvents';\nimport { MacromoleculesConverter } from 'application/editor/MacromoleculesConverter';\nimport {\n  FlexMode,\n  LayoutMode,\n  modesMap,\n  SequenceMode,\n  SnakeMode,\n} from 'application/editor/modes/';\nimport { BaseMode } from 'application/editor/modes/internal';\nimport { toolsMap } from 'application/editor/tools';\nimport { PolymerBond as PolymerBondTool } from 'application/editor/tools/Bond';\nimport {\n  BaseTool,\n  IRnaPreset,\n  isBaseTool,\n  Tool,\n  ToolConstructorInterface,\n  ToolEventHandlerName,\n} from 'application/editor/tools/Tool';\nimport {\n  IKetMacromoleculesContent,\n  IKetMonomerGroupTemplate,\n  KetMonomerGroupTemplateClass,\n  KetTemplateType,\n} from 'application/formatters';\nimport { FlexModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/FlexModePolymerBondRenderer';\nimport { SnakeModePolymerBondRenderer } from 'application/render/renderers/PolymerBondRenderer/SnakeModePolymerBondRenderer';\nimport { RenderersManager } from 'application/render/renderers/RenderersManager';\nimport { BaseSequenceItemRenderer } from 'application/render/renderers/sequence/BaseSequenceItemRenderer';\nimport { SequenceRenderer } from 'application/render/renderers/sequence/SequenceRenderer';\nimport { ketcherProvider } from 'application/utils';\nimport assert from 'assert';\nimport { SequenceType, Struct, Vec2 } from 'domain/entities';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { Command } from 'domain/entities/Command';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { KetSerializer } from 'domain/serializers';\nimport { AttachmentPointName, MonomerItemType } from 'domain/types';\nimport { DOMSubscription } from 'subscription';\nimport { initHotKeys, KetcherLogger, keyNorm } from 'utilities';\nimport monomersDataRaw from './data/monomers.ket';\nimport { EditorHistory, HistoryOperationType } from './EditorHistory';\nimport { Coordinates } from './shared/coordinates';\nimport ZoomTool from './tools/Zoom';\nimport { ViewModel } from 'application/render/view-model/ViewModel';\nimport { HandTool } from 'application/editor/tools/Hand';\nimport { HydrogenBond } from 'domain/entities/HydrogenBond';\nimport { ToolName } from 'application/editor/tools/types';\n\ninterface ICoreEditorConstructorParams {\n  theme;\n  canvas: SVGSVGElement;\n  mode?: BaseMode;\n}\n\nfunction isMouseMainButtonPressed(event: MouseEvent) {\n  return event.button === 0;\n}\n\nlet editor;\nexport class CoreEditor {\n  public events;\n\n  public _type: EditorType;\n  public renderersContainer: RenderersManager;\n  public drawingEntitiesManager: DrawingEntitiesManager;\n  public viewModel: ViewModel;\n  public lastCursorPosition: Vec2 = new Vec2(0, 0);\n  public lastCursorPositionOfCanvas: Vec2 = new Vec2(0, 0);\n  private _monomersLibraryParsedJson?: IKetMacromoleculesContent;\n  private _monomersLibrary: MonomerItemType[] = [];\n  public canvas: SVGSVGElement;\n  public drawnStructuresWrapperElement: SVGGElement;\n  public canvasOffset: DOMRect;\n  public theme;\n  public zoomTool: ZoomTool;\n  // private lastEvent: Event | undefined;\n  private tool?: Tool | BaseTool | undefined;\n  public get selectedTool(): Tool | BaseTool | undefined {\n    return this.tool;\n  }\n\n  public mode: BaseMode;\n  public sequenceTypeEnterMode = SequenceType.RNA;\n  private micromoleculesEditor: Editor;\n  private hotKeyEventHandler: (event: unknown) => void = () => {};\n  private copyEventHandler: (event: ClipboardEvent) => void = () => {};\n  private pasteEventHandler: (event: ClipboardEvent) => void = () => {};\n  private keydownEventHandler: (event: KeyboardEvent) => void = () => {};\n\n  constructor({ theme, canvas, mode }: ICoreEditorConstructorParams) {\n    this._type = EditorType.Macromolecules;\n    this.theme = theme;\n    this.canvas = canvas;\n    this.drawnStructuresWrapperElement = canvas.querySelector(\n      drawnStructuresSelector,\n    ) as SVGGElement;\n    this.mode = mode ?? new SequenceMode();\n    resetEditorEvents();\n    this.events = editorEvents;\n    this.setMonomersLibrary(monomersDataRaw);\n    this._monomersLibraryParsedJson = JSON.parse(monomersDataRaw);\n    this.subscribeEvents();\n    this.renderersContainer = new RenderersManager({ theme });\n    this.drawingEntitiesManager = new DrawingEntitiesManager();\n    this.viewModel = new ViewModel();\n    this.domEventSetup();\n    this.setupContextMenuEvents();\n    this.setupKeyboardEvents();\n    this.setupCopyPasteEvent();\n    this.canvasOffset = this.canvas.getBoundingClientRect();\n    this.zoomTool = ZoomTool.initInstance(this.drawingEntitiesManager);\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    editor = this;\n    const ketcher = ketcherProvider.getKetcher();\n    this.micromoleculesEditor = ketcher?.editor;\n    this.switchToMacromolecules();\n    this.rerenderSequenceMode();\n  }\n\n  static provideEditorInstance(): CoreEditor {\n    return editor;\n  }\n\n  private setMonomersLibrary(monomersDataRaw: string) {\n    const monomersLibraryParsedJson = JSON.parse(monomersDataRaw);\n    this._monomersLibraryParsedJson = monomersLibraryParsedJson;\n    const serializer = new KetSerializer();\n    this._monomersLibrary = serializer.convertMonomersLibrary(\n      monomersLibraryParsedJson,\n    );\n  }\n\n  public get monomersLibraryParsedJson() {\n    return this._monomersLibraryParsedJson;\n  }\n\n  public get monomersLibrary() {\n    return this._monomersLibrary;\n  }\n\n  public get defaultRnaPresetsLibraryItems() {\n    const monomersLibraryJson = this.monomersLibraryParsedJson;\n\n    if (!monomersLibraryJson) {\n      return [];\n    }\n\n    return monomersLibraryJson.root.templates\n      .filter((templateRef) => {\n        const template = monomersLibraryJson[templateRef.$ref];\n\n        return (\n          template.type === KetTemplateType.MONOMER_GROUP_TEMPLATE &&\n          template.class === KetMonomerGroupTemplateClass.RNA\n        );\n      })\n      .map(\n        (templateRef) => monomersLibraryJson[templateRef.$ref],\n      ) as IKetMonomerGroupTemplate[];\n  }\n\n  private handleHotKeyEvents(event) {\n    const keySettings = hotkeysConfiguration;\n    const hotKeys = initHotKeys(keySettings);\n    const shortcutKey = keyNorm.lookup(hotKeys, event);\n    const isInput =\n      event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA';\n\n    if (keySettings[shortcutKey]?.handler && !isInput) {\n      keySettings[shortcutKey].handler(this);\n      event.preventDefault();\n    }\n  }\n\n  private setupKeyboardEvents() {\n    this.setupHotKeysEvents();\n    this.keydownEventHandler = async (event: KeyboardEvent) => {\n      await this.mode.onKeyDown(event);\n    };\n\n    document.addEventListener('keydown', this.keydownEventHandler);\n  }\n\n  private setupCopyPasteEvent() {\n    this.copyEventHandler = (event: ClipboardEvent) => {\n      this.mode.onCopy(event);\n    };\n    this.pasteEventHandler = (event: ClipboardEvent) => {\n      this.mode.onPaste(event);\n    };\n    document.addEventListener('copy', this.copyEventHandler);\n    document.addEventListener('paste', this.pasteEventHandler);\n  }\n\n  private setupHotKeysEvents() {\n    this.hotKeyEventHandler = (event) => this.handleHotKeyEvents(event);\n    document.addEventListener('keydown', this.hotKeyEventHandler);\n  }\n\n  private setupContextMenuEvents() {\n    document.addEventListener('contextmenu', (event) => {\n      event.preventDefault();\n\n      const eventData = event.target?.__data__;\n      const canvasBoundingClientRect = this.canvas.getBoundingClientRect();\n      const isClickOnCanvas =\n        event.clientX >= canvasBoundingClientRect.left &&\n        event.clientX <= canvasBoundingClientRect.right &&\n        event.clientY >= canvasBoundingClientRect.top &&\n        event.clientY <= canvasBoundingClientRect.bottom;\n\n      if (eventData instanceof BaseSequenceItemRenderer) {\n        this.events.rightClickSequence.dispatch(\n          event,\n          SequenceRenderer.selections,\n        );\n      } else if (\n        eventData instanceof FlexModePolymerBondRenderer ||\n        (eventData instanceof SnakeModePolymerBondRenderer &&\n          !(eventData.polymerBond instanceof HydrogenBond))\n      ) {\n        this.events.rightClickPolymerBond.dispatch(event, eventData);\n      } else if (isClickOnCanvas) {\n        this.events.rightClickCanvas.dispatch(event);\n      }\n\n      return false;\n    });\n  }\n\n  private subscribeEvents() {\n    this.events.selectMonomer.add((monomer) => this.onSelectMonomer(monomer));\n    this.events.selectPreset.add((preset) => this.onSelectRNAPreset(preset));\n    this.events.selectTool.add((tool, options) =>\n      this.onSelectTool(tool, options),\n    );\n    this.events.createBondViaModal.add((payload) => this.onCreateBond(payload));\n    this.events.cancelBondCreationViaModal.add((secondMonomer: BaseMonomer) =>\n      this.onCancelBondCreation(secondMonomer),\n    );\n    this.events.selectMode.add((isSnakeMode) => this.onSelectMode(isSnakeMode));\n    this.events.selectHistory.add((name) => this.onSelectHistory(name));\n\n    renderersEvents.forEach((eventName) => {\n      this.events[eventName].add((event) => {\n        this.useModeIfNeeded(eventName, event);\n        this.useToolIfNeeded(eventName, event);\n      });\n    });\n    this.events.editSequence.add(\n      (sequenceItemRenderer: BaseSequenceItemRenderer) =>\n        this.onEditSequence(sequenceItemRenderer),\n    );\n\n    this.events.turnOnSequenceEditInRNABuilderMode.add(() =>\n      this.onTurnOnSequenceEditInRNABuilderMode(),\n    );\n    this.events.turnOffSequenceEditInRNABuilderMode.add(() =>\n      this.onTurnOffSequenceEditInRNABuilderMode(),\n    );\n    this.events.changeSequenceTypeEnterMode.add((mode: SequenceType) =>\n      this.onChangeSequenceTypeEnterMode(mode),\n    );\n  }\n\n  private onEditSequence(sequenceItemRenderer: BaseSequenceItemRenderer) {\n    if (!(this.mode instanceof SequenceMode)) {\n      return;\n    }\n\n    this.mode.turnOnEditMode(sequenceItemRenderer);\n  }\n\n  private onTurnOnSequenceEditInRNABuilderMode() {\n    if (!(this.mode instanceof SequenceMode)) {\n      return;\n    }\n\n    this.mode.turnOnSequenceEditInRNABuilderMode();\n  }\n\n  private onTurnOffSequenceEditInRNABuilderMode() {\n    if (!(this.mode instanceof SequenceMode)) {\n      return;\n    }\n\n    this.mode.turnOffSequenceEditInRNABuilderMode();\n  }\n\n  private onChangeSequenceTypeEnterMode(mode: SequenceType) {\n    this.sequenceTypeEnterMode = mode;\n  }\n\n  private onSelectMonomer(monomer: MonomerItemType) {\n    if (this.mode instanceof SequenceMode) {\n      this.mode.insertMonomerFromLibrary(monomer);\n    } else {\n      this.selectTool(ToolName.monomer, monomer);\n    }\n  }\n\n  private onSelectRNAPreset(preset: IRnaPreset) {\n    if (this.mode instanceof SequenceMode) {\n      this.mode.insertPresetFromLibrary(preset);\n    } else {\n      if (preset) {\n        this.selectTool(ToolName.preset, preset);\n      } else {\n        this.tool = undefined;\n      }\n    }\n  }\n\n  public onSelectTool(tool: ToolName, options?: object) {\n    this.selectTool(tool, options);\n  }\n\n  private onCreateBond(payload: {\n    firstMonomer: BaseMonomer;\n    secondMonomer: BaseMonomer;\n    firstSelectedAttachmentPoint: AttachmentPointName;\n    secondSelectedAttachmentPoint: AttachmentPointName;\n    polymerBond?: PolymerBond;\n    isReconnection?: boolean;\n    initialFirstMonomerAttachmentPoint?: AttachmentPointName;\n    initialSecondMonomerAttachmentPoint?: AttachmentPointName;\n  }) {\n    if (payload.isReconnection && payload.polymerBond) {\n      const command = new Command();\n      const history = new EditorHistory(this);\n\n      if (\n        !payload.initialFirstMonomerAttachmentPoint ||\n        !payload.initialSecondMonomerAttachmentPoint\n      ) {\n        KetcherLogger.error('Attachment points are not found for the bond');\n\n        return;\n      }\n\n      command.merge(\n        this.drawingEntitiesManager.reconnectPolymerBond(\n          payload.polymerBond,\n          payload.firstSelectedAttachmentPoint,\n          payload.secondSelectedAttachmentPoint,\n          payload.initialFirstMonomerAttachmentPoint,\n          payload.initialSecondMonomerAttachmentPoint,\n        ),\n      );\n\n      if (this.mode instanceof SnakeMode) {\n        command.merge(\n          this.drawingEntitiesManager.recalculateCanvasMatrix(\n            this.drawingEntitiesManager.canvasMatrix?.chainsCollection,\n            this.drawingEntitiesManager.snakeLayoutMatrix,\n          ),\n        );\n      }\n\n      history.update(command);\n      this.renderersContainer.update(command);\n\n      return;\n    }\n\n    if (this.tool instanceof PolymerBondTool) {\n      this.tool.handleBondCreation(payload);\n    }\n  }\n\n  private onCancelBondCreation(secondMonomer: BaseMonomer) {\n    if (this.tool instanceof PolymerBondTool) {\n      this.tool.handleBondCreationCancellation(secondMonomer);\n    }\n  }\n\n  private onSelectMode(\n    data:\n      | LayoutMode\n      | { mode: LayoutMode; mergeWithLatestHistoryCommand: boolean },\n  ) {\n    const mode = typeof data === 'object' ? data.mode : data;\n    const ModeConstructor = modesMap[mode];\n    assert(ModeConstructor);\n    const history = new EditorHistory(this);\n    const hasModeChanged = this.mode.modeName !== mode;\n    this.mode.destroy();\n    this.mode = new ModeConstructor(this.mode.modeName);\n    const command = this.mode.initialize(true, false, !hasModeChanged);\n    history.update(\n      command,\n      typeof data === 'object' ? data?.mergeWithLatestHistoryCommand : false,\n    );\n  }\n\n  public setMode(mode: BaseMode) {\n    this.mode = mode;\n  }\n\n  public get isSequenceMode() {\n    return this?.mode instanceof SequenceMode;\n  }\n\n  public get isSequenceEditMode() {\n    return this?.mode instanceof SequenceMode && this?.mode.isEditMode;\n  }\n\n  public get isSequenceEditInRNABuilderMode() {\n    return (\n      this?.mode instanceof SequenceMode && this?.mode.isEditInRNABuilderMode\n    );\n  }\n\n  public get isSequenceAnyEditMode() {\n    return (\n      this?.mode instanceof SequenceMode &&\n      (this?.mode.isEditMode || this?.mode.isEditInRNABuilderMode)\n    );\n  }\n\n  public onSelectHistory(name: HistoryOperationType) {\n    const history = new EditorHistory(this);\n    if (name === 'undo') {\n      history.undo();\n    } else if (name === 'redo') {\n      history.redo();\n    }\n  }\n\n  public selectTool(name: ToolName, options?) {\n    const ToolConstructor: ToolConstructorInterface = toolsMap[name];\n    const oldTool = this.tool;\n\n    this.tool = new ToolConstructor(this, options);\n\n    if (isBaseTool(oldTool)) {\n      oldTool?.destroy();\n    }\n  }\n\n  public get isHandToolSelected() {\n    return this.selectedTool instanceof HandTool;\n  }\n\n  public unsubscribeEvents() {\n    for (const eventName in this.events) {\n      this.events[eventName].handlers = [];\n    }\n    document.removeEventListener('keydown', this.hotKeyEventHandler);\n    document.removeEventListener('copy', this.copyEventHandler);\n    document.removeEventListener('paste', this.pasteEventHandler);\n    document.removeEventListener('keydown', this.keydownEventHandler);\n  }\n\n  get trackedDomEvents() {\n    const trackedDomEvents: {\n      target: Element | Document;\n      eventName: string;\n      toolEventHandler: ToolEventHandlerName;\n    }[] = [\n      {\n        target: this.canvas,\n        eventName: 'click',\n        toolEventHandler: 'click',\n      },\n      {\n        target: this.canvas,\n        eventName: 'dblclick',\n        toolEventHandler: 'dblclick',\n      },\n      {\n        target: this.canvas,\n        eventName: 'mousedown',\n        toolEventHandler: 'mousedown',\n      },\n      {\n        target: document,\n        eventName: 'mousemove',\n        toolEventHandler: 'mousemove',\n      },\n      {\n        target: document,\n        eventName: 'mouseup',\n        toolEventHandler: 'mouseup',\n      },\n      {\n        target: document,\n        eventName: 'mouseleave',\n        toolEventHandler: 'mouseleave',\n      },\n      {\n        target: this.canvas,\n        eventName: 'mouseleave',\n        toolEventHandler: 'mouseLeaveClientArea',\n      },\n      {\n        target: this.canvas,\n        eventName: 'mouseover',\n        toolEventHandler: 'mouseover',\n      },\n    ];\n\n    return trackedDomEvents;\n  }\n\n  private domEventSetup() {\n    this.trackedDomEvents.forEach(({ target, eventName, toolEventHandler }) => {\n      this.events[eventName] = new DOMSubscription();\n      const subs = this.events[eventName];\n\n      target.addEventListener(eventName, subs.dispatch.bind(subs));\n\n      subs.add((event) => {\n        this.updateLastCursorPosition(event);\n\n        if (\n          ['mouseup', 'mousedown', 'click', 'dbclick'].includes(event.type) &&\n          !isMouseMainButtonPressed(event)\n        ) {\n          return true;\n        }\n\n        // if (eventName !== 'mouseup' && eventName !== 'mouseleave') {\n        //   // to complete drag actions\n        //   if (!event.target || event.target.nodeName === 'DIV') {\n        //     // click on scroll\n        //     this.hover(null);\n        //     return true;\n        //   }\n        // }\n\n        this.useModeIfNeeded(toolEventHandler, event);\n        const isToolUsed = this.useToolIfNeeded(toolEventHandler, event);\n        if (isToolUsed) {\n          return true;\n        }\n\n        return true;\n      }, -1);\n    });\n  }\n\n  private updateLastCursorPosition(event) {\n    const events = ['mousemove', 'click', 'mousedown', 'mouseup', 'mouseover'];\n    if (events.includes(event.type)) {\n      const clientAreaBoundingBox = this.canvasOffset;\n\n      this.lastCursorPosition = new Vec2({\n        x: event.pageX - clientAreaBoundingBox.x,\n        y: event.pageY - clientAreaBoundingBox.y,\n      });\n      this.lastCursorPositionOfCanvas = Coordinates.viewToCanvas(\n        this.lastCursorPosition,\n      );\n    }\n  }\n\n  private useToolIfNeeded(eventHandlerName: ToolEventHandlerName, event) {\n    const editorTool = this.tool as Tool;\n    if (!editorTool) {\n      return false;\n    }\n    // this.lastEvent = event;\n    const conditions = [\n      eventHandlerName in editorTool,\n      this.canvas.contains(event?.target) || editorTool.isSelectionRunning?.(),\n      // isContextMenuClosed(editor.contextMenu),\n    ];\n\n    if (conditions.every((condition) => condition)) {\n      editorTool[eventHandlerName]?.(event);\n      return true;\n    }\n\n    return false;\n  }\n\n  private useModeIfNeeded(\n    eventHandlerName: ToolEventHandlerName,\n    event: Event,\n  ) {\n    if (this.isHandToolSelected) {\n      return;\n    }\n\n    this.mode?.[eventHandlerName]?.(event);\n  }\n\n  public switchToMicromolecules() {\n    this.unsubscribeEvents();\n    const history = new EditorHistory(this);\n    history.destroy();\n    const struct = this.micromoleculesEditor.struct();\n    const reStruct = this.micromoleculesEditor.render.ctab;\n    const { conversionErrorMessage } =\n      MacromoleculesConverter.convertDrawingEntitiesToStruct(\n        this.drawingEntitiesManager,\n        struct,\n        reStruct,\n      );\n    reStruct.render.setMolecule(struct);\n    if (conversionErrorMessage) {\n      const ketcher = ketcherProvider.getKetcher();\n\n      ketcher.editor.setMacromoleculeConvertionError(conversionErrorMessage);\n    }\n    this._monomersLibraryParsedJson = undefined;\n    this._type = EditorType.Micromolecules;\n  }\n\n  private switchToMacromolecules() {\n    const struct = this.micromoleculesEditor?.struct() || new Struct();\n    const ketcher = ketcherProvider.getKetcher();\n    const { modelChanges } =\n      MacromoleculesConverter.convertStructToDrawingEntities(\n        struct,\n        this.drawingEntitiesManager,\n      );\n    this.renderersContainer.update(modelChanges);\n    ketcher?.editor.clear();\n    this._type = EditorType.Macromolecules;\n  }\n\n  private rerenderSequenceMode() {\n    if (this.mode instanceof SequenceMode) {\n      const modelChanges = this.drawingEntitiesManager.reArrangeChains(\n        this.canvas.width.baseVal.value,\n        true,\n        false,\n      );\n      this.drawingEntitiesManager.clearCanvas();\n      this.renderersContainer.update(modelChanges);\n      this.drawingEntitiesManager.applyMonomersSequenceLayout();\n    }\n  }\n\n  public isCurrentModeWithAutozoom(): boolean {\n    return this.mode instanceof FlexMode || this.mode instanceof SnakeMode;\n  }\n\n  public zoomToStructuresIfNeeded() {\n    if (\n      // Temporary solution to disable autozoom for the polymer editor in e2e tests\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      window._ketcher_isAutozoomDisabled ||\n      !this.isCurrentModeWithAutozoom()\n    ) {\n      return;\n    }\n    const structureBbox = RenderersManager.getRenderedStructuresBbox();\n\n    ZoomTool.instance.zoomStructureToFitHalfOfCanvas(structureBbox);\n  }\n}\n","import {\n  IKetMacromoleculesContent,\n  IKetMonomerNode,\n  IKetMonomerTemplate,\n  IKetAmbiguousMonomerNode,\n  IKetAmbiguousMonomerTemplate,\n} from 'application/formatters/types/ket';\nimport { Struct, Vec2 } from 'domain/entities';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport {\n  setMonomerTemplatePrefix,\n  switchIntoChemistryCoordSystem,\n} from 'domain/serializers/ket/helpers';\nimport { KetSerializer } from 'domain/serializers';\nimport { monomerFactory } from 'application/editor';\n\nexport function templateToMonomerProps(template: IKetMonomerTemplate) {\n  return {\n    id: template.id,\n    Name: template.fullName || template.name || template.alias || template.id,\n    MonomerNaturalAnalogCode: template.naturalAnalogShort || '',\n    MonomerName: template.alias || template.id,\n    MonomerFullName: template.fullName,\n    MonomerType: template.classHELM,\n    MonomerClass: template.class,\n    MonomerCaps: {},\n    idtAliases: template.idtAliases,\n    unresolved: template.unresolved,\n  };\n}\n\nexport function monomerToDrawingEntity(\n  node: IKetMonomerNode,\n  template: IKetMonomerTemplate,\n  struct: Struct,\n  drawingEntitiesManager: DrawingEntitiesManager,\n) {\n  const position: Vec2 = switchIntoChemistryCoordSystem(\n    new Vec2(node.position.x, node.position.y),\n  );\n  return drawingEntitiesManager.addMonomer(\n    {\n      struct,\n      label: template.alias || template.id,\n      colorScheme: undefined,\n      favorite: false,\n      props: templateToMonomerProps(template),\n      attachmentPoints: KetSerializer.getTemplateAttachmentPoints(template),\n      seqId: node.seqid,\n    },\n    position,\n  );\n}\n\nexport function createMonomersForVariantMonomer(\n  variantMonomerTemplate: IKetAmbiguousMonomerTemplate,\n  parsedFileContent: IKetMacromoleculesContent,\n) {\n  const monomerTemplates = variantMonomerTemplate.options.map((option) => {\n    return parsedFileContent[setMonomerTemplatePrefix(option.templateId)];\n  }) as IKetMonomerTemplate[];\n  const monomers = monomerTemplates.map((monomerTemplate) => {\n    const monomerItem = {\n      label: monomerTemplate.alias,\n      struct: KetSerializer.convertMonomerTemplateToStruct(monomerTemplate),\n      props: templateToMonomerProps(monomerTemplate),\n      attachmentPoints: monomerTemplate.attachmentPoints,\n    };\n    const [MonomerConstructor] = monomerFactory(monomerItem);\n    KetSerializer.fillStructRgLabelsByMonomerTemplate(\n      monomerTemplate,\n      monomerItem,\n    );\n\n    return new MonomerConstructor(monomerItem, undefined, {\n      generateId: false,\n    });\n  });\n\n  return monomers;\n}\n\nexport function variantMonomerToDrawingEntity(\n  drawingEntitiesManager: DrawingEntitiesManager,\n  node: IKetAmbiguousMonomerNode,\n  template: IKetAmbiguousMonomerTemplate,\n  parsedFileContent: IKetMacromoleculesContent,\n) {\n  const position: Vec2 = switchIntoChemistryCoordSystem(\n    new Vec2(node.position.x, node.position.y),\n  );\n\n  const monomers = createMonomersForVariantMonomer(template, parsedFileContent);\n\n  return drawingEntitiesManager.addAmbiguousMonomer(\n    {\n      monomers,\n      id: template.id,\n      subtype: template.subtype,\n      label: node.alias,\n      options: template.options,\n      idtAliases: template.idtAliases,\n      isAmbiguous: true,\n    },\n    position,\n  );\n}\n","import { IKetConnection } from 'application/formatters/types/ket';\nimport { Command } from 'domain/entities/Command';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport { getAttachmentPointLabel } from 'domain/helpers/attachmentPointCalculations';\nimport { BaseMonomer } from 'domain/entities';\nimport { AttachmentPointName } from 'domain/types';\nimport { CoreEditor } from 'application/editor';\n\nexport function polymerBondToDrawingEntity(\n  connection: IKetConnection,\n  drawingEntitiesManager: DrawingEntitiesManager,\n  atomIdMap: Map<number, number>,\n  superatomMonomerToUsedAttachmentPoint: Map<BaseMonomer, Set<string>>,\n  firstMonomer: BaseMonomer,\n  secondMonomer: BaseMonomer,\n) {\n  const command = new Command();\n\n  const firstAttachmentPoint =\n    connection.endpoint1.attachmentPointId ||\n    getAttachmentPointLabel(\n      firstMonomer.monomerItem.struct.sgroups\n        .get(0)\n        ?.getAttachmentPoints()\n        .find(\n          (attachmentPoint) =>\n            attachmentPoint.atomId ===\n              atomIdMap.get(Number(connection.endpoint1.atomId)) &&\n            !superatomMonomerToUsedAttachmentPoint\n              .get(firstMonomer)\n              ?.has(\n                getAttachmentPointLabel(\n                  attachmentPoint.attachmentPointNumber as number,\n                ),\n              ),\n        )?.attachmentPointNumber as number,\n    );\n  const secondAttachmentPoint =\n    connection.endpoint2.attachmentPointId ||\n    getAttachmentPointLabel(\n      secondMonomer.monomerItem.struct.sgroups\n        .get(0)\n        ?.getAttachmentPoints()\n        .find(\n          (attachmentPoint) =>\n            attachmentPoint.atomId ===\n              atomIdMap.get(Number(connection.endpoint2.atomId)) &&\n            !superatomMonomerToUsedAttachmentPoint\n              .get(secondMonomer)\n              ?.has(\n                getAttachmentPointLabel(\n                  attachmentPoint.attachmentPointNumber as number,\n                ),\n              ),\n        )?.attachmentPointNumber as number,\n    );\n\n  if (\n    !firstMonomer.isAttachmentPointExistAndFree(\n      firstAttachmentPoint as AttachmentPointName,\n    ) ||\n    !secondMonomer.isAttachmentPointExistAndFree(\n      secondAttachmentPoint as AttachmentPointName,\n    )\n  ) {\n    const editor = CoreEditor.provideEditorInstance();\n    editor.events.error.dispatch(\n      'There is no free attachment point for bond creation.',\n    );\n    return new Command();\n  }\n\n  if (!superatomMonomerToUsedAttachmentPoint.get(firstMonomer)) {\n    superatomMonomerToUsedAttachmentPoint.set(firstMonomer, new Set());\n  }\n\n  if (!superatomMonomerToUsedAttachmentPoint.get(secondMonomer)) {\n    superatomMonomerToUsedAttachmentPoint.set(secondMonomer, new Set());\n  }\n\n  superatomMonomerToUsedAttachmentPoint\n    .get(firstMonomer)\n    ?.add(firstAttachmentPoint);\n  superatomMonomerToUsedAttachmentPoint\n    .get(secondMonomer)\n    ?.add(secondAttachmentPoint);\n\n  command.merge(\n    drawingEntitiesManager.createPolymerBond(\n      firstMonomer,\n      secondMonomer,\n      firstAttachmentPoint as AttachmentPointName,\n      secondAttachmentPoint as AttachmentPointName,\n    ),\n  );\n  return command;\n}\n","import { KetFileNode } from 'domain/serializers';\nimport { KetFileMultitailArrowNode, MultitailArrow } from 'domain/entities';\nimport { MULTITAIL_ARROW_SERIALIZE_KEY } from 'domain/constants';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const validateMultitailArrows = (json: any): boolean => {\n  const nodes: Array<KetFileNode<unknown | KetFileMultitailArrowNode>> =\n    json.root.nodes;\n  return nodes.every((node) => {\n    if (node.type === MULTITAIL_ARROW_SERIALIZE_KEY) {\n      const result = MultitailArrow.validateKetNode(\n        node.data as KetFileMultitailArrowNode,\n      );\n      if (result !== null) {\n        console.info(result);\n        return null;\n      }\n    }\n    return true;\n  });\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport Ajv from 'ajv';\nimport schema from './schema.json';\nimport { validateMultitailArrows } from './multitailArrowsValidator';\n\nexport function validate(ket: any): boolean {\n  const ajv = new Ajv();\n  const validate = ajv.compile(schema);\n  const result = validate(ket);\n  return result ? validateMultitailArrows(ket) : result;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { IMAGE_SERIALIZE_KEY } from 'domain/constants';\nimport { KetFileNode } from 'domain/serializers';\nimport { KetFileImageNode } from 'domain/entities';\n\nexport function imageToKet(imageNode: KetFileNode) {\n  return {\n    type: IMAGE_SERIALIZE_KEY,\n    format: (imageNode as KetFileImageNode).format,\n    boundingBox: (imageNode as KetFileImageNode).boundingBox,\n    data: imageNode.data,\n    selected: imageNode.selected,\n  };\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Struct } from 'domain/entities';\nimport { Image } from 'domain/entities/image';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function imageToStruct(ketItem: any, struct: Struct): Struct {\n  struct.images.add(Image.fromKetNode(ketItem));\n  return struct;\n}\n","import { KetFileNode } from 'domain/serializers';\nimport { MULTITAIL_ARROW_SERIALIZE_KEY } from 'domain/constants';\n\nexport function multitailArrowToKet(node: KetFileNode) {\n  return {\n    type: MULTITAIL_ARROW_SERIALIZE_KEY,\n    data: node.data,\n    selected: node.selected,\n  };\n}\n","import { Struct, MultitailArrow } from 'domain/entities';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function multitailArrowToStruct(ketItem: any, struct: Struct) {\n  struct.multitailArrows.add(MultitailArrow.fromKetNode(ketItem));\n  return struct;\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  Atom,\n  Bond,\n  SGroupAttachmentPoint,\n  Struct,\n  UnresolvedMonomer,\n  Vec2,\n} from 'domain/entities';\nimport { arrowToKet, plusToKet } from './toKet/rxnToKet';\nimport { Serializer } from '../serializers.types';\nimport { headerToKet } from './toKet/headerToKet';\nimport { moleculeToKet } from './toKet/moleculeToKet';\nimport { moleculeToStruct } from './fromKet/moleculeToStruct';\nimport { prepareStructForKet } from './toKet/prepare';\nimport { rgroupToKet } from './toKet/rgroupToKet';\nimport { rgroupToStruct } from './fromKet/rgroupToStruct';\nimport { rxnToStruct } from './fromKet/rxnToStruct';\nimport { simpleObjectToKet } from './toKet/simpleObjectToKet';\nimport { simpleObjectToStruct } from './fromKet/simpleObjectToStruct';\nimport { textToKet } from './toKet/textToKet';\nimport { textToStruct } from './fromKet/textToStruct';\nimport {\n  IKetAmbiguousMonomerTemplate,\n  IKetConnection,\n  IKetConnectionEndPoint,\n  IKetConnectionMoleculeEndPoint,\n  IKetConnectionMonomerEndPoint,\n  IKetMacromoleculesContent,\n  IKetMacromoleculesContentRootProperty,\n  IKetMonomerNode,\n  IKetMonomerTemplate,\n  KetConnectionType,\n  KetNodeType,\n  KetTemplateType,\n} from 'application/formatters/types/ket';\nimport { Command } from 'domain/entities/Command';\nimport { CoreEditor, EditorSelection } from 'application/editor/internal';\nimport {\n  createMonomersForVariantMonomer,\n  monomerToDrawingEntity,\n  templateToMonomerProps,\n  variantMonomerToDrawingEntity,\n} from 'domain/serializers/ket/fromKet/monomerToDrawingEntity';\nimport assert from 'assert';\nimport { polymerBondToDrawingEntity } from 'domain/serializers/ket/fromKet/polymerBondToDrawingEntity';\nimport { getMonomerUniqueKey } from 'domain/helpers/monomers';\nimport { monomerFactory } from 'application/editor/operations/monomer/monomerFactory';\nimport { KetcherLogger } from 'utilities';\nimport { Chem } from 'domain/entities/Chem';\nimport { DrawingEntitiesManager } from 'domain/entities/DrawingEntitiesManager';\nimport {\n  getKetRef,\n  populateStructWithSelection,\n  setAmbiguousMonomerTemplatePrefix,\n  setMonomerPrefix,\n  setMonomerTemplatePrefix,\n  switchIntoChemistryCoordSystem,\n} from 'domain/serializers/ket/helpers';\nimport { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport { validate } from 'domain/serializers/ket/validate';\nimport { MacromoleculesConverter } from 'application/editor/MacromoleculesConverter';\nimport { getAttachmentPointLabelWithBinaryShift } from 'domain/helpers/attachmentPointCalculations';\nimport { isNumber } from 'lodash';\nimport {\n  AmbiguousMonomerType,\n  AttachmentPointName,\n  MonomerItemType,\n} from 'domain/types';\nimport { PolymerBond } from 'domain/entities/PolymerBond';\nimport { imageToKet } from 'domain/serializers/ket/toKet/imageToKet';\nimport { imageToStruct } from 'domain/serializers/ket/fromKet/imageToStruct';\nimport {\n  IMAGE_SERIALIZE_KEY,\n  MULTITAIL_ARROW_SERIALIZE_KEY,\n} from 'domain/constants';\nimport { multitailArrowToKet } from 'domain/serializers/ket/toKet/multitailArrowToKet';\nimport { multitailArrowToStruct } from 'domain/serializers/ket/fromKet/multitailArrowToStruct';\nimport { AmbiguousMonomer } from 'domain/entities/AmbiguousMonomer';\nimport { isMonomerSgroupWithAttachmentPoints } from '../../../utilities/monomers';\nimport { HydrogenBond } from 'domain/entities/HydrogenBond';\nimport { MACROMOLECULES_BOND_TYPES } from 'application/editor/tools/Bond';\n\nfunction parseNode(node: any, struct: any) {\n  const type = node.type;\n  switch (type) {\n    case 'arrow': {\n      rxnToStruct(node, struct);\n      break;\n    }\n    case 'plus': {\n      rxnToStruct(node, struct);\n      break;\n    }\n    case 'simpleObject': {\n      simpleObjectToStruct(node, struct);\n      break;\n    }\n    case 'molecule': {\n      const currentStruct = moleculeToStruct(node);\n      if (node.stereoFlagPosition) {\n        const fragment = currentStruct.frags.get(0)!;\n        fragment.stereoFlagPosition = new Vec2(node.stereoFlagPosition);\n      }\n\n      currentStruct.mergeInto(struct);\n      break;\n    }\n    case 'rgroup': {\n      rgroupToStruct(node).mergeInto(struct);\n      break;\n    }\n    case 'text': {\n      textToStruct(node, struct);\n      break;\n    }\n    case MULTITAIL_ARROW_SERIALIZE_KEY: {\n      multitailArrowToStruct(node, struct);\n      break;\n    }\n    case IMAGE_SERIALIZE_KEY: {\n      imageToStruct(node, struct);\n      break;\n    }\n    default:\n      break;\n  }\n}\nexport class KetSerializer implements Serializer<Struct> {\n  deserializeMicromolecules(content: string): Struct {\n    const ket = JSON.parse(content);\n    if (!validate(ket)) {\n      throw new Error('Cannot deserialize input JSON.');\n    }\n\n    return KetSerializer.fillStruct(ket);\n  }\n\n  private static fillStruct(ket) {\n    const resultingStruct = new Struct();\n    const nodes = ket.root.nodes;\n\n    Object.keys(nodes).forEach((i) => {\n      if (nodes[i].type) parseNode(nodes[i], resultingStruct);\n      else if (nodes[i].$ref) parseNode(ket[nodes[i].$ref], resultingStruct);\n    });\n    resultingStruct.name = ket.header ? ket.header.moleculeName : null;\n\n    return resultingStruct;\n  }\n\n  serializeMicromolecules(struct: Struct, monomer?: BaseMonomer): string {\n    const result: any = {\n      root: {\n        nodes: [],\n      },\n    };\n    const header = headerToKet(struct);\n    if (header) result.header = header;\n\n    const ketNodes = prepareStructForKet(struct);\n\n    let moleculeId = 0;\n    ketNodes.forEach((item) => {\n      switch (item.type) {\n        case 'molecule': {\n          result.root.nodes.push({ $ref: `mol${moleculeId}` });\n          result[`mol${moleculeId++}`] = moleculeToKet(item.fragment!, monomer);\n          break;\n        }\n        case 'rgroup': {\n          result.root.nodes.push({ $ref: `rg${item.data!.rgnumber}` });\n          result[`rg${item.data!.rgnumber}`] = rgroupToKet(\n            item.fragment!,\n            item.data,\n          );\n          break;\n        }\n        case 'plus': {\n          result.root.nodes.push(plusToKet(item));\n          break;\n        }\n        case 'arrow': {\n          result.root.nodes.push(arrowToKet(item));\n          break;\n        }\n        case 'simpleObject': {\n          result.root.nodes.push(simpleObjectToKet(item));\n          break;\n        }\n        case 'text': {\n          result.root.nodes.push(textToKet(item));\n          break;\n        }\n        case IMAGE_SERIALIZE_KEY: {\n          result.root.nodes.push(imageToKet(item));\n          break;\n        }\n        case MULTITAIL_ARROW_SERIALIZE_KEY:\n          result.root.nodes.push(multitailArrowToKet(item));\n          break;\n        default:\n          break;\n      }\n    });\n\n    return JSON.stringify(result, null, 4);\n  }\n\n  private validateMonomerNodeTemplate(\n    node: IKetMonomerNode,\n    parsedFileContent: IKetMacromoleculesContent,\n    editor: CoreEditor,\n  ) {\n    const template =\n      parsedFileContent[setMonomerTemplatePrefix(node.templateId)];\n    if (!template) {\n      editor.events.error.dispatch('Error during file parsing');\n      return true;\n    }\n\n    return false;\n  }\n\n  private validateConnectionTypeAndEndpoints(\n    connection: IKetConnection,\n    editor: CoreEditor,\n  ) {\n    if (\n      connection.connectionType !== KetConnectionType.SINGLE &&\n      connection.connectionType !== KetConnectionType.HYDROGEN\n    ) {\n      editor.events.error.dispatch('Error during file parsing');\n      return true;\n    }\n    return false;\n  }\n\n  parseAndValidateMacromolecules(fileContent: string) {\n    const editor = CoreEditor.provideEditorInstance();\n    let parsedFileContent: IKetMacromoleculesContent;\n    try {\n      parsedFileContent = JSON.parse(fileContent);\n    } catch (e) {\n      KetcherLogger.error(\n        'ketSerializer.ts::KetSerializer::parseAndValidateMacromolecules',\n        e,\n      );\n      return { error: true };\n    }\n    let error = false;\n    parsedFileContent.root.nodes.forEach((node) => {\n      const nodeDefinition = parsedFileContent[node.$ref];\n\n      if (nodeDefinition?.type === 'monomer') {\n        error = this.validateMonomerNodeTemplate(\n          nodeDefinition,\n          parsedFileContent,\n          editor,\n        );\n      }\n    });\n    if (error) {\n      return { error: true };\n    }\n    parsedFileContent.root.connections?.forEach(\n      (connection: IKetConnection) => {\n        this.validateConnectionTypeAndEndpoints(connection, editor);\n      },\n    );\n    return {\n      error,\n      parsedFileContent,\n    };\n  }\n\n  deserializeToStruct(fileContent: string) {\n    const struct = new Struct();\n    const deserializedContent = this.deserializeToDrawingEntities(fileContent);\n\n    assert(deserializedContent);\n\n    MacromoleculesConverter.convertDrawingEntitiesToStruct(\n      deserializedContent?.drawingEntitiesManager,\n      struct,\n    );\n    return struct;\n  }\n\n  private filterMacromoleculesContent(\n    parsedFileContent: IKetMacromoleculesContent,\n  ) {\n    const fileContentForMicromolecules = {\n      ...parsedFileContent,\n      root: {\n        nodes: parsedFileContent.root.nodes.filter((node) => {\n          const nodeDefinition = parsedFileContent[node.$ref];\n\n          return (\n            nodeDefinition?.type !== KetNodeType.MONOMER &&\n            nodeDefinition?.type !== KetNodeType.AMBIGUOUS_MONOMER\n          );\n        }),\n      },\n    };\n    parsedFileContent.root.nodes.forEach((node) => {\n      const nodeDefinition = parsedFileContent[node.$ref];\n      if (\n        nodeDefinition?.type === KetNodeType.MONOMER ||\n        nodeDefinition?.type === KetNodeType.AMBIGUOUS_MONOMER\n      ) {\n        fileContentForMicromolecules[node.$ref] = undefined;\n      }\n    });\n\n    parsedFileContent.root.templates?.forEach((template) => {\n      fileContentForMicromolecules[template.$ref] = undefined;\n    });\n\n    return fileContentForMicromolecules;\n  }\n\n  public static getTemplateAttachmentPoints(template: IKetMonomerTemplate) {\n    return template.unresolved\n      ? template.attachmentPoints?.map((_, index) => {\n          return {\n            attachmentAtom: index,\n            leavingGroup: {\n              atoms: [],\n            },\n          };\n        })\n      : template.attachmentPoints;\n  }\n\n  public static convertMonomerTemplateToStruct(template: IKetMonomerTemplate) {\n    const attachmentPoints = template.attachmentPoints || [];\n\n    return KetSerializer.fillStruct({\n      root: {\n        nodes: [{ $ref: 'mol0' }],\n      },\n      mol0: {\n        ...template,\n        type: 'molecule',\n        atoms: template.unresolved\n          ? attachmentPoints?.map((_, index) => {\n              return {\n                label: 'C',\n                location: [index, index, index],\n              };\n            })\n          : template.atoms,\n        bonds: template.unresolved\n          ? attachmentPoints?.map((_, index) => {\n              if (index === attachmentPoints.length - 1) {\n                return {\n                  type: 1,\n                  atoms: [0, attachmentPoints.length - 1],\n                };\n              }\n\n              return {\n                type: 1,\n                atoms: [index, index + 1],\n              };\n            })\n          : template.bonds,\n        attachmentPoints: KetSerializer.getTemplateAttachmentPoints(template),\n      },\n      header: {\n        moleculeName: template.fullName,\n      },\n    });\n  }\n\n  public convertMonomerTemplateToLibraryItem(\n    template: IKetMonomerTemplate,\n  ): MonomerItemType {\n    const monomerLibraryItem = {\n      label: template.alias || template.id,\n      struct: KetSerializer.convertMonomerTemplateToStruct(template),\n      props: templateToMonomerProps(template),\n      attachmentPoints: KetSerializer.getTemplateAttachmentPoints(template),\n    };\n    KetSerializer.fillStructRgLabelsByMonomerTemplate(\n      template,\n      monomerLibraryItem,\n    );\n\n    return monomerLibraryItem;\n  }\n\n  public static fillStructRgLabelsByMonomerTemplate(\n    template: IKetMonomerTemplate,\n    monomerItem: MonomerItemType,\n  ) {\n    if (monomerItem.props.unresolved) {\n      return;\n    }\n\n    const { attachmentPointsList } =\n      BaseMonomer.getAttachmentPointDictFromMonomerDefinition(\n        template.attachmentPoints || [],\n      );\n\n    template.attachmentPoints?.forEach(\n      (attachmentPoint, attachmentPointIndex) => {\n        const firstAtomInLeavingGroup = attachmentPoint.leavingGroup?.atoms[0];\n        const leavingGroupAtom = monomerItem.struct.atoms.get(\n          isNumber(firstAtomInLeavingGroup)\n            ? firstAtomInLeavingGroup\n            : attachmentPoint.attachmentAtom,\n        );\n        assert(leavingGroupAtom);\n        leavingGroupAtom.rglabel = (\n          0 |\n          (1 <<\n            (Number(\n              (attachmentPoint.label\n                ? attachmentPoint.label\n                : attachmentPointsList[attachmentPointIndex]\n              ).replace('R', ''),\n            ) -\n              1))\n        ).toString();\n        assert(monomerItem.props.MonomerCaps);\n        monomerItem.props.MonomerCaps[\n          getAttachmentPointLabelWithBinaryShift(\n            Number(leavingGroupAtom.rglabel),\n          )\n        ] = leavingGroupAtom.label;\n        leavingGroupAtom.label = 'R#';\n      },\n    );\n  }\n\n  deserializeToDrawingEntities(fileContent: string) {\n    const { error: hasValidationErrors, parsedFileContent } =\n      this.parseAndValidateMacromolecules(fileContent);\n    if (hasValidationErrors || !parsedFileContent) return;\n    const command = new Command();\n    const drawingEntitiesManager = new DrawingEntitiesManager();\n    const monomerIdsMap = {};\n    parsedFileContent.root.nodes.forEach((node) => {\n      const nodeDefinition = parsedFileContent[node.$ref];\n\n      switch (nodeDefinition?.type) {\n        case KetNodeType.MONOMER: {\n          const template = parsedFileContent[\n            setMonomerTemplatePrefix(nodeDefinition.templateId)\n          ] as IKetMonomerTemplate;\n          assert(template);\n          const struct = KetSerializer.convertMonomerTemplateToStruct(template);\n          const monomerAdditionCommand = monomerToDrawingEntity(\n            nodeDefinition,\n            template,\n            struct,\n            drawingEntitiesManager,\n          );\n          const monomer = monomerAdditionCommand.operations[0]\n            .monomer as BaseMonomer;\n          monomerIdsMap[node.$ref] = monomer?.id;\n\n          KetSerializer.fillStructRgLabelsByMonomerTemplate(\n            template,\n            monomer.monomerItem,\n          );\n\n          command.merge(monomerAdditionCommand);\n          break;\n        }\n        case KetNodeType.AMBIGUOUS_MONOMER: {\n          const template = parsedFileContent[\n            setAmbiguousMonomerTemplatePrefix(nodeDefinition.templateId)\n          ] as IKetAmbiguousMonomerTemplate;\n          assert(template);\n\n          const monomerAdditionCommand = variantMonomerToDrawingEntity(\n            drawingEntitiesManager,\n            nodeDefinition,\n            template,\n            parsedFileContent,\n          );\n          const monomer = monomerAdditionCommand.operations[0]\n            .monomer as BaseMonomer;\n\n          monomerIdsMap[node.$ref] = monomer?.id;\n\n          command.merge(monomerAdditionCommand);\n          break;\n        }\n        default:\n          break;\n      }\n    });\n    const fileContentForMicromolecules =\n      this.filterMacromoleculesContent(parsedFileContent);\n\n    const deserializedMicromolecules = this.deserializeMicromolecules(\n      JSON.stringify(fileContentForMicromolecules),\n    );\n\n    const structToDrawingEntitiesConversionResult =\n      MacromoleculesConverter.convertStructToDrawingEntities(\n        deserializedMicromolecules,\n        drawingEntitiesManager,\n      );\n    const localAtomIdToGlobalAtomId = new Map<number, number>();\n\n    command.merge(structToDrawingEntitiesConversionResult.modelChanges);\n\n    structToDrawingEntitiesConversionResult.fragmentIdToMonomer.forEach(\n      (monomer, fragmentId) => {\n        monomerIdsMap[`mol${fragmentId}`] = monomer.id;\n      },\n    );\n\n    structToDrawingEntitiesConversionResult.fragmentIdToAtomIdMap.forEach(\n      (_atomIdsMap) => {\n        _atomIdsMap.forEach((globalAtomId, localAtomId) => {\n          localAtomIdToGlobalAtomId.set(localAtomId, globalAtomId);\n        });\n      },\n    );\n\n    const superatomMonomerToUsedAttachmentPoint = new Map<\n      BaseMonomer,\n      Set<string>\n    >();\n\n    parsedFileContent.root.connections?.forEach((connection) => {\n      switch (connection.connectionType) {\n        case KetConnectionType.SINGLE: {\n          const firstMonomer = drawingEntitiesManager.monomers.get(\n            Number(\n              monomerIdsMap[\n                connection.endpoint1.monomerId ||\n                  connection.endpoint1.moleculeId\n              ],\n            ),\n          );\n          const secondMonomer = drawingEntitiesManager.monomers.get(\n            Number(\n              monomerIdsMap[\n                connection.endpoint2.monomerId ||\n                  connection.endpoint2.moleculeId\n              ],\n            ),\n          );\n\n          if (!firstMonomer || !secondMonomer) {\n            return;\n          }\n\n          if (\n            !isMonomerSgroupWithAttachmentPoints(firstMonomer) &&\n            !isMonomerSgroupWithAttachmentPoints(secondMonomer) &&\n            (firstMonomer.monomerItem.props.isMicromoleculeFragment ||\n              secondMonomer.monomerItem.props.isMicromoleculeFragment)\n          ) {\n            const atomId = Number(\n              connection.endpoint1.atomId || connection.endpoint2.atomId,\n            );\n\n            const atom = MacromoleculesConverter.findAtomByMicromoleculeAtomId(\n              drawingEntitiesManager,\n              atomId,\n              firstMonomer.monomerItem.props.isMicromoleculeFragment\n                ? firstMonomer\n                : secondMonomer,\n            );\n            const attachmentPointName =\n              connection.endpoint1.attachmentPointId ||\n              connection.endpoint2.attachmentPointId;\n\n            if (!atom || !attachmentPointName) {\n              return;\n            }\n\n            const bondAdditionCommand =\n              drawingEntitiesManager.addMonomerToAtomBond(\n                firstMonomer.monomerItem.props.isMicromoleculeFragment\n                  ? secondMonomer\n                  : firstMonomer,\n                atom,\n                attachmentPointName as AttachmentPointName,\n              );\n\n            command.merge(bondAdditionCommand);\n          } else {\n            const bondAdditionCommand = polymerBondToDrawingEntity(\n              connection,\n              drawingEntitiesManager,\n              localAtomIdToGlobalAtomId,\n              superatomMonomerToUsedAttachmentPoint,\n              firstMonomer,\n              secondMonomer,\n            );\n\n            command.merge(bondAdditionCommand);\n          }\n\n          break;\n        }\n        case KetConnectionType.HYDROGEN: {\n          const firstMonomer = drawingEntitiesManager.monomers.get(\n            Number(monomerIdsMap[connection.endpoint1.monomerId]),\n          );\n          const secondMonomer = drawingEntitiesManager.monomers.get(\n            Number(monomerIdsMap[connection.endpoint2.monomerId]),\n          );\n\n          if (!firstMonomer || !secondMonomer) {\n            return;\n          }\n\n          command.merge(\n            drawingEntitiesManager.createPolymerBond(\n              firstMonomer,\n              secondMonomer,\n              AttachmentPointName.HYDROGEN,\n              AttachmentPointName.HYDROGEN,\n              MACROMOLECULES_BOND_TYPES.HYDROGEN,\n            ),\n          );\n\n          break;\n        }\n        default:\n          break;\n      }\n    });\n\n    return { modelChanges: command, drawingEntitiesManager };\n  }\n\n  deserialize(fileContent: string) {\n    return this.deserializeToStruct(fileContent);\n  }\n\n  getConnectionMonomerEndpoint(\n    monomer: BaseMonomer,\n    polymerBond: PolymerBond,\n  ): IKetConnectionMonomerEndPoint {\n    return {\n      monomerId: setMonomerPrefix(monomer.id),\n      attachmentPointId:\n        polymerBond instanceof HydrogenBond\n          ? undefined\n          : monomer.getAttachmentPointByBond(polymerBond),\n    };\n  }\n\n  getConnectionMoleculeEndpoint(\n    monomer: BaseMonomer,\n    polymerBond: PolymerBond,\n    monomerToAtomIdMap: Map<BaseMonomer, Map<number, number>>,\n    struct: Struct,\n  ): IKetConnectionMoleculeEndPoint {\n    const { attachmentAtomId, globalAttachmentAtomId } =\n      MacromoleculesConverter.findAttachmentPointAtom(\n        polymerBond,\n        monomer,\n        monomerToAtomIdMap,\n      );\n\n    return {\n      moleculeId: `mol${\n        struct.atoms.get(globalAttachmentAtomId as number)?.fragment\n      }`,\n      atomId: `${attachmentAtomId as number}`,\n    };\n  }\n\n  private serializeMonomerTemplate(\n    templateId: string,\n    monomer: BaseMonomer,\n    fileContent: IKetMacromoleculesContentRootProperty,\n  ) {\n    const [, , monomerClass] = monomerFactory(monomer.monomerItem);\n    const templateNameWithPrefix = setMonomerTemplatePrefix(templateId);\n\n    if (fileContent[templateNameWithPrefix]) {\n      return;\n    }\n\n    fileContent[templateNameWithPrefix] = {\n      ...JSON.parse(\n        this.serializeMicromolecules(monomer.monomerItem.struct, monomer),\n      ).mol0,\n      type: 'monomerTemplate',\n      class: monomer.monomerItem.props.MonomerClass || monomerClass,\n      classHELM: monomer.monomerItem.props.MonomerType,\n      id: templateId,\n      fullName: monomer.monomerItem.props.Name,\n      alias: monomer.monomerItem.label,\n      attachmentPoints: monomer.monomerItem.attachmentPoints,\n      idtAliases: monomer.monomerItem.props.idtAliases,\n      unresolved: monomer instanceof UnresolvedMonomer ? true : undefined,\n    };\n    // CHEMs do not have natural analog\n    if (monomer.monomerItem.props.MonomerType !== 'CHEM') {\n      fileContent[templateNameWithPrefix].naturalAnalogShort =\n        monomer.monomerItem.props.MonomerNaturalAnalogCode;\n    }\n\n    fileContent.root.templates.push(getKetRef(templateNameWithPrefix));\n  }\n\n  private serializeVariantMonomerTemplate(\n    templateId: string,\n    variantMonomer: AmbiguousMonomer,\n    fileContent: IKetMacromoleculesContentRootProperty,\n  ) {\n    const templateNameWithPrefix =\n      setAmbiguousMonomerTemplatePrefix(templateId);\n\n    if (fileContent[templateNameWithPrefix]) {\n      return;\n    }\n\n    fileContent[templateNameWithPrefix] = {\n      type: 'ambiguousMonomerTemplate',\n      id: templateId,\n      alias: variantMonomer.label,\n      idtAliases: variantMonomer.variantMonomerItem.idtAliases,\n      subtype: variantMonomer.variantMonomerItem.subtype,\n      options: variantMonomer.variantMonomerItem.options,\n    };\n\n    fileContent.root.templates.push(getKetRef(templateNameWithPrefix));\n\n    variantMonomer.monomers.forEach((monomer) => {\n      const monomerTemplateId =\n        monomer.monomerItem.props.id ||\n        getMonomerUniqueKey(monomer.monomerItem);\n\n      this.serializeMonomerTemplate(monomerTemplateId, monomer, fileContent);\n    });\n  }\n\n  serializeMacromolecules(\n    struct: Struct,\n    drawingEntitiesManager: DrawingEntitiesManager,\n  ) {\n    const fileContent: IKetMacromoleculesContentRootProperty = {\n      root: {\n        nodes: [],\n        connections: [],\n        templates: [],\n      },\n    };\n    const monomerToAtomIdMap = new Map<BaseMonomer, Map<number, number>>();\n\n    drawingEntitiesManager.monomers.forEach((monomer) => {\n      if (\n        monomer instanceof Chem &&\n        monomer.monomerItem.props.isMicromoleculeFragment\n      ) {\n        const atomIdMap = new Map<number, number>();\n        monomer.monomerItem.struct.mergeInto(\n          struct,\n          null,\n          null,\n          false,\n          false,\n          atomIdMap,\n        );\n        monomerToAtomIdMap.set(monomer, atomIdMap);\n      } else {\n        let templateId;\n        const monomerName = setMonomerPrefix(monomer.id);\n        const position: Vec2 = switchIntoChemistryCoordSystem(\n          new Vec2(monomer.position.x, monomer.position.y),\n        );\n\n        if (monomer instanceof AmbiguousMonomer) {\n          templateId =\n            monomer.variantMonomerItem.subtype +\n            '_' +\n            monomer.variantMonomerItem.options.reduce(\n              (templateId, option) =>\n                templateId +\n                '_' +\n                option.templateId +\n                '_' +\n                (option.probability || option.ratio || ''),\n              '',\n            );\n        } else {\n          templateId =\n            monomer.monomerItem.props.id ||\n            getMonomerUniqueKey(monomer.monomerItem);\n        }\n\n        fileContent[monomerName] = {\n          type:\n            monomer instanceof AmbiguousMonomer\n              ? KetNodeType.AMBIGUOUS_MONOMER\n              : KetNodeType.MONOMER,\n          id: monomer.id.toString(),\n          position: {\n            x: position.x,\n            y: position.y,\n          },\n          alias: monomer.label,\n          templateId,\n          seqid: monomer.monomerItem.seqId,\n        };\n        fileContent.root.nodes.push(getKetRef(monomerName));\n\n        if (monomer instanceof AmbiguousMonomer) {\n          this.serializeVariantMonomerTemplate(\n            templateId,\n            monomer,\n            fileContent,\n          );\n        } else {\n          this.serializeMonomerTemplate(templateId, monomer, fileContent);\n        }\n      }\n    });\n\n    drawingEntitiesManager.polymerBonds.forEach((polymerBond) => {\n      assert(polymerBond.secondMonomer);\n      fileContent.root.connections.push({\n        connectionType:\n          polymerBond instanceof HydrogenBond\n            ? KetConnectionType.HYDROGEN\n            : KetConnectionType.SINGLE,\n        endpoint1: polymerBond.firstMonomer.monomerItem.props\n          .isMicromoleculeFragment\n          ? (this.getConnectionMoleculeEndpoint(\n              polymerBond.firstMonomer,\n              polymerBond,\n              monomerToAtomIdMap,\n              struct,\n            ) as IKetConnectionEndPoint)\n          : (this.getConnectionMonomerEndpoint(\n              polymerBond.firstMonomer,\n              polymerBond,\n            ) as IKetConnectionEndPoint),\n        endpoint2: polymerBond.secondMonomer.monomerItem.props\n          .isMicromoleculeFragment\n          ? (this.getConnectionMoleculeEndpoint(\n              polymerBond.secondMonomer,\n              polymerBond,\n              monomerToAtomIdMap,\n              struct,\n            ) as IKetConnectionEndPoint)\n          : (this.getConnectionMonomerEndpoint(\n              polymerBond.secondMonomer,\n              polymerBond,\n            ) as IKetConnectionEndPoint),\n      });\n    });\n\n    drawingEntitiesManager.monomerToAtomBonds.forEach((monomerToAtomBond) => {\n      const monomer = monomerToAtomBond.monomer;\n      const atomIdMap = monomerToAtomIdMap.get(monomerToAtomBond.atom.monomer);\n      const globalAtomId = atomIdMap?.get(\n        monomerToAtomBond.atom.atomIdInMicroMode,\n      );\n\n      if (!isNumber(globalAtomId)) {\n        return;\n      }\n\n      fileContent.root.connections.push({\n        connectionType: KetConnectionType.SINGLE,\n        endpoint1: {\n          monomerId: setMonomerPrefix(monomer.id),\n          attachmentPointId:\n            monomerToAtomBond.monomer.getAttachmentPointByBond(\n              monomerToAtomBond,\n            ),\n        } as IKetConnectionEndPoint,\n        endpoint2: {\n          moleculeId: `mol${struct.atoms.get(globalAtomId)?.fragment}`,\n          atomId: String(monomerToAtomBond.atom.atomIdInMicroMode),\n        } as IKetConnectionEndPoint,\n      });\n    });\n\n    drawingEntitiesManager.micromoleculesHiddenEntities.mergeInto(struct);\n\n    return {\n      serializedMacromolecules: fileContent,\n      micromoleculesStruct: struct,\n    };\n  }\n\n  public static removeLeavingGroupsFromConnectedAtoms(_struct: Struct) {\n    const struct = _struct.clone();\n\n    struct.atoms.forEach((_atom, atomId) => {\n      if (Atom.isHiddenLeavingGroupAtom(struct, atomId)) {\n        struct.atoms.delete(atomId);\n      }\n    });\n\n    struct.bonds.forEach((bond, bondId) => {\n      if (Bond.isBondToHiddenLeavingGroup(struct, bond)) {\n        struct.bonds.delete(bondId);\n      }\n    });\n\n    struct.sgroups.forEach((sgroup) => {\n      const attachmentPoints = sgroup.getAttachmentPoints();\n      const attachmentPointsToReplace: Map<\n        SGroupAttachmentPoint,\n        SGroupAttachmentPoint\n      > = new Map();\n      attachmentPoints.forEach((attachmentPoint) => {\n        if (\n          isNumber(attachmentPoint.leaveAtomId) &&\n          Atom.isHiddenLeavingGroupAtom(struct, attachmentPoint.leaveAtomId)\n        ) {\n          const attachmentPointClone = new SGroupAttachmentPoint(\n            attachmentPoint.atomId,\n            undefined,\n            attachmentPoint.attachmentId,\n            attachmentPoint.attachmentPointNumber,\n          );\n          attachmentPointsToReplace.set(attachmentPoint, attachmentPointClone);\n          sgroup.atoms.splice(\n            sgroup.atoms.indexOf(attachmentPoint.leaveAtomId),\n            1,\n          );\n        }\n      });\n      attachmentPointsToReplace.forEach(\n        (attachmentPointToAdd, attachmentPointToDelete) => {\n          sgroup.removeAttachmentPoint(attachmentPointToDelete);\n          sgroup.addAttachmentPoint(attachmentPointToAdd);\n        },\n      );\n    });\n\n    return struct;\n  }\n\n  serialize(\n    _struct: Struct,\n    drawingEntitiesManager = new DrawingEntitiesManager(),\n    selection?: EditorSelection,\n  ) {\n    const struct = KetSerializer.removeLeavingGroupsFromConnectedAtoms(_struct);\n    struct.enableInitiallySelected();\n    const populatedStruct = populateStructWithSelection(struct, selection);\n    MacromoleculesConverter.convertStructToDrawingEntities(\n      populatedStruct,\n      drawingEntitiesManager,\n    );\n\n    const { serializedMacromolecules, micromoleculesStruct } =\n      this.serializeMacromolecules(new Struct(), drawingEntitiesManager);\n\n    if (selection === undefined) {\n      // if selection is not provided, then reset all initially selected flags\n      // before serialization of micromolecules.\n      // It is case of saving molecules in macromolecules mode, so we don't send to indigo/save selection.\n      micromoleculesStruct.enableInitiallySelected();\n    }\n\n    const serializedMicromoleculesStruct = JSON.parse(\n      this.serializeMicromolecules(micromoleculesStruct),\n    );\n\n    micromoleculesStruct.disableInitiallySelected();\n    const fileContent = {\n      ...serializedMicromoleculesStruct,\n      ...serializedMacromolecules,\n    };\n    fileContent.root.nodes = [\n      ...serializedMacromolecules.root.nodes,\n      ...serializedMicromoleculesStruct.root.nodes,\n    ];\n\n    return JSON.stringify(fileContent, null, 4) as unknown as string;\n  }\n\n  convertMonomersLibrary(monomersLibrary: IKetMacromoleculesContent) {\n    const library: MonomerItemType[] & AmbiguousMonomerType[] = [];\n\n    monomersLibrary.root.templates.forEach((templateRef) => {\n      const template = monomersLibrary[templateRef.$ref];\n\n      switch (template.type) {\n        case KetTemplateType.MONOMER_TEMPLATE: {\n          library.push(\n            this.convertMonomerTemplateToLibraryItem(\n              template as IKetMonomerTemplate,\n            ),\n          );\n\n          break;\n        }\n        case KetTemplateType.AMBIGUOUS_MONOMER_TEMPLATE: {\n          const variantMonomerTemplate =\n            template as IKetAmbiguousMonomerTemplate;\n          const variantMonomerLibraryItem: AmbiguousMonomerType = {\n            id: variantMonomerTemplate.id,\n            label: variantMonomerTemplate.alias || '%',\n            idtAliases: variantMonomerTemplate.idtAliases,\n            isAmbiguous: true,\n            monomers: createMonomersForVariantMonomer(\n              variantMonomerTemplate,\n              monomersLibrary,\n            ),\n            options: variantMonomerTemplate.options,\n            subtype: variantMonomerTemplate.subtype,\n          };\n\n          library.push(variantMonomerLibraryItem);\n\n          break;\n        }\n      }\n    });\n\n    return library;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport {\n  Bond,\n  RxnArrow,\n  RxnPlus,\n  Struct,\n  Vec2,\n  RGroup,\n  Fragment,\n} from 'domain/entities';\n\nfunction paddedNum(number, width, precision) {\n  number = parseFloat(number);\n\n  const numStr = number.toFixed(precision || 0).replace(',', '.'); // Really need to replace?\n  if (numStr.length > width) throw new Error('number does not fit');\n\n  return numStr.padStart(width);\n}\n\n/**\n * @param str {string}\n * @returns {number}\n */\nfunction parseDecimalInt(str) {\n  /* reader */\n  const val = parseInt(str, 10);\n\n  return isNaN(val) ? 0 : val; // eslint-disable-line\n}\n\nfunction partitionLine(\n  /* string */ str,\n  /* array of int */ parts,\n  /* bool */ withspace,\n) {\n  /* reader */\n  const res = [];\n  for (let i = 0, shift = 0; i < parts.length; ++i) {\n    res.push(str.slice(shift, shift + parts[i]));\n    if (withspace) shift++;\n    shift += parts[i];\n  }\n  return res;\n}\n\nfunction partitionLineFixed(\n  /* string */ str,\n  /* int */ itemLength,\n  /* bool */ withspace,\n) {\n  /* reader */\n  const res = [];\n  for (let shift = 0; shift < str.length; shift += itemLength) {\n    res.push(str.slice(shift, shift + itemLength));\n    if (withspace) shift++;\n  }\n  return res;\n}\n\nconst fmtInfo = {\n  bondTypeMap: {\n    1: Bond.PATTERN.TYPE.SINGLE,\n    2: Bond.PATTERN.TYPE.DOUBLE,\n    3: Bond.PATTERN.TYPE.TRIPLE,\n    4: Bond.PATTERN.TYPE.AROMATIC,\n    5: Bond.PATTERN.TYPE.SINGLE_OR_DOUBLE,\n    6: Bond.PATTERN.TYPE.SINGLE_OR_AROMATIC,\n    7: Bond.PATTERN.TYPE.DOUBLE_OR_AROMATIC,\n    8: Bond.PATTERN.TYPE.ANY,\n    9: Bond.PATTERN.TYPE.DATIVE,\n    10: Bond.PATTERN.TYPE.HYDROGEN,\n  },\n  bondStereoMap: {\n    0: Bond.PATTERN.STEREO.NONE,\n    1: Bond.PATTERN.STEREO.UP,\n    4: Bond.PATTERN.STEREO.EITHER,\n    6: Bond.PATTERN.STEREO.DOWN,\n    3: Bond.PATTERN.STEREO.CIS_TRANS,\n  },\n  v30bondStereoMap: {\n    0: Bond.PATTERN.STEREO.NONE,\n    1: Bond.PATTERN.STEREO.UP,\n    2: Bond.PATTERN.STEREO.EITHER,\n    3: Bond.PATTERN.STEREO.DOWN,\n  },\n  bondTopologyMap: {\n    0: Bond.PATTERN.TOPOLOGY.EITHER,\n    1: Bond.PATTERN.TOPOLOGY.RING,\n    2: Bond.PATTERN.TOPOLOGY.CHAIN,\n  },\n  countsLinePartition: [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6],\n  atomLinePartition: [10, 10, 10, 1, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n  bondLinePartition: [3, 3, 3, 3, 3, 3, 3],\n  atomListHeaderPartition: [3, 1, 1, 4, 1, 1],\n  atomListHeaderLength: 11, // = atomListHeaderPartition.reduce(function(a,b) { return a + b; }, 0)\n  atomListHeaderItemLength: 4,\n  chargeMap: [null, +3, +2, +1, null, -1, -2, -3],\n  valenceMap: [undefined, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0],\n  implicitHydrogenMap: [undefined, 0, 1, 2, 3, 4],\n  v30atomPropMap: {\n    CHG: 'charge',\n    RAD: 'radical',\n    MASS: 'isotope',\n    VAL: 'explicitValence',\n    HCOUNT: 'hCount',\n    INVRET: 'invRet',\n    SUBST: 'substitutionCount',\n    UNSAT: 'unsaturatedAtom',\n    RBCNT: 'ringBondCount',\n  },\n  rxnItemsPartition: [3, 3, 3],\n};\n\nconst FRAGMENT = {\n  NONE: 0,\n  REACTANT: 1,\n  PRODUCT: 2,\n  AGENT: 3,\n};\n\nconst SHOULD_RESCALE_MOLECULES = true;\n\nfunction rxnMerge(\n  mols,\n  nReactants,\n  nProducts,\n  nAgents,\n  shouldReactionRelayout,\n) /* Struct */ {\n  // eslint-disable-line max-statements\n  /* reader */\n  const ret = new Struct();\n  const bbReact = [];\n  const bbAgent = [];\n  const bbProd = [];\n  const molReact = [];\n  const molAgent = [];\n  const molProd = [];\n  let j;\n  const bondLengthData = { cnt: 0, totalLength: 0 };\n  for (j = 0; j < mols.length; ++j) {\n    var mol = mols[j];\n    const bondLengthDataMol = mol.getBondLengthData();\n    bondLengthData.cnt += bondLengthDataMol.cnt;\n    bondLengthData.totalLength += bondLengthDataMol.totalLength;\n  }\n  if (SHOULD_RESCALE_MOLECULES) {\n    const avgBondLength =\n      1 /\n      (bondLengthData.cnt === 0\n        ? 1\n        : bondLengthData.totalLength / bondLengthData.cnt);\n    for (j = 0; j < mols.length; ++j) {\n      mol = mols[j];\n      mol.scale(avgBondLength);\n    }\n  }\n\n  for (j = 0; j < mols.length; ++j) {\n    mol = mols[j];\n    const bb = mol.getCoordBoundingBoxObj();\n    if (!bb) continue; // eslint-disable-line no-continue\n\n    var fragmentType =\n      j < nReactants\n        ? FRAGMENT.REACTANT // eslint-disable-line no-nested-ternary\n        : j < nReactants + nProducts\n        ? FRAGMENT.PRODUCT\n        : FRAGMENT.AGENT;\n    if (fragmentType === FRAGMENT.REACTANT) {\n      bbReact.push(bb);\n      molReact.push(mol);\n    } else if (fragmentType === FRAGMENT.AGENT) {\n      bbAgent.push(bb);\n      molAgent.push(mol);\n    } else if (fragmentType === FRAGMENT.PRODUCT) {\n      bbProd.push(bb);\n      molProd.push(mol);\n    }\n\n    mol.atoms.forEach((atom) => {\n      atom.rxnFragmentType = fragmentType;\n    });\n  }\n\n  function shiftMol(ret, mol, bb, xorig, over) {\n    // eslint-disable-line max-params\n    const d = new Vec2(\n      xorig - bb.min.x,\n      over ? 1 - bb.min.y : -(bb.min.y + bb.max.y) / 2,\n    );\n    mol.atoms.forEach((atom) => {\n      atom.pp.add_(d); // eslint-disable-line no-underscore-dangle\n    });\n\n    mol.sgroups.forEach((item) => {\n      if (item.pp) item.pp.add_(d); // eslint-disable-line no-underscore-dangle\n    });\n    bb.min.add_(d); // eslint-disable-line no-underscore-dangle\n    bb.max.add_(d); // eslint-disable-line no-underscore-dangle\n    mol.mergeInto(ret);\n    return bb.max.x - bb.min.x;\n  }\n\n  if (shouldReactionRelayout) {\n    // reaction fragment layout\n    let xorig = 0;\n    for (j = 0; j < molReact.length; ++j) {\n      xorig += shiftMol(ret, molReact[j], bbReact[j], xorig, false) + 2.0;\n    }\n    xorig += 2.0;\n    for (j = 0; j < molAgent.length; ++j) {\n      xorig += shiftMol(ret, molAgent[j], bbAgent[j], xorig, true) + 2.0;\n    }\n    xorig += 2.0;\n\n    for (j = 0; j < molProd.length; ++j) {\n      xorig += shiftMol(ret, molProd[j], bbProd[j], xorig, false) + 2.0;\n    }\n  } else {\n    for (j = 0; j < molReact.length; ++j) molReact[j].mergeInto(ret);\n    for (j = 0; j < molAgent.length; ++j) molAgent[j].mergeInto(ret);\n    for (j = 0; j < molProd.length; ++j) molProd[j].mergeInto(ret);\n  }\n\n  let bb1;\n  let bb2;\n  let x;\n  let y;\n  let bbReactAll = null;\n  let bbProdAll = null;\n  for (j = 0; j < bbReact.length - 1; ++j) {\n    bb1 = bbReact[j];\n    bb2 = bbReact[j + 1];\n\n    x = (bb1.max.x + bb2.min.x) / 2;\n    y = (bb1.max.y + bb1.min.y + bb2.max.y + bb2.min.y) / 4;\n\n    ret.rxnPluses.add(new RxnPlus({ pp: new Vec2(x, y) }));\n  }\n  for (j = 0; j < bbReact.length; ++j) {\n    if (j === 0) {\n      bbReactAll = {};\n      bbReactAll.max = new Vec2(bbReact[j].max);\n      bbReactAll.min = new Vec2(bbReact[j].min);\n    } else {\n      bbReactAll.max = Vec2.max(bbReactAll.max, bbReact[j].max);\n      bbReactAll.min = Vec2.min(bbReactAll.min, bbReact[j].min);\n    }\n  }\n  for (j = 0; j < bbProd.length - 1; ++j) {\n    bb1 = bbProd[j];\n    bb2 = bbProd[j + 1];\n\n    x = (bb1.max.x + bb2.min.x) / 2;\n    y = (bb1.max.y + bb1.min.y + bb2.max.y + bb2.min.y) / 4;\n\n    ret.rxnPluses.add(new RxnPlus({ pp: new Vec2(x, y) }));\n  }\n  for (j = 0; j < bbProd.length; ++j) {\n    if (j === 0) {\n      bbProdAll = {};\n      bbProdAll.max = new Vec2(bbProd[j].max);\n      bbProdAll.min = new Vec2(bbProd[j].min);\n    } else {\n      bbProdAll.max = Vec2.max(bbProdAll.max, bbProd[j].max);\n      bbProdAll.min = Vec2.min(bbProdAll.min, bbProd[j].min);\n    }\n  }\n  bb1 = bbReactAll;\n  bb2 = bbProdAll;\n  const defaultArrowLength = 2;\n\n  if (!bb1 && !bb2) {\n    ret.rxnArrows.add(\n      new RxnArrow({\n        mode: 'open-angle',\n        pos: [new Vec2(0, 0), new Vec2(defaultArrowLength, 0)],\n      }),\n    );\n  } else {\n    let v1 = bb1 ? new Vec2(bb1.max.x, (bb1.max.y + bb1.min.y) / 2) : null;\n    let v2 = bb2 ? new Vec2(bb2.min.x, (bb2.max.y + bb2.min.y) / 2) : null;\n    const defaultOffset = 3;\n    if (!v1) v1 = new Vec2(v2.x - defaultOffset, v2.y);\n    if (!v2) v2 = new Vec2(v1.x + defaultOffset, v1.y);\n    const arrowCenter = Vec2.lc2(v1, 0.5, v2, 0.5);\n    const arrowStart = new Vec2(\n      arrowCenter.x - 0.5 * defaultArrowLength,\n      arrowCenter.y,\n      arrowCenter.z,\n    );\n    const arrowEnd = new Vec2(\n      arrowCenter.x + 0.5 * defaultArrowLength,\n      arrowCenter.y,\n      arrowCenter.z,\n    );\n    ret.rxnArrows.add(\n      new RxnArrow({\n        mode: 'open-angle',\n        pos: [arrowStart, arrowEnd],\n      }),\n    );\n  }\n  ret.isReaction = true;\n  return ret;\n}\n\nfunction rgMerge(scaffold, rgroups) /* Struct */ {\n  /* reader */\n  const ret = new Struct();\n\n  scaffold.mergeInto(ret, null, null, false, true);\n\n  Object.keys(rgroups).forEach((id) => {\n    const rgid = parseInt(id, 10);\n\n    for (let j = 0; j < rgroups[rgid].length; ++j) {\n      const ctab = rgroups[rgid][j];\n      ctab.rgroups.set(rgid, new RGroup());\n      const frag = new Fragment();\n      const frid = ctab.frags.add(frag);\n      ctab.rgroups.get(rgid).frags.add(frid);\n      ctab.atoms.forEach((atom) => {\n        atom.fragment = frid;\n      });\n      ctab.mergeInto(ret);\n    }\n  });\n\n  return ret;\n}\n\nexport default {\n  fmtInfo,\n  paddedNum,\n  parseDecimalInt,\n  partitionLine,\n  partitionLineFixed,\n  rxnMerge,\n  rgMerge,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Pool, SGroup, Vec2, SGroupAttachmentPoint } from 'domain/entities';\n\nimport utils from './utils';\nimport assert from 'assert';\n\n/**\n * @param str { string }\n * @param valueString { boolean }\n * @returns { Pool }\n */\nfunction readKeyValuePairs(str, valueString) {\n  const ret = new Pool();\n  const partition = utils.partitionLineFixed(str, 3, true);\n  const count = utils.parseDecimalInt(partition[0]);\n\n  for (let i = 0; i < count; ++i) {\n    const key = utils.parseDecimalInt(partition[2 * i + 1]) - 1;\n    const value = valueString\n      ? partition[2 * i + 2].trim()\n      : utils.parseDecimalInt(partition[2 * i + 2]);\n\n    ret.set(key, value);\n  }\n\n  return ret;\n}\n\n/**\n * @param str { string }\n * @param valueString { boolean }\n * @returns { Array }\n */\nfunction readKeyMultiValuePairs(str, valueString) {\n  /* reader */\n  const ret = [];\n  const partition = utils.partitionLineFixed(str, 3, true);\n  const count = utils.parseDecimalInt(partition[0]);\n  for (let i = 0; i < count; ++i) {\n    ret.push([\n      /* eslint-disable no-mixed-operators */\n      utils.parseDecimalInt(partition[2 * i + 1]) - 1,\n      valueString\n        ? partition[2 * i + 2].trim()\n        : utils.parseDecimalInt(partition[2 * i + 2]),\n      /* eslint-enable no-mixed-operators */\n    ]);\n  }\n  return ret;\n}\n\nfunction postLoadMul(sgroup, mol, atomMap) {\n  // eslint-disable-line max-statements\n  sgroup.data.mul = sgroup.data.subscript - 0;\n  const atomReductionMap = {};\n\n  sgroup.atoms = SGroup.filterAtoms(sgroup.atoms, atomMap);\n  sgroup.patoms = SGroup.filterAtoms(sgroup.patoms, atomMap);\n\n  // mark repetitions for removal\n  for (let k = 1; k < sgroup.data.mul; ++k) {\n    for (let m = 0; m < sgroup.patoms.length; ++m) {\n      const raid = sgroup.atoms[k * sgroup.patoms.length + m]; // eslint-disable-line no-mixed-operators\n      if (raid < 0) continue; // eslint-disable-line no-continue\n      if (sgroup.patoms[m] < 0) throw new Error('parent atom missing');\n      atomReductionMap[raid] = sgroup.patoms[m]; // \"merge\" atom in parent\n    }\n  }\n  sgroup.patoms = SGroup.removeNegative(sgroup.patoms);\n\n  const patomsMap = identityMap(sgroup.patoms);\n\n  const bondsToRemove = [];\n  mol.bonds.forEach((bond, bid) => {\n    const beginIn = bond.begin in atomReductionMap;\n    const endIn = bond.end in atomReductionMap;\n    // if both adjacent atoms of a bond are to be merged, remove it\n    /* eslint-disable no-mixed-operators */\n    if (\n      (beginIn && endIn) ||\n      (beginIn && bond.end in patomsMap) ||\n      (endIn && bond.begin in patomsMap)\n    ) {\n      bondsToRemove.push(bid);\n    }\n    /* eslint-enable no-mixed-operators */\n    // if just one atom is merged, modify the bond accordingly\n    else if (beginIn) bond.begin = atomReductionMap[bond.begin];\n    else if (endIn) bond.end = atomReductionMap[bond.end];\n  }, sgroup);\n\n  // apply removal lists\n  for (let b = 0; b < bondsToRemove.length; ++b) {\n    mol.bonds.delete(bondsToRemove[b]);\n  }\n  for (const a in atomReductionMap) {\n    mol.atoms.delete(+a);\n    atomMap[a] = -1;\n  }\n  sgroup.atoms = sgroup.patoms;\n  sgroup.patoms = null;\n}\n\nfunction postLoadSru(sgroup) {\n  sgroup.data.connectivity = (sgroup.data.connectivity || 'EU')\n    .trim()\n    .toLowerCase();\n}\n\nfunction postLoadSup(sgroup) {\n  sgroup.data.name = (sgroup.data.subscript || '').trim();\n  sgroup.data.subscript = '';\n}\n\nfunction postLoadGen(_sgroup, _mol, _atomMap) {\n  // empty function\n}\n\nfunction postLoadDat(sgroup, mol) {\n  if (!sgroup.data.absolute) {\n    sgroup.pp = sgroup.pp.add(SGroup.getMassCentre(mol, sgroup.atoms));\n  }\n}\n\nfunction postLoadMon(_sgroup) {\n  // TODO: Implement after adding MON type support\n}\n\nfunction postLoadMer(_sgroup) {\n  // TODO: Implement after adding MER type support\n}\n\nfunction postLoadCop(_sgroup) {\n  // TODO: Implement after adding COP type support\n}\n\nfunction postLoadCro(_sgroup) {\n  // TODO: Implement after adding CRO type support\n}\n\nfunction postLoadMod(_sgroup) {\n  // TODO: Implement after adding MOD type support\n}\n\nfunction postLoadGra(_sgroup) {\n  // TODO: Implement after adding GRA type support\n}\n\nfunction postLoadCom(_sgroup) {\n  // TODO: Implement after adding COM type support\n}\n\nfunction postLoadMix(_sgroup) {\n  // TODO: Implement after adding MIX type support\n}\n\nfunction postLoadFor(_sgroup) {\n  // TODO: Implement after adding FOR type support\n}\n\nfunction postLoadAny(_sgroup) {\n  // TODO: Implement after adding ANY type support\n}\n\nfunction loadSGroup(mol, sg, atomMap) {\n  const postLoadMap = {\n    SUP: postLoadSup,\n    MUL: postLoadMul,\n    SRU: postLoadSru,\n    MON: postLoadMon,\n    MER: postLoadMer,\n    COP: postLoadCop,\n    CRO: postLoadCro,\n    MOD: postLoadMod,\n    GRA: postLoadGra,\n    COM: postLoadCom,\n    MIX: postLoadMix,\n    FOR: postLoadFor,\n    DAT: postLoadDat,\n    ANY: postLoadAny,\n    GEN: postLoadGen,\n  };\n\n  // add the group to the molecule\n  sg.id = mol.sgroups.add(sg);\n\n  // apply type-specific post-processing\n  postLoadMap[sg.type](sg, mol, atomMap);\n  // mark atoms in the group as belonging to it\n  for (let s = 0; s < sg.atoms.length; ++s) {\n    if (mol.atoms.has(sg.atoms[s])) mol.atoms.get(sg.atoms[s]).sgs.add(sg.id);\n  }\n\n  if (sg.type === 'DAT') mol.sGroupForest.insert(sg, -1, []);\n  else mol.sGroupForest.insert(sg);\n\n  return sg.id;\n}\n\nfunction initSGroup(sGroups, propData) {\n  /* reader */\n  const kv = readKeyValuePairs(propData, true);\n  for (const [key, type] of kv) {\n    const sg = new SGroup(type);\n    sg.number = key;\n    sGroups[key] = sg;\n  }\n}\n\nfunction applySGroupProp(sGroups, propName, propData, numeric, core) {\n  // eslint-disable-line max-params\n  const kv = readKeyValuePairs(propData, !numeric);\n  // \"core\" properties are stored directly in an sgroup, not in sgroup.data\n  for (const key of kv.keys()) {\n    (core ? sGroups[key] : sGroups[key].data)[propName] = kv.get(key);\n  }\n}\n\nfunction applySGroupArrayProp(sGroups, propName, propData, shift) {\n  /* reader */\n  const sid = utils.parseDecimalInt(propData.slice(1, 4)) - 1;\n  const num = utils.parseDecimalInt(propData.slice(4, 8));\n  let part = toIntArray(utils.partitionLineFixed(propData.slice(8), 3, true));\n\n  if (part.length !== num) throw new Error('File format invalid');\n  if (shift) part = part.map((v) => v + shift);\n\n  sGroups[sid][propName] = sGroups[sid][propName].concat(part);\n}\n\nfunction applyDataSGroupName(sg, name) {\n  /* reader */\n  sg.data.fieldName = name;\n}\n\nfunction applyDataSGroupExpand(sg, expanded) {\n  sg.data.expanded = expanded;\n}\n\nfunction applyDataSGroupQuery(sg, query) {\n  /* reader */\n  sg.data.query = query;\n}\n\nfunction applyDataSGroupQueryOp(sg, queryOp) {\n  /* reader */\n  sg.data.queryOp = queryOp;\n}\n\nfunction applyDataSGroupDesc(sGroups, propData) {\n  /* reader */\n  const split = utils.partitionLine(propData, [4, 31, 2, 20, 2, 3], false);\n  const id = utils.parseDecimalInt(split[0]) - 1;\n  const fieldName = split[1].trim();\n  const fieldType = split[2].trim();\n  const units = split[3].trim();\n  const query = split[4].trim();\n  const queryOp = split[5].trim();\n  const sGroup = sGroups[id];\n  sGroup.data.fieldType = fieldType;\n  sGroup.data.fieldName = fieldName;\n  sGroup.data.units = units;\n  sGroup.data.query = query;\n  sGroup.data.queryOp = queryOp;\n}\n\nfunction applyDataSGroupInfo(sg, propData) {\n  // eslint-disable-line max-statements\n  /* reader */\n  const split = utils.partitionLine(\n    propData,\n    [\n      10 /* x.x */, 10 /* y.y */, 4 /* eee */, 1 /* f */, 1 /* g */, 1 /* h */,\n      3 /* i */, 3 /* jjj */, 3 /* kkk */, 3 /* ll */, 2 /* m */, 3 /* n */,\n      2 /* oo */,\n    ],\n    false,\n  );\n\n  const x = parseFloat(split[0]);\n  const y = parseFloat(split[1]);\n  const attached = split[3].trim() === 'A';\n  const absolute = split[4].trim() === 'A';\n  const showUnits = split[5].trim() === 'U';\n  let nCharsToDisplay = split[7].trim();\n  nCharsToDisplay =\n    nCharsToDisplay === 'ALL' ? -1 : utils.parseDecimalInt(nCharsToDisplay);\n  const tagChar = split[10].trim();\n  const daspPos = utils.parseDecimalInt(split[11].trim());\n\n  sg.pp = new Vec2(x, -y);\n  sg.data.attached = attached;\n  sg.data.absolute = absolute;\n  sg.data.showUnits = showUnits;\n  sg.data.nCharsToDisplay = nCharsToDisplay;\n  sg.data.tagChar = tagChar;\n  sg.data.daspPos = daspPos;\n}\n\nfunction applyDataSGroupInfoLine(sGroups, propData) {\n  /* reader */\n  const id = utils.parseDecimalInt(propData.substr(0, 4)) - 1;\n  const sg = sGroups[id];\n  applyDataSGroupInfo(sg, propData.substr(5));\n}\n\nfunction applyDataSGroupData(sg, data, finalize) {\n  /* reader */\n  sg.data.fieldValue = (sg.data.fieldValue || '') + data;\n  if (finalize) {\n    sg.data.fieldValue = trimRight(sg.data.fieldValue);\n    if (\n      sg.data.fieldValue.startsWith('\"') &&\n      sg.data.fieldValue.endsWith('\"')\n    ) {\n      sg.data.fieldValue = sg.data.fieldValue.substr(\n        1,\n        sg.data.fieldValue.length - 2,\n      );\n    }\n  }\n}\n\nfunction applyDataSGroupDataLine(sGroups, propData, finalize) {\n  /* reader */\n  const id = utils.parseDecimalInt(propData.substr(0, 5)) - 1;\n  const data = propData.substr(5);\n  const sg = sGroups[id];\n  applyDataSGroupData(sg, data, finalize);\n}\n\n// Utilities functions\nfunction toIntArray(strArray) {\n  /* reader */\n  const ret = [];\n  for (let j = 0; j < strArray.length; ++j) {\n    ret[j] = utils.parseDecimalInt(strArray[j]);\n  }\n  return ret;\n}\n\nfunction trimRight(str) {\n  return str.replace(/\\s+$/, '');\n}\n\nfunction identityMap(array) {\n  const map = {};\n  for (let i = 0; i < array.length; ++i) map[array[i]] = array[i];\n  return map;\n}\n\n/**\n * Superatom attachment point parsing for 'ctab' v2000\n * Implemented based on: https://github.com/epam/ketcher/issues/2467\n * @param ctabString {string} example '   1  1   2   0   '\n *        M SAP sssnn6 iii ooo cc\n *             ^\n *             start position for ctabString content\n * @returns {{sGroupId: number, attachmentPoints: SGroupAttachmentPoint[]}}\n */\nfunction parseSGroupSAPLineV2000(ctabString) {\n  const [, sss, nn6] = utils.partitionLine(\n    ctabString.slice(0, 7),\n    [1, 3, 3],\n    false,\n  );\n  const chunksNumberInLine = utils.parseDecimalInt(nn6);\n  assert(chunksNumberInLine <= 6);\n  const sGroupId = utils.parseDecimalInt(sss) - 1;\n  const attachmentPointsStr = ctabString.slice(7);\n  const attachmentPoints = [];\n  for (let i = 0; i < chunksNumberInLine; i++) {\n    // length of ' iii ooo cc'\n    const CHUNK_SIZE = 11;\n    const stringForParse = attachmentPointsStr.slice(i * CHUNK_SIZE);\n    const CHUNK_PARTS_LENGTHS = [1, 3, 1, 3, 1, 2];\n    const [, iii, , ooo, , cc] = utils.partitionLine(\n      stringForParse,\n      CHUNK_PARTS_LENGTHS,\n      false,\n    );\n    const atomId = utils.parseDecimalInt(iii) - 1;\n    assert(atomId >= 0);\n    const leaveAtomParsedId = utils.parseDecimalInt(ooo);\n    const leaveAtomId =\n      leaveAtomParsedId > 0 ? leaveAtomParsedId - 1 : undefined;\n    attachmentPoints.push(new SGroupAttachmentPoint(atomId, leaveAtomId, cc));\n  }\n  return { sGroupId, attachmentPoints };\n}\n\nexport default {\n  readKeyValuePairs,\n  readKeyMultiValuePairs,\n  loadSGroup,\n  initSGroup,\n  applySGroupProp,\n  applySGroupArrayProp,\n  applyDataSGroupName,\n  applyDataSGroupQuery,\n  applyDataSGroupQueryOp,\n  applyDataSGroupDesc,\n  applyDataSGroupInfo,\n  applyDataSGroupData,\n  applyDataSGroupInfoLine,\n  applyDataSGroupDataLine,\n  applyDataSGroupExpand,\n  parseSGroupSAPLineV2000,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\n/* eslint-disable guard-for-in */ // todo\n\nimport {\n  Atom,\n  AtomList,\n  Bond,\n  Pool,\n  RGroup,\n  SGroup,\n  StereoLabel,\n  Struct,\n  Vec2,\n} from 'domain/entities';\n\nimport { Elements } from 'domain/constants';\nimport sGroup from './parseSGroup';\nimport utils from './utils';\n\nconst loadRGroupFragments = true; // TODO: set to load the fragments\n\nfunction parseAtomLine(atomLine) {\n  /* reader */\n  const atomSplit = utils.partitionLine(\n    atomLine,\n    utils.fmtInfo.atomLinePartition,\n  );\n  const params = {\n    // generic\n    pp: new Vec2(\n      parseFloat(atomSplit[0]),\n      -parseFloat(atomSplit[1]),\n      parseFloat(atomSplit[2]),\n    ),\n    label: atomSplit[4].trim(),\n    explicitValence:\n      utils.fmtInfo.valenceMap[utils.parseDecimalInt(atomSplit[10])],\n\n    // obsolete\n    massDifference: utils.parseDecimalInt(atomSplit[5]),\n    charge: utils.fmtInfo.chargeMap[utils.parseDecimalInt(atomSplit[6])],\n\n    // query\n    hCount: utils.parseDecimalInt(utils.parseDecimalInt(atomSplit[8])),\n    stereoCare: utils.parseDecimalInt(atomSplit[9]) !== 0,\n\n    // reaction\n    aam: utils.parseDecimalInt(atomSplit[14]),\n    invRet: utils.parseDecimalInt(atomSplit[15]),\n\n    // reaction query\n    exactChangeFlag: utils.parseDecimalInt(atomSplit[16]),\n  };\n  return new Atom(params);\n}\n\nfunction parseBondLine(bondLine) {\n  /* reader */\n  const bondSplit = utils.partitionLine(\n    bondLine,\n    utils.fmtInfo.bondLinePartition,\n  );\n\n  const params = {\n    begin: utils.parseDecimalInt(bondSplit[0]) - 1,\n    end: utils.parseDecimalInt(bondSplit[1]) - 1,\n    type: utils.fmtInfo.bondTypeMap[utils.parseDecimalInt(bondSplit[2])],\n    stereo: utils.fmtInfo.bondStereoMap[utils.parseDecimalInt(bondSplit[3])],\n    xxx: bondSplit[4],\n    topology:\n      utils.fmtInfo.bondTopologyMap[utils.parseDecimalInt(bondSplit[5])],\n    reactingCenterStatus: utils.parseDecimalInt(bondSplit[6]),\n  };\n\n  return new Bond(params);\n}\n\nfunction parseAtomListLine(/* string */ atomListLine) {\n  /* reader */\n  const split = utils.partitionLine(\n    atomListLine,\n    utils.fmtInfo.atomListHeaderPartition,\n  );\n\n  const number = utils.parseDecimalInt(split[0]) - 1;\n  const notList = split[2].trim() === 'T';\n  const count = utils.parseDecimalInt(split[4].trim());\n\n  const ids = atomListLine.slice(utils.fmtInfo.atomListHeaderLength);\n  const list = [];\n  const itemLength = utils.fmtInfo.atomListHeaderItemLength;\n  for (let i = 0; i < count; ++i) {\n    list[i] = utils.parseDecimalInt(\n      ids.slice(i * itemLength, (i + 1) * itemLength - 1),\n    );\n  }\n\n  return {\n    aid: number,\n    atomList: new AtomList({\n      notList,\n      ids: list,\n    }),\n  };\n}\n\n/**\n * @param ctab\n * @param ctabLines\n * @param shift\n * @param end\n * @param sGroups\n * @param rLogic\n * @returns { Pool }\n */\nfunction parsePropertyLines(ctab, ctabLines, shift, end, sGroups, rLogic) {\n  // eslint-disable-line max-statements, max-params\n  /* reader */\n  const props = new Pool();\n\n  while (shift < end) {\n    const line = ctabLines[shift];\n    if (line.charAt(0) === 'A') {\n      const propValue = ctabLines[++shift];\n      // TODO: Atom entity only have pseudo getter. Check during refactoring\n      // this type of pseudo labeling is not used in current BIOVIA products. See ctab documentation 2020\n      // https://discover.3ds.com/sites/default/files/2020-08/biovia_ctfileformats_2020.pdf (page 47)\n      const isPseudo = /'.+'/.test(propValue);\n      if (isPseudo && !props.get('pseudo')) {\n        props.set('pseudo', new Pool());\n      }\n      if (!isPseudo && !props.get('alias')) {\n        props.set('alias', new Pool());\n      }\n      props\n        .get(isPseudo ? 'pseudo' : 'alias')\n        .set(utils.parseDecimalInt(line.slice(3)) - 1, propValue);\n    } else if (line.charAt(0) === 'M') {\n      const type = line.slice(3, 6);\n      let propertyData = line.slice(6);\n      if (type === 'END') {\n        break;\n      } else if (type === 'CHG') {\n        if (!props.get('charge')) {\n          props.set('charge', sGroup.readKeyValuePairs(propertyData));\n        }\n      } else if (type === 'RAD') {\n        if (!props.get('radical')) {\n          props.set('radical', sGroup.readKeyValuePairs(propertyData));\n        }\n      } else if (type === 'ISO') {\n        if (!props.get('isotope')) {\n          props.set('isotope', sGroup.readKeyValuePairs(propertyData));\n        }\n      } else if (type === 'RBC') {\n        if (!props.get('ringBondCount')) {\n          props.set('ringBondCount', sGroup.readKeyValuePairs(propertyData));\n        }\n      } else if (type === 'SUB') {\n        if (!props.get('substitutionCount'))\n          props.set('substitutionCount', new Pool());\n        const subLabels = props.get('substitutionCount');\n        const arrs = sGroup.readKeyMultiValuePairs(propertyData);\n\n        for (let arri = 0; arri < arrs.length; arri++) {\n          const a2r = arrs[arri];\n          subLabels.set(a2r[0], a2r[1]);\n        }\n      } else if (type === 'UNS') {\n        if (!props.get('unsaturatedAtom')) {\n          props.set('unsaturatedAtom', sGroup.readKeyValuePairs(propertyData));\n        }\n        // else if (type == \"LIN\") // link atom\n      } else if (type === 'RGP') {\n        // rgroup atom\n        if (!props.get('rglabel')) props.set('rglabel', new Pool());\n        const rglabels = props.get('rglabel');\n        const a2rs = sGroup.readKeyMultiValuePairs(propertyData);\n        for (let a2ri = 0; a2ri < a2rs.length; a2ri++) {\n          const a2r = a2rs[a2ri];\n          rglabels.set(\n            a2r[0],\n            (rglabels.get(a2r[0]) || 0) | (1 << (a2r[1] - 1)),\n          );\n        }\n      } else if (type === 'LOG') {\n        // rgroup atom\n        propertyData = propertyData.slice(4);\n        const rgid = utils.parseDecimalInt(propertyData.slice(0, 3).trim());\n        const iii = utils.parseDecimalInt(propertyData.slice(4, 7).trim());\n        const hhh = utils.parseDecimalInt(propertyData.slice(8, 11).trim());\n        const ooo = propertyData.slice(12).trim();\n        const logic = {};\n        if (iii > 0) logic.ifthen = iii;\n        logic.resth = hhh === 1;\n        logic.range = ooo;\n        rLogic[rgid] = logic;\n      } else if (type === 'APO') {\n        if (!props.get('attachmentPoints')) {\n          props.set('attachmentPoints', sGroup.readKeyValuePairs(propertyData));\n        }\n      } else if (type === 'ALS') {\n        // atom list\n        const pool = parsePropertyLineAtomList(\n          utils.partitionLine(propertyData, [1, 3, 3, 1, 1, 1]),\n          utils.partitionLineFixed(propertyData.slice(10), 4, false),\n        );\n\n        if (!props.get('atomList')) props.set('atomList', new Pool());\n        if (!props.get('label')) props.set('label', new Pool());\n\n        pool.forEach((atomList, aid) => {\n          props.get('label').set(aid, 'L#');\n          props.get('atomList').set(aid, atomList);\n        });\n      } else if (type === 'STY') {\n        // introduce s-group\n        sGroup.initSGroup(sGroups, propertyData);\n      } else if (type === 'SST') {\n        sGroup.applySGroupProp(sGroups, 'subtype', propertyData);\n      } else if (type === 'SLB') {\n        sGroup.applySGroupProp(sGroups, 'label', propertyData, true);\n      } else if (type === 'SPL') {\n        sGroup.applySGroupProp(sGroups, 'parent', propertyData, true, true);\n      } else if (type === 'SCN') {\n        sGroup.applySGroupProp(sGroups, 'connectivity', propertyData);\n      } else if (type === 'SAL') {\n        sGroup.applySGroupArrayProp(sGroups, 'atoms', propertyData, -1);\n      } else if (type === 'SBL') {\n        sGroup.applySGroupArrayProp(sGroups, 'bonds', propertyData, -1);\n      } else if (type === 'SPA') {\n        sGroup.applySGroupArrayProp(sGroups, 'patoms', propertyData, -1);\n      } else if (type === 'SMT') {\n        const sid = utils.parseDecimalInt(propertyData.slice(0, 4)) - 1;\n        sGroups[sid].data.subscript = propertyData.slice(4).trim();\n      } else if (type === 'SDT') {\n        sGroup.applyDataSGroupDesc(sGroups, propertyData);\n      } else if (type === 'SDD') {\n        sGroup.applyDataSGroupInfoLine(sGroups, propertyData);\n      } else if (type === 'SCD') {\n        sGroup.applyDataSGroupDataLine(sGroups, propertyData, false);\n      } else if (type === 'SED') {\n        sGroup.applyDataSGroupDataLine(sGroups, propertyData, true);\n      } else if (type === 'SDS') {\n        const expandedSGroups = propertyData.slice(7).trim().split('   ');\n        expandedSGroups.forEach((eg) => {\n          const sGroupId = Number(eg) - 1;\n          sGroups[sGroupId].data.expanded = true;\n        });\n      } else if (type === 'SAP') {\n        const { sGroupId, attachmentPoints } =\n          sGroup.parseSGroupSAPLineV2000(propertyData);\n        attachmentPoints.forEach((attachmentPoint) => {\n          sGroups[sGroupId].addAttachmentPoint(attachmentPoint);\n        });\n      }\n    }\n    ++shift;\n  }\n  return props;\n}\n\n/**\n * @param atoms { Pool }\n * @param values { Pool }\n * @param propId { string }\n */\nfunction applyAtomProp(atoms, values, propId) {\n  /* reader */\n  values.forEach((propVal, aid) => {\n    atoms.get(aid)[propId] = propVal;\n  });\n}\n\nfunction parseCTabV2000(\n  ctabLines,\n  countsSplit,\n  /* boolean */ ignoreChiralFlag,\n) {\n  // eslint-disable-line max-statements\n  /* reader */\n  const ctab = new Struct();\n  let i;\n  const atomCount = utils.parseDecimalInt(countsSplit[0]);\n  const bondCount = utils.parseDecimalInt(countsSplit[1]);\n  const atomListCount = utils.parseDecimalInt(countsSplit[2]);\n  const isAbs = utils.parseDecimalInt(countsSplit[4]) === 1 || ignoreChiralFlag;\n  const isAnd =\n    utils.parseDecimalInt(countsSplit[4]) === 0 && !ignoreChiralFlag;\n  const stextLinesCount = utils.parseDecimalInt(countsSplit[5]);\n  const propertyLinesCount = utils.parseDecimalInt(countsSplit[10]);\n  let shift = 0;\n  const atomLines = ctabLines.slice(shift, shift + atomCount);\n  shift += atomCount;\n  const bondLines = ctabLines.slice(shift, shift + bondCount);\n  shift += bondCount;\n  const atomListLines = ctabLines.slice(shift, shift + atomListCount);\n  shift += atomListCount + stextLinesCount;\n\n  const atoms = atomLines.map(parseAtomLine);\n  atoms.forEach((atom) => ctab.atoms.add(atom));\n\n  const bonds = bondLines.map(parseBondLine);\n  bonds.forEach((bond) => {\n    if (bond.stereo && isAbs) {\n      ctab.atoms.get(bond.begin).stereoLabel = StereoLabel.Abs;\n    }\n    if (bond.stereo && isAnd) {\n      ctab.atoms.get(bond.begin).stereoLabel = `${StereoLabel.And}1`;\n    }\n    ctab.bonds.add(bond);\n  });\n\n  const atomLists = atomListLines.map(parseAtomListLine);\n  atomLists.forEach((pair) => {\n    ctab.atoms.get(pair.aid).atomList = pair.atomList;\n    ctab.atoms.get(pair.aid).label = 'L#';\n  });\n\n  const sGroups = {};\n  const rLogic = {};\n  const props = parsePropertyLines(\n    ctab,\n    ctabLines,\n    shift,\n    Math.min(ctabLines.length, shift + propertyLinesCount),\n    sGroups,\n    rLogic,\n  );\n  props.forEach((values, propId) => {\n    applyAtomProp(ctab.atoms, values, propId);\n  });\n\n  const atomMap = {};\n  let sid;\n  for (sid in sGroups) {\n    const sg = sGroups[sid];\n    if (sg.type === 'DAT' && sg.atoms.length === 0) {\n      const parent = sGroups[sid].parent;\n      if (parent >= 0) {\n        const psg = sGroups[parent - 1];\n        if (psg.type === 'GEN') sg.atoms = [].slice.call(psg.atoms);\n      }\n    }\n  }\n  for (sid in sGroups) sGroup.loadSGroup(ctab, sGroups[sid], atomMap);\n  const emptyGroups = [];\n  for (sid in sGroups) {\n    // TODO: why do we need that?\n    SGroup.filter(ctab, sGroups[sid], atomMap);\n    if (sGroups[sid].atoms.length === 0 && !sGroups[sid].allAtoms) {\n      emptyGroups.push(+sid);\n    }\n  }\n  for (i = 0; i < emptyGroups.length; ++i) {\n    ctab.sGroupForest.remove(emptyGroups[i]);\n    ctab.sgroups.delete(emptyGroups[i]);\n  }\n  for (const id in rLogic) {\n    const rgid = parseInt(id, 10);\n    ctab.rgroups.set(rgid, new RGroup(rLogic[rgid]));\n  }\n  return ctab;\n}\n\nfunction parseRg2000(\n  /* string[] */ ctabLines,\n  /* boolean */ ignoreChiralFlag,\n) /* Struct */ {\n  // eslint-disable-line max-statements\n  ctabLines = ctabLines.slice(7);\n  if (ctabLines[0].trim() !== '$CTAB') throw new Error('RGFile format invalid');\n  let i = 1;\n  while (ctabLines[i].charAt(0) !== '$') i++;\n  if (ctabLines[i].trim() !== '$END CTAB') {\n    throw new Error('RGFile format invalid');\n  }\n  const coreLines = ctabLines.slice(1, i);\n  ctabLines = ctabLines.slice(i + 1);\n  const fragmentLines = {};\n  while (true) {\n    // eslint-disable-line no-constant-condition\n    if (ctabLines.length === 0) throw new Error('Unexpected end of file');\n    let line = ctabLines[0].trim();\n    if (line === '$END MOL') {\n      ctabLines = ctabLines.slice(1);\n      break;\n    }\n    if (line !== '$RGP') throw new Error('RGFile format invalid');\n\n    const rgid = parseInt(ctabLines[1].trim(), 10);\n    fragmentLines[rgid] = [];\n    ctabLines = ctabLines.slice(2);\n    while (true) {\n      // eslint-disable-line no-constant-condition\n      if (ctabLines.length === 0) throw new Error('Unexpected end of file');\n      line = ctabLines[0].trim();\n      if (line === '$END RGP') {\n        ctabLines = ctabLines.slice(1);\n        break;\n      }\n      if (line !== '$CTAB') throw new Error('RGFile format invalid');\n      i = 1;\n      while (ctabLines[i].charAt(0) !== '$') i++;\n      if (ctabLines[i].trim() !== '$END CTAB') {\n        throw new Error('RGFile format invalid');\n      }\n      fragmentLines[rgid].push(ctabLines.slice(1, i));\n      ctabLines = ctabLines.slice(i + 1);\n    }\n  }\n\n  const core = parseCTab(coreLines, ignoreChiralFlag);\n  const frag = {};\n  if (loadRGroupFragments) {\n    for (const strId in fragmentLines) {\n      const id = parseInt(strId, 10);\n      frag[id] = [];\n      for (let j = 0; j < fragmentLines[id].length; ++j) {\n        frag[id].push(parseCTab(fragmentLines[id][j], ignoreChiralFlag));\n      }\n    }\n  }\n  return utils.rgMerge(core, frag);\n}\n\nfunction parseRxn2000(\n  /* string[] */ ctabLines,\n  /* boolean */ shouldReactionRelayout,\n  /* boolean */ ignoreChiralFlag,\n) /* Struct */ {\n  // eslint-disable-line max-statements\n  /* reader */\n  ctabLines = ctabLines.slice(4);\n  const countsSplit = utils.partitionLine(\n    ctabLines[0],\n    utils.fmtInfo.rxnItemsPartition,\n  );\n  const nReactants = countsSplit[0] - 0;\n  const nProducts = countsSplit[1] - 0;\n  const nAgents = countsSplit[2] - 0;\n  ctabLines = ctabLines.slice(1); // consume counts line\n  const mols = [];\n  while (ctabLines.length > 0 && ctabLines[0].substr(0, 4) === '$MOL') {\n    ctabLines = ctabLines.slice(1);\n    let n = 0;\n    while (n < ctabLines.length && ctabLines[n].substr(0, 4) !== '$MOL') n++;\n\n    const lines = ctabLines.slice(0, n);\n    var struct;\n    if (lines[0].search('\\\\$MDL') === 0) {\n      struct = parseRg2000(lines, /* boolean */ ignoreChiralFlag);\n    } else {\n      struct = parseCTab(lines.slice(3), /* boolean */ ignoreChiralFlag);\n      struct.name = lines[0].trim();\n    }\n    mols.push(struct);\n    ctabLines = ctabLines.slice(n);\n  }\n  return utils.rxnMerge(\n    mols,\n    nReactants,\n    nProducts,\n    nAgents,\n    shouldReactionRelayout,\n  );\n}\n\nfunction parseCTab(\n  /* string */ ctabLines,\n  /* boolean */ ignoreChiralFlag,\n) /* Struct */ {\n  /* reader */\n  const countsSplit = utils.partitionLine(\n    ctabLines[0],\n    utils.fmtInfo.countsLinePartition,\n  );\n  ctabLines = ctabLines.slice(1);\n  return parseCTabV2000(ctabLines, countsSplit, ignoreChiralFlag);\n}\n\nfunction labelsListToIds(labels) {\n  /* reader */\n  const ids = [];\n  for (let i = 0; i < labels.length; ++i) {\n    const element = Elements.get(labels[i].trim());\n    if (element) {\n      ids.push(element.number);\n    }\n  }\n\n  return ids;\n}\n\n/**\n * @param hdr\n * @param lst\n * @returns { Pool }\n */\nfunction parsePropertyLineAtomList(hdr, lst) {\n  /* reader */\n  const aid = utils.parseDecimalInt(hdr[1]) - 1;\n  const count = utils.parseDecimalInt(hdr[2]);\n  const notList = hdr[4].trim() === 'T';\n  const ids = labelsListToIds(lst.slice(0, count));\n  const ret = new Pool();\n  ret.set(\n    aid,\n    new AtomList({\n      notList,\n      ids,\n    }),\n  );\n  return ret;\n}\n\nexport default {\n  parseCTabV2000,\n  parseRg2000,\n  parseRxn2000,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  Atom,\n  AtomList,\n  Bond,\n  RGroup,\n  SGroup,\n  Struct,\n  Vec2,\n} from 'domain/entities';\n\nimport { Elements } from 'domain/constants';\nimport sGroup from './parseSGroup';\nimport utils from './utils';\n\nfunction parseAtomLineV3000(line) {\n  /* reader */\n  let subsplit, key, value, i;\n  const split = spacebarsplit(line);\n  const params = {\n    pp: new Vec2(\n      parseFloat(split[2]),\n      -parseFloat(split[3]),\n      parseFloat(split[4]),\n    ),\n    aam: split[5].trim(),\n  };\n  let label = split[1].trim();\n  if (label.charAt(0) === '\"' && label.charAt(label.length - 1) === '\"') {\n    label = label.substr(1, label.length - 2);\n  } // strip qutation marks\n  if (label.charAt(label.length - 1) === ']') {\n    // assume atom list\n    label = label.substr(0, label.length - 1); // remove ']'\n    const atomListParams = {};\n    atomListParams.notList = false;\n    const matchNotListInfo = label.match(/NOT ?\\[/);\n    if (matchNotListInfo) {\n      atomListParams.notList = true;\n      const [matchedSubstr] = matchNotListInfo;\n      label = label.substr(matchedSubstr.length); // remove 'NOT [' or 'NOT['\n    } else if (label.charAt(0) !== '[') {\n      throw new Error(\"Error: atom list expected, found '\" + label + \"'\");\n    } else {\n      label = label.substr(1); // remove '['\n    }\n    atomListParams.ids = labelsListToIds(label.split(','));\n    params.atomList = new AtomList(atomListParams);\n    params.label = 'L#';\n  } else {\n    params.label = label;\n  }\n  split.splice(0, 6);\n  for (i = 0; i < split.length; ++i) {\n    subsplit = splitonce(split[i], '=');\n    key = subsplit[0];\n    value = subsplit[1];\n    if (key in utils.fmtInfo.v30atomPropMap) {\n      let ival = utils.parseDecimalInt(value);\n      if (key === 'VAL') {\n        if (ival === 0) continue; // eslint-disable-line no-continue\n        if (ival === -1) ival = 0;\n      }\n      params[utils.fmtInfo.v30atomPropMap[key]] = ival;\n    } else if (key === 'RGROUPS') {\n      value = value.trim().substr(1, value.length - 2);\n      const rgrsplit = value.split(' ').slice(1);\n      params.rglabel = 0;\n      for (let j = 0; j < rgrsplit.length; ++j) {\n        params.rglabel |= 1 << (rgrsplit[j] - 1);\n      }\n    } else if (key === 'ATTCHPT') {\n      params.attpnt = value.trim() - 0;\n    }\n  }\n\n  return new Atom(params);\n}\n\nfunction parseBondLineV3000(line) {\n  /* reader */\n  let subsplit, key, value, i;\n  const split = spacebarsplit(line);\n  const params = {\n    begin: utils.parseDecimalInt(split[2]) - 1,\n    end: utils.parseDecimalInt(split[3]) - 1,\n    type: utils.fmtInfo.bondTypeMap[utils.parseDecimalInt(split[1])],\n  };\n  split.splice(0, 4);\n  for (i = 0; i < split.length; ++i) {\n    subsplit = splitonce(split[i], '=');\n    key = subsplit[0];\n    value = subsplit[1];\n    if (key === 'CFG') {\n      params.stereo =\n        utils.fmtInfo.v30bondStereoMap[utils.parseDecimalInt(value)];\n      if (\n        params.type === Bond.PATTERN.TYPE.DOUBLE &&\n        params.stereo === Bond.PATTERN.STEREO.EITHER\n      ) {\n        params.stereo = Bond.PATTERN.STEREO.CIS_TRANS;\n      }\n    } else if (key === 'TOPO') {\n      params.topology =\n        utils.fmtInfo.bondTopologyMap[utils.parseDecimalInt(value)];\n    } else if (key === 'RXCTR') {\n      params.reactingCenterStatus = utils.parseDecimalInt(value);\n    } else if (key === 'STBOX') {\n      params.stereoCare = utils.parseDecimalInt(value);\n    }\n  }\n  return new Bond(params);\n}\n\nfunction v3000parseCollection(ctab, ctabLines, shift) {\n  /* reader */\n  shift++;\n  while (ctabLines[shift].trim() !== 'M  V30 END COLLECTION') shift++;\n  shift++;\n  return shift;\n}\n\nfunction v3000parseSGroup(ctab, ctabLines, sgroups, atomMap, shift) {\n  // eslint-disable-line max-params, max-statements\n  /* reader */\n  let line = '';\n  shift++;\n  while (shift < ctabLines.length) {\n    line = stripV30(ctabLines[shift++]).trim();\n    if (line.trim() === 'END SGROUP') return shift;\n    while (line.charAt(line.length - 1) === '-') {\n      line = (\n        line.substr(0, line.length - 1) + stripV30(ctabLines[shift++])\n      ).trim();\n    }\n    const split = splitSGroupDef(line);\n    const type = split[1];\n    const sg = new SGroup(type);\n    sg.number = split[0] - 0;\n    sg.type = type;\n    sg.label = split[2] - 0;\n    sgroups[sg.number] = sg;\n    const props = {};\n    for (let i = 3; i < split.length; ++i) {\n      const subsplit = splitonce(split[i], '=');\n      if (subsplit.length !== 2) {\n        throw new Error(\n          \"A record of form AAA=BBB or AAA=(...) expected, got '\" +\n            split[i] +\n            \"'\",\n        );\n      }\n      const name = subsplit[0];\n      if (!(name in props)) props[name] = [];\n      props[name].push(subsplit[1]);\n    }\n    sg.atoms = parseBracedNumberList(props.ATOMS[0], -1);\n    if (props.PATOMS) {\n      sg.patoms = parseBracedNumberList(props.PATOMS[0], -1);\n    }\n    sg.bonds = props.BONDS ? parseBracedNumberList(props.BONDS[0], -1) : [];\n    const brkxyzStrs = props.BRKXYZ;\n    sg.brkxyz = [];\n    if (brkxyzStrs) {\n      for (let j = 0; j < brkxyzStrs.length; ++j) {\n        sg.brkxyz.push(parseBracedNumberList(brkxyzStrs[j]));\n      }\n    }\n    if (props.MULT) sg.data.subscript = props.MULT[0] - 0;\n    if (props.LABEL) sg.data.subscript = props.LABEL[0].trim();\n    if (props.CONNECT) {\n      sg.data.connectivity = props.CONNECT[0].toLowerCase();\n    }\n    if (props.FIELDDISP) {\n      sGroup.applyDataSGroupInfo(sg, stripQuotes(props.FIELDDISP[0]));\n    }\n    if (props.FIELDDATA) {\n      sGroup.applyDataSGroupData(sg, props.FIELDDATA[0], true);\n    }\n    if (props.FIELDNAME) {\n      sGroup.applyDataSGroupName(sg, props.FIELDNAME[0]);\n    }\n    if (props.QUERYTYPE) {\n      sGroup.applyDataSGroupQuery(sg, props.QUERYTYPE[0]);\n    }\n    if (props.QUERYOP) sGroup.applyDataSGroupQueryOp(sg, props.QUERYOP[0]);\n    sGroup.loadSGroup(ctab, sg, atomMap);\n    if (props.ESTATE) sGroup.applyDataSGroupExpand(sg, props.ESTATE[0]);\n  }\n  throw new Error('S-group declaration incomplete.');\n}\n\nfunction parseCTabV3000(ctabLines, norgroups) {\n  // eslint-disable-line max-statements\n  /* reader */\n  const ctab = new Struct();\n\n  let shift = 0;\n  if (ctabLines[shift++].trim() !== 'M  V30 BEGIN CTAB') {\n    throw Error('CTAB V3000 invalid');\n  }\n  if (ctabLines[shift].slice(0, 13) !== 'M  V30 COUNTS') {\n    throw Error('CTAB V3000 invalid');\n  }\n  const vals = ctabLines[shift].slice(14).split(' ');\n  const isAbs = utils.parseDecimalInt(vals[4]) === 1;\n  shift++;\n\n  if (ctabLines[shift].trim() === 'M  V30 BEGIN ATOM') {\n    shift++;\n    let line;\n    while (shift < ctabLines.length) {\n      line = stripV30(ctabLines[shift++]).trim();\n      if (line === 'END ATOM') break;\n      while (line.charAt(line.length - 1) === '-') {\n        line = (\n          line.substring(0, line.length - 1) + stripV30(ctabLines[shift++])\n        ).trim();\n      }\n      ctab.atoms.add(parseAtomLineV3000(line));\n    }\n\n    if (ctabLines[shift].trim() === 'M  V30 BEGIN BOND') {\n      shift++;\n      while (shift < ctabLines.length) {\n        line = stripV30(ctabLines[shift++]).trim();\n        if (line === 'END BOND') break;\n        while (line.charAt(line.length - 1) === '-') {\n          line = (\n            line.substring(0, line.length - 1) + stripV30(ctabLines[shift++])\n          ).trim();\n        }\n        const bond = parseBondLineV3000(line);\n        if (bond.stereo && isAbs)\n          ctab.atoms.get(bond.begin).stereoLabel = 'abs';\n        ctab.bonds.add(bond);\n      }\n    }\n\n    // TODO: let sections follow in arbitrary order\n    const sgroups = {};\n    const atomMap = {};\n\n    while (ctabLines[shift].trim() !== 'M  V30 END CTAB') {\n      if (ctabLines[shift].trim() === 'M  V30 BEGIN COLLECTION') {\n        // TODO: read collection information\n        shift = v3000parseCollection(ctab, ctabLines, shift);\n      } else if (ctabLines[shift].trim() === 'M  V30 BEGIN SGROUP') {\n        shift = v3000parseSGroup(ctab, ctabLines, sgroups, atomMap, shift);\n      } else throw Error('CTAB V3000 invalid');\n    }\n  }\n  if (ctabLines[shift++].trim() !== 'M  V30 END CTAB') {\n    throw Error('CTAB V3000 invalid');\n  }\n\n  if (!norgroups) readRGroups3000(ctab, ctabLines.slice(shift));\n\n  return ctab;\n}\n\nfunction readRGroups3000(ctab, /* string */ ctabLines) /* Struct */ {\n  // eslint-disable-line max-statements\n  /* reader */\n  const rfrags = {};\n  const rLogic = {};\n  let shift = 0;\n  while (\n    shift < ctabLines.length &&\n    ctabLines[shift].search('M  V30 BEGIN RGROUP') === 0\n  ) {\n    const id = ctabLines[shift++].split(' ').pop();\n    rfrags[id] = [];\n    rLogic[id] = {};\n    while (true) {\n      // eslint-disable-line no-constant-condition\n      let line = ctabLines[shift].trim();\n      if (line.search('M  V30 RLOGIC') === 0) {\n        line = line.slice(13);\n        const rlsplit = line.trim().split(/\\s+/g);\n        const iii = utils.parseDecimalInt(rlsplit[0]);\n        const hhh = utils.parseDecimalInt(rlsplit[1]);\n        const ooo = rlsplit.slice(2).join(' ');\n        const logic = {};\n        if (iii > 0) logic.ifthen = iii;\n        logic.resth = hhh === 1;\n        logic.range = ooo;\n        rLogic[id] = logic;\n        shift++;\n        continue; // eslint-disable-line no-continue\n      }\n      if (line !== 'M  V30 BEGIN CTAB') throw Error('CTAB V3000 invalid');\n      for (var i = 0; i < ctabLines.length; ++i) {\n        if (ctabLines[shift + i].trim() === 'M  V30 END CTAB') break;\n      }\n      const lines = ctabLines.slice(shift, shift + i + 1);\n      const rfrag = parseCTabV3000(lines, true);\n      rfrags[id].push(rfrag);\n      shift = shift + i + 1;\n      if (ctabLines[shift].trim() === 'M  V30 END RGROUP') {\n        shift++;\n        break;\n      }\n    }\n  }\n\n  Object.keys(rfrags).forEach((rgid) => {\n    rfrags[rgid].forEach((rg) => {\n      rg.rgroups.set(rgid, new RGroup(rLogic[rgid]));\n      const frid = rg.frags.add({});\n      rg.rgroups.get(rgid).frags.add(frid);\n      rg.atoms.forEach((atom) => {\n        atom.fragment = frid;\n      });\n      rg.mergeInto(ctab);\n    });\n  });\n}\n\nfunction parseRxn3000(\n  /* string[] */ ctabLines,\n  shouldReactionRelayout,\n) /* Struct */ {\n  // eslint-disable-line max-statements\n  /* reader */\n  ctabLines = ctabLines.slice(4);\n  const countsSplit = ctabLines[0].split(/\\s+/g).slice(3);\n  const nReactants = countsSplit[0] - 0;\n  const nProducts = countsSplit[1] - 0;\n  const nAgents = countsSplit.length > 2 ? countsSplit[2] - 0 : 0;\n\n  function findCtabEnd(i) {\n    for (let j = i; j < ctabLines.length; ++j) {\n      if (ctabLines[j].trim() === 'M  V30 END CTAB') return j;\n    }\n\n    return console.error('CTab format invalid');\n  }\n\n  function findRGroupEnd(i) {\n    for (let j = i; j < ctabLines.length; ++j) {\n      if (ctabLines[j].trim() === 'M  V30 END RGROUP') return j;\n    }\n    return console.error('CTab format invalid');\n  }\n\n  const molLinesReactants = [];\n  const molLinesProducts = [];\n  const molLinesAgents = [];\n  let current = null;\n  const rGroups = [];\n  for (let i = 0; i < ctabLines.length; ++i) {\n    const line = ctabLines[i].trim();\n    var j;\n\n    if (line.startsWith('M  V30 COUNTS')) {\n      // do nothing\n    } else if (line === 'M  END') {\n      break; // stop reading\n    } else if (line === 'M  V30 BEGIN PRODUCT') {\n      current = molLinesProducts;\n    } else if (line === 'M  V30 END PRODUCT') {\n      current = null;\n    } else if (line === 'M  V30 BEGIN REACTANT') {\n      current = molLinesReactants;\n    } else if (line === 'M  V30 END REACTANT') {\n      current = null;\n    } else if (line === 'M  V30 BEGIN AGENT') {\n      current = molLinesAgents;\n    } else if (line === 'M  V30 END AGENT') {\n      current = null;\n    } else if (line.startsWith('M  V30 BEGIN RGROUP')) {\n      j = findRGroupEnd(i);\n      rGroups.push(ctabLines.slice(i, j + 1));\n      i = j;\n    } else if (line === 'M  V30 BEGIN CTAB') {\n      j = findCtabEnd(i);\n      current.push(ctabLines.slice(i, j + 1));\n      i = j;\n    } else {\n      throw new Error('line unrecognized: ' + line);\n    }\n  }\n  const mols = [];\n  const molLines = molLinesReactants\n    .concat(molLinesProducts)\n    .concat(molLinesAgents);\n  for (j = 0; j < molLines.length; ++j) {\n    const mol = parseCTabV3000(molLines[j], countsSplit);\n    mols.push(mol);\n  }\n  const ctab = utils.rxnMerge(\n    mols,\n    nReactants,\n    nProducts,\n    nAgents,\n    shouldReactionRelayout,\n  );\n\n  readRGroups3000(\n    ctab,\n    (function (array) {\n      let res = [];\n      for (let k = 0; k < array.length; ++k) res = res.concat(array[k]);\n      return res;\n    })(rGroups),\n  );\n\n  return ctab;\n}\n\n// split a line by spaces outside parentheses\nfunction spacebarsplit(line) {\n  // eslint-disable-line max-statements\n  /* reader */\n  const split = [];\n  let bracketEquality = 0;\n  let currentIndex = 0;\n  let firstSliceIndex = -1;\n  let quoted = false;\n\n  for (currentIndex; currentIndex < line.length; currentIndex += 1) {\n    const currentSymbol = line[currentIndex];\n    if (line.substr(currentIndex, 3) === 'NOT') {\n      const closingBracketIndex = line.indexOf(']');\n      split.push(line.slice(currentIndex, closingBracketIndex + 1));\n      currentIndex = closingBracketIndex + 1;\n      firstSliceIndex = currentIndex;\n    } else if (currentSymbol === '(') bracketEquality += 1;\n    else if (currentSymbol === ')') bracketEquality -= 1;\n    else if (currentSymbol === '\"') quoted = !quoted;\n    else if (!quoted && line[currentIndex] === ' ' && bracketEquality === 0) {\n      if (currentIndex > firstSliceIndex + 1) {\n        split.push(line.slice(firstSliceIndex + 1, currentIndex));\n      }\n      firstSliceIndex = currentIndex;\n    }\n  }\n  if (currentIndex > firstSliceIndex + 1) {\n    split.push(line.slice(firstSliceIndex + 1, currentIndex));\n  }\n  return split;\n}\n\n// utils\nfunction stripQuotes(str) {\n  if (str[0] === '\"' && str[str.length - 1] === '\"') {\n    return str.substr(1, str.length - 2);\n  }\n  return str;\n}\n\nfunction splitonce(line, delim) {\n  /* reader */\n  const p = line.indexOf(delim);\n  return [line.slice(0, p), line.slice(p + 1)];\n}\n\nfunction splitSGroupDef(line) {\n  // eslint-disable-line max-statements\n  /* reader */\n  const split = [];\n  let braceBalance = 0;\n  let quoted = false;\n  for (let i = 0; i < line.length; ++i) {\n    const c = line.charAt(i);\n    if (c === '\"') {\n      quoted = !quoted;\n    } else if (!quoted) {\n      if (c === '(') {\n        braceBalance++;\n      } else if (c === ')') {\n        braceBalance--;\n      } else if (c === ' ' && braceBalance === 0) {\n        split.push(line.slice(0, i));\n        line = line.slice(i + 1).trim();\n        i = 0;\n      }\n    }\n  }\n  if (braceBalance !== 0) {\n    throw new Error('Brace balance broken. S-group properies invalid!');\n  }\n  if (line.length > 0) split.push(line.trim());\n  return split;\n}\n\nfunction parseBracedNumberList(line, shift) {\n  /* reader */\n  if (!line) return null;\n  const list = [];\n  line = line.trim();\n  line = line.substr(1, line.length - 2);\n  const split = line.split(' ');\n  shift = shift || 0;\n\n  for (let i = 1; i < split.length; ++i) {\n    const value = parseInt(split[i]);\n    if (!isNaN(value)) {\n      // eslint-disable-line\n      list.push(value + shift);\n    }\n  }\n\n  return list;\n}\n\nfunction stripV30(line) {\n  /* reader */\n  if (line.slice(0, 7) !== 'M  V30 ') throw new Error('Prefix invalid');\n  return line.slice(7);\n}\n\nfunction labelsListToIds(labels) {\n  /* reader */\n  const ids = [];\n  for (let i = 0; i < labels.length; ++i) {\n    const element = Elements.get(labels[i].trim());\n    if (element) {\n      ids.push(element.number);\n    }\n  }\n\n  return ids;\n}\n\nexport default {\n  parseCTabV3000,\n  readRGroups3000,\n  parseRxn3000,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { MonomerMicromolecule, Pile, SGroup } from 'domain/entities';\n\nimport utils from './utils';\nimport v2000 from './v2000';\nimport v3000 from './v3000';\n\nconst loadRGroupFragments = true; // TODO: set to load the fragments\n\n/* Parse Mol */\nfunction parseMol(\n  /* string */ ctabLines,\n  /* boolean */ ignoreChiralFlag,\n) /* Struct */ {\n  /* reader */\n  if (ctabLines[0].search('\\\\$MDL') === 0) {\n    const struct = v2000.parseRg2000(ctabLines, ignoreChiralFlag);\n    struct.name = ctabLines[3].trim();\n    return struct;\n  }\n  const struct = parseCTab(ctabLines.slice(3), ignoreChiralFlag);\n  struct.name = ctabLines[0].trim();\n  return struct;\n}\n\nfunction parseCTab(\n  /* string */ ctabLines,\n  /* boolean */ ignoreChiralFlag,\n) /* Struct */ {\n  /* reader */\n  const countsSplit = partitionLine(\n    ctabLines[0],\n    utils.fmtInfo.countsLinePartition,\n  );\n  const version = countsSplit[11].trim();\n  ctabLines = ctabLines.slice(1);\n  if (version === 'V2000') {\n    return v2000.parseCTabV2000(ctabLines, countsSplit, ignoreChiralFlag);\n  }\n  if (version === 'V3000') {\n    return v3000.parseCTabV3000(ctabLines, !loadRGroupFragments);\n  } else {\n    throw new Error('Molfile version unknown: ' + version);\n  }\n}\n\n/* Parse Rxn */\nfunction parseRxn(\n  /* string[] */ ctabLines,\n  /* boolean */ shouldReactionRelayout,\n  /* boolean */ ignoreChiralFlag,\n) /* Struct */ {\n  /* reader */\n  const split = ctabLines[0].trim().split(' ');\n  if (split.length > 1 && split[1] === 'V3000') {\n    return v3000.parseRxn3000(ctabLines, shouldReactionRelayout);\n  }\n\n  const struct = v2000.parseRxn2000(\n    ctabLines,\n    shouldReactionRelayout,\n    ignoreChiralFlag,\n  );\n  struct.name = ctabLines[1].trim();\n  return struct;\n}\n\n/* Prepare For Saving */\nconst prepareForSaving = {\n  MUL: SGroup.prepareMulForSaving,\n  SRU: prepareSruForSaving,\n  SUP: prepareSupForSaving,\n  DAT: prepareDatForSaving,\n  GEN: prepareGenForSaving,\n  queryComponent: prepareQueryComponentForSaving,\n};\n\nfunction prepareSruForSaving(sgroup, mol) {\n  const xBonds = [];\n  mol.bonds.forEach((bond, bid) => {\n    const a1 = mol.atoms.get(bond.begin);\n    const a2 = mol.atoms.get(bond.end);\n    /* eslint-disable no-mixed-operators */\n    if (\n      (a1.sgs.has(sgroup.id) && !a2.sgs.has(sgroup.id)) ||\n      (a2.sgs.has(sgroup.id) && !a1.sgs.has(sgroup.id))\n    ) {\n      /* eslint-enable no-mixed-operators */\n      xBonds.push(bid);\n    }\n  }, sgroup);\n  if (xBonds.length !== 0 && xBonds.length !== 2) {\n    // TODO fix this eslint error\n    // eslint-disable-next-line no-throw-literal\n    throw {\n      id: sgroup.id,\n      'error-type': 'cross-bond-number',\n      message: 'Unsupported cross-bonds number',\n    };\n  }\n  sgroup.bonds = xBonds;\n}\n\nfunction prepareSupForSaving(sgroup, mol) {\n  // This code is also used for GroupSru and should be moved into a separate common method\n  // It seems that such code should be used for any sgroup by this this should be checked\n  const xBonds = [];\n  mol.bonds.forEach((bond, bid) => {\n    const a1 = mol.atoms.get(bond.begin);\n    const a2 = mol.atoms.get(bond.end);\n    /* eslint-disable no-mixed-operators */\n    if (\n      (a1.sgs.has(sgroup.id) && !a2.sgs.has(sgroup.id)) ||\n      (a2.sgs.has(sgroup.id) && !a1.sgs.has(sgroup.id))\n    ) {\n      /* eslint-enable no-mixed-operators */\n      xBonds.push(bid);\n    }\n  }, sgroup);\n  sgroup.bonds = xBonds;\n}\n\nfunction prepareGenForSaving(_sgroup, _mol) {\n  // eslint-disable-line no-unused-vars\n}\n\nfunction prepareQueryComponentForSaving(_sgroup, _mol) {\n  // eslint-disable-line no-unused-vars\n}\n\nfunction prepareDatForSaving(sgroup, mol) {\n  sgroup.atoms = SGroup.getAtoms(mol, sgroup);\n}\n\n/* Save To Molfile */\nconst saveToMolfile = {\n  MUL: saveMulToMolfile,\n  SRU: saveSruToMolfile,\n  SUP: saveSupToMolfile,\n  DAT: saveDatToMolfile,\n  GEN: saveGenToMolfile,\n};\n\nfunction saveMulToMolfile(sgroup, mol, sgMap, atomMap, bondMap) {\n  // eslint-disable-line max-params\n  const idstr = (sgMap[sgroup.id] + '').padStart(3);\n\n  let lines = [];\n  lines = lines.concat(\n    makeAtomBondLines(\n      'SAL',\n      idstr,\n      Array.from(sgroup.atomSet.values()),\n      atomMap,\n    ),\n  ); // TODO: check atomSet\n  lines = lines.concat(\n    makeAtomBondLines(\n      'SPA',\n      idstr,\n      Array.from(sgroup.parentAtomSet.values()),\n      atomMap,\n    ),\n  );\n  lines = lines.concat(makeAtomBondLines('SBL', idstr, sgroup.bonds, bondMap));\n  const smtLine = 'M  SMT ' + idstr + ' ' + sgroup.data.mul;\n  lines.push(smtLine);\n  lines = lines.concat(bracketsToMolfile(mol, sgroup, idstr));\n  return lines.join('\\n');\n}\n\nfunction saveSruToMolfile(sgroup, mol, sgMap, atomMap, bondMap) {\n  // eslint-disable-line max-params\n  const idstr = (sgMap[sgroup.id] + '').padStart(3);\n\n  let lines = [];\n  lines = lines.concat(makeAtomBondLines('SAL', idstr, sgroup.atoms, atomMap));\n  lines = lines.concat(makeAtomBondLines('SBL', idstr, sgroup.bonds, bondMap));\n  lines = lines.concat(bracketsToMolfile(mol, sgroup, idstr));\n  return lines.join('\\n');\n}\n\nfunction saveSupToMolfile(sgroup, mol, sgMap, atomMap, bondMap) {\n  // eslint-disable-line max-params\n  const idstr = (sgMap[sgroup.id] + '').padStart(3);\n\n  let lines = [];\n  lines = lines.concat(makeAtomBondLines('SAL', idstr, sgroup.atoms, atomMap));\n  lines = lines.concat(makeAtomBondLines('SBL', idstr, sgroup.bonds, bondMap));\n\n  let sgroupName;\n\n  if (sgroup instanceof MonomerMicromolecule) {\n    sgroupName = sgroup.monomer.label;\n  } else if (sgroup.data.name && sgroup.data.name !== '') {\n    sgroupName = sgroup.data.name;\n  }\n\n  if (sgroupName) {\n    lines.push('M  SMT ' + idstr + ' ' + sgroupName);\n  }\n\n  return lines.join('\\n');\n}\n\nfunction saveDatToMolfile(sgroup, mol, sgMap, atomMap) {\n  const idstr = (sgMap[sgroup.id] + '').padStart(3);\n\n  const data = sgroup.data;\n  let pp = sgroup.pp;\n  if (!data.absolute) pp = pp.sub(SGroup.getMassCentre(mol, sgroup.atoms));\n  let lines = [];\n  lines = lines.concat(makeAtomBondLines('SAL', idstr, sgroup.atoms, atomMap));\n  let sdtLine =\n    'M  SDT ' +\n    idstr +\n    ' ' +\n    (data.fieldName || '').padEnd(30) +\n    (data.fieldType || '').padStart(2) +\n    (data.units || '').padEnd(20) +\n    (data.query || '').padStart(2);\n\n  if (data.queryOp) {\n    // see gitlab #184\n    sdtLine += data.queryOp.padEnd(80 - 65);\n  }\n\n  lines.push(sdtLine);\n  const sddLine =\n    'M  SDD ' +\n    idstr +\n    ' ' +\n    utils.paddedNum(pp.x, 10, 4) +\n    utils.paddedNum(-pp.y, 10, 4) +\n    '    ' + // ' eee'\n    (data.attached ? 'A' : 'D') + // f\n    (data.absolute ? 'A' : 'R') + // g\n    (data.showUnits ? 'U' : ' ') + // h\n    '   ' + //  i\n    (data.nCharnCharsToDisplay >= 0\n      ? utils.paddedNum(data.nCharnCharsToDisplay, 3)\n      : 'ALL') + // jjj\n    '  1   ' + // 'kkk ll '\n    (data.tagChar || ' ') + // m\n    '  ' +\n    utils.paddedNum(data.daspPos, 1) + // n\n    '  '; // oo\n  lines.push(sddLine);\n  const val = normalizeNewlines(data.fieldValue).replace(/\\n*$/, '');\n  const charsPerLine = 69;\n  val.split('\\n').forEach((chars) => {\n    while (chars.length > charsPerLine) {\n      lines.push('M  SCD ' + idstr + ' ' + chars.slice(0, charsPerLine));\n      chars = chars.slice(charsPerLine);\n    }\n    lines.push('M  SED ' + idstr + ' ' + chars);\n  });\n  return lines.join('\\n');\n}\n\nfunction saveGenToMolfile(sgroup, mol, sgMap, atomMap, bondMap) {\n  // eslint-disable-line max-params\n  const idstr = (sgMap[sgroup.id] + '').padStart(3);\n\n  let lines = [];\n  lines = lines.concat(makeAtomBondLines('SAL', idstr, sgroup.atoms, atomMap));\n  lines = lines.concat(makeAtomBondLines('SBL', idstr, sgroup.bonds, bondMap));\n  lines = lines.concat(bracketsToMolfile(mol, sgroup, idstr));\n  return lines.join('\\n');\n}\n\nfunction makeAtomBondLines(prefix, idstr, ids, map) {\n  if (!ids) return [];\n  const lines = [];\n  for (let i = 0; i < Math.floor((ids.length + 14) / 15); ++i) {\n    const rem = Math.min(ids.length - 15 * i, 15); // eslint-disable-line no-mixed-operators\n    let salLine = 'M  ' + prefix + ' ' + idstr + ' ' + utils.paddedNum(rem, 2);\n    for (let j = 0; j < rem; ++j) {\n      salLine += ' ' + utils.paddedNum(map[ids[i * 15 + j]], 3);\n    } // eslint-disable-line no-mixed-operators\n    lines.push(salLine);\n  }\n  return lines;\n}\n\nfunction bracketsToMolfile(mol, sg, idstr) {\n  // eslint-disable-line max-statements\n  const atomSet = new Pile(sg.atoms);\n  const crossBonds = SGroup.getCrossBonds(mol, atomSet);\n  SGroup.bracketPos(sg, mol, crossBonds);\n  const bb = sg.bracketBox;\n  const d = sg.bracketDirection;\n  const n = d.rotateSC(1, 0);\n  const brackets = SGroup.getBracketParameters(\n    mol,\n    crossBonds,\n    atomSet,\n    bb,\n    d,\n    n,\n  );\n  const lines = [];\n  for (let i = 0; i < brackets.length; ++i) {\n    const bracket = brackets[i];\n    const a0 = bracket.c.addScaled(bracket.n, -0.5 * bracket.h).yComplement();\n    const a1 = bracket.c.addScaled(bracket.n, 0.5 * bracket.h).yComplement();\n    let line = 'M  SDI ' + idstr + utils.paddedNum(4, 3);\n    const coord = [a0.x, a0.y, a1.x, a1.y];\n    for (let j = 0; j < coord.length; ++j) {\n      line += utils.paddedNum(coord[j], 10, 4);\n    }\n    lines.push(line);\n  }\n  return lines;\n}\n\n// According Unicode Consortium sould be\n// nlRe = /\\r\\n|[\\n\\v\\f\\r\\x85\\u2028\\u2029]/g;\n// http://www.unicode.org/reports/tr18/#Line_Boundaries\nconst nlRe = /\\r\\n|[\\n\\r]/g;\nfunction normalizeNewlines(str) {\n  return str.replace(nlRe, '\\n');\n}\n\nfunction partitionLine(\n  /* string */ str,\n  /* array of int */ parts,\n  /* bool */ withspace,\n) {\n  /* reader */\n  const res = [];\n  for (let i = 0, shift = 0; i < parts.length; ++i) {\n    res.push(str.slice(shift, shift + parts[i]));\n    if (withspace) shift++;\n    shift += parts[i];\n  }\n  return res;\n}\n\nexport default {\n  parseCTab,\n  parseMol,\n  parseRxn,\n  prepareForSaving,\n  saveToMolfile,\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  StereoFlag,\n  Struct,\n  SGroupAttachmentPoint,\n  SGroup,\n} from 'domain/entities';\n\nimport { Elements } from 'domain/constants';\nimport common from './common';\nimport utils from './utils';\nimport { KetcherLogger } from 'utilities';\n\nconst END_V2000 = '2D 1   1.00000     0.00000     0';\n\ntype Mapping = {\n  [key in number]: number;\n};\ntype NumberTuple = [number, number];\n\ninterface ParseCTFileProps {\n  molfileLines: string[];\n  shouldReactionRelayout?: boolean;\n  ignoreChiralFlag?: boolean;\n}\n\nexport class Molfile {\n  molecule: Struct | null;\n  molfile: string | null;\n  reaction: boolean;\n  mapping: Mapping;\n  bondMapping: Mapping;\n\n  constructor() {\n    this.molecule = null;\n    this.molfile = null;\n\n    this.reaction = false;\n    this.mapping = {};\n    this.bondMapping = {};\n  }\n\n  parseCTFile(props: ParseCTFileProps) {\n    const { molfileLines, shouldReactionRelayout, ignoreChiralFlag } = props;\n    let ret;\n    if (molfileLines[0].search('\\\\$RXN') === 0) {\n      ret = common.parseRxn(\n        molfileLines,\n        shouldReactionRelayout,\n        ignoreChiralFlag,\n      );\n    } else {\n      ret = common.parseMol(molfileLines, ignoreChiralFlag);\n    }\n    ret.initHalfBonds();\n    ret.initNeighbors();\n    ret.bindSGroupsToFunctionalGroups();\n    ret.markFragments();\n\n    return ret;\n  }\n\n  prepareSGroups(skipErrors: boolean, preserveIndigoDesc?: boolean) {\n    const mol = this.molecule;\n    const toRemove: any[] = [];\n    let errors = 0;\n\n    this.molecule?.sGroupForest\n      .getSGroupsBFS()\n      .reverse()\n      .forEach((id) => {\n        const sgroup = mol!.sgroups.get(id)!;\n        let errorIgnore = false;\n\n        try {\n          common.prepareForSaving[sgroup.type](sgroup, mol);\n        } catch (e: any) {\n          KetcherLogger.error('molfile.ts::Molfile::prepareSGroups', e);\n          if (!skipErrors || typeof e.id !== 'number') {\n            throw new Error(`Error: ${e.message}`);\n          }\n          errorIgnore = true;\n        }\n        /* eslint-disable no-mixed-operators */\n        if (\n          errorIgnore ||\n          (!preserveIndigoDesc &&\n            /^INDIGO_.+_DESC$/i.test(sgroup.data.fieldName))\n        ) {\n          errors += +errorIgnore;\n          toRemove.push(sgroup.id);\n        }\n      }, this);\n\n    if (errors) {\n      throw new Error(\n        'Warning: ' +\n          errors +\n          ' invalid S-groups were detected. They will be omitted.',\n      );\n    }\n\n    for (let i = 0; i < toRemove.length; ++i) {\n      mol?.sGroupDelete(toRemove[i]);\n    }\n  }\n\n  getCTab(molecule: Struct, rgroups?: Map<any, any>) {\n    /* saver */\n    this.molecule = molecule.clone();\n    this.prepareSGroups(false, false);\n    this.molfile = '';\n    this.writeCTab2000(rgroups);\n    return this.molfile;\n  }\n\n  saveMolecule(\n    molecule: Struct,\n    skipSGroupErrors: boolean,\n    norgroups?: boolean,\n    preserveIndigoDesc?: boolean,\n    ignoreChiralFlag?: boolean,\n  ) {\n    // eslint-disable-line max-statements\n    /* saver */\n    this.reaction = molecule.hasRxnArrow();\n    this.molfile = '' + molecule.name;\n    if (this.reaction) {\n      if (molecule.rgroups.size > 0) {\n        throw new Error(\n          'Reactions with r-groups are not supported at the moment',\n        );\n      }\n      const components = molecule.getComponents();\n\n      const reactants = components.reactants;\n      const products = components.products;\n      const all = reactants.concat(products);\n      this.molfile =\n        '$RXN\\n' +\n        molecule.name +\n        '\\n\\n\\n' +\n        utils.paddedNum(reactants.length, 3) +\n        utils.paddedNum(products.length, 3) +\n        utils.paddedNum(0, 3) +\n        '\\n';\n      for (let i = 0; i < all.length; ++i) {\n        const saver = new Molfile();\n        const submol = molecule.clone(all[i], null, true);\n        const molfile = saver.saveMolecule(submol, false, true);\n        this.molfile += '$MOL\\n' + molfile;\n      }\n      return this.molfile;\n    }\n\n    if (molecule.rgroups.size > 0) {\n      if (norgroups) {\n        molecule = molecule.getScaffold();\n      } else {\n        const scaffold = new Molfile().getCTab(\n          molecule.getScaffold(),\n          molecule.rgroups,\n        );\n        this.molfile =\n          '$MDL  REV  1\\n$MOL\\n$HDR\\n' + molecule.name + '\\n\\n\\n$END HDR\\n';\n        this.molfile += '$CTAB\\n' + scaffold + '$END CTAB\\n';\n\n        molecule.rgroups.forEach((rg, rgid) => {\n          this.molfile += '$RGP\\n';\n          this.writePaddedNumber(rgid, 3);\n          this.molfile += '\\n';\n          rg.frags.forEach((fid) => {\n            const group = new Molfile().getCTab(molecule.getFragment(fid));\n            this.molfile += '$CTAB\\n' + group + '$END CTAB\\n';\n          });\n          this.molfile += '$END RGP\\n';\n        });\n        this.molfile += '$END MOL\\n';\n\n        return this.molfile;\n      }\n    }\n\n    this.molecule = molecule.clone();\n\n    this.prepareSGroups(skipSGroupErrors, preserveIndigoDesc);\n\n    this.writeHeader();\n    this.writeCTab2000(undefined, ignoreChiralFlag);\n\n    return this.molfile;\n  }\n\n  writeHeader() {\n    /* saver */\n\n    const date = new Date();\n\n    this.writeCR(); // TODO: write structure name\n    this.writeWhiteSpace(2);\n    this.write('Ketcher');\n    this.writeWhiteSpace();\n    this.writeCR(\n      (date.getMonth() + 1 + '').padStart(2) +\n        (date.getDate() + '').padStart(2) +\n        ((date.getFullYear() % 100) + '').padStart(2) +\n        (date.getHours() + '').padStart(2) +\n        (date.getMinutes() + '').padStart(2) +\n        END_V2000,\n    );\n    this.writeCR();\n  }\n\n  write(str: string) {\n    /* saver */\n    this.molfile += str;\n  }\n\n  writeCR(str?: string) {\n    /* saver */\n    if (arguments.length === 0) {\n      str = '';\n    }\n\n    this.molfile += str + '\\n';\n  }\n\n  writeWhiteSpace(length = 0) {\n    /* saver */\n    if (arguments.length === 0) {\n      length = 1;\n    }\n\n    this.write(' '.repeat(Math.max(length, 0)));\n  }\n\n  writePadded(str: string, width: number) {\n    /* saver */\n    this.write(str);\n    this.writeWhiteSpace(width - str.length);\n  }\n\n  writePaddedNumber(number: number, width: number) {\n    /* saver */\n    const str = (number - 0).toString();\n\n    this.writeWhiteSpace(width - str.length);\n    this.write(str);\n  }\n\n  writePaddedFloat(number: string | number, width: number, precision: number) {\n    /* saver */\n    this.write(utils.paddedNum(number, width, precision));\n  }\n\n  writeCTab2000Header(ignoreChiralFlag) {\n    /* saver */\n    this.writePaddedNumber(this.molecule!.atoms.size, 3);\n    this.writePaddedNumber(this.molecule!.bonds.size, 3);\n\n    this.writePaddedNumber(0, 3);\n    this.writePaddedNumber(0, 3);\n    const isAbsFlag = Array.from(this.molecule!.frags.values()).some((fr) =>\n      fr ? fr.enhancedStereoFlag === StereoFlag.Abs : false,\n    );\n\n    this.writePaddedNumber(isAbsFlag || ignoreChiralFlag ? 1 : 0, 3);\n    this.writePaddedNumber(0, 3);\n    this.writePaddedNumber(0, 3);\n    this.writePaddedNumber(0, 3);\n    this.writePaddedNumber(0, 3);\n    this.writePaddedNumber(0, 3);\n    this.writePaddedNumber(999, 3);\n    this.writeCR(' V2000');\n  }\n\n  writeCTab2000(rgroups?: Map<any, any>, ignoreChiralFlag?: boolean) {\n    // eslint-disable-line max-statements\n    /* saver */\n    this.writeCTab2000Header(ignoreChiralFlag);\n\n    this.mapping = {};\n    let i = 1;\n\n    const atomsIds: number[] = [];\n    const atomsProps: {\n      id: number;\n      value: string;\n    }[] = [];\n    this.molecule!.atoms.forEach((atom, id) => {\n      let label = atom.label;\n      if (atom.atomList != null) {\n        label = 'L';\n        atomsIds.push(id);\n      } else if (atom.pseudo) {\n        if (atom.pseudo.length > 3) {\n          label = 'A';\n          atomsProps.push({ id, value: `'${atom.pseudo}'` });\n        }\n      } else if (atom.alias) {\n        atomsProps.push({ id, value: atom.alias });\n      } else if (\n        !Elements.get(atom.label) &&\n        ['A', 'Q', 'X', '*', 'R#'].indexOf(atom.label) === -1\n      ) {\n        // search in generics?\n        label = 'C';\n        atomsProps.push({ id, value: atom.label });\n      }\n\n      this.writeAtom(atom, label);\n\n      this.mapping[id] = i++;\n    }, this);\n\n    this.bondMapping = {};\n    i = 1;\n    this.molecule!.bonds.forEach((bond, id) => {\n      this.bondMapping[id] = i++;\n      this.writeBond(bond);\n    }, this);\n\n    while (atomsProps.length > 0) {\n      this.writeAtomProps(atomsProps[0]);\n      atomsProps.splice(0, 1);\n    }\n\n    const chargeList: NumberTuple[] = [];\n    const isotopeList: NumberTuple[] = [];\n    const radicalList: NumberTuple[] = [];\n    const rglabelList: NumberTuple[] = [];\n    const rglogicList: string[] = [];\n    const aplabelList: NumberTuple[] = [];\n    const rbcountList: NumberTuple[] = [];\n    const unsaturatedList: NumberTuple[] = [];\n    const substcountList: NumberTuple[] = [];\n\n    this.molecule!.atoms.forEach((atom, id) => {\n      if (atom.charge !== 0 && atom.charge !== null) {\n        chargeList.push([id, atom.charge]);\n      }\n      if (atom.isotope !== 0 && atom.isotope !== null) {\n        isotopeList.push([id, atom.isotope]);\n      }\n      if (atom.radical !== 0) {\n        radicalList.push([id, atom.radical]);\n      }\n      if (atom.rglabel != null && atom.label === 'R#') {\n        // TODO need to force rglabel=null when label is not 'R#'\n        for (let rgi = 0; rgi < 32; rgi++) {\n          if ((atom.rglabel as any) & (1 << rgi)) {\n            rglabelList.push([id, rgi + 1]);\n          }\n        }\n      }\n      if (atom.attachmentPoints != null) {\n        aplabelList.push([id, atom.attachmentPoints]);\n      }\n      if (atom.ringBondCount !== 0) {\n        rbcountList.push([id, atom.ringBondCount]);\n      }\n      if (atom.substitutionCount !== 0) {\n        substcountList.push([id, atom.substitutionCount]);\n      }\n      if (atom.unsaturatedAtom !== 0) {\n        unsaturatedList.push([id, atom.unsaturatedAtom]);\n      }\n    });\n\n    if (rgroups) {\n      rgroups.forEach((rg, rgid) => {\n        if (rg.resth || rg.ifthen > 0 || rg.range.length > 0) {\n          const line =\n            '  1 ' +\n            utils.paddedNum(rgid, 3) +\n            ' ' +\n            utils.paddedNum(rg.ifthen, 3) +\n            ' ' +\n            utils.paddedNum(rg.resth ? 1 : 0, 3) +\n            '   ' +\n            rg.range;\n          rglogicList.push(line);\n        }\n      });\n    }\n\n    this.writeAtomPropList('M  CHG', chargeList);\n    this.writeAtomPropList('M  ISO', isotopeList);\n    this.writeAtomPropList('M  RAD', radicalList);\n    this.writeAtomPropList('M  RGP', rglabelList);\n    for (let j = 0; j < rglogicList.length; ++j) {\n      this.write('M  LOG' + rglogicList[j] + '\\n');\n    }\n\n    this.writeAtomPropList('M  APO', aplabelList);\n    this.writeAtomPropList('M  RBC', rbcountList);\n    this.writeAtomPropList('M  SUB', substcountList);\n    this.writeAtomPropList('M  UNS', unsaturatedList);\n\n    if (atomsIds.length > 0) {\n      for (let j = 0; j < atomsIds.length; ++j) {\n        const atomId = atomsIds[j];\n        const atomList = this.molecule!.atoms.get(atomId)!.atomList!;\n        this.write('M  ALS');\n        this.writePaddedNumber(atomId + 1, 4);\n        this.writePaddedNumber(atomList.ids.length, 3);\n        this.writeWhiteSpace();\n        this.write(atomList.notList ? 'T' : 'F');\n\n        const labelList = atomList.labelList();\n        for (let k = 0; k < labelList.length; ++k) {\n          this.writeWhiteSpace();\n          this.writePadded(labelList[k], 3);\n        }\n        this.writeWhiteSpace();\n        this.writeCR();\n      }\n    }\n\n    const sgmap = {};\n    let cnt = 1;\n    const sgmapback = {};\n    const sgorder = this.molecule!.sGroupForest.getSGroupsBFS();\n    sgorder.forEach((id) => {\n      sgmapback[cnt] = id;\n      sgmap[id] = cnt++;\n    });\n    for (let sGroupIdInCTab = 1; sGroupIdInCTab < cnt; ++sGroupIdInCTab) {\n      // each group on its own\n      const id = sgmapback[sGroupIdInCTab];\n      const sgroup = this.molecule!.sgroups.get(id)!;\n      if (SGroup.isQuerySGroup(sgroup)) {\n        console.warn('Query group does not support in mol format');\n        continue;\n      }\n      this.write('M  STY');\n      this.writePaddedNumber(1, 3);\n      this.writeWhiteSpace(1);\n      this.writePaddedNumber(sGroupIdInCTab, 3);\n      this.writeWhiteSpace(1);\n      this.writePadded(sgroup.type, 3);\n      this.writeCR();\n\n      // TODO: write subtype, M SST\n\n      this.write('M  SLB');\n      this.writePaddedNumber(1, 3);\n      this.writeWhiteSpace(1);\n      this.writePaddedNumber(sGroupIdInCTab, 3);\n      this.writeWhiteSpace(1);\n      this.writePaddedNumber(sGroupIdInCTab, 3);\n      this.writeCR();\n\n      const parentId = this.molecule!.sGroupForest.parent.get(id)!;\n      if (parentId >= 0) {\n        this.write('M  SPL');\n        this.writePaddedNumber(1, 3);\n        this.writeWhiteSpace(1);\n        this.writePaddedNumber(sGroupIdInCTab, 3);\n        this.writeWhiteSpace(1);\n        this.writePaddedNumber(sgmap[parentId], 3);\n        this.writeCR();\n      }\n\n      // connectivity\n      if (sgroup.type === 'SRU' && sgroup.data.connectivity) {\n        const connectivity = ` ${sGroupIdInCTab.toString().padStart(3)} ${(\n          sgroup.data.connectivity || ''\n        ).padEnd(3)}`;\n\n        this.write('M  SCN');\n        this.writePaddedNumber(1, 3);\n        this.write(connectivity.toUpperCase());\n        this.writeCR();\n      }\n\n      if (sgroup.type === 'SRU') {\n        this.write('M  SMT ');\n        this.writePaddedNumber(sGroupIdInCTab, 3);\n        this.writeWhiteSpace();\n        this.write(sgroup.data.subscript || 'n');\n        this.writeCR();\n      }\n      sgroup.getAttachmentPoints().forEach((attachmentPoint) => {\n        this.writeSGroupAttachmentPointLine(sGroupIdInCTab, attachmentPoint);\n      });\n\n      this.writeCR(\n        common.saveToMolfile[sgroup.type](\n          sgroup,\n          this.molecule,\n          sgmap,\n          this.mapping,\n          this.bondMapping,\n        ),\n      );\n    }\n\n    // TODO: write M  APO\n    // TODO: write M  AAL\n    // TODO: write M  RGP\n    // TODO: write M  LOG\n\n    const expandedGroups: number[] = [];\n    this.molecule!.sgroups.forEach((sg) => {\n      if (sg.isExpanded() && !SGroup.isQuerySGroup(sg))\n        expandedGroups.push(sg.id + 1);\n    });\n\n    if (expandedGroups.length) {\n      const expandedGroupsLine = `M  SDS EXP  ${\n        expandedGroups.length\n      }   ${expandedGroups.join('   ')}`;\n      this.writeCR(expandedGroupsLine);\n    }\n\n    this.writeCR('M  END');\n  }\n\n  private writeAtom(atom, atomLabel: string) {\n    this.writePaddedFloat(atom.pp.x, 10, 4);\n    this.writePaddedFloat(-atom.pp.y, 10, 4);\n    this.writePaddedFloat(atom.pp.z, 10, 4);\n    this.writeWhiteSpace();\n    this.writePadded(atomLabel, 3);\n    this.writePaddedNumber(0, 2);\n    this.writePaddedNumber(0, 3);\n    this.writePaddedNumber(0, 3);\n\n    if (typeof atom.hCount === 'undefined') {\n      atom.hCount = 0;\n    }\n    this.writePaddedNumber(atom.hCount, 3);\n\n    if (typeof atom.stereoCare === 'undefined') {\n      atom.stereoCare = 0;\n    }\n    this.writePaddedNumber(atom.stereoCare, 3);\n\n    let number: number;\n    if (atom.explicitValence < 0) {\n      number = 0;\n    } else if (atom.explicitValence === 0) {\n      number = 15;\n    } else {\n      number = atom.explicitValence;\n    }\n    this.writePaddedNumber(number, 3);\n\n    this.writePaddedNumber(0, 3);\n    this.writePaddedNumber(0, 3);\n    this.writePaddedNumber(0, 3);\n\n    if (typeof atom.aam === 'undefined') {\n      atom.aam = 0;\n    }\n    this.writePaddedNumber(atom.aam, 3);\n\n    if (typeof atom.invRet === 'undefined') {\n      atom.invRet = 0;\n    }\n    this.writePaddedNumber(atom.invRet, 3);\n\n    if (typeof atom.exactChangeFlag === 'undefined') {\n      atom.exactChangeFlag = 0;\n    }\n    this.writePaddedNumber(atom.exactChangeFlag, 3);\n\n    this.writeCR();\n  }\n\n  private writeBond(bond) {\n    this.writePaddedNumber(this.mapping[bond.begin], 3);\n    this.writePaddedNumber(this.mapping[bond.end], 3);\n    this.writePaddedNumber(bond.type, 3);\n\n    if (typeof bond.stereo === 'undefined') {\n      bond.stereo = 0;\n    }\n    this.writePaddedNumber(bond.stereo, 3);\n\n    this.writePadded(bond.xxx, 3);\n\n    if (typeof bond.topology === 'undefined') {\n      bond.topology = 0;\n    }\n    this.writePaddedNumber(bond.topology, 3);\n\n    if (typeof bond.reactingCenterStatus === 'undefined') {\n      bond.reactingCenterStatus = 0;\n    }\n    this.writePaddedNumber(bond.reactingCenterStatus, 3);\n\n    this.writeCR();\n  }\n\n  private writeAtomProps(props) {\n    this.write('A  ');\n    this.writePaddedNumber(props.id + 1, 3);\n    this.writeCR();\n    this.writeCR(props.value);\n  }\n\n  private writeAtomPropList(propId: string, values: NumberTuple[]) {\n    while (values.length > 0) {\n      const part: NumberTuple[] = [];\n\n      while (values.length > 0 && part.length < 8) {\n        part.push(values[0]);\n        values.splice(0, 1);\n      }\n\n      this.write(propId);\n      this.writePaddedNumber(part.length, 3);\n\n      part.forEach((value) => {\n        this.writeWhiteSpace();\n        this.writePaddedNumber(this.mapping[value[0]], 3);\n        this.writeWhiteSpace();\n        this.writePaddedNumber(value[1], 3);\n      });\n\n      this.writeCR();\n    }\n  }\n\n  private writeSGroupAttachmentPointLine(\n    sgroupId: number,\n    attachmentPoint: SGroupAttachmentPoint,\n  ) {\n    this.write(`M  SAP`);\n    this.writeWhiteSpace(1);\n    this.writePaddedNumber(sgroupId, 3);\n    this.writePaddedNumber(1, 3);\n    this.writeWhiteSpace(1);\n    const atomId = this.mapping[attachmentPoint.atomId];\n    this.writePaddedNumber(atomId, 3);\n    this.writeWhiteSpace(1);\n    const leaveAtomId =\n      this.mapping[attachmentPoint.leaveAtomId as number] ?? 0;\n    this.writePaddedNumber(leaveAtomId, 3);\n    this.writeWhiteSpace(1);\n\n    const attachmentId = attachmentPoint.attachmentId\n      ? attachmentPoint.attachmentId.slice(0, 2)\n      : '  ';\n    this.writePadded(attachmentId, 2);\n    this.writeCR();\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { MolSerializerOptions } from './mol.types';\nimport { Molfile } from './molfile';\nimport { Serializer } from '../serializers.types';\nimport { Struct } from 'domain/entities';\nimport { KetcherLogger } from 'utilities';\nimport { KetSerializer } from 'domain/serializers';\n\nexport class MolSerializer implements Serializer<Struct> {\n  static DefaultOptions: MolSerializerOptions = {\n    badHeaderRecover: false,\n    ignoreErrors: false,\n    noRgroups: false,\n    preserveIndigoDesc: false,\n    reactionRelayout: false,\n  };\n\n  readonly options: MolSerializerOptions;\n\n  constructor(options?: Partial<MolSerializerOptions>) {\n    this.options = { ...MolSerializer.DefaultOptions, ...options };\n  }\n\n  deserialize(content: string): Struct {\n    const molfile = new Molfile();\n    const lines = content?.split(/\\r\\n|[\\n\\r]/g);\n\n    const parseCTFileParams = {\n      molfileLines: lines,\n      shouldReactionRelayout: this.options.reactionRelayout,\n      ignoreChiralFlag: this.options.ignoreChiralFlag,\n    };\n\n    try {\n      return molfile.parseCTFile(parseCTFileParams);\n    } catch (e) {\n      KetcherLogger.error('molSerializer::MolSerializer::deserialize', e);\n      if (this.options.badHeaderRecover) {\n        try {\n          // check whether there's an extra empty line on top\n          // this often happens when molfile text is pasted into the dialog window\n          return molfile.parseCTFile({\n            ...parseCTFileParams,\n            molfileLines: lines.slice(1),\n          });\n        } catch (e1) {\n          KetcherLogger.error('molSerializer::MolSerializer::deserialize', e1);\n        }\n        try {\n          // check for a missing first line\n          // this sometimes happens when pasting\n          return molfile.parseCTFile({\n            ...parseCTFileParams,\n            molfileLines: [''].concat(lines),\n          });\n        } catch (e2) {\n          KetcherLogger.error('molSerializer::MolSerializer::deserialize', e2);\n        }\n      }\n      throw e;\n    }\n  }\n\n  serialize(_struct: Struct): string {\n    const struct = KetSerializer.removeLeavingGroupsFromConnectedAtoms(_struct);\n\n    return new Molfile().saveMolecule(\n      struct,\n      this.options.ignoreErrors,\n      this.options.noRgroups,\n      this.options.preserveIndigoDesc,\n      this.options.ignoreChiralFlag,\n    );\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Bond, Pool, Vec2 } from 'domain/entities';\n\nfunction CisTrans(mol, neighborsFunc, context) {\n  this.molecule = mol;\n  this.bonds = new Pool();\n  this.getNeighbors = neighborsFunc;\n  this.context = context;\n}\n\nCisTrans.PARITY = {\n  NONE: 0,\n  CIS: 1,\n  TRANS: 2,\n};\n\nCisTrans.prototype.each = function (func) {\n  this.bonds.forEach(func);\n};\n\nCisTrans.prototype.getParity = function (idx) {\n  return this.bonds.get(idx).parity;\n};\n\nCisTrans.prototype.getSubstituents = function (idx) {\n  return this.bonds.get(idx).substituents;\n};\n\nCisTrans.prototype.sameside = function (beg, end, neiBeg, neiEnd) {\n  const diff = Vec2.diff(beg, end);\n  const norm = new Vec2(-diff.y, diff.x);\n\n  if (!norm.normalize()) return 0;\n\n  const normBeg = Vec2.diff(neiBeg, beg);\n  const normEnd = Vec2.diff(neiEnd, end);\n\n  if (!normBeg.normalize()) return 0;\n  if (!normEnd.normalize()) return 0;\n\n  const prodBeg = Vec2.dot(normBeg, norm);\n  const prodEnd = Vec2.dot(normEnd, norm);\n\n  if (Math.abs(prodBeg) < 0.001 || Math.abs(prodEnd) < 0.001) return 0;\n\n  return prodBeg * prodEnd > 0 ? 1 : -1;\n};\n\nCisTrans.prototype.samesides = function (iBeg, iEnd, iNeiBeg, iNeiEnd) {\n  return this.sameside(\n    this.molecule.atoms.get(iBeg).pp,\n    this.molecule.atoms.get(iEnd).pp,\n    this.molecule.atoms.get(iNeiBeg).pp,\n    this.molecule.atoms.get(iNeiEnd).pp,\n  );\n};\n\nCisTrans.prototype.sortSubstituents = function (substituents) {\n  // eslint-disable-line max-statements\n  const h0 = this.molecule.atoms.get(substituents[0]).pureHydrogen();\n  const h1 =\n    substituents[1] < 0 ||\n    this.molecule.atoms.get(substituents[1]).pureHydrogen();\n  const h2 = this.molecule.atoms.get(substituents[2]).pureHydrogen();\n  const h3 =\n    substituents[3] < 0 ||\n    this.molecule.atoms.get(substituents[3]).pureHydrogen();\n\n  if (h0 && h1) return false;\n  if (h2 && h3) return false;\n\n  if (h1) {\n    substituents[1] = -1;\n  } else if (h0) {\n    substituents[0] = substituents[1];\n    substituents[1] = -1;\n  } else if (substituents[0] > substituents[1]) {\n    swap(substituents, 0, 1);\n  }\n\n  if (h3) {\n    substituents[3] = -1;\n  } else if (h2) {\n    substituents[2] = substituents[3];\n    substituents[3] = -1;\n  } else if (substituents[2] > substituents[3]) {\n    swap(substituents, 2, 3);\n  }\n\n  return true;\n};\n\nCisTrans.prototype.isGeomStereoBond = function (bondIdx, substituents) {\n  // eslint-disable-line max-statements\n  // it must be [C,N,Si]=[C,N,Si] bond\n  const bond = this.molecule.bonds.get(bondIdx);\n\n  if (bond.type !== Bond.PATTERN.TYPE.DOUBLE) return false;\n\n  const label1 = this.molecule.atoms.get(bond.begin).label;\n  const label2 = this.molecule.atoms.get(bond.end).label;\n\n  if (label1 !== 'C' && label1 !== 'N' && label1 !== 'Si' && label1 !== 'Ge') {\n    return false;\n  }\n  if (label2 !== 'C' && label2 !== 'N' && label2 !== 'Si' && label2 !== 'Ge') {\n    return false;\n  }\n\n  // the atoms should have 1 or 2 single bonds\n  // (apart from the double bond under consideration)\n  const neiBegin = this.getNeighbors.call(this.context, bond.begin);\n  const neiEnd = this.getNeighbors.call(this.context, bond.end);\n\n  if (\n    neiBegin.length < 2 ||\n    neiBegin.length > 3 ||\n    neiEnd.length < 2 ||\n    neiEnd.length > 3\n  ) {\n    return false;\n  }\n\n  substituents[0] = -1;\n  substituents[1] = -1;\n  substituents[2] = -1;\n  substituents[3] = -1;\n\n  let i;\n  let nei;\n\n  for (i = 0; i < neiBegin.length; i++) {\n    nei = neiBegin[i];\n\n    if (nei.bid === bondIdx) continue; // eslint-disable-line no-continue\n\n    if (this.molecule.bonds.get(nei.bid).type !== Bond.PATTERN.TYPE.SINGLE) {\n      return false;\n    }\n\n    if (substituents[0] === -1) substituents[0] = nei.aid;\n    // (substituents[1] === -1)\n    else substituents[1] = nei.aid;\n  }\n\n  for (i = 0; i < neiEnd.length; i++) {\n    nei = neiEnd[i];\n\n    if (nei.bid === bondIdx) continue; // eslint-disable-line no-continue\n\n    if (this.molecule.bonds.get(nei.bid).type !== Bond.PATTERN.TYPE.SINGLE) {\n      return false;\n    }\n\n    if (substituents[2] === -1) substituents[2] = nei.aid;\n    // (substituents[3] == -1)\n    else substituents[3] = nei.aid;\n  }\n\n  if (\n    substituents[1] !== -1 &&\n    this.samesides(bond.begin, bond.end, substituents[0], substituents[1]) !==\n      -1\n  ) {\n    return false;\n  }\n  if (\n    substituents[3] !== -1 &&\n    this.samesides(bond.begin, bond.end, substituents[2], substituents[3]) !==\n      -1\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\nCisTrans.prototype.build = function (excludeBonds) {\n  this.molecule.bonds.forEach((bond, bid) => {\n    const ct = {\n      parity: 0,\n      substituents: [],\n    };\n    this.bonds.set(bid, ct);\n\n    if (Array.isArray(excludeBonds) && excludeBonds[bid]) return;\n\n    if (!this.isGeomStereoBond(bid, ct.substituents)) return;\n\n    if (!this.sortSubstituents(ct.substituents)) return;\n\n    const sign = this.samesides(\n      bond.begin,\n      bond.end,\n      ct.substituents[0],\n      ct.substituents[2],\n    );\n\n    if (sign === 1) ct.parity = CisTrans.PARITY.CIS;\n    else if (sign === -1) ct.parity = CisTrans.PARITY.TRANS;\n  });\n};\n\nfunction swap(arr, i1, i2) {\n  const tmp = arr[i1];\n  arr[i1] = arr[i2];\n  arr[i2] = tmp;\n}\n\nexport default CisTrans;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nfunction Dfs(mol, atomData, components, nReactants) {\n  this.molecule = mol;\n  this.atom_data = atomData;\n  this.components = components;\n  this.nComponentsInReactants = -1;\n  this.nReactants = nReactants;\n\n  this.vertices = new Array(this.molecule.atoms.size); // Minimum size\n  this.molecule.atoms.forEach((atom, aid) => {\n    this.vertices[aid] = new Dfs.VertexDesc();\n  }, this);\n\n  this.edges = new Array(this.molecule.bonds.size); // Minimum size\n  this.molecule.bonds.forEach((bond, bid) => {\n    this.edges[bid] = new Dfs.EdgeDesc();\n  }, this);\n\n  this.v_seq = [];\n}\n\nDfs.VertexDesc = function () {\n  this.dfs_state = 0; // 0 -- not on stack\n  // 1 -- on stack\n  // 2 -- removed from stack\n  this.parent_vertex = 0; // parent vertex in DFS tree\n  this.parent_edge = 0; // edge to parent vertex\n  this.branches = 0; // how many DFS branches go out from this vertex}\n};\n\nDfs.EdgeDesc = function () {\n  this.opening_cycles = 0; // how many cycles are\n  // (i) starting with this edge\n  // and (ii) ending in this edge's first vertex\n  this.closing_cycle = 0; // 1 if this edge closes a cycle\n};\n\nDfs.SeqElem = function (vIdx, parVertex, parEdge) {\n  this.idx = vIdx; // index of vertex in _graph\n  this.parent_vertex = parVertex; // parent vertex in DFS tree\n  this.parent_edge = parEdge; // edge to parent vertex\n};\n\nDfs.prototype.walk = function () {\n  // eslint-disable-line max-statements\n  const vStack = [];\n  let i, j;\n  let cid = 0;\n  let component = 0;\n\n  while (true) {\n    // eslint-disable-line no-constant-condition\n    if (vStack.length < 1) {\n      let selected = -1;\n\n      while (cid < this.components.length && selected === -1) {\n        selected = this.components[cid].find((aid) => {\n          if (this.vertices[aid].dfs_state === 0) {\n            selected = aid;\n            return true;\n          }\n          return false;\n        });\n        if (selected === null) {\n          selected = -1;\n          cid++;\n        }\n        if (cid === this.nReactants) this.nComponentsInReactants = component;\n      }\n      if (selected < -1) {\n        this.molecule.atoms.find((aid) => {\n          if (this.vertices[aid].dfs_state === 0) {\n            selected = aid;\n            return true;\n          }\n          return false;\n        });\n      }\n      if (selected === -1) break;\n      this.vertices[selected].parent_vertex = -1;\n      this.vertices[selected].parent_edge = -1;\n      vStack.push(selected);\n      component++;\n    }\n\n    const vIdx = vStack.pop();\n    const parentVertex = this.vertices[vIdx].parent_vertex;\n\n    let seqElem = new Dfs.SeqElem(\n      vIdx,\n      parentVertex,\n      this.vertices[vIdx].parent_edge,\n    );\n    this.v_seq.push(seqElem);\n\n    this.vertices[vIdx].dfs_state = 2;\n\n    const atomD = this.atom_data[vIdx];\n\n    for (i = 0; i < atomD.neighbours.length; i++) {\n      const neiIdx = atomD.neighbours[i].aid;\n      const edgeIdx = atomD.neighbours[i].bid;\n\n      if (neiIdx === parentVertex) continue; // eslint-disable-line no-continue\n\n      if (this.vertices[neiIdx].dfs_state === 2) {\n        this.edges[edgeIdx].closing_cycle = 1;\n\n        j = vIdx;\n\n        while (j !== -1 && this.vertices[j].parent_vertex !== neiIdx) {\n          j = this.vertices[j].parent_vertex;\n        }\n\n        if (j === -1) throw new Error('cycle unwind error');\n\n        this.edges[this.vertices[j].parent_edge].opening_cycles++;\n        this.vertices[vIdx].branches++;\n\n        seqElem = new Dfs.SeqElem(neiIdx, vIdx, edgeIdx);\n        this.v_seq.push(seqElem);\n      } else {\n        if (this.vertices[neiIdx].dfs_state === 1) {\n          j = vStack.indexOf(neiIdx);\n\n          if (j === -1) {\n            // eslint-disable-line max-depth\n            throw new Error('internal: removing vertex from stack');\n          }\n\n          vStack.splice(j, 1);\n\n          const parent = this.vertices[neiIdx].parent_vertex;\n\n          if (parent >= 0) {\n            // eslint-disable-line max-depth\n            this.vertices[parent].branches--;\n          }\n        }\n\n        this.vertices[vIdx].branches++;\n        this.vertices[neiIdx].parent_vertex = vIdx;\n        this.vertices[neiIdx].parent_edge = edgeIdx;\n        this.vertices[neiIdx].dfs_state = 1;\n        vStack.push(neiIdx);\n      }\n    }\n  }\n};\n\nDfs.prototype.edgeClosingCycle = function (eIdx) {\n  return this.edges[eIdx].closing_cycle !== 0;\n};\n\nDfs.prototype.numBranches = function (vIdx) {\n  return this.vertices[vIdx].branches;\n};\n\nDfs.prototype.numOpeningCycles = function (eIdx) {\n  return this.edges[eIdx].opening_cycles;\n};\n\nDfs.prototype.toString = function () {\n  let str = '';\n  this.v_seq.forEach((seqElem) => {\n    str += seqElem.idx + ' -> ';\n  });\n  str += '*';\n  return str;\n};\n\nexport default Dfs;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Bond, Pile, Pool, Vec2 } from 'domain/entities';\n\nfunction Stereocenters(mol, neighborsFunc, context) {\n  this.molecule = mol;\n  this.atoms = new Pool();\n  this.getNeighbors = neighborsFunc;\n  this.context = context;\n}\n\nStereocenters.prototype.each = function (func, context) {\n  this.atoms.forEach(func, context);\n};\n\nStereocenters.prototype.buildFromBonds = function (\n  /* const int *atom_types, const int *atom_groups, const int *bond_orientations, */ ignoreErrors,\n) {\n  const atoms = this.molecule.atoms;\n  const bonds = this.molecule.bonds;\n\n  /*\n\t\tthis is a set of atoms that are likely to belong to allene structures and\n\t\ttherefore should not be considered as potential stereocenters in the code below,\n\t\tas allenes cannot be encoded in the SMILES notation\n\t*/\n\n  const alleneMask = new Pile();\n  atoms.forEach((atom, aid) => {\n    const neiList = this.getNeighbors.call(this.context, aid);\n    if (neiList.length !== 2) return false;\n    const nei1 = neiList[0];\n    const nei2 = neiList[1];\n    // check atom labels\n    if (\n      [aid, nei1.aid, nei2.aid].findIndex(\n        (aid) => ['C', 'Si'].indexOf(atoms.get(aid).label) < 0,\n        this,\n      ) >= 0\n    ) {\n      return false;\n    }\n\n    // check adjacent bond types\n    if (\n      [nei1.bid, nei2.bid].findIndex(\n        (bid) => bonds.get(bid).type !== Bond.PATTERN.TYPE.DOUBLE,\n        this,\n      ) >= 0\n    ) {\n      return false;\n    }\n\n    // get the other neighbors of the two adjacent atoms except for the central atom\n    const nei1nei = this.getNeighbors\n      .call(this.context, nei1.aid)\n      .filter((nei) => nei.aid !== aid);\n    const nei2nei = this.getNeighbors\n      .call(this.context, nei2.aid)\n      .filter((nei) => nei.aid !== aid);\n    if (\n      nei1nei.length < 1 ||\n      nei1nei.length > 2 ||\n      nei2nei.length < 1 ||\n      nei2nei.length > 2\n    ) {\n      return false;\n    }\n\n    if (\n      nei1nei\n        .concat(nei2nei)\n        .findIndex(\n          (nei) => bonds.get(nei.bid).type !== Bond.PATTERN.TYPE.SINGLE,\n          this,\n        ) >= 0\n    ) {\n      return false;\n    }\n\n    if (\n      nei1nei\n        .concat(nei2nei)\n        .findIndex(\n          (nei) => bonds.get(nei.bid).stereo === Bond.PATTERN.STEREO.EITHER,\n          this,\n        ) >= 0\n    ) {\n      return false;\n    }\n    alleneMask.add(nei1.aid).add(nei2.aid);\n    return true;\n  });\n\n  if (alleneMask.size > 0) {\n    // TODO: add error handler call\n    // legacy message: This structure may contain allenes, which cannot be represented in the SMILES notation. Relevant stereo-information will be discarded.\n\n    atoms.forEach((atom, aid) => {\n      if (alleneMask.has(aid)) return;\n      /*\n      if (atom_types[atom_idx] == 0)\n         continue;\n         */\n      const neiList = this.getNeighbors.call(this.context, aid);\n      let stereocenter = false;\n\n      neiList.find(function (nei) {\n        const bond = this.molecule.bonds.get(nei.bid);\n\n        if (bond.type === Bond.PATTERN.TYPE.SINGLE && bond.begin === aid) {\n          if (\n            bond.stereo === Bond.PATTERN.STEREO.UP ||\n            bond.stereo === Bond.PATTERN.STEREO.DOWN\n          ) {\n            stereocenter = true;\n            return true;\n          }\n        }\n        return false;\n      }, this);\n\n      if (!stereocenter) return;\n\n      if (ignoreErrors) {\n        this.buildOneCenter(\n          aid /* , atom_groups[atom_idx], atom_types[atom_idx], bond_orientations */,\n        );\n      } else {\n        this.buildOneCenter(\n          aid /* , atom_groups[atom_idx], atom_types[atom_idx], bond_orientations */,\n        );\n      }\n    });\n  }\n};\n\nStereocenters.allowed_stereocenters = [\n  { elem: 'C', charge: 0, degree: 3, n_double_bonds: 0, implicit_degree: 4 },\n  { elem: 'C', charge: 0, degree: 4, n_double_bonds: 0, implicit_degree: 4 },\n  { elem: 'Si', charge: 0, degree: 3, n_double_bonds: 0, implicit_degree: 4 },\n  { elem: 'Si', charge: 0, degree: 4, n_double_bonds: 0, implicit_degree: 4 },\n  { elem: 'N', charge: 1, degree: 3, n_double_bonds: 0, implicit_degree: 4 },\n  { elem: 'N', charge: 1, degree: 4, n_double_bonds: 0, implicit_degree: 4 },\n  { elem: 'N', charge: 0, degree: 3, n_double_bonds: 0, implicit_degree: 3 },\n  { elem: 'S', charge: 0, degree: 4, n_double_bonds: 2, implicit_degree: 4 },\n  { elem: 'S', charge: 1, degree: 3, n_double_bonds: 0, implicit_degree: 3 },\n  { elem: 'S', charge: 0, degree: 3, n_double_bonds: 1, implicit_degree: 3 },\n  { elem: 'P', charge: 0, degree: 3, n_double_bonds: 0, implicit_degree: 3 },\n  { elem: 'P', charge: 1, degree: 4, n_double_bonds: 0, implicit_degree: 4 },\n  { elem: 'P', charge: 0, degree: 4, n_double_bonds: 1, implicit_degree: 4 },\n];\n\nStereocenters.prototype.buildOneCenter = function (\n  atomIdx /* , int group, int type, const int *bond_orientations */,\n) {\n  // eslint-disable-line max-statements\n  const atom = this.molecule.atoms.get(atomIdx);\n\n  const neiList = this.getNeighbors.call(this.context, atomIdx);\n  const degree = neiList.length;\n  let implicitDegree = -1;\n\n  const stereocenter = {\n    group: 0, // = group;\n    type: 0, // = type;\n    pyramid: [],\n  };\n\n  const edgeIds = [];\n\n  let lastAtomDir = 0;\n  let nDoubleBonds = 0;\n\n  stereocenter.pyramid[0] = -1;\n  stereocenter.pyramid[1] = -1;\n  stereocenter.pyramid[2] = -1;\n  stereocenter.pyramid[3] = -1;\n\n  let nPureHydrogens = 0;\n\n  if (degree > 4) {\n    throw new Error('stereocenter with %d bonds are not supported' + degree);\n  }\n\n  neiList.forEach((nei, neiIdx) => {\n    const neiAtom = this.molecule.atoms.get(nei.aid);\n    const bond = this.molecule.bonds.get(nei.bid);\n    edgeIds[neiIdx] = {\n      edge_idx: nei.bid,\n      nei_idx: nei.aid,\n      rank: nei.aid,\n      vec: Vec2.diff(neiAtom.pp, atom.pp).yComplement(),\n    };\n\n    if (neiAtom.pureHydrogen()) {\n      nPureHydrogens++;\n      edgeIds[neiIdx].rank = 10000;\n    } else if (neiAtom.label === 'H') {\n      edgeIds[neiIdx].rank = 5000;\n    }\n\n    if (!edgeIds[neiIdx].vec.normalize()) throw new Error('zero bond length');\n\n    if (bond.type === Bond.PATTERN.TYPE.TRIPLE) {\n      throw new Error('non-single bonds not allowed near stereocenter');\n    } else if (bond.type === Bond.PATTERN.TYPE.AROMATIC) {\n      throw new Error('aromatic bonds not allowed near stereocenter');\n    } else if (bond.type === Bond.PATTERN.TYPE.DOUBLE) nDoubleBonds++;\n  });\n\n  Stereocenters.allowed_stereocenters.find((as) => {\n    if (\n      as.elem === atom.label &&\n      as.charge === atom.charge &&\n      as.degree === degree &&\n      as.n_double_bonds === nDoubleBonds\n    ) {\n      implicitDegree = as.implicit_degree;\n      return true;\n    }\n    return false;\n  });\n\n  if (implicitDegree === -1) {\n    throw new Error(\n      'unknown stereocenter configuration: ' +\n        atom.label +\n        ', charge ' +\n        atom.charge +\n        ', ' +\n        degree +\n        ' bonds (' +\n        nDoubleBonds +\n        ' double)',\n    );\n  }\n\n  if (degree === 4 && nPureHydrogens > 1) {\n    throw new Error(nPureHydrogens + ' hydrogens near stereocenter');\n  }\n\n  if (degree === 3 && implicitDegree === 4 && nPureHydrogens > 0) {\n    throw new Error(\n      'have hydrogen(s) besides implicit hydrogen near stereocenter',\n    );\n  }\n\n  if (degree === 4) {\n    // sort by neighbor atom index (ascending)\n    if (edgeIds[0].rank > edgeIds[1].rank) swap(edgeIds, 0, 1);\n    if (edgeIds[1].rank > edgeIds[2].rank) swap(edgeIds, 1, 2);\n    if (edgeIds[2].rank > edgeIds[3].rank) swap(edgeIds, 2, 3);\n    if (edgeIds[1].rank > edgeIds[2].rank) swap(edgeIds, 1, 2);\n    if (edgeIds[0].rank > edgeIds[1].rank) swap(edgeIds, 0, 1);\n    if (edgeIds[1].rank > edgeIds[2].rank) swap(edgeIds, 1, 2);\n\n    var main1 = -1;\n    let main2 = -1;\n    var side1 = -1;\n    var side2 = -1;\n    var mainDir = 0;\n\n    for (var neiIdx = 0; neiIdx < 4; neiIdx++) {\n      const stereo = this.getBondStereo(atomIdx, edgeIds[neiIdx].edge_idx);\n\n      if (\n        stereo === Bond.PATTERN.STEREO.UP ||\n        stereo === Bond.PATTERN.STEREO.DOWN\n      ) {\n        main1 = neiIdx;\n        mainDir = stereo;\n        break;\n      }\n    }\n\n    if (main1 === -1) {\n      throw new Error('none of 4 bonds going from stereocenter is stereobond');\n    }\n\n    let xyz1, xyz2;\n\n    // find main2 as opposite to main1\n    if (main2 === -1) {\n      xyz1 = Stereocenters.xyzzy(\n        edgeIds[main1].vec,\n        edgeIds[(main1 + 1) % 4].vec,\n        edgeIds[(main1 + 2) % 4].vec,\n      );\n      xyz2 = Stereocenters.xyzzy(\n        edgeIds[main1].vec,\n        edgeIds[(main1 + 1) % 4].vec,\n        edgeIds[(main1 + 3) % 4].vec,\n      );\n\n      if (xyz1 + xyz2 === 3 || xyz1 + xyz2 === 12) {\n        main2 = (main1 + 1) % 4;\n        side1 = (main1 + 2) % 4;\n        side2 = (main1 + 3) % 4;\n      }\n    }\n    if (main2 === -1) {\n      xyz1 = Stereocenters.xyzzy(\n        edgeIds[main1].vec,\n        edgeIds[(main1 + 2) % 4].vec,\n        edgeIds[(main1 + 1) % 4].vec,\n      );\n      xyz2 = Stereocenters.xyzzy(\n        edgeIds[main1].vec,\n        edgeIds[(main1 + 2) % 4].vec,\n        edgeIds[(main1 + 3) % 4].vec,\n      );\n\n      if (xyz1 + xyz2 === 3 || xyz1 + xyz2 === 12) {\n        main2 = (main1 + 2) % 4;\n        side1 = (main1 + 1) % 4;\n        side2 = (main1 + 3) % 4;\n      }\n    }\n    if (main2 === -1) {\n      xyz1 = Stereocenters.xyzzy(\n        edgeIds[main1].vec,\n        edgeIds[(main1 + 3) % 4].vec,\n        edgeIds[(main1 + 1) % 4].vec,\n      );\n      xyz2 = Stereocenters.xyzzy(\n        edgeIds[main1].vec,\n        edgeIds[(main1 + 3) % 4].vec,\n        edgeIds[(main1 + 2) % 4].vec,\n      );\n\n      if (xyz1 + xyz2 === 3 || xyz1 + xyz2 === 12) {\n        main2 = (main1 + 3) % 4;\n        side1 = (main1 + 2) % 4;\n        side2 = (main1 + 1) % 4;\n      }\n    }\n\n    if (main2 === -1) {\n      throw new Error('internal error: can not find opposite bond');\n    }\n\n    if (\n      mainDir === Bond.PATTERN.STEREO.UP &&\n      this.getBondStereo(atomIdx, edgeIds[main2].edge_idx) ===\n        Bond.PATTERN.STEREO.DOWN\n    ) {\n      throw new Error('stereo types of the opposite bonds mismatch');\n    }\n    if (\n      mainDir === Bond.PATTERN.STEREO.DOWN &&\n      this.getBondStereo(atomIdx, edgeIds[main2].edge_idx) ===\n        Bond.PATTERN.STEREO.UP\n    ) {\n      throw new Error('stereo types of the opposite bonds mismatch');\n    }\n\n    if (mainDir === this.getBondStereo(atomIdx, edgeIds[side1].edge_idx)) {\n      throw new Error('stereo types of non-opposite bonds match');\n    }\n    if (mainDir === this.getBondStereo(atomIdx, edgeIds[side2].edge_idx)) {\n      throw new Error('stereo types of non-opposite bonds match');\n    }\n\n    if (main1 === 3 || main2 === 3) lastAtomDir = mainDir;\n    else {\n      lastAtomDir =\n        mainDir === Bond.PATTERN.STEREO.UP\n          ? Bond.PATTERN.STEREO.DOWN\n          : Bond.PATTERN.STEREO.UP;\n    }\n\n    const sign = Stereocenters.sign(\n      edgeIds[0].vec,\n      edgeIds[1].vec,\n      edgeIds[2].vec,\n    );\n\n    if (\n      (lastAtomDir === Bond.PATTERN.STEREO.UP && sign > 0) ||\n      (lastAtomDir === Bond.PATTERN.STEREO.DOWN && sign < 0)\n    ) {\n      stereocenter.pyramid[0] = edgeIds[0].nei_idx;\n      stereocenter.pyramid[1] = edgeIds[1].nei_idx;\n      stereocenter.pyramid[2] = edgeIds[2].nei_idx;\n    } else {\n      stereocenter.pyramid[0] = edgeIds[0].nei_idx;\n      stereocenter.pyramid[1] = edgeIds[2].nei_idx;\n      stereocenter.pyramid[2] = edgeIds[1].nei_idx;\n    }\n\n    stereocenter.pyramid[3] = edgeIds[3].nei_idx;\n  } else if (degree === 3) {\n    // sort by neighbor atom index (ascending)\n    if (edgeIds[0].rank > edgeIds[1].rank) swap(edgeIds, 0, 1);\n    if (edgeIds[1].rank > edgeIds[2].rank) swap(edgeIds, 1, 2);\n    if (edgeIds[0].rank > edgeIds[1].rank) swap(edgeIds, 0, 1);\n\n    const stereo0 = this.getBondStereo(atomIdx, edgeIds[0].edge_idx);\n    const stereo1 = this.getBondStereo(atomIdx, edgeIds[1].edge_idx);\n    const stereo2 = this.getBondStereo(atomIdx, edgeIds[2].edge_idx);\n\n    let nUp = 0;\n    let nDown = 0;\n\n    nUp += stereo0 === Bond.PATTERN.STEREO.UP ? 1 : 0;\n    nUp += stereo1 === Bond.PATTERN.STEREO.UP ? 1 : 0;\n    nUp += stereo2 === Bond.PATTERN.STEREO.UP ? 1 : 0;\n\n    nDown += stereo0 === Bond.PATTERN.STEREO.DOWN ? 1 : 0;\n    nDown += stereo1 === Bond.PATTERN.STEREO.DOWN ? 1 : 0;\n    nDown += stereo2 === Bond.PATTERN.STEREO.DOWN ? 1 : 0;\n\n    if (implicitDegree === 4) {\n      // have implicit hydrogen\n      if (nUp === 3) throw new Error('all 3 bonds up near stereoatom');\n      if (nDown === 3) throw new Error('all 3 bonds down near stereoatom');\n\n      if (nUp === 0 && nDown === 0) {\n        throw new Error('no up/down bonds near stereoatom -- indefinite case');\n      }\n      if (nUp === 1 && nDown === 1) {\n        throw new Error('one bond up, one bond down -- indefinite case');\n      }\n\n      mainDir = 0;\n\n      if (nUp === 2) {\n        lastAtomDir = Bond.PATTERN.STEREO.DOWN;\n      } else if (nDown === 2) {\n        lastAtomDir = Bond.PATTERN.STEREO.UP;\n      } else {\n        main1 = -1;\n        side1 = -1;\n        side2 = -1;\n\n        for (neiIdx = 0; neiIdx < 3; neiIdx++) {\n          const dir = this.getBondStereo(atomIdx, edgeIds[neiIdx].edge_idx);\n\n          if (\n            dir === Bond.PATTERN.STEREO.UP ||\n            dir === Bond.PATTERN.STEREO.DOWN\n          ) {\n            // eslint-disable-line max-depth\n            main1 = neiIdx;\n            mainDir = dir;\n            side1 = (neiIdx + 1) % 3;\n            side2 = (neiIdx + 2) % 3;\n            break;\n          }\n        }\n\n        if (main1 === -1) {\n          throw new Error('internal error: can not find up or down bond');\n        }\n\n        const xyz = Stereocenters.xyzzy(\n          edgeIds[side1].vec,\n          edgeIds[side2].vec,\n          edgeIds[main1].vec,\n        );\n\n        if (xyz === 3 || xyz === 4) {\n          throw new Error('degenerate case for 3 bonds near stereoatom');\n        }\n\n        if (xyz === 1) lastAtomDir = mainDir;\n        else {\n          lastAtomDir =\n            mainDir === Bond.PATTERN.STEREO.UP\n              ? Bond.PATTERN.STEREO.DOWN\n              : Bond.PATTERN.STEREO.UP;\n        }\n      }\n\n      const sign = Stereocenters.sign(\n        edgeIds[0].vec,\n        edgeIds[1].vec,\n        edgeIds[2].vec,\n      );\n\n      if (\n        (lastAtomDir === Bond.PATTERN.STEREO.UP && sign > 0) ||\n        (lastAtomDir === Bond.PATTERN.STEREO.DOWN && sign < 0)\n      ) {\n        stereocenter.pyramid[0] = edgeIds[0].nei_idx;\n        stereocenter.pyramid[1] = edgeIds[1].nei_idx;\n        stereocenter.pyramid[2] = edgeIds[2].nei_idx;\n      } else {\n        stereocenter.pyramid[0] = edgeIds[0].nei_idx;\n        stereocenter.pyramid[1] = edgeIds[2].nei_idx;\n        stereocenter.pyramid[2] = edgeIds[1].nei_idx;\n      }\n\n      stereocenter.pyramid[3] = -1;\n    } else {\n      // 3-connected P, N or S; no implicit hydrogens\n      let dir;\n\n      if (nDown > 0 && nUp > 0) {\n        throw new Error('one bond up, one bond down -- indefinite case');\n      } else if (nDown === 0 && nUp === 0) {\n        throw new Error('no up-down bonds attached to stereocenter');\n      } else if (nUp > 0) dir = 1;\n      else dir = -1;\n\n      if (\n        Stereocenters.xyzzy(edgeIds[0].vec, edgeIds[1].vec, edgeIds[2].vec) ===\n          1 ||\n        Stereocenters.xyzzy(edgeIds[0].vec, edgeIds[2].vec, edgeIds[1].vec) ===\n          1 ||\n        Stereocenters.xyzzy(edgeIds[2].vec, edgeIds[1].vec, edgeIds[0].vec) ===\n          1\n      ) {\n        // all bonds belong to the same half-plane\n        dir = -dir;\n      }\n\n      const sign = Stereocenters.sign(\n        edgeIds[0].vec,\n        edgeIds[1].vec,\n        edgeIds[2].vec,\n      );\n\n      if (sign === dir) {\n        stereocenter.pyramid[0] = edgeIds[0].nei_idx;\n        stereocenter.pyramid[1] = edgeIds[2].nei_idx;\n        stereocenter.pyramid[2] = edgeIds[1].nei_idx;\n      } else {\n        stereocenter.pyramid[0] = edgeIds[0].nei_idx;\n        stereocenter.pyramid[1] = edgeIds[1].nei_idx;\n        stereocenter.pyramid[2] = edgeIds[2].nei_idx;\n      }\n      stereocenter.pyramid[3] = -1;\n    }\n  }\n  this.atoms.set(atomIdx, stereocenter);\n};\n\nStereocenters.prototype.getBondStereo = function (centerIdx, edgeIdx) {\n  const bond = this.molecule.bonds.get(edgeIdx);\n\n  if (centerIdx !== bond.begin) {\n    // TODO: check this\n    return 0;\n  }\n\n  return bond.stereo;\n};\n\n// 1 -- in the smaller angle, 2 -- in the bigger angle,\n// 4 -- in the 'positive' straight angle, 8 -- in the 'negative' straight angle\nStereocenters.xyzzy = function (v1, v2, u) {\n  const eps = 0.001;\n\n  const sine1 = Vec2.cross(v1, v2);\n  const cosine1 = Vec2.dot(v1, v2);\n\n  const sine2 = Vec2.cross(v1, u);\n  const cosine2 = Vec2.dot(v1, u);\n\n  if (Math.abs(sine1) < eps) {\n    if (Math.abs(sine2) < eps) {\n      throw new Error('degenerate case -- bonds overlap');\n    }\n\n    return sine2 > 0 ? 4 : 8;\n  }\n\n  if (sine1 * sine2 < -eps * eps) return 2;\n\n  if (cosine2 < cosine1) return 2;\n\n  return 1;\n};\n\nStereocenters.sign = function (v1, v2, v3) {\n  const res = (v1.x - v3.x) * (v2.y - v3.y) - (v1.y - v3.y) * (v2.x - v3.x); // eslint-disable-line no-mixed-operators\n  const eps = 0.001;\n\n  if (res > eps) return 1;\n  if (res < -eps) return -1;\n\n  throw new Error('degenerate triangle');\n};\n\nStereocenters.isPyramidMappingRigid = function (mapping) {\n  const arr = mapping.slice();\n  let rigid = true;\n\n  if (arr[0] > arr[1]) {\n    swap(arr, 0, 1);\n    rigid = !rigid;\n  }\n  if (arr[1] > arr[2]) {\n    swap(arr, 1, 2);\n    rigid = !rigid;\n  }\n  if (arr[2] > arr[3]) {\n    swap(arr, 2, 3);\n    rigid = !rigid;\n  }\n  if (arr[1] > arr[2]) {\n    swap(arr, 1, 2);\n    rigid = !rigid;\n  }\n  if (arr[0] > arr[1]) {\n    swap(arr, 0, 1);\n    rigid = !rigid;\n  }\n  if (arr[1] > arr[2]) {\n    swap(arr, 1, 2);\n    rigid = !rigid;\n  }\n\n  return rigid;\n};\n\nfunction swap(arr, i1, i2) {\n  const tmp = arr[i1];\n  arr[i1] = arr[i2];\n  arr[i2] = tmp;\n}\n\nexport default Stereocenters;\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Atom, Bond, Pile, SGroup } from 'domain/entities';\nimport { KetcherLogger } from 'utilities';\n\nimport CisTrans from './cis_trans';\nimport Dfs from './dfs';\nimport Stereocenters from './stereocenters';\n\nexport function Smiles() {\n  this.smiles = '';\n  this.writtenAtoms = [];\n  this.writtenComponents = 0;\n\n  this.ignoreErrors = false;\n}\n\nSmiles._Atom = function (hCount) {\n  // eslint-disable-line no-underscore-dangle\n  this.neighbours = []; // Array of integer pairs {a, b}\n  this.aromatic = false; // has aromatic bond\n  this.lowercase = false; // aromatic and has to be written lowercase\n  this.chirality = 0; // 0 means no chirality, 1 means CCW pyramid, 2 means CW pyramid\n  this.branch_cnt = 0; // runs from 0 to (branches - 1)\n  this.paren_written = false;\n  this.h_count = hCount;\n  this.parent = -1;\n};\n\n// NB: only loops of length up to 6 are included here\nSmiles.prototype.isBondInRing = function (bid) {\n  return this.inLoop[bid];\n};\n\nSmiles.prototype.saveMolecule = function (struct, ignoreErrors) {\n  // eslint-disable-line max-statements\n  let i, j, k;\n\n  if (!ignoreErrors) this.ignoreErrors = ignoreErrors;\n\n  // [RB]: KETCHER-498 (Incorrect smile-string for multiple Sgroup)\n  // TODO the fix is temporary, still need to implement error handling/reporting\n  // BEGIN\n  struct = struct.clone(\n    undefined,\n    undefined,\n    !struct.hasRxnArrow(), // make it drop multiple reactions\n    undefined,\n    undefined,\n    undefined,\n  );\n  struct.initHalfBonds();\n  struct.initNeighbors();\n  struct.sortNeighbors();\n  struct.setImplicitHydrogen();\n  struct.sgroups.forEach((sg) => {\n    if (sg.type === 'MUL') {\n      try {\n        SGroup.prepareMulForSaving(sg, struct);\n      } catch (error) {\n        KetcherLogger.error('smiles.js::Smiles.prototype.saveMolecule', error);\n        throw Error('Bad s-group (' + error.message + ')');\n      }\n    }\n    // 'SMILES data format doesn\\'t support s-groups'\n  });\n  // END\n\n  this.atoms = new Array(struct.atoms.size);\n\n  struct.atoms.forEach((atom, aid) => {\n    this.atoms[aid] = new Smiles._Atom(atom.implicitH); // eslint-disable-line no-underscore-dangle\n  });\n\n  // From the SMILES specification:\n  // Please note that only atoms on the following list\n  // can be considered aromatic: C, N, O, P, S, As, Se, and * (wildcard).\n  const allowedLowercase = ['B', 'C', 'N', 'O', 'P', 'S', 'Se', 'As'];\n\n  // Detect atoms that have aromatic bonds and count neighbours\n  struct.bonds.forEach((bond, bid) => {\n    if (bond.type === Bond.PATTERN.TYPE.AROMATIC) {\n      this.atoms[bond.begin].aromatic = true;\n      if (allowedLowercase.indexOf(struct.atoms.get(bond.begin).label) !== -1) {\n        this.atoms[bond.begin].lowercase = true;\n      }\n      this.atoms[bond.end].aromatic = true;\n      if (allowedLowercase.indexOf(struct.atoms.get(bond.end).label) !== -1) {\n        this.atoms[bond.end].lowercase = true;\n      }\n    }\n    this.atoms[bond.begin].neighbours.push({ aid: bond.end, bid });\n    this.atoms[bond.end].neighbours.push({ aid: bond.begin, bid });\n  });\n\n  this.inLoop = (function () {\n    struct.prepareLoopStructure();\n    let bondsInLoops = new Pile();\n    struct.loops.forEach((loop) => {\n      if (loop.hbs.length <= 6) {\n        const hbids = loop.hbs.map((hbid) => struct.halfBonds.get(hbid).bid);\n        bondsInLoops = bondsInLoops.union(new Pile(hbids));\n      }\n    });\n    const inLoop = {};\n    bondsInLoops.forEach((bid) => {\n      inLoop[bid] = 1;\n    });\n    return inLoop;\n  })();\n\n  this.touchedCistransbonds = 0;\n  this.markCisTrans(struct);\n\n  const components = struct.getComponents();\n  const componentsAll = components.reactants.concat(components.products);\n\n  const walk = new Dfs(\n    struct,\n    this.atoms,\n    componentsAll,\n    components.reactants.length,\n  );\n\n  walk.walk();\n  this.atoms.forEach((atom) => {\n    atom.neighbours = [];\n  });\n\n  // fill up neighbor lists for the stereocenters calculation\n  for (i = 0; i < walk.v_seq.length; i++) {\n    var seqEl = walk.v_seq[i];\n    var vIdx = seqEl.idx;\n    var eIdx = seqEl.parent_edge;\n    var vPrevIdx = seqEl.parent_vertex;\n\n    if (eIdx >= 0) {\n      const atom = this.atoms[vIdx];\n\n      var openingCycles = walk.numOpeningCycles(eIdx);\n\n      for (j = 0; j < openingCycles; j++) {\n        this.atoms[vPrevIdx].neighbours.push({ aid: -1, bid: -1 });\n      }\n\n      if (walk.edgeClosingCycle(eIdx)) {\n        for (k = 0; k < atom.neighbours.length; k++) {\n          if (atom.neighbours[k].aid === -1) {\n            // eslint-disable-line max-depth\n            atom.neighbours[k].aid = vPrevIdx;\n            atom.neighbours[k].bid = eIdx;\n            break;\n          }\n        }\n        if (k === atom.neighbours.length) {\n          throw new Error('internal: can not put closing bond to its place');\n        }\n      } else {\n        atom.neighbours.push({ aid: vPrevIdx, bid: eIdx });\n        atom.parent = vPrevIdx;\n      }\n      this.atoms[vPrevIdx].neighbours.push({ aid: vIdx, bid: eIdx });\n    }\n  }\n\n  try {\n    // detect chiral configurations\n    const stereocenters = new Stereocenters(\n      struct,\n      function (idx) {\n        return this.atoms[idx].neighbours;\n      },\n      this,\n    );\n    stereocenters.buildFromBonds(this.ignoreErrors);\n\n    stereocenters.each((sc, atomIdx) => {\n      // eslint-disable-line max-statements\n      // if (sc.type < MoleculeStereocenters::ATOM_AND)\n      //    continue;\n\n      let implicitHIdx = -1;\n\n      if (sc.pyramid[3] === -1) implicitHIdx = 3;\n      /*\n\t\t\telse for (j = 0; j < 4; j++)\n\t\t\t\tif (ignored_vertices[pyramid[j]])\n\t\t\t\t{\n\t\t\t\t\timplicit_h_idx = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t*/\n\n      const pyramidMapping = [];\n      let counter = 0;\n\n      const atom = this.atoms[atomIdx];\n\n      if (atom.parent !== -1) {\n        for (k = 0; k < 4; k++) {\n          if (sc.pyramid[k] === atom.parent) {\n            pyramidMapping[counter++] = k;\n            break;\n          }\n        }\n      }\n\n      if (implicitHIdx !== -1) pyramidMapping[counter++] = implicitHIdx;\n\n      for (j = 0; j !== atom.neighbours.length; j++) {\n        if (atom.neighbours[j].aid === atom.parent) continue; // eslint-disable-line no-continue\n\n        for (k = 0; k < 4; k++) {\n          if (atom.neighbours[j].aid === sc.pyramid[k]) {\n            if (counter >= 4) throw new Error('internal: pyramid overflow');\n            pyramidMapping[counter++] = k;\n            break;\n          }\n        }\n      }\n\n      if (counter === 4) {\n        // move the 'from' atom to the end\n        counter = pyramidMapping[0];\n        pyramidMapping[0] = pyramidMapping[1];\n        pyramidMapping[1] = pyramidMapping[2];\n        pyramidMapping[2] = pyramidMapping[3];\n        pyramidMapping[3] = counter;\n      } else if (counter !== 3) {\n        throw new Error('cannot calculate chirality');\n      }\n\n      if (Stereocenters.isPyramidMappingRigid(pyramidMapping)) {\n        this.atoms[atomIdx].chirality = 1;\n      } else this.atoms[atomIdx].chirality = 2;\n    });\n  } catch (e) {\n    KetcherLogger.error('smiles.js::Smiles.prototype.saveMolecule', e);\n    // TODO: add error handler call\n  }\n\n  // write the SMILES itself\n\n  // cycle_numbers[i] == -1 means that the number is available\n  // cycle_numbers[i] == n means that the number is used by vertex n\n  const cycleNumbers = [];\n\n  cycleNumbers.push(0); // never used\n\n  let firstComponent = true;\n\n  for (i = 0; i < walk.v_seq.length; i++) {\n    seqEl = walk.v_seq[i];\n    vIdx = seqEl.idx;\n    eIdx = seqEl.parent_edge;\n    vPrevIdx = seqEl.parent_vertex;\n    let writeAtom = true;\n\n    if (vPrevIdx >= 0) {\n      if (walk.numBranches(vPrevIdx) > 1) {\n        if (\n          this.atoms[vPrevIdx].branch_cnt > 0 &&\n          this.atoms[vPrevIdx].paren_written\n        ) {\n          this.smiles += ')';\n        }\n      }\n\n      openingCycles = walk.numOpeningCycles(eIdx);\n\n      for (j = 0; j < openingCycles; j++) {\n        for (k = 1; k < cycleNumbers.length; k++) {\n          if (cycleNumbers[k] === -1) {\n            // eslint-disable-line max-depth\n            break;\n          }\n        }\n        if (k === cycleNumbers.length) cycleNumbers.push(vPrevIdx);\n        else cycleNumbers[k] = vPrevIdx;\n\n        this.writeCycleNumber(k);\n      }\n\n      if (vPrevIdx >= 0) {\n        const branches = walk.numBranches(vPrevIdx);\n\n        if (branches > 1 && this.atoms[vPrevIdx].branch_cnt < branches - 1) {\n          if (walk.edgeClosingCycle(eIdx)) {\n            // eslint-disable-line max-depth\n            this.atoms[vPrevIdx].paren_written = false;\n          } else {\n            this.smiles += '(';\n            this.atoms[vPrevIdx].paren_written = true;\n          }\n        }\n\n        this.atoms[vPrevIdx].branch_cnt++;\n\n        if (this.atoms[vPrevIdx].branch_cnt > branches) {\n          throw new Error('unexpected branch');\n        }\n      }\n\n      const bond = struct.bonds.get(eIdx);\n\n      let dir = 0;\n\n      if (bond.type === Bond.PATTERN.TYPE.SINGLE) {\n        dir = this.calcBondDirection(struct, eIdx, vPrevIdx);\n      }\n\n      if (\n        (dir === 1 && vIdx === bond.end) ||\n        (dir === 2 && vIdx === bond.begin)\n      ) {\n        this.smiles += '/';\n      } else if (\n        (dir === 2 && vIdx === bond.end) ||\n        (dir === 1 && vIdx === bond.begin)\n      ) {\n        this.smiles += '\\\\';\n      } else if (bond.type === Bond.PATTERN.TYPE.ANY) {\n        this.smiles += '~';\n      } else if (bond.type === Bond.PATTERN.TYPE.DOUBLE) {\n        this.smiles += '=';\n      } else if (bond.type === Bond.PATTERN.TYPE.TRIPLE) {\n        this.smiles += '#';\n      } else if (bond.type === Bond.PATTERN.TYPE.SINGLE_OR_AROMATIC) {\n        this.smiles += '-,:';\n      } else if (bond.type === Bond.PATTERN.TYPE.DOUBLE_OR_AROMATIC) {\n        this.smiles += '=,:';\n      } else if (bond.type === Bond.PATTERN.TYPE.SINGLE_OR_DOUBLE) {\n        this.smiles += '-,=';\n      } else if (\n        bond.type === Bond.PATTERN.TYPE.AROMATIC &&\n        (!this.atoms[bond.begin].lowercase ||\n          !this.atoms[bond.end].lowercase ||\n          !this.isBondInRing(eIdx))\n      ) {\n        this.smiles += ':';\n      }\n      // TODO: Check if this : is needed\n      else if (\n        bond.type === Bond.PATTERN.TYPE.SINGLE &&\n        this.atoms[bond.begin].aromatic &&\n        this.atoms[bond.end].aromatic\n      ) {\n        this.smiles += '-';\n      }\n\n      if (walk.edgeClosingCycle(eIdx)) {\n        for (j = 1; j < cycleNumbers.length; j++) {\n          if (cycleNumbers[j] === vIdx) break;\n        }\n\n        if (j === cycleNumbers.length)\n          throw new Error('cycle number not found');\n\n        this.writeCycleNumber(j);\n\n        cycleNumbers[j] = -1;\n        writeAtom = false;\n      }\n    } else {\n      if (!firstComponent) {\n        this.smiles +=\n          this.writtenComponents === walk.nComponentsInReactants &&\n          walk.nReactants !== 0\n            ? '>>'\n            : '.'; // when walk.nReactants === 0 - not reaction\n      }\n      firstComponent = false;\n      this.writtenComponents++;\n    }\n    if (writeAtom) {\n      this.writeAtom(\n        struct,\n        vIdx,\n        this.atoms[vIdx].aromatic,\n        this.atoms[vIdx].lowercase,\n        this.atoms[vIdx].chirality,\n      );\n      this.writtenAtoms.push(seqEl.idx);\n    }\n  }\n\n  this.comma = false;\n\n  // this._writeStereogroups(mol, atoms);\n  this.writeRadicals(struct);\n  // this._writePseudoAtoms(mol);\n  // this._writeHighlighting();\n\n  if (this.comma) this.smiles += '|';\n\n  return this.smiles;\n};\n\nSmiles.prototype.writeCycleNumber = function (n) {\n  if (n > 0 && n < 10) this.smiles += n;\n  else if (n >= 10 && n < 100) this.smiles += '%' + n;\n  else if (n >= 100 && n < 1000) this.smiles += '%%' + n;\n  else throw new Error('bad cycle number: ' + n);\n};\n\nSmiles.prototype.writeAtom = function (\n  mol,\n  idx,\n  aromatic,\n  lowercase,\n  chirality,\n) {\n  // eslint-disable-line max-params, max-statements\n  const atom = mol.atoms.get(idx);\n  let needBrackets = false;\n  let hydro = -1;\n  let aam = 0;\n\n  /*\n\tif (mol.haveQueryAtoms())\n\t{\n\t  query_atom = &mol.getQueryAtom(idx);\n\n\t  if (query_atom->type == QUERY_ATOM_RGROUP)\n\t  {\n\t\t if (mol.getRGroups()->isRGroupAtom(idx))\n\t\t {\n\t\t\tconst Array<int> &rg = mol.getRGroups()->getSiteRGroups(idx);\n\n\t\t\tif (rg.length != 1)\n\t\t\t   throw Error(\"rgroup count %d\", rg.length);\n\n\t\t\t_output.printf(\"[&%d]\", rg[0] + 1);\n\t\t }\n\t\t else\n\t\t\t_output.printf(\"[&%d]\", 1);\n\n\t\t return;\n\t  }\n\t}\n\t*/\n\n  if (atom.label === 'A') {\n    this.smiles += '*';\n    return;\n  }\n\n  if (atom.label === 'R' || atom.label === 'R#') {\n    this.smiles += '[*]';\n    return;\n  }\n\n  // KETCHER-598 (Ketcher does not save AAM into reaction SMILES)\n  // BEGIN\n  //    if (this.atom_atom_mapping)\n  //        aam = atom_atom_mapping[idx];\n  aam = atom.aam;\n  // END\n\n  if (\n    atom.label !== 'C' &&\n    atom.label !== 'P' &&\n    atom.label !== 'N' &&\n    atom.label !== 'S' &&\n    atom.label !== 'O' &&\n    atom.label !== 'Cl' &&\n    atom.label !== 'F' &&\n    atom.label !== 'Br' &&\n    atom.label !== 'B' &&\n    atom.label !== 'I'\n  ) {\n    needBrackets = true;\n  }\n\n  if (\n    atom.explicitValence >= 0 ||\n    atom.radical !== 0 ||\n    chirality > 0 ||\n    (aromatic && atom.label !== 'C' && atom.label !== 'O') ||\n    (aromatic &&\n      atom.label === 'C' &&\n      this.atoms[idx].neighbours.length < 3 &&\n      this.atoms[idx].h_count === 0)\n  ) {\n    hydro = this.atoms[idx].h_count;\n  }\n\n  let label = atom.label;\n  if (atom.atomList && !atom.atomList.notList) {\n    label = atom.atomList.label();\n    needBrackets = false; // atom list label already has brackets\n  } else if (atom.isPseudo() || (atom.atomList && atom.atomList.notList)) {\n    label = '*';\n    needBrackets = false;\n  } else if (\n    chirality ||\n    (atom.charge !== 0 && atom.charge !== null) ||\n    atom.isotope > 0 ||\n    hydro >= 0 ||\n    aam > 0\n  ) {\n    needBrackets = true;\n  }\n\n  if (needBrackets) {\n    if (hydro === -1) hydro = this.atoms[idx].h_count;\n    this.smiles += '[';\n  }\n\n  if (atom.isotope > 0) this.smiles += atom.isotope;\n\n  if (lowercase) this.smiles += label.toLowerCase();\n  else this.smiles += label;\n\n  if (chirality > 0) {\n    if (chirality === 1) this.smiles += '@';\n    // chirality == 2\n    else this.smiles += '@@';\n\n    if (atom.implicitH > 1) {\n      throw new Error(atom.implicitH + ' implicit H near stereocenter');\n    }\n  }\n\n  if (atom.label !== 'H') {\n    if (hydro > 1 || (hydro === 0 && !needBrackets)) this.smiles += 'H' + hydro;\n    else if (hydro === 1) this.smiles += 'H';\n  }\n\n  if (atom.charge > 1) this.smiles += '+' + atom.charge;\n  else if (atom.charge < -1) this.smiles += atom.charge;\n  else if (atom.charge === 1) this.smiles += '+';\n  else if (atom.charge === -1) this.smiles += '-';\n\n  if (aam > 0) this.smiles += ':' + aam;\n\n  if (needBrackets) this.smiles += ']';\n\n  /*\n\tif (mol.getRGroupFragment() != 0)\n\t{\n\t  for (i = 0; i < 2; i++)\n\t  {\n\t\t int j;\n\n\t\t for (j = 0; mol.getRGroupFragment()->getAttachmentPoint(i, j) != -1; j++)\n\t\t\tif (idx == mol.getRGroupFragment()->getAttachmentPoint(i, j))\n\t\t\t{\n\t\t\t   _output.printf(\"([*])\");\n\t\t\t   break;\n\t\t\t}\n\n\t\t if (mol.getRGroupFragment()->getAttachmentPoint(i, j) != -1)\n\t\t\tbreak;\n\t  }\n\t}\n\t*/\n};\n\nSmiles.prototype.markCisTrans = function (mol) {\n  this.cis_trans = new CisTrans(\n    mol,\n    function (idx) {\n      return this.atoms[idx].neighbours;\n    },\n    this,\n  );\n  this.cis_trans.build();\n  this.dbonds = new Array(mol.bonds.size);\n\n  mol.bonds.forEach((bond, bid) => {\n    this.dbonds[bid] = {\n      ctbond_beg: -1,\n      ctbond_end: -1,\n      saved: 0,\n    };\n  });\n\n  this.cis_trans.each((ct, bid) => {\n    const bond = mol.bonds.get(bid);\n\n    if (ct.parity !== 0 && !this.isBondInRing(bid)) {\n      const neiBeg = this.atoms[bond.begin].neighbours;\n      const neiEnd = this.atoms[bond.end].neighbours;\n      let aromFailBeg = true;\n      let aromFailEnd = true;\n\n      neiBeg.forEach((nei) => {\n        if (\n          nei.bid !== bid &&\n          mol.bonds.get(nei.bid).type === Bond.PATTERN.TYPE.SINGLE\n        ) {\n          aromFailBeg = false;\n        }\n      });\n\n      neiEnd.forEach((nei) => {\n        if (\n          nei.bid !== bid &&\n          mol.bonds.get(nei.bid).type === Bond.PATTERN.TYPE.SINGLE\n        ) {\n          aromFailEnd = false;\n        }\n      });\n\n      if (aromFailBeg || aromFailEnd) return;\n\n      neiBeg.forEach((nei) => {\n        if (nei.bid === bid) return;\n        if (mol.bonds.get(nei.bid).begin === bond.begin) {\n          this.dbonds[nei.bid].ctbond_beg = bid;\n        } else this.dbonds[nei.bid].ctbond_end = bid;\n      });\n\n      neiEnd.forEach((nei) => {\n        if (nei.bid === bid) return;\n        if (mol.bonds.get(nei.bid).begin === bond.end) {\n          this.dbonds[nei.bid].ctbond_beg = bid;\n        } else this.dbonds[nei.bid].ctbond_end = bid;\n      });\n    }\n  });\n};\n\nSmiles.prototype.updateSideBonds = function (mol, bondIdx) {\n  // eslint-disable-line max-statements\n  const bond = mol.bonds.get(bondIdx);\n  const subst = this.cis_trans.getSubstituents(bondIdx);\n  const parity = this.cis_trans.getParity(bondIdx);\n\n  const sidebonds = [-1, -1, -1, -1];\n\n  sidebonds[0] = mol.findBondId(subst[0], bond.begin);\n  if (subst[1] !== -1) sidebonds[1] = mol.findBondId(subst[1], bond.begin);\n\n  sidebonds[2] = mol.findBondId(subst[2], bond.end);\n  if (subst[3] !== -1) sidebonds[3] = mol.findBondId(subst[3], bond.end);\n\n  let n1 = 0;\n  let n2 = 0;\n  let n3 = 0;\n  let n4 = 0;\n\n  if (this.dbonds[sidebonds[0]].saved !== 0) {\n    if (\n      (this.dbonds[sidebonds[0]].saved === 1 &&\n        mol.bonds.get(sidebonds[0]).begin === bond.begin) ||\n      (this.dbonds[sidebonds[0]].saved === 2 &&\n        mol.bonds.get(sidebonds[0]).end === bond.begin)\n    ) {\n      n1++;\n    } else n2++;\n  }\n  if (sidebonds[1] !== -1 && this.dbonds[sidebonds[1]].saved !== 0) {\n    if (\n      (this.dbonds[sidebonds[1]].saved === 2 &&\n        mol.bonds.get(sidebonds[1]).begin === bond.begin) ||\n      (this.dbonds[sidebonds[1]].saved === 1 &&\n        mol.bonds.get(sidebonds[1]).end === bond.begin)\n    ) {\n      n1++;\n    } else n2++;\n  }\n  if (this.dbonds[sidebonds[2]].saved !== 0) {\n    if (\n      (this.dbonds[sidebonds[2]].saved === 1 &&\n        mol.bonds.get(sidebonds[2]).begin === bond.end) ||\n      (this.dbonds[sidebonds[2]].saved === 2 &&\n        mol.bonds.get(sidebonds[2]).end === bond.end)\n    ) {\n      n3++;\n    } else n4++;\n  }\n  if (sidebonds[3] !== -1 && this.dbonds[sidebonds[3]].saved !== 0) {\n    if (\n      (this.dbonds[sidebonds[3]].saved === 2 &&\n        mol.bonds.get(sidebonds[3]).begin === bond.end) ||\n      (this.dbonds[sidebonds[3]].saved === 1 &&\n        mol.bonds.get(sidebonds[3]).end === bond.end)\n    ) {\n      n3++;\n    } else n4++;\n  }\n\n  if (parity === CisTrans.PARITY.CIS) {\n    n1 += n3;\n    n2 += n4;\n  } else {\n    n1 += n4;\n    n2 += n3;\n  }\n\n  if (n1 > 0 && n2 > 0) throw new Error('incompatible cis-trans configuration');\n\n  if (n1 === 0 && n2 === 0) return false;\n\n  if (n1 > 0) {\n    this.dbonds[sidebonds[0]].saved =\n      mol.bonds.get(sidebonds[0]).begin === bond.begin ? 1 : 2;\n    if (sidebonds[1] !== -1) {\n      this.dbonds[sidebonds[1]].saved =\n        mol.bonds.get(sidebonds[1]).begin === bond.begin ? 2 : 1;\n    }\n\n    this.dbonds[sidebonds[2]].saved =\n      (mol.bonds.get(sidebonds[2]).begin === bond.end) ===\n      (parity === CisTrans.PARITY.CIS)\n        ? 1\n        : 2;\n    if (sidebonds[3] !== -1) {\n      this.dbonds[sidebonds[3]].saved =\n        (mol.bonds.get(sidebonds[3]).begin === bond.end) ===\n        (parity === CisTrans.PARITY.CIS)\n          ? 2\n          : 1;\n    }\n  }\n  if (n2 > 0) {\n    this.dbonds[sidebonds[0]].saved =\n      mol.bonds.get(sidebonds[0]).begin === bond.begin ? 2 : 1;\n    if (sidebonds[1] !== -1) {\n      this.dbonds[sidebonds[1]].saved =\n        mol.bonds.get(sidebonds[1]).begin === bond.begin ? 1 : 2;\n    }\n\n    this.dbonds[sidebonds[2]].saved =\n      (mol.bonds.get(sidebonds[2]).begin === bond.end) ===\n      (parity === CisTrans.PARITY.CIS)\n        ? 2\n        : 1;\n    if (sidebonds[3] !== -1) {\n      this.dbonds[sidebonds[3]].saved =\n        (mol.bonds.get(sidebonds[3]).begin === bond.end) ===\n        (parity === CisTrans.PARITY.CIS)\n          ? 1\n          : 2;\n    }\n  }\n\n  return true;\n};\n\nSmiles.prototype.calcBondDirection = function (mol, idx, vprev) {\n  let ntouched;\n\n  if (\n    this.dbonds[idx].ctbond_beg === -1 &&\n    this.dbonds[idx].ctbond_end === -1\n  ) {\n    return 0;\n  }\n\n  if (mol.bonds.get(idx).type !== Bond.PATTERN.TYPE.SINGLE) {\n    throw new Error('internal: directed bond type ' + mol.bonds.get(idx).type);\n  }\n\n  while (true) {\n    // eslint-disable-line no-constant-condition\n    ntouched = 0;\n    this.cis_trans.each((ct, bid) => {\n      if (ct.parity !== 0 && !this.isBondInRing(bid)) {\n        if (this.updateSideBonds(mol, bid)) ntouched++;\n      }\n    });\n    if (ntouched === this.touchedCistransbonds) break;\n    this.touchedCistransbonds = ntouched;\n  }\n\n  if (this.dbonds[idx].saved === 0) {\n    if (vprev === mol.bonds.get(idx).begin) this.dbonds[idx].saved = 1;\n    else this.dbonds[idx].saved = 2;\n  }\n\n  return this.dbonds[idx].saved;\n};\n\nSmiles.prototype.writeRadicals = function (mol) {\n  // eslint-disable-line max-statements\n  const marked = new Array(this.writtenAtoms.length);\n  let i, j;\n\n  for (i = 0; i < this.writtenAtoms.length; i++) {\n    if (marked[i]) continue; // eslint-disable-line no-continue\n\n    const radical = mol.atoms.get(this.writtenAtoms[i]).radical;\n\n    if (radical === 0) continue; // eslint-disable-line no-continue\n\n    if (this.comma) {\n      this.smiles += ',';\n    } else {\n      this.smiles += ' |';\n      this.comma = true;\n    }\n\n    if (radical === Atom.PATTERN.RADICAL.SINGLET) this.smiles += '^3:';\n    else if (radical === Atom.PATTERN.RADICAL.DOUPLET) this.smiles += '^1:';\n    // RADICAL_TRIPLET\n    else this.smiles += '^4:';\n\n    this.smiles += i;\n\n    for (j = i + 1; j < this.writtenAtoms.length; j++) {\n      if (mol.atoms.get(this.writtenAtoms[j]).radical === radical) {\n        marked[j] = true;\n        this.smiles += ',' + j;\n      }\n    }\n  }\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { Serializer } from '../serializers.types';\nimport { SmiSerializerOptions } from './smi.types';\nimport { Smiles } from './smiles';\nimport { Struct } from 'domain/entities';\n\nexport class SmiSerializer implements Serializer<Struct> {\n  static DefaultOptions: SmiSerializerOptions = {\n    ignoreErrors: false,\n  };\n\n  private readonly options: SmiSerializerOptions;\n\n  constructor(options?: Partial<SmiSerializerOptions>) {\n    this.options = { ...SmiSerializer.DefaultOptions, ...options };\n  }\n\n  deserialize(_content: string): Struct {\n    throw new Error('Not implemented yet.');\n  }\n\n  serialize(struct: Struct): string {\n    return new Smiles().saveMolecule(struct, this.options.ignoreErrors);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { SdfItem, StructAssociatedData } from './sdf.types';\n\nimport { MolSerializer } from '../mol/molSerializer';\nimport { Serializer } from '../serializers.types';\nimport { MolSerializerOptions } from '../mol';\n\nconst DelimeterRegex = /^[^]+?\\$\\$\\$\\$$/gm;\nexport class SdfSerializer implements Serializer<Array<SdfItem>> {\n  private readonly molSerializerOptions?: Partial<MolSerializerOptions>;\n\n  constructor(options?: Partial<MolSerializerOptions>) {\n    this.molSerializerOptions = options;\n  }\n\n  deserialize(content: string): Array<SdfItem> {\n    let m: any;\n    const result: Array<SdfItem> = [];\n    const molSerializer = new MolSerializer(this.molSerializerOptions);\n    while ((m = DelimeterRegex.exec(content)) !== null) {\n      const chunk = m[0].replace(/\\r/g, '').trim(); // TODO: normalize newline?\n      const end = chunk.indexOf('M  END');\n      if (end !== -1) {\n        const propChunks: any = chunk\n          .substr(end + 7)\n          .trim()\n          .split(/^$\\n?/m);\n\n        const struct = molSerializer.deserialize(chunk.substring(0, end + 6));\n        const props = propChunks.reduce(\n          (acc: StructAssociatedData, pc: string) => {\n            const m = pc.match(/^> [ \\d]*<(\\S+)>/);\n            if (m) {\n              const field = m[1];\n              const valueArr = pc.split('\\n').slice(1, -1);\n              let value = '';\n              if (valueArr.length > 1) {\n                value = valueArr.join(',');\n              } else {\n                value = pc.split('\\n')[1].trim();\n              }\n\n              acc[field] = Number.isFinite(value) ? +value : value.toString(); // eslint-disable-line\n            }\n            return acc;\n          },\n          {} as StructAssociatedData,\n        );\n\n        result.push({ struct, props });\n      }\n    }\n    return result;\n  }\n\n  serialize(sdfItems: Array<SdfItem>): string {\n    const molSerializer = new MolSerializer(this.molSerializerOptions);\n    return sdfItems.reduce((res, item) => {\n      res += molSerializer.serialize(item.struct);\n\n      Object.keys(item.props).forEach((prop) => {\n        res += `> <${prop}>\\n`;\n        res += `${item.props[prop]}\\n\\n`;\n      });\n\n      return `${res}$$$$\\n`;\n    }, '');\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { BaseMicromoleculeEntity } from 'domain/entities/BaseMicromoleculeEntity';\nimport { Vec2 } from 'domain/entities/vec2';\nimport { getNodeWithInvertedYCoord, KetFileNode } from 'domain/serializers';\nimport { IMAGE_SERIALIZE_KEY } from 'domain/constants';\n\nexport interface KetFileImageNode extends KetFileNode<string> {\n  format: string;\n  boundingBox: {\n    x: number;\n    y: number;\n    z?: number;\n    width: number;\n    height: number;\n  };\n}\n\nexport interface ImageReferencePositions {\n  topLeftPosition: Vec2;\n  topMiddlePosition: Vec2;\n  topRightPosition: Vec2;\n  rightMiddlePosition: Vec2;\n  bottomRightPosition: Vec2;\n  bottomMiddlePosition: Vec2;\n  bottomLeftPosition: Vec2;\n  leftMiddlePosition: Vec2;\n}\n\nexport type ImageReferenceName = keyof ImageReferencePositions;\n\nexport interface ImageReferencePositionInfo {\n  name: ImageReferenceName;\n  offset: Vec2;\n}\n\nexport class Image extends BaseMicromoleculeEntity {\n  constructor(\n    public bitmap: string,\n    private _center: Vec2,\n    private halfSize: Vec2,\n  ) {\n    super();\n  }\n\n  getTopLeftPosition(): Vec2 {\n    return this._center.sub(this.halfSize);\n  }\n\n  getTopRightPosition(): Vec2 {\n    return new Vec2(\n      this._center.x + this.halfSize.x,\n      this._center.y - this.halfSize.y,\n    );\n  }\n\n  getBottomRightPosition(): Vec2 {\n    return this._center.add(this.halfSize);\n  }\n\n  getBottomLeftPosition(): Vec2 {\n    return new Vec2(\n      this._center.x - this.halfSize.x,\n      this._center.y + this.halfSize.y,\n    );\n  }\n\n  getCornerPositions() {\n    return [\n      this.getTopLeftPosition(),\n      this.getTopRightPosition(),\n      this.getBottomRightPosition(),\n      this.getBottomLeftPosition(),\n    ];\n  }\n\n  getReferencePositions(): ImageReferencePositions {\n    const [\n      topLeftPosition,\n      topRightPosition,\n      bottomRightPosition,\n      bottomLeftPosition,\n    ] = this.getCornerPositions();\n    return {\n      topLeftPosition,\n      topMiddlePosition: Vec2.centre(topLeftPosition, topRightPosition),\n      topRightPosition,\n      rightMiddlePosition: Vec2.centre(topRightPosition, bottomRightPosition),\n      bottomRightPosition,\n      bottomMiddlePosition: Vec2.centre(\n        bottomLeftPosition,\n        bottomRightPosition,\n      ),\n      bottomLeftPosition,\n      leftMiddlePosition: Vec2.centre(topLeftPosition, bottomLeftPosition),\n    };\n  }\n\n  clone(): Image {\n    return new Image(\n      this.bitmap,\n      new Vec2(this._center),\n      new Vec2(this.halfSize),\n    );\n  }\n\n  addPositionOffset(offset: Vec2) {\n    this._center = this._center.add(offset);\n  }\n\n  resize(topLeftPosition: Vec2, bottomRightPosition: Vec2) {\n    this._center = Vec2.centre(topLeftPosition, bottomRightPosition);\n    const halfSize = Vec2.diff(bottomRightPosition, topLeftPosition).scaled(\n      0.5,\n    );\n    this.halfSize = new Vec2(Math.abs(halfSize.x), Math.abs(halfSize.y));\n  }\n\n  rescaleSize(scale: number): void {\n    this.halfSize = this.halfSize.scaled(scale);\n  }\n\n  center(): Vec2 {\n    return this._center;\n  }\n\n  toKetNode(): KetFileImageNode {\n    const topLeftCorner = this.getTopLeftPosition();\n    const base64Data = this.bitmap.replace(/^.*;base64,/, '');\n    const format = this.bitmap.match(\n      /^data:(image\\/.*);base64,/,\n    )?.[1] as string;\n    return {\n      type: IMAGE_SERIALIZE_KEY,\n      center: getNodeWithInvertedYCoord(this._center),\n      format,\n      boundingBox: {\n        ...getNodeWithInvertedYCoord(topLeftCorner),\n        width: this.halfSize.x * 2,\n        height: this.halfSize.y * 2,\n      },\n      data: base64Data,\n      selected: this.getInitiallySelected(),\n    };\n  }\n\n  static fromKetNode(ketFileNode: KetFileImageNode): Image {\n    const { width, height, ...point } = getNodeWithInvertedYCoord(\n      ketFileNode.boundingBox,\n    );\n    const halfSize = new Vec2(width / 2, height / 2);\n    const topLeftCorner = new Vec2(point);\n    const center = topLeftCorner.add(halfSize);\n    const imageSrc = `data:${ketFileNode.format};base64,${ketFileNode.data}`;\n\n    // Should be validated already\n    const image = new Image(imageSrc, center, halfSize);\n    image.setInitiallySelected(ketFileNode.selected);\n    return image;\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nexport interface HighlightAttributes {\n  atoms: Array<number>;\n  bonds: Array<number>;\n  rgroupAttachmentPoints: Array<number>;\n  color: string;\n}\n\nexport class Highlight {\n  atoms: Array<number>;\n  bonds: Array<number>;\n  rgroupAttachmentPoints: Array<number>;\n  color: string;\n\n  constructor(attributes: HighlightAttributes) {\n    const { atoms, bonds, rgroupAttachmentPoints, color } = attributes;\n    this.color = color;\n    this.atoms = atoms;\n    this.bonds = bonds;\n    this.rgroupAttachmentPoints = rgroupAttachmentPoints;\n  }\n}\n","import assert from 'assert';\nimport { RGroupAttachmentPoint } from './rgroupAttachmentPoint';\n\n/**\n * This is data model for Sgrou attachment point.\n * each of the property is according to the specification of CT files for \"SAP\" instruction.\n * Implemented under requirements: https://github.com/epam/ketcher/issues/2467\n */\nexport class SGroupAttachmentPoint {\n  /**\n   * This is the index of the atom in the S-group that serves as the attachment point.\n   */\n  public readonly atomId: number;\n  /**\n   * This is the index of the atom that is being replaced or removed at the attachment point\n   * when the S-group is connected to another structure.\n   * If no atom is being replaced, this value should be set to zero.\n   *\n   * NOTE: The logic is not supported in the current implementation of Ketcher.\n   * Only reading from file and saving to file.\n   */\n  public readonly leaveAtomId: number | undefined;\n  /**\n   * 2 character attachment identifier (for example, H or T for head/tail).\n   * No validation of any kind is performed, and ‘ ’ is allowed.\n   * ISIS/Desktop uses the first character as the ID of the leaving group\n   * to attach if the bond between ooo and iii is deleted, and uses the second character\n   * to indicate the sequence polarity: l for left, r for right, and x for none (a crosslink).\n   *\n   * NOTE: The logic is not supported in the current implementation of Ketcher.\n   * Only reading from file and saving to file.\n   */\n  public readonly attachmentId: string | undefined;\n\n  // Field attachmentPointNumber is used for superatom attachment points\n  // which are used for connection between molecule and monomer.\n  public readonly attachmentPointNumber?: number;\n\n  constructor(\n    atomId: number,\n    leaveAtomId: number | undefined,\n    attachmentId: string | undefined,\n    attachmentPointNumber?: number,\n  ) {\n    this.atomId = atomId;\n    this.leaveAtomId = leaveAtomId;\n    this.attachmentId = attachmentId;\n    this.attachmentPointNumber = attachmentPointNumber;\n  }\n\n  clone(atomIdMap: Map<number, number>): SGroupAttachmentPoint {\n    const newAtomId = atomIdMap.get(this.atomId);\n    assert(newAtomId != null);\n    const newLeaveAtomId = atomIdMap.get(this.leaveAtomId as number);\n    return new SGroupAttachmentPoint(\n      newAtomId,\n      newLeaveAtomId,\n      this.attachmentId,\n      this.attachmentPointNumber,\n    );\n  }\n\n  /**\n   * Trick: used for cloned struct for tooltips, for preview, for templates\n   *\n   * Why?\n   * Currently, tooltips are implemented with removing sgroups (wrong implementation)\n   * That's why we need to mark atoms as sgroup attachment points.\n   *\n   * If we change preview approach to flagged (option for showing sgroups without abbreviation),\n   * then we will be able to remove this hack.\n   */\n  convertToRGroupAttachmentPointForDisplayPurpose(attachedAtomId: number) {\n    return new RGroupAttachmentPoint(attachedAtomId, 'primary');\n  }\n}\n","export enum Axis {\n  x = 'x',\n  y = 'y',\n  z = 'z',\n}\n\nexport type Axises = 'x' | 'y' | 'z';\n","import { BaseMonomer } from 'domain/entities/BaseMonomer';\nimport {\n  getNextMonomerInChain,\n  isValidNucleoside,\n  isValidNucleotide,\n} from 'domain/helpers/monomers';\nimport { Chem } from 'domain/entities/Chem';\nimport { Phosphate } from 'domain/entities/Phosphate';\nimport { RNABase } from 'domain/entities/RNABase';\nimport { Sugar } from 'domain/entities/Sugar';\n\nexport class LinkerSequenceNode {\n  constructor(public monomer: BaseMonomer) {}\n\n  public get SubChainConstructor() {\n    return this.monomer.SubChainConstructor;\n  }\n\n  public get firstMonomerInNode() {\n    return this.monomer;\n  }\n\n  public get lastMonomerInNode() {\n    return this.monomers[this.monomers.length - 1];\n  }\n\n  public get monomers() {\n    const monomers = [this.firstMonomerInNode];\n    const firstMonomer = this.firstMonomerInNode;\n    let nextMonomer = getNextMonomerInChain(this.firstMonomerInNode);\n    while (\n      nextMonomer instanceof Chem ||\n      nextMonomer instanceof Phosphate ||\n      nextMonomer instanceof RNABase ||\n      (nextMonomer instanceof Sugar &&\n        !isValidNucleotide(nextMonomer) &&\n        !isValidNucleoside(nextMonomer))\n    ) {\n      monomers.push(nextMonomer);\n      nextMonomer = getNextMonomerInChain(nextMonomer, firstMonomer);\n    }\n\n    return monomers;\n  }\n\n  public get renderer() {\n    return this.monomer.renderer;\n  }\n\n  public get modified() {\n    return false;\n  }\n}\n","import { ShowHydrogenLabels } from 'application/render';\nimport { ketcherProvider } from 'application/utils';\n\nenum IndigoShowHydrogenLabelsMode {\n  OFF = 'none',\n  HETERO = 'hetero',\n  TERMINAL_HETERO = 'terminal-hetero',\n  ALL = 'all',\n}\n\nexport function getLabelRenderModeForIndigo() {\n  // Terminal does not supported by indigo so TERMINAL_HETERO used\n  // Off removing all labels in indigo so HETERO used\n  const renderModeMapping = {\n    [ShowHydrogenLabels.Off]: IndigoShowHydrogenLabelsMode.HETERO,\n    [ShowHydrogenLabels.Hetero]: IndigoShowHydrogenLabelsMode.HETERO,\n    [ShowHydrogenLabels.Terminal]: IndigoShowHydrogenLabelsMode.TERMINAL_HETERO,\n    [ShowHydrogenLabels.TerminalAndHetero]:\n      IndigoShowHydrogenLabelsMode.TERMINAL_HETERO,\n    [ShowHydrogenLabels.On]: IndigoShowHydrogenLabelsMode.ALL,\n  };\n\n  return (\n    renderModeMapping[\n      ketcherProvider.getKetcher().editor.options().showHydrogenLabels\n    ] || IndigoShowHydrogenLabelsMode.OFF\n  );\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { CoreEditor } from 'application/editor';\nimport {\n  AromatizeData,\n  AromatizeResult,\n  AutomapData,\n  AutomapResult,\n  CalculateCipData,\n  CalculateCipResult,\n  CalculateData,\n  CalculateResult,\n  CheckData,\n  CheckResult,\n  CleanData,\n  CleanResult,\n  ConvertData,\n  ConvertResult,\n  DearomatizeData,\n  DearomatizeResult,\n  ExplicitHydrogensData,\n  ExplicitHydrogensResult,\n  GenerateImageOptions,\n  InfoResult,\n  LayoutData,\n  LayoutResult,\n  OutputFormatType,\n  RecognizeResult,\n  StructService,\n  StructServiceOptions,\n} from 'domain/services';\nimport { KetcherLogger } from 'utilities';\nimport { getLabelRenderModeForIndigo } from 'infrastructure/services/helpers';\nimport { ketcherProvider } from 'application/utils';\n\nfunction pollDeferred(process, complete, timeGap, startTimeGap) {\n  return new Promise((resolve, reject) => {\n    function iterate() {\n      process().then(\n        (val) => {\n          try {\n            if (complete(val)) resolve(val);\n            else setTimeout(iterate, timeGap);\n          } catch (error) {\n            KetcherLogger.error('remoteStructService.ts::pollDeferred', error);\n            reject(error);\n          }\n        },\n        (err) => reject(err),\n      );\n    }\n    setTimeout(iterate, startTimeGap || 0);\n  });\n}\n\nfunction parametrizeUrl(url, params) {\n  return url.replace(/:(\\w+)/g, (_, val) => params[val]);\n}\n\nfunction request(\n  method: string,\n  url: string,\n  data?: any,\n  headers?: any,\n  responseHandler?: (promise: Promise<any>) => Promise<any>,\n) {\n  let requestUrl = url;\n  if (data && method === 'GET') requestUrl = parametrizeUrl(url, data);\n  let response: any = fetch(requestUrl, {\n    method,\n    headers: Object.assign(\n      {\n        Accept: 'application/json',\n      },\n      headers,\n    ),\n    body: method !== 'GET' ? data : undefined,\n    credentials: 'same-origin',\n  });\n\n  if (responseHandler) {\n    response = responseHandler(response);\n  } else {\n    response = response.then((response) =>\n      response\n        .json()\n        .then((res) => (response.ok ? res : Promise.reject(res.error))),\n    );\n  }\n\n  return response;\n}\n\nfunction indigoCall(\n  method: string,\n  url: string,\n  baseUrl: string,\n  defaultOptions: any,\n  customHeaders?: Record<string, string>,\n) {\n  return function (\n    data,\n    options,\n    responseHandler?: (promise: Promise<any>) => Promise<any>,\n  ) {\n    const body = Object.assign({}, data);\n    body.options = Object.assign(body.options || {}, defaultOptions, options);\n    return request(\n      method,\n      baseUrl + url,\n      JSON.stringify(body),\n      {\n        'Content-Type': 'application/json',\n        ...customHeaders,\n      },\n      responseHandler,\n    );\n  };\n}\n\nexport function pickStandardServerOptions(options?: StructServiceOptions) {\n  const ketcherInstance = ketcherProvider.getKetcher();\n\n  return {\n    'dearomatize-on-load': options?.['dearomatize-on-load'],\n    'smart-layout': options?.['smart-layout'],\n    'ignore-stereochemistry-errors': options?.['ignore-stereochemistry-errors'],\n    'mass-skip-error-on-pseudoatoms':\n      options?.['mass-skip-error-on-pseudoatoms'],\n    'gross-formula-add-rsites': options?.['gross-formula-add-rsites'],\n    'gross-formula-add-isotopes': options?.['gross-formula-add-isotopes'],\n    'ignore-no-chiral-flag': ketcherInstance.editor.options().ignoreChiralFlag,\n    'aromatize-skip-superatoms': true,\n  };\n}\n\nexport class RemoteStructService implements StructService {\n  private readonly apiPath: string;\n  private readonly defaultOptions: StructServiceOptions;\n  private readonly customHeaders?: Record<string, string>;\n\n  constructor(\n    apiPath: string,\n    defaultOptions: StructServiceOptions,\n    customHeaders?: Record<string, string>,\n  ) {\n    this.apiPath = apiPath;\n    this.defaultOptions = defaultOptions;\n    this.customHeaders = customHeaders;\n  }\n\n  getInChIKey(struct: string): Promise<string> {\n    return indigoCall(\n      'POST',\n      'indigo/convert',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(\n      {\n        struct,\n        output_format: 'chemical/x-inchi',\n      },\n      {},\n    );\n  }\n\n  private getStandardServerOptions(options?: StructServiceOptions) {\n    if (!options) {\n      return this.defaultOptions;\n    }\n\n    return pickStandardServerOptions(options);\n  }\n\n  async info(): Promise<InfoResult> {\n    let indigoVersion: string;\n    let imagoVersions: Array<string>;\n    let isAvailable = false;\n\n    try {\n      const response = await request('GET', this.apiPath + 'info');\n      indigoVersion = response.indigo_version;\n      imagoVersions = response.imago_versions;\n      isAvailable = true;\n    } catch (e) {\n      KetcherLogger.error(\n        'remoteStructService.ts::RemoteStructService::info',\n        e,\n      );\n      indigoVersion = '';\n      imagoVersions = [];\n      isAvailable = false;\n    }\n\n    return {\n      indigoVersion,\n      imagoVersions,\n      isAvailable,\n    };\n  }\n\n  convert(\n    data: ConvertData,\n    options?: StructServiceOptions,\n  ): Promise<ConvertResult> {\n    const monomerLibrary = JSON.stringify(\n      CoreEditor.provideEditorInstance()?.monomersLibraryParsedJson,\n    );\n    const expandedOptions = {\n      monomerLibrary,\n      ...this.getStandardServerOptions(options),\n      'bond-length-unit': options?.['bond-length-unit'],\n      'bond-length': options?.['bond-length'],\n      'reaction-component-margin-size-unit':\n        options?.['reaction-component-margin-size-unit'],\n      'reaction-component-margin-size':\n        options?.['reaction-component-margin-size'],\n      'image-resolution': options?.['image-resolution'],\n    };\n\n    return indigoCall(\n      'POST',\n      'indigo/convert',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(data, expandedOptions);\n  }\n\n  layout(\n    data: LayoutData,\n    options?: StructServiceOptions,\n  ): Promise<LayoutResult> {\n    const expandedOptions = {\n      ...this.getStandardServerOptions(options),\n\n      'render-label-mode': getLabelRenderModeForIndigo(),\n      'render-font-size': options?.['render-font-size'],\n      'render-font-size-unit': options?.['render-font-size-unit'],\n      'render-font-size-sub': options?.['render-font-size-sub'],\n      'render-font-size-sub-unit': options?.['render-font-size-sub-unit'],\n      'output-content-type': 'application/json',\n      'bond-length-unit': options?.['bond-length-unit'],\n      'bond-length': options?.['bond-length'],\n      'reaction-component-margin-size-unit':\n        options?.['reaction-component-margin-size-unit'],\n      'reaction-component-margin-size':\n        options?.['reaction-component-margin-size'],\n      'image-resolution': options?.['image-resolution'],\n    };\n\n    return indigoCall(\n      'POST',\n      'indigo/layout',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(data, expandedOptions);\n  }\n\n  clean(data: CleanData, options?: StructServiceOptions): Promise<CleanResult> {\n    return indigoCall(\n      'POST',\n      'indigo/clean',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(data, this.getStandardServerOptions(options));\n  }\n\n  aromatize(\n    data: AromatizeData,\n    options?: StructServiceOptions,\n  ): Promise<AromatizeResult> {\n    return indigoCall(\n      'POST',\n      'indigo/aromatize',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(data, this.getStandardServerOptions(options));\n  }\n\n  dearomatize(\n    data: DearomatizeData,\n    options?: StructServiceOptions,\n  ): Promise<DearomatizeResult> {\n    return indigoCall(\n      'POST',\n      'indigo/dearomatize',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(data, this.getStandardServerOptions(options));\n  }\n\n  calculateCip(\n    data: CalculateCipData,\n    options?: StructServiceOptions,\n  ): Promise<CalculateCipResult> {\n    return indigoCall(\n      'POST',\n      'indigo/calculate_cip',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(data, this.getStandardServerOptions(options));\n  }\n\n  automap(\n    data: AutomapData,\n    options?: StructServiceOptions,\n  ): Promise<AutomapResult> {\n    return indigoCall(\n      'POST',\n      'indigo/automap',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(data, this.getStandardServerOptions(options));\n  }\n\n  check(data: CheckData, options?: StructServiceOptions): Promise<CheckResult> {\n    return indigoCall(\n      'POST',\n      'indigo/check',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(data, this.getStandardServerOptions(options));\n  }\n\n  calculate(\n    data: CalculateData,\n    options?: StructServiceOptions,\n  ): Promise<CalculateResult> {\n    return indigoCall(\n      'POST',\n      'indigo/calculate',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(data, this.getStandardServerOptions(options));\n  }\n\n  recognize(blob: Blob, version: string): Promise<RecognizeResult> {\n    const parVersion = version ? `?version=${version}` : '';\n    const req = request(\n      'POST',\n      this.apiPath + `imago/uploads${parVersion}`,\n      blob,\n      {\n        'Content-Type': blob.type || 'application/octet-stream',\n      },\n    );\n    const status = request.bind(\n      null,\n      'GET',\n      this.apiPath + 'imago/uploads/:id',\n    );\n    return req\n      .then((data) =>\n        pollDeferred(\n          status.bind(null, { id: data.upload_id }),\n          (response: any) => {\n            if (response.state === 'FAILURE') throw response;\n            return response.state === 'SUCCESS';\n          },\n          500,\n          300,\n        ),\n      )\n      .then((response: any) => ({ struct: response.metadata.mol_str }));\n  }\n\n  generateImageAsBase64(\n    data: string,\n    options?: GenerateImageOptions,\n  ): Promise<string> {\n    const outputFormat: OutputFormatType = options?.outputFormat || 'png';\n\n    return indigoCall(\n      'POST',\n      'indigo/render',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(\n      { struct: data },\n      {\n        ...this.getStandardServerOptions(options),\n        'render-coloring': options?.['render-coloring'],\n        'render-font-size': options?.['render-font-size'],\n        'render-font-size-unit': options?.['render-font-size-unit'],\n        'render-font-size-sub': options?.['render-font-size-sub'],\n        'render-font-size-sub-unit': options?.['render-font-size-sub-unit'],\n        'image-resolution': options?.['image-resolution'],\n        'bond-length-unit': options?.['bond-length-unit'],\n        'bond-length': options?.['bond-length'],\n        'render-bond-thickness': options?.['render-bond-thickness'],\n        'render-bond-thickness-unit': options?.['render-bond-thickness-unit'],\n        'render-bond-spacing': options?.['render-bond-spacing'],\n        'render-stereo-bond-width': options?.['render-stereo-bond-width'],\n        'render-stereo-bond-width-unit':\n          options?.['render-stereo-bond-width-unit'],\n        'render-hash-spacing': options?.['render-hash-spacing'],\n        'render-hash-spacing-unit': options?.['render-hash-spacing-unit'],\n        'render-output-sheet-width': options?.['render-output-sheet-width'],\n        'render-output-sheet-height': options?.['render-output-sheet-height'],\n        'render-output-format': outputFormat,\n        'render-label-mode': getLabelRenderModeForIndigo(),\n      },\n      (response) => response.then((resp) => resp.text()),\n    );\n  }\n\n  toggleExplicitHydrogens(\n    data: ExplicitHydrogensData,\n    options?: StructServiceOptions,\n  ): Promise<ExplicitHydrogensResult> {\n    return indigoCall(\n      'POST',\n      'indigo/convert_explicit_hydrogens',\n      this.apiPath,\n      this.defaultOptions,\n      this.customHeaders,\n    )(data, this.getStandardServerOptions(options));\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  ServiceMode,\n  StructService,\n  StructServiceOptions,\n  StructServiceProvider,\n} from 'domain/services';\n\nimport { RemoteStructService } from './remoteStructService';\n\nexport class RemoteStructServiceProvider implements StructServiceProvider {\n  private readonly apiPath: string;\n  mode: ServiceMode = 'remote';\n  customHeaders?: Record<string, string>;\n\n  constructor(apiPath: string, customHeaders?: Record<string, string>) {\n    let currentApiPath = apiPath;\n    this.customHeaders = customHeaders;\n    const params = new URLSearchParams(document.location.search);\n    if (params.has('api_path')) {\n      currentApiPath = params.get('api_path')!;\n    }\n    this.apiPath =\n      !currentApiPath || /\\/$/.test(currentApiPath)\n        ? currentApiPath\n        : currentApiPath + '/';\n  }\n\n  createStructService(options: StructServiceOptions): StructService {\n    return new RemoteStructService(this.apiPath, options, this.customHeaders);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  AutomapMode,\n  CalculateProps,\n  CalculateResult,\n  CheckResult,\n  CheckTypes,\n  ChemicalMimeType,\n  ConvertResult,\n  InfoResult,\n  OutputFormatType,\n  StructService,\n} from 'domain/services';\nimport { StructOrString } from 'application/indigo.types';\nimport { KetSerializer } from 'domain/serializers';\nimport { Struct } from 'domain/entities';\nimport { defaultBondThickness } from './editor';\n\nconst defaultTypes: Array<CheckTypes> = [\n  'radicals',\n  'pseudoatoms',\n  'stereo',\n  'query',\n  'overlapping_atoms',\n  'overlapping_bonds',\n  'rgroups',\n  'chiral',\n  '3d',\n];\nconst defaultCalcProps: Array<CalculateProps> = [\n  'molecular-weight',\n  'most-abundant-mass',\n  'monoisotopic-mass',\n  'gross',\n  'mass-composition',\n];\n\ntype ConvertOptions = {\n  outputFormat?: ChemicalMimeType;\n  inputFormat?: ChemicalMimeType;\n};\ntype AutomapOptions = {\n  mode?: AutomapMode;\n};\ntype CheckOptions = {\n  types?: Array<CheckTypes>;\n};\ntype CalculateOptions = {\n  properties?: Array<CalculateProps>;\n};\ntype RecognizeOptions = {\n  version?: string;\n};\ntype GenerateImageOptions = {\n  outputFormat?: OutputFormatType;\n  backgroundColor?: string;\n  bondThickness?: number;\n};\n\nfunction convertStructToString(\n  struct: StructOrString,\n  serializer: KetSerializer,\n): string {\n  if (typeof struct !== 'string') {\n    const aidMap = new Map();\n    const result = struct.clone(null, null, false, aidMap);\n\n    return serializer.serialize(result);\n  }\n\n  return struct;\n}\n\nexport class Indigo {\n  #structService: StructService;\n  #ketSerializer: KetSerializer;\n\n  constructor(structService) {\n    this.#structService = structService;\n    this.#ketSerializer = new KetSerializer();\n  }\n\n  info(): Promise<InfoResult> {\n    return this.#structService.info();\n  }\n\n  convert(\n    struct: StructOrString,\n    options?: ConvertOptions,\n  ): Promise<ConvertResult> {\n    const outputFormat = options?.outputFormat || ChemicalMimeType.KET;\n    const inputFormat = options?.inputFormat;\n\n    return this.#structService.convert({\n      struct: convertStructToString(struct, this.#ketSerializer),\n      output_format: outputFormat,\n      input_format: inputFormat,\n    });\n  }\n\n  layout(struct: StructOrString, options): Promise<Struct> {\n    return this.#structService\n      .layout(\n        {\n          struct: convertStructToString(struct, this.#ketSerializer),\n          output_format: ChemicalMimeType.KET,\n        },\n        options,\n      )\n      .then((data) => this.#ketSerializer.deserialize(data.struct));\n  }\n\n  clean(struct: StructOrString): Promise<Struct> {\n    return this.#structService\n      .clean({\n        struct: convertStructToString(struct, this.#ketSerializer),\n        output_format: ChemicalMimeType.KET,\n      })\n      .then((data) => this.#ketSerializer.deserialize(data.struct));\n  }\n\n  aromatize(struct: StructOrString): Promise<Struct> {\n    return this.#structService\n      .aromatize({\n        struct: convertStructToString(struct, this.#ketSerializer),\n        output_format: ChemicalMimeType.KET,\n      })\n      .then((data) => this.#ketSerializer.deserialize(data.struct));\n  }\n\n  dearomatize(struct: StructOrString): Promise<Struct> {\n    return this.#structService\n      .dearomatize({\n        struct: convertStructToString(struct, this.#ketSerializer),\n        output_format: ChemicalMimeType.KET,\n      })\n      .then((data) => this.#ketSerializer.deserialize(data.struct));\n  }\n\n  calculateCip(struct: StructOrString): Promise<Struct> {\n    return this.#structService\n      .calculateCip({\n        struct: convertStructToString(struct, this.#ketSerializer),\n        output_format: ChemicalMimeType.KET,\n      })\n      .then((data) => this.#ketSerializer.deserialize(data.struct));\n  }\n\n  automap(struct: StructOrString, options?: AutomapOptions): Promise<Struct> {\n    const mode = options?.mode || 'discard';\n\n    return this.#structService\n      .automap({\n        struct: convertStructToString(struct, this.#ketSerializer),\n        output_format: ChemicalMimeType.KET,\n        mode,\n      })\n      .then((data) => this.#ketSerializer.deserialize(data.struct));\n  }\n\n  check(struct: StructOrString, options?: CheckOptions): Promise<CheckResult> {\n    const types = options?.types || defaultTypes;\n\n    return this.#structService.check({\n      struct: convertStructToString(struct, this.#ketSerializer),\n      types,\n    });\n  }\n\n  calculate(\n    struct: StructOrString,\n    options?: CalculateOptions,\n  ): Promise<CalculateResult> {\n    const properties = options?.properties || defaultCalcProps;\n\n    return this.#structService.calculate({\n      struct: convertStructToString(struct, this.#ketSerializer),\n      properties,\n    });\n  }\n\n  recognize(image: Blob, options?: RecognizeOptions): Promise<Struct> {\n    const version = options?.version || '';\n\n    return this.#structService\n      .recognize(image, version)\n      .then((data) => this.#ketSerializer.deserialize(data.struct));\n  }\n\n  generateImageAsBase64(\n    struct: StructOrString,\n    options?: GenerateImageOptions,\n  ): Promise<string> {\n    const outputFormat = options?.outputFormat || 'png';\n    const backgroundColor = options?.backgroundColor || '';\n    const bondThickness = options?.bondThickness || defaultBondThickness;\n    return this.#structService.generateImageAsBase64(\n      convertStructToString(struct, this.#ketSerializer),\n      {\n        outputFormat,\n        backgroundColor,\n        bondThickness,\n      },\n    );\n  }\n\n  toggleExplicitHydrogens(struct: StructOrString): Promise<Struct> {\n    return this.#structService\n      .toggleExplicitHydrogens({\n        struct: convertStructToString(struct, this.#ketSerializer),\n        output_format: ChemicalMimeType.KET,\n      })\n      .then((data) => this.#ketSerializer.deserialize(data.struct));\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","// Types for 'setMode'\nexport enum ModeTypes {\n  flex = 'flex-layout-mode',\n  snake = 'snake-layout-mode',\n  sequence = 'sequence-layout-mode',\n}\nexport type SupportedModes = keyof typeof ModeTypes;\n\n// Types for 'exportImage'\nexport enum BlobTypes {\n  svg = 'image/svg+xml',\n}\nexport type SupportedImageFormats = keyof typeof BlobTypes;\nexport type ExportImageParams = {\n  margin?: number;\n};\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport { saveAs } from 'file-saver';\nimport { FormatterFactory, SupportedFormat } from './formatters';\nimport {\n  GenerateImageOptions,\n  StructService,\n  CalculateData,\n  type CalculateResult,\n} from 'domain/services';\n\nimport { CoreEditor, Editor } from './editor';\nimport { Indigo } from 'application/indigo';\nimport { KetSerializer, MolfileFormat } from 'domain/serializers';\nimport { SGroup, Struct } from 'domain/entities';\nimport assert from 'assert';\nimport { EventEmitter } from 'events';\nimport {\n  LogSettings,\n  LogLevel,\n  runAsyncAction,\n  SettingsManager,\n  getSvgFromDrawnStructures,\n} from 'utilities';\nimport {\n  deleteAllEntitiesOnCanvas,\n  getStructure,\n  parseAndAddMacromoleculesOnCanvas,\n  prepareStructToRender,\n} from './utils';\nimport { EditorSelection, EditorType } from './editor/editor.types';\nimport {\n  BlobTypes,\n  ExportImageParams,\n  ModeTypes,\n  SupportedImageFormats,\n  SupportedModes,\n} from 'application/ketcher.types';\n\nconst allowedApiSettings = {\n  'general.dearomatize-on-load': 'dearomatize-on-load',\n  ignoreChiralFlag: 'ignoreChiralFlag',\n  disableQueryElements: 'disableQueryElements',\n  bondThickness: 'bondThickness',\n};\n\nexport class Ketcher {\n  logging: LogSettings;\n  structService: StructService;\n  #formatterFactory: FormatterFactory;\n  #editor: Editor;\n  _indigo: Indigo;\n  #eventBus: EventEmitter;\n\n  get editor(): Editor {\n    return this.#editor;\n  }\n\n  get eventBus(): EventEmitter {\n    return this.#eventBus;\n  }\n\n  constructor(\n    editor: Editor,\n    structService: StructService,\n    formatterFactory: FormatterFactory,\n  ) {\n    assert(editor != null);\n    assert(structService != null);\n    assert(formatterFactory != null);\n\n    this.#editor = editor;\n    this.structService = structService;\n    this.#formatterFactory = formatterFactory;\n    this._indigo = new Indigo(this.structService);\n    this.#eventBus = new EventEmitter();\n    this.logging = {\n      enabled: false,\n      level: LogLevel.ERROR,\n      showTrace: false,\n    };\n  }\n\n  get formatterFactory() {\n    return this.#formatterFactory;\n  }\n\n  get indigo() {\n    return this._indigo;\n  }\n\n  // TEMP.: getting only dearomatize-on-load setting\n  get settings() {\n    const options = this.#editor.options();\n    const result = Object.entries(allowedApiSettings).reduce(\n      (acc, [apiSetting, clientSetting]) => {\n        if (clientSetting in options) {\n          return { ...acc, [apiSetting]: clientSetting };\n        }\n        return acc;\n      },\n      {},\n    );\n\n    if (!Object.keys(result).length) {\n      throw new Error('Allowed options are not provided');\n    }\n\n    return result;\n  }\n\n  // TODO: create options type\n  setSettings(settings: Record<string, string>) {\n    // TODO: need to expand this and refactor this method\n    if (!settings) {\n      throw new Error('Please provide settings');\n    }\n    const options = {};\n    for (const [apiSetting, clientSetting] of Object.entries(\n      allowedApiSettings,\n    )) {\n      options[clientSetting] = settings[apiSetting];\n    }\n\n    if (Object.hasOwn(settings, 'disableCustomQuery')) {\n      SettingsManager.disableCustomQuery = !!settings.disableCustomQuery;\n    }\n\n    return this.#editor.setOptions(JSON.stringify(options));\n  }\n\n  getSmiles(isExtended = false): Promise<string> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('SMILES format is not available in macro mode');\n    }\n    const format = isExtended\n      ? SupportedFormat.smilesExt\n      : SupportedFormat.smiles;\n    return getStructure(format, this.#formatterFactory, this.editor.struct());\n  }\n\n  async getMolfile(molfileFormat?: MolfileFormat): Promise<string> {\n    if (this.containsReaction()) {\n      throw Error(\n        'The structure cannot be saved as *.MOL due to reaction arrows.',\n      );\n    }\n\n    const formatPassed =\n      molfileFormat === 'v3000'\n        ? SupportedFormat.molV3000\n        : SupportedFormat.mol;\n    const format = molfileFormat ? formatPassed : SupportedFormat.molAuto;\n\n    const molfile = await getStructure(\n      format,\n      this.#formatterFactory,\n      this.#editor.struct(),\n      CoreEditor.provideEditorInstance()?.drawingEntitiesManager,\n    );\n\n    return molfile;\n  }\n\n  getIdt(): Promise<string> {\n    return getStructure(\n      SupportedFormat.idt,\n      this.#formatterFactory,\n      this.#editor.struct(),\n      CoreEditor.provideEditorInstance()?.drawingEntitiesManager,\n    );\n  }\n\n  async getRxn(molfileFormat: MolfileFormat = 'v2000'): Promise<string> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('RXN format is not available in macro mode');\n    }\n    if (!this.containsReaction()) {\n      throw Error(\n        'The structure cannot be saved as *.RXN: there is no reaction arrows.',\n      );\n    }\n    const format =\n      molfileFormat === 'v3000'\n        ? SupportedFormat.rxnV3000\n        : SupportedFormat.rxn;\n    const rxnfile = await getStructure(\n      format,\n      this.#formatterFactory,\n      this.#editor.struct(),\n    );\n\n    return rxnfile;\n  }\n\n  getKet(): Promise<string> {\n    return getStructure(\n      SupportedFormat.ket,\n      this.#formatterFactory,\n      (CoreEditor.provideEditorInstance()?._type ??\n        EditorType.Micromolecules) === EditorType.Micromolecules\n        ? this.#editor.struct()\n        : CoreEditor.provideEditorInstance()?.drawingEntitiesManager.micromoleculesHiddenEntities?.clone(),\n      (CoreEditor.provideEditorInstance()?._type ??\n        EditorType.Micromolecules) === EditorType.Micromolecules\n        ? undefined\n        : CoreEditor.provideEditorInstance()?.drawingEntitiesManager,\n      this.#editor.selection() as EditorSelection,\n    );\n  }\n\n  getFasta(): Promise<string> {\n    return getStructure(\n      SupportedFormat.fasta,\n      this.#formatterFactory,\n      this.#editor.struct(),\n      CoreEditor.provideEditorInstance()?.drawingEntitiesManager,\n    );\n  }\n\n  getSequence(): Promise<string> {\n    return getStructure(\n      SupportedFormat.sequence,\n      this.#formatterFactory,\n      this.#editor.struct(),\n      CoreEditor.provideEditorInstance()?.drawingEntitiesManager,\n    );\n  }\n\n  getSmarts(): Promise<string> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('SMARTS format is not available in macro mode');\n    }\n    return getStructure(\n      SupportedFormat.smarts,\n      this.#formatterFactory,\n      this.#editor.struct(),\n    );\n  }\n\n  getCml(): Promise<string> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('CML format is not available in macro mode');\n    }\n    return getStructure(\n      SupportedFormat.cml,\n      this.#formatterFactory,\n      this.#editor.struct(),\n    );\n  }\n\n  getSdf(molfileFormat: MolfileFormat = 'v2000'): Promise<string> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('SDF format is not available in macro mode');\n    }\n    const format =\n      molfileFormat === 'v2000'\n        ? SupportedFormat.sdf\n        : SupportedFormat.sdfV3000;\n    return getStructure(format, this.#formatterFactory, this.#editor.struct());\n  }\n\n  getRdf(molfileFormat: MolfileFormat = 'v2000'): Promise<string> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('RDF format is not available in macro mode');\n    }\n    const format =\n      molfileFormat === 'v2000'\n        ? SupportedFormat.rdf\n        : SupportedFormat.rdfV3000;\n    return getStructure(format, this.#formatterFactory, this.#editor.struct());\n  }\n\n  getCDXml(): Promise<string> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('CDXML format is not available in macro mode');\n    }\n    return getStructure(\n      SupportedFormat.cdxml,\n      this.#formatterFactory,\n      this.#editor.struct(),\n    );\n  }\n\n  getCDX(): Promise<string> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('CDX format is not available in macro mode');\n    }\n    return getStructure(\n      SupportedFormat.cdx,\n      this.#formatterFactory,\n      this.#editor.struct(),\n    );\n  }\n\n  getInchi(withAuxInfo = false): Promise<string> {\n    return getStructure(\n      withAuxInfo ? SupportedFormat.inChIAuxInfo : SupportedFormat.inChI,\n      this.#formatterFactory,\n      this.#editor.struct(),\n    );\n  }\n\n  async getInChIKey(): Promise<string> {\n    const struct: string = await getStructure(\n      SupportedFormat.ket,\n      this.#formatterFactory,\n      this.#editor.struct(),\n    );\n\n    return this.structService.getInChIKey(struct);\n  }\n\n  containsReaction(): boolean {\n    const editor = CoreEditor.provideEditorInstance();\n    return (\n      this.editor.struct().hasRxnArrow() ||\n      editor?.drawingEntitiesManager?.micromoleculesHiddenEntities.hasRxnArrow()\n    );\n  }\n\n  isQueryStructureSelected(): boolean {\n    const structure = this.editor.struct();\n    const selection = this.editor.selection();\n\n    if (!selection) {\n      return false;\n    }\n\n    let hasQueryAtoms = false;\n    if (selection.atoms) {\n      hasQueryAtoms = selection.atoms.some((atomId) => {\n        const atom = structure.atoms.get(atomId);\n        assert(atom);\n        const sGroupIds = Array.from(atom.sgs.values());\n        const isQueryComponentSGroup = sGroupIds.some((sGroupId) => {\n          const sGroup = structure.sgroups.get(sGroupId);\n          assert(sGroup);\n          return SGroup.isQuerySGroup(sGroup);\n        });\n        return atom.isQuery() || isQueryComponentSGroup;\n      });\n    }\n\n    let hasQueryBonds = false;\n    if (selection.bonds) {\n      hasQueryBonds = selection.bonds.some((bondId) => {\n        const bond = structure.bonds.get(bondId);\n        assert(bond);\n        return bond.isQuery();\n      });\n    }\n    return hasQueryAtoms || hasQueryBonds;\n  }\n\n  async setMolecule(structStr: string): Promise<void | undefined> {\n    if (CoreEditor.provideEditorInstance()?.isSequenceEditInRNABuilderMode)\n      return;\n\n    runAsyncAction<void>(async () => {\n      assert(typeof structStr === 'string');\n\n      if (window.isPolymerEditorTurnedOn) {\n        deleteAllEntitiesOnCanvas();\n        await parseAndAddMacromoleculesOnCanvas(structStr, this.structService);\n      } else {\n        const struct: Struct = await prepareStructToRender(\n          structStr,\n          this.structService,\n          this,\n        );\n\n        struct.rescale();\n        this.#editor.struct(struct);\n        this.#editor.zoomAccordingContent(struct);\n        this.#editor.centerStruct();\n      }\n    }, this.eventBus);\n  }\n\n  async setHelm(helmStr: string): Promise<void | undefined> {\n    runAsyncAction<void>(async () => {\n      assert(typeof helmStr === 'string');\n      const struct: Struct = await prepareStructToRender(\n        helmStr,\n        this.structService,\n        this,\n      );\n      struct.rescale();\n      this.#editor.struct(struct);\n      this.#editor.zoomAccordingContent(struct);\n      this.#editor.centerStruct();\n    }, this.eventBus);\n  }\n\n  async addFragment(structStr: string): Promise<void | undefined> {\n    if (CoreEditor.provideEditorInstance()?.isSequenceEditInRNABuilderMode)\n      return;\n\n    runAsyncAction<void>(async () => {\n      assert(typeof structStr === 'string');\n\n      if (window.isPolymerEditorTurnedOn) {\n        await parseAndAddMacromoleculesOnCanvas(structStr, this.structService);\n      } else {\n        const struct: Struct = await prepareStructToRender(\n          structStr,\n          this.structService,\n          this,\n        );\n\n        struct.rescale();\n        this.#editor.structToAddFragment(struct);\n      }\n    }, this.eventBus);\n  }\n\n  async layout(): Promise<void> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('Layout is not available in macro mode');\n    }\n\n    runAsyncAction<void>(async () => {\n      const struct = await this._indigo.layout(\n        this.#editor.struct(),\n        this.editor.serverSettings,\n      );\n      const ketSerializer = new KetSerializer();\n      this.setMolecule(ketSerializer.serialize(struct));\n    }, this.eventBus);\n  }\n\n  async calculate(options?: CalculateData): Promise<CalculateResult> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('Calculate is not available in macro mode');\n    }\n    return await this._indigo.calculate(this.#editor.struct(), options);\n  }\n\n  /**\n   * @param {number} value - in a range [ZoomTool.instance.MINZOOMSCALE, ZoomTool.instance.MAXZOOMSCALE]\n   */\n  setZoom(value: number) {\n    const editor = CoreEditor.provideEditorInstance();\n    if (editor && value) editor.zoomTool.zoomTo(value);\n  }\n\n  setMode(mode: SupportedModes) {\n    const editor = CoreEditor.provideEditorInstance();\n    if (editor && mode) editor.events.selectMode.dispatch(ModeTypes[mode]);\n  }\n\n  exportImage(format: SupportedImageFormats, params?: ExportImageParams) {\n    const editor = CoreEditor.provideEditorInstance();\n    const fileName = 'ketcher';\n    let blobPart;\n\n    if (format === 'svg' && editor?.canvas) {\n      blobPart = getSvgFromDrawnStructures(\n        editor.canvas,\n        'file',\n        params?.margin,\n      );\n    }\n    if (!blobPart) {\n      throw new Error('Cannot export image');\n    }\n\n    const blob = new Blob([blobPart], {\n      type: BlobTypes[format],\n    });\n    saveAs(blob, `${fileName}.${format}`);\n  }\n\n  recognize(image: Blob, version?: string): Promise<Struct> {\n    if (window.isPolymerEditorTurnedOn) {\n      throw new Error('Recognize is not available in macro mode');\n    }\n    return this._indigo.recognize(image, { version });\n  }\n\n  async generateImage(\n    data: string,\n    options: GenerateImageOptions = {\n      outputFormat: 'png',\n    },\n  ): Promise<Blob> {\n    let meta = '';\n\n    switch (options.outputFormat) {\n      case 'svg':\n        meta = 'image/svg+xml';\n        break;\n\n      case 'png':\n      default:\n        meta = 'image/png';\n        options.outputFormat = 'png';\n    }\n    const serverSettings = this.editor.serverSettings;\n\n    const base64 = await this.structService.generateImageAsBase64(data, {\n      ...serverSettings,\n      ...options,\n    });\n    const byteCharacters = atob(base64);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    const blob = new Blob([byteArray], { type: meta });\n    return blob;\n  }\n\n  public reinitializeIndigo(structService: StructService) {\n    this.structService = structService;\n    this._indigo = new Indigo(structService);\n  }\n\n  public sendCustomAction(name: string) {\n    this.eventBus.emit('CUSTOM_BUTTON_PRESSED', name);\n  }\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  StructService,\n  StructServiceOptions,\n  StructServiceProvider,\n} from 'domain/services';\n\nimport { Editor } from 'application/editor';\nimport { FormatterFactory } from 'application/formatters';\nimport { Ketcher } from './ketcher';\nimport assert from 'assert';\nimport { ketcherProvider } from './utils';\n\nexport const DefaultStructServiceOptions = {\n  'smart-layout': true,\n  'ignore-stereochemistry-errors': true,\n  'mass-skip-error-on-pseudoatoms': false,\n  'gross-formula-add-rsites': true,\n  'aromatize-skip-superatoms': true,\n  'dearomatize-on-load': false,\n  'ignore-no-chiral-flag': false,\n};\n\nexport class KetcherBuilder {\n  #structServiceProvider?: StructServiceProvider;\n\n  withStructServiceProvider(\n    structServiceProvider: StructServiceProvider,\n  ): KetcherBuilder {\n    this.#structServiceProvider = structServiceProvider;\n    return this;\n  }\n\n  build(editor: Editor, serviceOptions?: StructServiceOptions): Ketcher {\n    assert(editor != null);\n    assert(this.#structServiceProvider != null);\n\n    const mergedServiceOptions: StructServiceOptions = {\n      ...DefaultStructServiceOptions,\n      ...serviceOptions,\n    };\n    const structService: StructService =\n      this.#structServiceProvider!.createStructService(mergedServiceOptions);\n    const ketcher = new Ketcher(\n      editor,\n      structService,\n      new FormatterFactory(structService),\n    );\n    ketcher[this.#structServiceProvider.mode] = true;\n\n    ketcherProvider.setKetcherInstance(ketcher);\n    return ketcher;\n  }\n}\n"],"names":["ElementColor","H","He","Li","Be","B","C","N","O","F","Ne","Na","Mg","Al","Si","P","S","Cl","Ar","K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br","Kr","Rb","Sr","Y","Zr","Nb","Mo","Tc","Ru","Rh","Pd","Ag","Cd","In","Sn","Sb","Te","I","Xe","Cs","Ba","La","Ce","Pr","Nd","Pm","Sm","Eu","Gd","Tb","Dy","Ho","Er","Tm","Yb","Lu","Hf","Ta","W","Re","Os","Ir","Pt","Au","Hg","Tl","Pb","Bi","Po","At","Rn","Fr","Ra","Ac","Th","Pa","U","Np","Pu","Am","Cm","Bk","Cf","Es","Fm","Md","No","Lr","Rf","Db","Sg","Bh","Hs","Mt","Ds","Rg","Cn","Nh","Fl","Mc","Lv","Ts","Og","elementsArray","number","label","period","group","title","state","origin","type","mass","leftH","elementsMap","reduce","acc","element","set","Map","Elements","get","key","filter","predicate","getAll","concat","AtomLabel","Generics","itemSets","displayName","items","description","subGroups","getGenericsList","generics","_generics$","Array","isArray","map","item","result","_i","_Object$values","Object","values","length","subGroup","_toConsumableArray","genericsList","IMAGE_KEY","IMAGE_SERIALIZE_KEY","CURSOR_DIAGONAL_NWSE","CURSOR_DIAGONAL_NESW","CURSOR_VERTICAL","CURSOR_HORIZONTAL","imageReferencePositionToCursor","topLeftPosition","topMiddlePosition","topRightPosition","rightMiddlePosition","bottomRightPosition","bottomMiddlePosition","bottomLeftPosition","leftMiddlePosition","MULTITAIL_ARROW_KEY","MULTITAIL_ARROW_TOOL_NAME","MULTITAIL_ARROW_SERIALIZE_KEY","MOVE","CURSOR_RESIZE_VERTICAL","CURSOR_RESIZE_HORIZONTAL","multitailReferencePositionToCursor","topTail","tails","bottomTail","topSpine","bottomSpine","head","multitailArrowReferenceLinesToCursor","spine","AtomList","params","_classCallCheck","notList","ids","_createClass","value","labelList","labels","_iterator","_createForOfIteratorHelper","_step","s","n","done","id","currenElement","push","err","e","f","join","equals","atomList","sort","toString","ifDef","target","defaultValue","undefined","tfx","parsedValue","parseFloat","toFixed","LogLevel","KetcherLogger","_window","_window$ketcher$loggi","_window$ketcher","window","ketcher","Error","logging","newSettings","_Object$entries","entries","_Object$entries$_i","_slicedToArray","settingName","settingValue","settings","log","isMinimumLogLevel","LOG","showTrace","_len","arguments","messages","_key","console","trace","info","INFO","_len2","_key2","warn","WARN","_len3","warnings","_key3","error","ERROR","_len4","errors","_key4","minimumLevel","_this$settings","enabled","level","KetcherAsyncEvents","runAsyncAction","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","action","eventEmitter","res","wrap","_callee$","_context","prev","next","emit","LOADING","sent","SUCCESS","abrupt","t0","FAILURE","stop","_x","_x2","apply","b64toBlob","b64Data","contentType","sliceSize","byteCharacters","atob","byteArrays","offset","slice","byteNumbers","i","charCodeAt","byteArray","Uint8Array","blob","Blob","notifyRequestCompleted","event","Event","dispatchEvent","KETCHER_SAVED_SETTINGS_KEY","KETCHER_SAVED_OPTIONS_KEY","SettingsManager","getSettings","JSON","parse","localStorage","getItem","saveSettings","setItem","stringify","getOptions","optionsFromLocalStorage","bondLength","bondLengthUnit","saveOptions","options","_this$getSettings","selectionTool","_objectSpread","_disableCustomQuery","disableCustomQuery","_this$getOptions","ignoreChiralFlag","mac","navigator","test","platform","normalizeKeyName","name","parts","split","alt","ctrl","shift","meta","mod","normalizeKeyMap","copy","create","keys","forEach","prop","modifiers","altKey","ctrlKey","metaKey","shiftKey","symbolByEvent","KN","keyCode","normalizeKeyEvent","base","isChar","isControlKey","keyNorm","obj","KeyboardEvent","_typeof","setHotKey","actName","hotKeys","initHotKeys","actions","act","shortcut","lookup","baseName","shortcutAliasMap","Escape","Delete","Mod","isMacOs","shortcutStr","shortcutKey","replace","toUpperCase","generateMenuShortcuts","_obj$key","processedShortcut","ChemicalMimeType","isClipboardAPIAvailable","_navigator","_navigator2","clipboard","writeText","read","legacyCopy","clipboardData","data","curFmt","setData","fmt","legacyPaste","cb","formats","getData","d","notifyCopyCut","getStructStringFromClipboardData","_getStructStringFromClipboardData","clipboardItem","structStr","ClipboardItem","safelyGetMimeType","KET","t2","Mol","t1","Rxn","text","_x3","_safelyGetMimeType","_callee2","mimeType","_callee2$","_context2","getType","Vec2","args","x","y","z","Math","sqrt","v","add","add_","get_xy0","sub","scaled","sInitial","isFinite","negated","yComplement","y1","addScaled","normalized","normalize","l","turnLeft","coordStr","max","assert","min","ceil","floor","rotate","angle","sin","cos","rotateSC","rotateAroundOrigin","angleInDegrees","angleInRadians","PI","offsetX","offsetY","rotatedX","rotatedY","Number","isInsidePolygon","points","inside","j","xi","yi","xj","yj","intersect","calculateDistanceToLine","line","dist","a","b","c","per","oxAngle","atan2","diff","v1","v2","sum","dot","cross","lc","lc2","f1","f2","centre","getLinePoint","lineStart","lineEnd","difference","distance","ratio","crossProduct","radiansToDegrees","radians","degrees_to_radians","degrees","oxAngleForVector","findSecondPoint","startPoint","lineLength","lineAngleRadians","deltaX","deltaY","endPoint","_defineProperty","Pile","_Set","_inherits","_callSuper","find","setB","isSuperset","subset","_iterator2","_step2","has","expression","from","union","_iterator3","_step3","intersection","thisSet","unionIntersections","sets","unionized","setsToReturn","prevSets","curSet","isCurSetMerged","newSets","intersec","size","_wrapNativeSuper","Set","INVALID","BaseMicromoleculeEntity","initiallySelected","getInitiallySelected","setInitiallySelected","resetInitiallySelected","invalidate","CIP","Bond","_BaseMicromoleculeEnt","attributes","_attributes$cip","_this","begin","end","xxx","stereo","PATTERN","STEREO","NONE","topology","TOPOLOGY","EITHER","customQuery","reactingCenterStatus","cip","len","sb","sa","isPreview","beginSuperatomAttachmentPointNumber","endSuperatomAttachmentPointNumber","TYPE","ANY","center","isQuery","TYPES","QUERY_BOND_TYPES","SINGLE_OR_DOUBLE","SINGLE_OR_AROMATIC","DOUBLE_OR_AROMATIC","AROMATIC","includes","SINGLE","hasRxnProps","getCenter","struct","p1","atoms","pp","p2","getDir","clone","aidMap","cp","getAttachedSGroups","_struct$atoms$get","_struct$atoms$get2","sGroupsWithBeginAtom","sgs","sGroupsWithEndAtom","isExternalBondBetweenMonomers","isBondFromMacromolecule","sGroup1","getGroupFromAtomId","sGroup2","getAttrHash","bond","attrs","attr","attrlist","getBondNeighbourIds","bondId","bonds","beginBondIds","Atom","getConnectedBondIds","endBondIds","getFusingConditions","bondBegin","bondEnd","_this$PATTERN$TYPE","DOUBLE","isFusingToDoubleBond","isFusingToSingleBond","isFusingDoubleSingleSingle","isFusingSingleSingleDouble","isAllSingle","getBenzeneConnectingBondType","_this$PATTERN$TYPE2","_Bond$getFusingCondit","getCyclopentadieneFusingBondType","_this$PATTERN$TYPE3","_Bond$getFusingCondit2","getCyclopentadieneDoubleBondIndexes","_Bond$getFusingCondit3","attrGetDefault","isBondToHiddenLeavingGroup","beginSuperatomAttachmentPoint","getSuperAtomAttachmentPointByLeavingGroup","endSuperatomAttachmentPoint","isHiddenLeavingGroupAtom","atomId","isBondToExpandedMonomer","sgroups","some","sgroup","isExpanded","MonomerMicromolecule","TRIPLE","DATIVE","HYDROGEN","UP","DOWN","CIS_TRANS","RING","CHAIN","REACTING_CENTER","NOT_CENTER","UNMARKED","CENTER","UNCHANGED","MADE_OR_BROKEN","ORDER_CHANGED","MADE_OR_BROKEN_AND_CHANGED","Box2Abs","p0","extend","lp","rb","include","p","contains","ext","translate","transform","sz","pos","hasZeroArea","fromRelBox","relBox","width","height","b1","b2","segmentIntersection","dc","dd","da","db","_classStaticPrivateMethodGet","_isPointOnSegment","call","segPointA","segPointB","point","minX","maxX","minY","maxY","canvasToModel","microModeScale","modelToCanvas","vector","Scale","isCorrectStereoCenter","beginNeighs","endNeighs","beginAtom","EndAtomNeigh","NaN","aid","_struct$atomGetNeighb","implicitH","atomGetNeighbors","StereoValidator","FunctionalGroupsProvider","functionalGroupsList","getFunctionalGroupsList","setFunctionalGroupsList","list","addToFunctionalGroupsList","getInstance","instance","SaltsAndSolventsProvider","saltsAndSolventsList","getSaltsAndSolventsList","setSaltsAndSolventsList","SgContexts","Fragment","Multifragment","Group","selectionKeys","defaultBondThickness","MonomerGroups","MonomerGroupCodes","MonomerCodeToGroup","R","SUGARS","A","BASES","G","T","X","PHOSPHATES","SGroupBracketParams","w","h","SGroup","bracketBox","bracketDirection","areas","hover","hovering","selected","selectionPlate","patoms","xBonds","neiAtoms","attachmentPoints","mul","connectivity","subscript","expanded","attached","absolute","showUnits","nCharsToDisplay","tagChar","daspPos","fieldType","fieldName","fieldValue","units","query","queryOp","getAttr","setFunctionalGroup","functionalGroup","getAttrs","setAttr","oldValue","checkAttr","updateOffset","isSuperAtom","Boolean","isContracted","calculatePP","topLeftPoint","isAtomContext","context","isBondContent","contentBoxes","contentBB","atom","bba","bbb","descriptorIntersects","sAtom","sAtomPP","getMassCentre","isGroupAttached","getConnectionPointsCount","addAttachmentPoint","attachmentPoint","validateUniqueness","isAttachmentPointAlreadyExist","leaveAtomId","addAttachmentPoints","removeAttachmentPoint","index","indexOf","splice","getAttachmentPoints","connectionAtoms","neighbors","isNotContractible","getAttachmentAtomId","_this$attachmentPoint","getContractedPosition","_this$attachmentPoint2","_this2","representAtom","externalConnectionAtom","isBeginAtomInCurrentSgroup","isEndAtomInCurrentSgroup","isNumber","position","cloneAttachmentPoints","atomIdMap","SUP","getOffset","isSaltOrSolvent","moleculeName","saltsAndSolventsProvider","saltsAndSolvents","_ref2","abbreviation","isAtomInSaltOrSolvent","sgroupsOnCanvas","_this3","onlySaltsOrSolvents","_ref3","atomIdInSaltOrSolvent","isBondInSaltOrSolvent","_this4","_ref4","bondIdInSaltOrSolvent","filterAtoms","newAtoms","removeNegative","_mol","sg","atomMap","field","elem","allAtoms","addAtom","removeAtom","getCrossBonds","mol","parentAtomSet","crossBonds","bid","bracketPos","sGroup","crossBondsPerAtom","remol","render","BORDER_EXT","PADDING_VECTOR","flat","isMonomer","braketBox","getAtom","structBoundingBox","getVBoxObj","editor","attachmentPointsVBox","ctab","getRGroupAttachmentPointsVBoxByAtomIds","getBracketParameters","atomSet","bb","brackets","crossBondsPerAtomValues","bracketWidth","cl","cr","bracketHeight","cl0","cr0","dr","dl","getObjBBox","a0","getAtoms","_atom","getBonds","prepareMulForSaving","inBonds","xAtom1","xAtom2","crossBond","bond1","bond2","tailAtom","_loop","amap","aid2","newBond","newCrossBond","xBond2","sGroupForest","getPathToRoot","reverse","sgid","atomAddToSGroup","isBondInContractedSGroup","sGroups","sGroupOrReSGroup","atomsInSGroup","isDataSGroup","DAT","isQuerySGroup","queryComponent","isSRUSGroup","SRU","isMulSGroup","MUL","MON","MER","COP","CRO","MOD","GRA","COM","MIX","FOR","GEN","contractedSGroup","sgBottomRightPoint","bottomRightPoint","_SGroup","monomer","sgroupContractedPosition","_get","_getPrototypeOf","prototype","monomerMicromolecule","monomerMicromoleculeClone","AttachmentPoints","StereoLabel","fragment","getValueOrDefault","alias","isotope","radical","charge","rglabel","implicitHCount","explicitValence","valence","ringBondCount","substitutionCount","unsaturatedAtom","hCount","queryProperties","property","_attributes$queryProp","aam","invRet","exactChangeFlag","rxnFragmentType","stereoLabel","stereoParity","badConn","defineProperty","_assertThisInitialized","enumerable","getPseudo","isCorrectPseudo","setRGAttachmentPointForDisplayPurpose","FirstSideOnly","fidMap","ret","isAnyAtom","isAnyMetal","isAnyHalogen","isAnyGroup","pureHydrogen","isPlainCarbon","isPseudo","calcValence","connectionCount","groupno","radicalCount","radicalElectrons","hydrogenCount","absCharge","abs","isHeteroAtom","calcValenceMinusHyd","conn","rad","_step$value","isInAromatizedRing","loops","_step2$value","_","loop","halfBondIds","hbs","aromatic","halfBondId","halfBond","halfBonds","getSuperAtomAttachmentPointByAttachmentAtom","isSuperatomLeavingGroupAtom","isSuperatomAttachmentAtom","getAttachmentAtomExternalConnections","attachmentAtomId","leavingGroupAtomid","attachmentPointAtomBonds","attachmentAtomExternalConnection","endAtom","attachmentAtomExternalConnections","isSuperatomWithoutLabel","attachmentPointNumber","RADICAL","SINGLET","DOUPLET","TRIPLET","STEREO_PARITY","ODD","EVEN","aromaticity","ringMembership","ringSize","chirality","FixedPrecisionCoordinates","fixedPrecisionValue","multiply","isFixedPrecision","multiplier","round","MULTIPLIER","divide","delimiter","getFloatingPrecision","fromFloatingPrecision","pow","StereoFlag","calcStereoFlag","stereoAids","filteredStereoAtoms","hasAnotherLabel","stereoFlag","Mixed","_stereoLabel$match","match","Abs","And","Or","_enhancedStereoFlag","WeakMap","_stereoAtoms","stereoAtoms","stereoFlagPosition","properties","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","_classPrivateFieldGet","fr","updateStereoFlag","updateStereoAtom","frId","isAdd","addStereoAtom","deleteStereoAtom","fragmentId","getDefaultStereoFlagPosition","getFragment","getCoordBoundingBox","_sgroup","FunctionalGroup","isFunctionalGroup","provider","functionalGroups","atomsInFunctionalGroup","isNeedCheckForGroups","fg","relatedSGroup","bondsInFunctionalGroup","molecule","isRGroupAttachmentPointInsideFunctionalGroup","rgroupAttachmentPoint","rgroupAttachmentPoints","attachedAtom","findFunctionalGroupByAtom","isFunctionalGroupReturned","relatedSGroupId","findFunctionalGroupByBond","_iterator4","_step4","findFunctionalGroupBySGroup","isAtomInContractedFunctionalGroup","sgroupsFromReStruct","contractedFunctionalGroups","isContractedFunctionalGroup","isBondInContractedFunctionalGroup","_sGroup","isHalfBondInContractedFunctionalGroup","HalfBond","dir","norm","ang","contra","leftSin","leftCos","leftNeighbor","rightSin","rightCos","rightNeighbor","Loop","isConvex","dblBonds","convex","hb","RGroup","atrributes","frags","resth","range","ifthen","fid","findRGroupByFragment","rgroups","frid","_rgid","rgroup","RGroupAttachmentPoint","atomToNewAtom","newAtomId","RxnArrowMode","RxnArrow","currentP","mode","defaultHeight","isElliptical","_attributes$height","arrow","EllipticalArcFilledBow","EllipticalArcFilledTriangle","EllipticalArcOpenHalfAngle","EllipticalArcOpenAngle","RxnPlus","SGroupForest","parent","children","atomSets","getSGroupsBFS","order","queue","getAtomSetRelations","newId","isStrictSuperset","isSubset","parents","childs","findIndex","childId","path","insert","_this$children$get","guess","resetParentLink","parentId","childIndex","remove","_this$children$get2","_this3$children$get","checkOverlapping","sGroupType","searchFunction","common","sid","sgAtoms","SimpleObjectMode","SimpleObject","rectangle","Pool","_Map","nextId","keyOf","changeInitiallySelectedPropertiesForPool","newPool","getStereoAtomsMap","stereoAtomsMap","correctAtomIds","_stereoAtomsMap$get","getStereoParity","newAtomParity","arrayAddIfMissing","array","Struct","isReaction","rxnArrows","rxnPluses","simpleObjects","texts","highlights","_aid","_bid","hasRxnArrow","hasMultitailArrow","multitailArrows","hasRxnPluses","isRxn","isBlank","images","isSingleGroup","bondSet","dropRxnSymbols","simpleObjectsSet","textsSet","rgroupAttachmentPointSet","imagesSet","multitailArrowsSet","bidMap","mergeInto","getScaffold","rg","_fnum","getFragmentIds","_fid","copyNonFragmentObjects","keepAllRGroups","bidMapEntity","fidMask","_frag","rgroupsIds","rgid","keepGroup","newfid","oldfid","sgroupIdMap","sgroupId","oldSgroup","soid","prepareLoopStructure","initHalfBonds","initNeighbors","updateHalfBonds","sortNeighbors","findLoops","calcConn","findBondId","a1","a2","hb1","hb2","bondInitHalfBonds","halfBondUpdate","sgroup1","sgroup2","startCoords","endCoords","coordsDifference","clear","setHbNext","hbid","halfBondSetAngle","left","hbl","atomAddNeighbor","ir","il","atomSortNeighbors","_this5","nei","nei2","nextNei","_this6","atomUpdateHalfBonds","_this7","_this8","sGroupsRecalcCrossBonds","_this9","sGroupDelete","_this10","atomSetPos","rxnPlusSetPos","rxnArrowSetPos","simpleObjectSetPos","textSetPosition","vec","global","getCoordBoundingBoxObj","getBondLengthData","_this11","totalLength","cnt","getAvgBondLength","bld","getAvgClosestAtomDistance","totalDist","minDist","k","checkBondExists","findConnectedComponent","firstaid","_this12","pop","neiId","findConnectedComponents","discardExistingFragments","_this13","addedAtoms","components","component","markFragment","idSet","_this14","frag","markFragments","_this15","comp","_comp","firstAtom","scale","image","rescaleSize","multitailArrow","rescale","avg","loopHasSelfIntersections","hbi","ai","bi","hbj","aj","bj","partitionLoop","subloops","continueFlag","atomToHalfBond","aid1","subloop","halfBondAngle","hbid1","hbid2","hba","hbb","loopIsConvex","_this16","every","loopArr","loopIsInner","_this17","totalAngle","hbida","hbidb","_this18","newLoops","bondsToMark","hbIdNext","hbId","loopId","calcImplicitHydrogen","_this$calcConn","_this$calcConn2","isAromatic","correctConn","hasImplicitH","setImplicitHydrogen","_this19","setStereoLabelsToAtoms","_this20","stereAtomsMap","_this20$atomGetNeighb","stereoProp","_this$atoms$get","_this21","getComponents","_this22","connectedComponents","barriers","arrowPos","reactants","products","defineRxnFragmentTypeForAtomset","atomset","arrowpos","getBondFragment","_this$bonds$get","_this$atoms$get2","bindSGroupsToFunctionalGroups","_this23","getGroupIdFromAtomId","_Array$from","_Array$from$_i","groupId","_this$sgroups","getGroupIdFromBondId","_i2","_Array$from2","_Array$from2$_i","getGroupFromBondId","_this$sgroups2","getGroupsIdsFromBondId","groupsIds","_i3","_Array$from3","_Array$from3$_i","getBondIdByHalfBond","getSelectedVisibleAtoms","selection","_selection$atoms","_this24","isAtomNotInContractedGroup","getRGroupAttachmentPointsByAtomId","_id","isAtomFromMacromolecule","bondOrBondId","isFunctionalGroupFromMacromolecule","functionalGroupId","isTargetFromMacromolecule","disableInitiallySelected","enableInitiallySelected","TextCommand","preparePositions","positions","Text","content","setPos","coords","customizer","clonedValue","cloneDeep","getNodeWithInvertedYCoord","node","cloneDeepWith","setMonomerTemplatePrefix","templateName","setMonomerPrefix","monomerId","setAmbiguousMonomerTemplatePrefix","setAmbiguousMonomerPrefix","getKetRef","entityId","$ref","rotateCoordAxisBy180Degrees","axis","rotatedPosition","switchIntoChemistryCoordSystem","Axis","populateStructWithSelection","populatedStruct","entity","_populatedStruct$enti","selectedEntities","arrowToKet","arrowNode","plusToKet","plusNode","coord","location","headerToKet","header","editorSettings","macroModeScale","provideEditorSettings","canvasSelector","drawnStructuresSelector","notifyRenderComplete","debounce","notifyItemsToMergeInitializationComplete","SCROLL_POSITION","AUTO_SCROLL_OFFSET_X","AUTO_SCROLL_OFFSET_Y","ZoomTool","drawingEntitiesManager","_this$zoom","zoom","translateBy","canvasWrapper","dx","_this$zoom2","dy","resizeObserver","ResizeObserver","drawScrollBars","observe","select","canvas","zoomLevel","zoomTransform","ZoomTransform","initActions","scaleExtent","MINZOOMSCALE","MAXZOOMSCALE","wheelDelta","defaultWheelDelta","preventDefault","on","zoomAction","bind","mouseWheeled","setZoom","getZoomLevel","setZoomTransform","requestAnimationFrame","dispatchZoomEventHandlers","subscribeOnZoomEvent","zoomEventHandler","zoomEventHandlers","initScrollBars","renderScrollBar","scrollBars","horizontal","vertical","scrollBar","hasOffset","offsetStart","offsetEnd","bar","updateScrollBarAttrs","drawScrollBar","_scrollBar$bar","_scrollBar$bar2","append","dragged","drag","_scrollBar$bar5","_this$calculateDynami","calculateDynamicAttr","start","_scrollBar$bar3","maxHeight","HORIZONTAL_DIST_TO_EDGE","WIDTH","_scrollBar$bar4","VERTICAL_DIST_TO_EDGE","RADIUS","COLOR","clamp","MARGIN","maxWidth","MIN_LENGTH","scrollTo","_this$canvasWrapper$n","_this$canvasWrapper$n2","_this$zoom3","stickToBottom","xOffset","yOffset","isOffsetInPercents","canvasWrapperHeight","baseVal","canvasWrapperWidth","translateTo","unzoomValue","scrollBy","_this$zoom4","scrollToVerticalCenter","structCenterY","_this$zoom5","centerPointOfModel","getCurrentCenterPointOfCanvas","scrollToVerticalBottom","_this$zoom6","isShiftKeydown","boxNode","_this$zoom7","_this$zoom8","_this$canvas$node","_this$canvasWrapper$n3","_this$canvasWrapper$n4","_this$canvasWrapper$n5","_this$scrollBars","_this$scrollBars2","boundingBox","getBoundingClientRect","wrapperBoundingBox","right","top","bottom","zoomIn","zoomStep","zoomToLeftTopCorner","zoomOut","_newZoomLevel","_this$zoom9","newZoomLevel","_this$zoomTransform","scaleFactor","newX","newY","zoomTo","resetZoom","_this$zoom10","deltaMode","scaleCoordinates","applyX","applyY","invertZoom","invertX","invertY","zoomValue","destroy","_this$scrollBars$hori","_this$scrollBars$vert","_this$resizeObserver","unobserve","isFitToCanvasHeight","zoomStructureToFitHalfOfCanvas","structureBbox","MAX_AUTOSCALE","OFFSET_FROM_CANVAS_BORDER","canvasWrapperSize","_this$canvasWrapper$n6","canvasWrapperBbox","_this$canvasWrapper$n7","_instance","initInstance","Coordinates","viewToModel","modelToView","canvasToView","viewToCanvas","canvasToMonomerCoordinates","coordinatesOnCanvas","centerOFMonomer","monomerWidth","monomerHeight","zeroPointCoord","monomerCoord","findLabelPoint","pointOnBorder","lineOffset","labelSize","isUsed","angleRadians","pointOfAttachment","attachmentVector","rotatedVector","normalizedVector","normalizedAttachmentVector","addedOrtogonalOffset","addedParallelOffset","ortogonalOffset","parallelOffset","labelCoordinates","getSearchFunction","initialAngle","canvasOffset","findPointOnMonomerBorder","coordStart","applyZoomForPositionCalculation","secondPoint","newLength","newCoordStart","zoomedCoordinateOfSecondPoint","CoordinatesTool","newPointCoord","elementsAtPoint","document","elementsFromPoint","isCurrentMonomerAtNewPoint","_monomer$renderer","renderer","bodyElement","newAngle","anglesToSector","attachmentPointNumberToAngle","sectorsList","checkFor0and360","getAttachmentPointLabelWithBinaryShift","attachmentPointLabel","rgi","getAttachmentPointLabel","getAttachmentPointNumberFromLabel","fromRlabel","val","moleculeToKet","body","rglabelToKet","atomToKet","bondToKet","sgroupToKet","source","_monomer$monomerItem$","monomerItem","props","MonomerCaps","parseInt","stereoCare","weight","refsToRGroups","rgnumber","sgroupAttachmentPointToKet","attachmentId","mergeFragmentsToStruct","ketItem","atomsOffset","fragments","_fragment$atoms","_fragment$bonds","_fragment$atoms2","atomToStruct","bondToStruct","toRlabel","moleculeToStruct","rglabelToStruct","addRGroupAttachmentPointsToStruct","sgroupData","sgroupToStruct","queryAttribute","elements","el","_Elements$get","mapping","attributeName","newAtom","$refs","attachedAtomId","SecondSideOnly","BothSides","atomOffset","toLowerCase","_source$attachmentPoi","sourceAttachmentPoint","sourceAttachmentPointIndex","sgroupAttachmentPointToStruct","placement","display","fieldData","attachmentAtom","leavingAtomId","leavingAtom","SGroupAttachmentPoint","prepareStructForKet","ketNodes","rgFrags","fragsAtoms","getFragmentCenter","filteredFragmentIds","addMolecules","toKetNode","ketNode","filteredSGroups","filteredSGroupsMap","fragmentIds","sGroupFragmentsMap","generateSGroupFragmentsMap","mergedFragments","atomsInFragment","hasAtomInSGroup","sGroupId","fragmentSet","rgroupToKet","rlogic","rgroupLogicToKet","rglogic","rgroupToStruct","rgroupLogicToStruct","_value","rxnToStruct","plus","simpleObjectToKet","simpleObjectNode","simpleObjectToStruct","object","circleToEllipse","simpleObject","radius","pos0","ellipse","textToKet","textNode","textToStruct","KetNodeType","KetConnectionType","KetMonomerClass","KetTemplateType","KetAmbiguousMonomerTemplateSubType","KetMonomerGroupTemplateClass","Command","addOperation","operation","operations","merge","command","setUndoOperationReverse","undoOperationReverse","setUndoOperationsByPriority","setUndoOperationByPriority","invert","renderersManagers","priority","runPostRenderMethods","execute","executeAfterAllOperations","EditorType","SequenceType","IsChainCycled","ToolName","editorEvents","resetEditorEvents","selectMonomer","Subscription","selectPreset","selectTool","createBondViaModal","cancelBondCreationViaModal","selectMode","layoutModeChange","selectHistory","openErrorModal","openMonomerConnectionModal","mouseOverPolymerBond","mouseLeavePolymerBond","mouseOnMovePolymerBond","mouseOverMonomer","mouseOnMoveMonomer","mouseLeaveMonomer","mouseOverAttachmentPoint","mouseLeaveAttachmentPoint","mouseUpAttachmentPoint","mouseDownAttachmentPoint","mouseOverDrawingEntity","mouseLeaveDrawingEntity","mouseUpMonomer","rightClickSequence","rightClickCanvas","rightClickPolymerBond","editSequence","startNewSequence","turnOnSequenceEditInRNABuilderMode","turnOffSequenceEditInRNABuilderMode","modifySequenceInRnaBuilder","mouseOverSequenceItem","mouseOnMoveSequenceItem","mouseLeaveSequenceItem","changeSequenceTypeEnterMode","toggleSequenceEditMode","toggleSequenceEditInRNABuilderMode","clickOnSequenceItem","mousedownBetweenSequenceItems","mouseDownOnSequenceItem","doubleClickOnSequenceItem","openConfirmationDialog","mouseUpAtom","renderersEvents","hotkeysConfiguration","RNASequenceType","handler","events","dispatch","RNA","DNASequenceType","DNA","PEPTIDESequenceTYpe","PEPTIDE","exit","selectRectangle","undo","onSelectHistory","redo","erase","isSequenceEditMode","modelChanges","selectAllDrawingEntities","renderersContainer","update","hand","Raphael","raphaelModule","require","translateAbs","delta","st","Visel","paths","boxes","oldBoundingBox","exts","degree","ReObject","viselType","visel","changeSelectionStyle","hoverStyle","_this$hovering","_this$hovering2","fill","vbox","setHover","noredraw","removed","show","paper","setStart","drawHover","setFinish","hide","_render","makeSelectionPlate","_restruct","_paper","_styles","LayerMap","StereoColoringType","StereLabelStyleType","FRAC","setFracAngle","calcAngle","pos1","fracAngle","angle2","calcNewAtomPos","BONDS_MERGE_ANGLE","BONDS_MERGE_SCALE","mergeBondsParams","struct1","struct2","begin1","begin2","end1","end2","mergeAngle","merged","inRange","defaultOptions","renderOptions","getOptionsWithConvertedUnits","scaleFactorMicro","scaleFactorMacro","rotationStep","utils","labelFontSize","subFontSize","disableQueryElements","showAtomIds","showBondIds","showHalfBondIds","showLoopIds","showValenceWarnings","autoScale","autoScaleMargin","maxBondLength","atomColoring","hideImplicitHydrogen","hideTerminalLabels","carbonExplicitly","showCharge","showHydrogenLabels","ShowHydrogenLabels","TerminalAndHetero","showValence","aromaticCircle","lineWidth","bondSpace","bondSpacingInPx","stereoBond","stereoBondWidthInPx","fontszsubInPx","font","fontszInPx","fontRLabel","fontRLogic","radiusScaleFactor","lineattr","stroke","bondThicknessInPx","arrowSnappingStyle","bondSnappingStyle","selectionStyle","innerHoverStyle","sgroupBracketStyle","lassoStyle","selectionStyleSimpleObject","movingStyle","cursor","atomSelectionPlateRadius","contractedFunctionalGroupSize","previewOpacity","viewOnlyMode","assign","measureMap","px","cm","pt","inch","convertValue","measureFrom","measureTo","convertedValue","convertHashSpacingToPx","convertedOptions","defaultUnit","fontsz","fontszUnit","fontszsub","fontszsubUnit","bondSpacing","convertedBondLength","bondThickness","bondThicknessUnit","stereoBondWidth","stereoBondWidthUnit","hashSpacing","hashSpacingInPx","hashSpacingUnit","MeasurementUnits","UsageInMacromolecule","box","shiftRayBox","r","rc","rd","pid","nid","id0","id1","calcCoordinates","aPoint","bPoint","lengthHyp","pos2","oPos2","D","getCIPValuePath","cipLabelPosition","atomOrBond","getBBox","rect","toFront","drawCIPLabel","restruct","_restruct$render","cipValuePath","addReObjectPath","additionalInfo","updateHalfBondCoordinates","xShift","escapeHtml","str","useLabelStyles","attachmentPointSelected","attachmentPointUsed","usageInMacromolecule","color","MonomerPreview","MonomerConnectionsModal","BondPreview","util","PathBuilder","initialPath","pathParts","addMovement","to","generatePoint","addLine","addClosedLine","addQuadraticBezierCurve","control","addPathParts","addOpenArrowPathParts","arrowLength","tipXOffset","tipYOffset","endX","tipX","addFilledTriangleArrowPathParts","triangleLength","triangleWidth","triangleBottom","addMultitailArrowBase","topY","bottomY","spineX","tailLength","cubicBezierOffset","tailX","tailStart","build","ARROW_HEAD_LENGHT","ARROW_HEAD_WIDTH","ARROW_HEAD_ATTR","ARROW_OFFSET","ARROW_DASH_INTERVAL","ARROW_FAIL_SIGN_WIDTH","ARROW_UNBALANCED_OFFSET","getArrowHeadDimensions","_getOptionsWithConver","arrowHeadLength","arrowHeadWidth","arrowHeadAttr","arrowOffset","getUnbalancedArrowHeadOffset","_getOptionsWithConver2","rectangleArrowHighlightAndSelection","_ref$pos","wOffset","hOffset","svgPath","rx","ry","polyline","isResizing","shouldApplySnappingStyle","OpenAngle","arrowOpenAngle","FilledTriangle","arrowFilledTriangle","FilledBow","arrowFilledBow","DashedOpenAngle","arrowDashedOpenAngle","Failed","arrowFailed","Retrosynthetic","arrowRetrosynthetic","BothEndsFilledTriangle","arrowBothEndsFilledTriangle","EquilibriumFilledHalfBow","arrowEquilibriumFilledHalfBow","EquilibriumFilledTriangle","arrowEquilibriumFilledTriangle","EquilibriumOpenAngle","arrowEquilibriumOpenAngle","UnbalancedEquilibriumFilledHalfBow","arrowUnbalancedEquilibriumFilledHalfBow","UnbalancedEquilibriumOpenHalfAngle","arrowUnbalancedEquilibriumOpenHalfAngle","UnbalancedEquilibriumLargeFilledHalfBow","arrowUnbalancedEquilibriumLargeFilledHalfBow","UnbalancedEquilibriumFilledHalfTriangle","arrowUnbalancedEquilibriumFilledHalfTriangle","arrowEllipticalArcFilledBow","arrowEllipticalArcFilledTriangle","arrowEllipticalArcOpenAngle","arrowEllipticalArcOpenHalfAngle","arrowAngle","_ref2$pos","direction","_getArrowHeadDimensio","transformedPath","_ref3$pos","_getArrowHeadDimensio2","_ref4$pos","_getArrowHeadDimensio3","_ref5","_ref5$pos","_getArrowHeadDimensio4","_ref6","_ref6$pos","_getArrowHeadDimensio5","pathBuilder","_ref7","_ref7$pos","_getArrowHeadDimensio6","_ref8","_ref8$pos","_getArrowHeadDimensio7","_ref9","_ref9$pos","_getArrowHeadDimensio8","_getOptionsWithConver3","dashInterval","_ref10","_ref10$pos","_getArrowHeadDimensio9","_getOptionsWithConver4","failSignWidth","arrowCenter","_ref11","_ref11$pos","_getArrowHeadDimensio10","_ref12","_ref12$pos","_getArrowHeadDimensio11","_ref13","_ref13$pos","_getArrowHeadDimensio12","_ref14","_ref14$pos","_getArrowHeadDimensio13","_ref15","_ref15$pos","_getArrowHeadDimensio14","_ref16","_ref16$pos","_getArrowHeadDimensio15","unbalanceVal","_ref17","_ref17$pos","_getArrowHeadDimensio16","_ref18","_ref18$pos","_getArrowHeadDimensio17","arrowHeadWidthNormal","_ref19","_ref19$pos","_getArrowHeadDimensio18","bondSingle","halfBond1","halfBond2","isSnapping","makeStroke","bondSingleUp","b3","bondSingleStereoBold","a3","a4","bondDoubleStereoBold","sgBondPath","bondSingleDown","nlines","step","bsp","q","bondSingleEither","bondDouble","cisTrans","bondSingleOrDouble","nSect","pi","bondTriple","bondAromatic","bondShift","l1","l2","bondAny","bondHydrogen","bondDative","reactingCenter","pathDesc","bondMark","rbb","recenterText","radicalCap","point1","dw","dh","radicalBullet","circle","bracket","bracketAngleDirection","bondCenter","isBracketContainAttachment","halfBracketHeight","bracketPoint0","bracketPoint1","longHalfBracketHeight","shortHalfBracketHeight","bracketArc0","bracketArc1","selectionRectangle","point2","selectionPolygon","pstr","selectionLine","dashedPath","dash","black","aromaticBondPaths","mask","relativeBox","vml","gap","shiftedAtomPositionVector","attachmentPointEnd","directionVector","linePath","curvePath","getSvgCurveShapeAttachmentPoint","resultShape","centerPosition","basicSize","attachmentPointSvgPathString","attachmentPointSvgPathSize","shapeScale","angleDegrees","rgroupAttachmentPointLabel","labelPosition","labelText","labelPath","AttachmentPointName","attachmentPointNames","Entities","StereoLabelMinOpacity","MAX_LABEL_LENGTH","ShowHydrogenLabelNames","ReAtom","_ReObject","style","isPlateShouldBeHidden","getSelectionContour","showLabel","hydrogenOnTheLeft","makeHoverPlate","getLabeledSelectionContour","isHighlight","highlightPadding","padding","ps1","ps2","getUnlabeledSelectionContour","ps","hasLabel","pseudo","getQueryAttrsText","isNeedShiftForCharge","MIN_BOND_LENGTH","isBondLengthTooShort","hasCharge","getRatio","bondLen","DEFAULT_BOND_LENGTH","DEFAULT_SUB_FONT_SIZE","isNeedShift","DEFAULT_PROPORTION","currentProportion","getShiftedSegmentPosition","_atomPosition","atomPosition","atomSymbolShift","hasAttachmentPoint","_restruct$atoms$get","isPositionAtom","shouldHydrogenBeOnLeft","isLabelVisible","rightMargin","leftMargin","implh","isHydrogen","buildLabel","background","idPos","draw","indices","hydroIndex","showHydroIndex","showRadical","showIsotope","displayHydrogen","showHydrogen","hydrogen","showExplicitValence","warning","showWarning","pathAndRBoxTranslate","aamText","getAamText","customQueryText","checkIsSmartPropertiesExist","getOnlyQueryAttributesCustomQuery","shortenCustomQueryText","customQueryTooltipText","substring","displayStereoLabel","shouldDisplayStereoLabel","stereoLabelStyle","enhancedStereoFlag","aamPath","getStereoAtomColor","childNodes","setAttribute","opacity","getStereoAtomOpacity","aamBox","t","bisectLargestSector","addTooltip","isHighlighted","highlightColor","highlight","_highlight$atoms","hasCurrentHighlight","makeHighlightePlate","getLargestSectorFromNeighbors","angles","largeAngles","largestAngle","neighborAngle","_this$getLargestSecto","bisectAngle","newVectorFromAngle","isSelectable","colorStereogenicCenters","Off","BondsOnly","getColorFromStereoLabel","stereoLabelType","colorOfAndCenters","colorOfOrCenters","colorOfAbsoluteCenters","stereoLabelNumber","autoFadeOfStereoLabels","labelStyle","flag","On","Classic","IUPAC","isAttachmentPointAtom","isCarbon","visibleTerminal","Hetero","neighborsLength","shouldBeVisible","nei1","sameNotStereo","hydrogenLabels","_atom$label","_atom$label2","Terminal","neighbor","neighborDirection","queryText","getAtomCustomQuery","tooltip","_label$text","currentlySelectedMonomerAttachmentPoint","connectedMonomerAttachmentPoints","getLabelText","shouldStyleLabel","isMonomerAttachmentPoint","isMonomerAttachmentPointSelected","isMonomerAttachmentPointUsed","_util$useLabelStyles","_label$text2","backgroundSize","hshift","vshift","mapValence","hydrogenLeft","getRingBondCountAttrText","attrText","getRingConnectivity","getDegree","getSubstitutionCountAttrText","getAtomType","smartsSpecificProperties","_atom$queryProperties","includeOnlyQueryAttributes","queryAttrsText","nonQueryAttributes","addSemicolon","patterns","regExpResult","exec","propertyName","_atom$a","ReBond","bondRecalc","doubleBondShift","getSelectionPoints","regularSelectionThikness","halfBondStart","halfBondEnd","isStereoBond","stereoPadding","addPadding","contourStart","contourEnd","stereoBondStartHeightCoef","bondPadding","highlightBondPadding","addStart","stereoBondEndHeightCoef","addEnd","contourPaddedStart","contourPaddedEnd","padStartPoint","padEndPoint","startTop","startBottom","startPadTop","startPadBottom","endTop","endBottom","endPadTop","endPadBottom","_this$getSelectionPoi","_this$getSelectionPoi2","pathString","makeHighlitePlate","highlightStyle","checkStereoBold","setDoubleBondShift","isSnappingBond","getBondPath","bondSkeleton","getReactingCenterPath","getBondMark","ipath","bondIdxOff","getIdsPath","_highlight$bonds","getAtomPositionForBond","findIncomingStereoUpBond","bid0","includeBoldStereoBond","neibond","singleUp","boldStereo","findIncomingUpBonds","_restruct$atoms$get2","halfbonds","neihbid1","neihbid2","_restruct$atoms$get3","_restruct$atoms$get4","shiftA","shiftB","newHalfBonds","xShiftMinus1","xShiftPlus1","getBondSingleStereoBoldPath","getBondSingleUpPath","getBondSingleDownPath","getBondSingleEitherPath","getStereoBondColor","getBondDoubleStereoBoldPath","getBondDoublePath","_struct$loops$get","_struct$loops$get2","inAromaticLoop","getBondAromaticPath","getSingleOrDoublePath","stereoUpBondGetCoordinates","defaultColor","beginAtomStereoLabel","endAtomStereoLabel","LabelsOnly","coords1","coords2","getBondLineShift","neihbid","neihb","cosHalf","biss","denomAdd","calculateLines","interval","usableLength","linesCount","_options$hashSpacingI","MIN_LINES","DEFAULT_HASH_SPACING_IN_PX","gaps","isHashSpacingTooLarge","averageSpacing","intervalAdjusted","finalLines","s1","s2","dashdotPattern","getAromaticBondPaths","lw","bs","alongIntRc","alongIntMadeBroken","alongSz","acrossInt","acrossSz","tiltTan","fixed","param1","param2","pb","irbb","selectDoubleBondShiftChain","loop1","loop2","d1","d2","n1","n2","selectDoubleBondShift","nLeft","nRight","_path","ReEnhancedFlag","hoverPath","_classPrivateFieldGet2","_classPrivateFieldGet3","stereoFlagMap","absFlagLabel","andFlagLabel","mixedFlagLabel","orFlagLabel","showStereoFlags","ReFrag","fragGetAtoms","fragGetBonds","firstFrag","secondFrag","calcBBox","_ui_editor","_draw","ReRGroup","labelBox","rGroupBoundingBox","fragBox","rGroupAttachmentPointsVBox","rGroupdrawBrackets","labelSet","logicStyle","logic","rLogicToString","logicPath","logicBox","fnum","drawing","cy","leftBracket","rightBracket","rLogic","ifThen","rangeExists","startsWith","restH","nextRg","ReRxnArrow","calcDistance","distRef","getReferencePointDistance","_this$getReferencePoi","getReferencePoints","_this$getReferencePoi2","middlePoint","refPoint","refPoints","rp","current","generatePath","_item$pos","findMiddlePoint","makeAdditionalInfo","selectionSet","scaledRP","styles","_this$getArrowParams","getArrowParams","x1","x2","y2","hypot","coordinates1","coordinates2","ReRxnPlus","ReDataSGroupData","dataArea","BracketParams","ReSGroup","SGroupdrawBracketsOptions","lowerIndexText","upperIndexText","indexAttribute","drawGroupDat","sgroupTypesWithBrackets","SGroupdrawBrackets","getTextHighlightDimensions","startX","startY","_sGroup$getContracted","reSGroupAtom","sGroupTextBoundingBox","_Scale$modelToCanvas","getContractedSelectionContour","_this$getTextHighligh","sGroupItem","_getHighlighPathInfo","getHighlighPathInfo","b0","_render$ctab","_render$ctab2","arr","rgroupAttachmentPointIds","crossBondsValues","rightBracketIndex","bracketR","renderIndex","isLowerText","lowerPath","getPath","bracketPoint2","indexPos","indexPath","indexBox","showValue","drawAttachedDat","drawAbsoluteDat","_sgroup$pp","sbox","nameI","boxI","sboxI","getBracketParamersWithCrossBondsLessThan2","getBracketParamersWithCrossBondsEquals2","getBracketParamersWithCrossBondsMoreThan2OnOneAtom","notTemplateShapeFirstAtom","bondDirections","needNegated","bondDirection","attachmentDirection","_render$ctab$rgroupAt","lineDirectionVector","_mol$sGroupForest","leftCenter","rightCenter","leftShift","rightShift","bracketShift","bracketShiftNegated","centerConnection","rightDirection","leftDirection","bracketDirectionNegated","_render$ctab3","_boundingBox","vext","_sgroup$getContracted","contractedPosition","hoverPp","ReSimpleObject","pointToCenter","topX","bottomX","distances","onlyOnObject","getFigureHoverPath","isBorder","centerX","centerY","outerBorderEllipse","stylesApplied","fillEllipse","innerBorderEllipse","leftX","rightX","outerBorderRect","fillRect","innerRect","poly","atan","enhPath","selectionPointsSet","selectionPoints","togglePoints","displayFlag","_this$selectionPoints","_this$selectionPoints2","ReLoop","rlid","apos","bpos","pathStr","halfAngle","minSin","qi","isValid","SCALE","ReText","_this$getRelBox","getRelBox","leftTopPoint","rightBottomPoint","_this$getRelBox2","topLeft","_p1$sub","firstElOfFirstRow","leftEdge","firstRow","topEdge","widestRow","nextRow","getRowWidth","lastElOfWidestRow","rightEdge","lastRow","bottomEdge","row","rowWidth","paperScale","shiftY","rawContentState","blocks","block","ranges","getRanges","shiftX","_this3$getRelBox","flatten","getStyles","nextStyles","isEqual","inlineStyleRanges","inlineRange","customFontSize","FontSize","_range$style$match","nextRange","textRange","Bold","Italic","Subscript","Superscript","ReRGroupAttachmentPoint","reAtom","hoverPlatePath","getHoverPlatePath","outlineEndPoint","normalizedLineDirectionVector","CURVE_OUTLINE_HEIGHT","OUTLINE_PADDING","getOutlinePoints","curveOutlineWidth","CURVE_OUTLINE_WIDTH","lineOutlineWidth","LINE_OUTLINE_WIDTH","topLeftPadPoint","normalizedCurveDirectionVector","topRightPadPoint","topRightPoint","middleMostLeftPadPoint","middleMostLeftPoint","middleMostRightPadPoint","middleMostRightPoint","middleLeftPoint","middleRightPoint","bottomLeftPadPoint","bottomLeftPoint","bottomRightPadPoint","getDistanceTo","destination","rgroupAttachmentPointId","getAttachmentPointDirectionVector","showAttachmentPointShape","isAttachmentPointLabelRequired","showAttachmentPointLabel","_highlight$rgroupAtta","outlinePoints","scaledOutlinePoints","_scaledOutlinePoints","hoverPlate","isTrisectionAttachmentPoint","trisectionLargestSector","hasOnlyOneBond","getAttachmentDirectionForOnlyOneBond","atomPositionVector","attachmentPointType","_atom$getLargestSecto","firstTrisectorAngle","secondTrisectorAngle","_struct$bonds$get","DEGREE_120_FOR_ONE_BOND","DEGREE_180_FOR_TRIPLE_BOND","onlyNeighbor","neighbour","isTripleBond","finalAngle","getLabelPositionForAttachmentPoint","shapeHeight","normal","REFERENCE_POINT_LINE_WIDTH_MULTIPLIER","ReImage","getScaledPointWithOffset","originalPoint","scaledPoint","getScale","getDimensions","getBottomRightPosition","getTopLeftPosition","getSelectionReferencePositions","_this$image$getCorner","getCornerPositions","_this$image$getCorner2","selectionTopLeftPosition","selectionTopRightPosition","selectionBottomRightPosition","selectionBottomLeftPosition","drawSelectionLine","_this$getSelectionRef","polygon","styleOptions","strokeWidth","drawSelectionPoints","reStruct","selectionReferencePositions","_ref2$","nextPath","scaledTopLeftWithOffset","dimensions","bitmap","insertBefore","STROKE_WIDTH","FILL_WIDTH","_this$getSelectionRef2","outerBorderOffset","topLeftCorner","dimensionsWithBorders","calculateDistanceToPoint","isPointInsidePolygon","_this$getSelectionRef3","calculateClosestReferencePosition","ref","POSITIVE_INFINITY","referencePositions","MultitailValidationErrors","MultitailArrow","spineTopX","spineTopY","headOffsetX","headOffsetY","tailsYOffset","getReferencePositions","tailYOffset","getReferencePositionsArray","_this$getReferencePos","_objectWithoutProperties","_excluded","getReferenceLines","headSpinePosition","tail","getTailsDistance","tailsYOffsets","allTailsOffsets","centerFloatingPoint","getTailsMaxDistance","getTailCoordinate","addTail","coordinate","_this$getTailsMaxDist","canAddTail","centerFixedPrecision","removeTail","resizeHead","fixedPrecisionOffset","MIN_HEAD_LENGTH","realOffset","moveHead","MIN_TOP_BOTTOM_OFFSET","resizeTails","updatedLength","MIN_TAIL_LENGTH","normalizeTailPosition","proposedPosition","tailId","proposedPositionFloatingPrecision","getDistanceToTailDistance","tailDistance","tailsWithoutCurrent","tailMinDistance","at","positionCenter","positionDistance","maxDistanceFromCenter","MIN_TAIL_DISTANCE","distanceFromCenter","moveTail","second","offsetFixedPrecision","minHeight","MIN_HEIGHT","tailsOffset","lastTail","firstTail","Infinity","closestTopLimit","closestBottomLimit","originalValue","updatedHeight","BOTTOM_TAIL_NAME","updatedTails","move","nonBorderTails","convertTail","zOrder","fromTwoPoints","bottomRight","topSpineX","topSpineY","validateKetNode","ketFileData","_tailsFixedPrecision$","_tailsFixedPrecision$2","_spine$pos","spineStart","spineEnd","spineStartX","spineStartY","spineEndX","spineEndY","headX","headY","tailsFixedPrecision","KET_MIN_DISTANCE","INCORRECT_SPINE","INCORRECT_HEAD","INCORRECT_TAILS","firstTailX","allTails","fromKetNode","ketFileNode","_data$spine$pos","tailsLength","fromFloatingPointCoordinates","spineTop","headOffset","tailsYOffsetFixedPrecision","pool","MultitailArrowRefName","ReMultitailArrow","getFrameOffset","FRAME_OFFSET","getSelectionPointOffset","SELECTION_POINT_OFFSET_FROM_SPINE","drawSingleLineHover","builder","verticalDirection","horizontalDirection","CUBIC_BEZIER_OFFSET","buildFrame","tailsPoints","tailPoint","getSelectionPointsFromReferencePoint","spineOffset","spineOffsetWithDirection","addTestSelectionPoints","OFFSET","_this$getReferencePos2","selectionPointSet","TAILS_NAME","clearVisel","headPathBuilder","_this$getReferencePos3","topTailOffsetX","arrowStart","getClosestArrowPartPosition","entities","isLine","getTailIdFromRefName","refName","TAILS","HEAD","BOTTOM_TAIL","TOP_TAIL","SPINE","getTailArrayFromPool","maxDistanceToPoint","referenceLines","rest","tailsAndHeadLines","lineResult","validReferencePositions","_excluded2","tailsAnddHeadPoints","pointsResult","ReStruct","initLayers","clearMarks","lid","reloops","enhancedFlags","reItem","connectedComponentRemoveAtom","cc","clearConnectedComponents","getConnectedComponent","adjacentComponents","addConnectedComponent","compId","aidSet","ccFragmentType","removeConnectedComponent","ccid","assignConnectedComponents","layers","visible","parentNode","maps","structChanged","markItemRemoved","markBond","markItem","markAtom","markRgroupAttachmentPoint","rgAPid","mapChanged","eachItem","func","getSelectionBoxCenter","atomPositionPoint","atomBox","selectionExceptAtoms","selectionExceptAtomsBoundingBox","getBoundingBoxForSelection","isSelectionEmpty","getAllElementsAsSelectionMap","elementKey","_selection$elementKey","elementId","scaleVisel","clearVisels","force","initialized","_item","atomsChanged","emptyFrags","atomsChangedArray","verifyLoops","updLoops","updateLoops","showAtoms","showBonds","showRgroupAttachmentPoints","showLoops","showReactionSymbols","showSGroups","showFragments","showRGroups","showEnhancedFlags","showSimpleObjects","showTexts","showImages","showMultitailArrows","reloop","simpleObjectsChanged","textsChanged","rxnArrowsChanged","rxnPlusesChanged","resgroup","loopRemove","bondlist","atomsIds","allAtomAttachmentPointsVBox","attachmentPointIds","oneAtomAttachmentPointsVBox","previousVBox","attachmentPointId","currentVBox","_allAtomAttachmentPoi","_this25","isInsideContractedSGroup","_this26","_this27","enhancedFlagsChanged","chid","_this28","bondsChanged","_this29","imagesChanged","_this30","multitailArrowsChanged","setSelection","_this31","_this31$map$values","_this31$map$values2","mapValues","_item$item","sgId","sGroupAtoms","_item$item2","showItemSelection","exists","isSelectionSvgObjectExists","_item$additionalInfo","_item$cip","_item$additionalInfo2","_item$cip2","addSnappingBonds","snappingBonds","clearSnappingBonds","anySelection","scaleRPath","_item$selectionPlate","_item$selectionPlate2","_item$selectionPlate3","_item$selectionPlate$","viewBox","pointInCanvas","pageToView","renderClientArea","_renderClientArea$get","offsetTop","offsetLeft","clientX","clientY","pageToCanvas","pointInViewBox","clientArea","pageToModel","CoordinateTransformation","_calculateOffset","WeakSet","ScrollOffset","_classPrivateMethodInitSpec","getAbsViewBox","viewBoxMinXY","viewBoxMaxXY","getAbsBoundingBox","protoBoundingBox","boundingBoxMinXY","boundingBoxMaxXY","_classPrivateMethodGet","_calculateOffset2","hasVerticalOffset","up","down","hasHorizontalOffset","absBoundingBox","absViewBox","Scrollbar","redraw","updateAttr","_this$bar","getDynamicAttr","_this$bar2","_this$bar3","undrag","_this$getDynamicAttr","onDragMove","onDragStart","onDragEnd","_y","viewBoxBeforeDrag","stopPropagation","SCALE_FACTOR","getUserFriendlyScrollOffset","getUserFriendlyViewBoxDelta","getZoomedValue","_scrollOffset","VerticalScrollbar","_Scrollbar","scrollOffset","DIST_TO_EDGE","_dx","_event","setViewBox","HorizontalScrollbar","_dy","_verticalBar","_horizontalBar","ScrollbarContainer","Render","reuseRestructIfExist","_global$ketcher","getCanvasSizeVector","resizeViewBox","userOpts","_global$ketcher2","scrollbar","updateOptions","opts","passedOptions","point0","page2obj","zoomedWidth","zoomedHeight","zoomOnMouse","zoomOnCanvasCenter","viewBoxX","viewBoxY","clientWidth","clientHeight","newWidth","newHeight","fixedPoint","widthRatio","heightRatio","arg","newViewBox","setMolecule","forceUpdateWithTimeout","setTimeout","viewSz","changes","downScale","isAutoScale","oldCb","sz1","marg","mv","csz","rescaleAmount","isForceDownscale","isBondsLengthFit","sz2","BaseOperation","perform","_inverted","isDummy","invalidateAtom","invalidateLoop","invalidateBond","invalidateItem","mapName","invalidateEnhancedFlag","OperationType","freeze","ATOM_ADD","ATOM_DELETE","ATOM_ATTR","ATOM_MOVE","CALC_IMPLICIT_H","BOND_ADD","BOND_DELETE","BOND_ATTR","BOND_MOVE","LOOP_MOVE","S_GROUP_ATTACHMENT_POINT_ADD","S_GROUP_ATTACHMENT_POINT_REMOVE","S_GROUP_ATOM_ADD","S_GROUP_ATOM_REMOVE","S_GROUP_ATTR","S_GROUP_CREATE","S_GROUP_DELETE","S_GROUP_ADD_TO_HIERACHY","S_GROUP_REMOVE_FROM_HIERACHY","R_GROUP_ATTR","R_GROUP_FRAGMENT","R_GROUP_ATTACHMENT_POINT_ADD","R_GROUP_ATTACHMENT_POINT_REMOVE","UPDATE_IF_THEN","RESTORE_IF_THEN","RXN_ARROW_ADD","RXN_ARROW_DELETE","RXN_ARROW_MOVE","RXN_ARROW_ROTATE","RXN_ARROW_RESIZE","RXN_PLUS_ADD","RXN_PLUS_DELETE","RXN_PLUS_MOVE","S_GROUP_DATA_MOVE","CANVAS_LOAD","ALIGN_DESCRIPTORS","SIMPLE_OBJECT_ADD","SIMPLE_OBJECT_DELETE","SIMPLE_OBJECT_MOVE","SIMPLE_OBJECT_RESIZE","RESTORE_DESCRIPTORS_POSITION","FRAGMENT_ADD","FRAGMENT_DELETE","FRAGMENT_SET_PROPERTIES","FRAGMENT_STEREO_FLAG","FRAGMENT_ADD_STEREO_ATOM","FRAGMENT_DELETE_STEREO_ATOM","ENHANCED_FLAG_MOVE","TEXT_CREATE","TEXT_UPDATE","TEXT_DELETE","TEXT_MOVE","ADD_HIGHLIGHT","UPDATE_HIGHLIGHT","REMOVE_HIGHLIGHT","POLYMER_BOND_ADD","POLYMER_BOND_DELETE","POLYMER_BOND_MOVE","POLYMER_BOND_FINISH_CREATION","POLYMER_BOND_CANCEL_CREATION","PEPTIDE_ADD","PEPTIDE_REMOVE","PEPTIDE_MOVE","PEPTIDE_HOVER","DRAWING_ENTITY_SELECT","DRAWING_ENTITY_HOVER","SHOW_POLYMER_BOND_INFORMATION","IMAGE_UPSERT","IMAGE_DELETE","IMAGE_MOVE","IMAGE_RESIZE","MULTITAIL_ARROW_UPSERT","MULTITAIL_ARROW_DELETE","MULTITAIL_ARROW_MOVE","MULTITAIL_ARROW_ADD_TAIL","MULTITAIL_ARROW_REMOVE_TAIL","MULTITAIL_ARROW_RESIZE_HEAD_TAIL","MULTITAIL_ARROW_MOVE_HEAD_TAIL","OperationPriority","AtomAttr","_BaseOperation","attribute","data2","_this$data","inverted","_this$data2","_this$data3","_this$data4","AtomMove","noinvalidate","reatom","AtomAdd","atomData","AtomDelete","_BaseOperation2","restructedAtom","BondAttr","needInvalidateBond","BondMove","BondAdd","needInvalidateAtoms","structBond","BondDelete","rebond","CanvasLoad","oldStruct","AlignDescriptors","history","structBox","alignPoint","RestoreDescriptorsPosition","EnhancedFlagMove","currentPosition","newPosition","UpdateIfThen","rgNew","rgOld","skipRgids","rgid_new","rgid_old","ifThenHistory","RestoreIfThen","rgValue","FragmentAdd","FragmentDelete","FragmentSetProperties","_BaseOperation3","enhancedFalg","FragmentAddStereoAtom","FragmentDeleteStereoAtom","FragmentStereoFlag","CalcImplicitH","aids","atomIds","aIds","LoopMove","ImageMove","renderItem","scaledOffset","addPositionOffset","moveLeftPositions","moveRightPositions","moveTopPositions","moveBottomPositions","ImageResize","referencePositionName","previousPosition","resize","ImageUpsert","ImageDelete","reImage","MultitailArrowAddTail","itemId","reMultitailArrow","MultitailArrowRemoveTail","MultitailArrowMove","MultitailArrowMoveHeadTail","MultitailArrowResizeTailHead","isHead","MultitailArrowUpsert","MultitailArrowDelete","RGroupAttr","rgroupId","rgp","RGroupFragment","rg_new","rg_old","removeOld","setNew","RGroupAttachmentPointAdd","newAttachmentPoint","revertedId","RGroupAttachmentPointRemove","INITIAL_DATA","RxnArrowMove","_Base","Base","RxnArrowRotate","_reStruct$rxnArrows$g","arrowId","drawingCenter","ARROW_MAX_SNAPPING_ANGLE","RxnArrowResize","anchor","isSnappingEnabled","_middlePoint","_middlePoint2","previousPos0","previousPos1","_reItem$getReferenceP","_reItem$getReferenceP2","currentArrowVector","snappedArrowVector","getSnappedArrowVector","snappedCurrent","_reItem$getArrowParam","cosAngle","sinAngle","diffX","diffY","_reItem$getReferenceP3","_reItem$getReferenceP4","newMiddlePoint","AXIS","POSITIVE_X","POSITIVE_Y","NEGATIVE_X","NEGATIVE_Y","isSnappingToPositiveXAxis","isSnappingToPositiveYAxis","isSnappingToNegativeXAxis","isSnappingToNegativeYAxis","RxnPlusMove","rxn","RxnPlusAdd","plid","newRxn","structRxn","RxnPlusDelete","RxnArrowAdd","RxnArrowDelete","_Base2","performed","SimpleObjectAdd","toCircle","makeCircleFromEllipse","SimpleObjectDelete","SimpleObjectMove","_Base3","handleRectangleChangeWithAnchor","SimpleObjectResize","_Base4","circlePoint","position0","position1","SGroupAtomAdd","SGroupAtomRemove","SGroupAttr","SGroupDataMove","_sgroups$get$pp","SGroupAddToHierarchy","relations","SGroupRemoveFromHierarchy","SGroupAttachmentPointAdd","apAtom","SGroupAttachmentPointRemove","SGroupCreate","existingSGroup","SGroupDelete","_sgroup$item","_sgroup$item2","_sgroup$item3","_sgroup$item4","relatedFGroupId","fgid","TextCreate","TextDelete","TextUpdate","previousContent","TextMove","BaseRenderer","drawingEntity","_ZoomTool$instance","_ZoomTool$instance2","_this$rootElement","rootNode","rootElement","_this$rootElement2","_this$rootBBox","rootBBox","_this$rootBBox2","_this$rootBBox3","_this$rootBBox4","_this$rootElement3","redrawHover","hovered","hoverElement","appendHover","hoverAreaElement","removeHover","BaseSequenceRenderer","_BaseRenderer","_hoverArea","appendHoverAreaElement","drawSelection","moveSelection","_theme","DrawingEntity","_this$config","_position","config","generateId","moveRelative","moveAbsolute","turnOnHover","turnOffHover","turnOnSelection","turnOffSelection","selectIfLocatedInRectangle","rectangleTopLeftPoint","rectangleBottomRightPoint","isPreviousSelected","baseRenderer","prevSelectedValue","locatedInRectangle","setBaseRenderer","BaseBond","_DrawingEntity","firstEndEntity","secondEndEntity","startPosition","endPosition","moveToLinkedEntities","_this$secondEndEntity","firstMonomerCenter","secondMonomerCenter","moveBondStartAbsolute","moveBondEndAbsolute","getAnotherEntity","MonomerToAtomBond","_BaseBond","setRenderer","AttachmentPoint","constructorParams","skipInit","_constructorParams$ca","_constructorParams$mo","bodyWidth","bodyHeight","DOMRect","attachmentPointName","centerOfMonomer","isSnake","appendAttachmentPoint","isAttachmentPointPotentiallyUsed","colors","fillPotentially","isAttachmentPointUsed","fillUsed","strokePotentially","strokeUsed","_this$element","renderAttachmentPointByCoordinates","attachmentOnBorder","attachmentPointCoordinates","labelCoordinatesOnMonomer","attachmentPointElement","labelGroup","renderHoverableArea","monomerCenter","attachmentPointCenter","hasBond","rotation","halfWidth","areaHeight","lineFunction","hoverableAreaElement","_polymerBond$renderer","polymerBond","attachmentPointsToBonds","firstMonomer","flip","isAttachmentpointR1","isMonomersOnSameHorizontalLine","rotateToAngle","_this$getCoordinates","getCoordinates","_this$getCoordinates2","attachmentToBorderCoordinates","attachmentToCenterCoordinates","hoverableArea","updateAttachmentPointStyleForHover","_this$catchThePoint","catchThePoint","_this$catchThePoint2","labelPoint","updateCoords","_polymerBond$firstMon","_this$attachmentPoint3","_this$attachmentPoint4","_this$attachmentPoint5","_this$getCoordinates3","_this$getCoordinates4","rotationAngle","currentMonomerCenter","_findLabelPoint","attachmentPointLength","labelOffset","_findLabelPoint2","getElement","getAttachmentPointName","getHoverableArea","getAngle","attachmentPointVector","labelPositions","MONOMER_CSS_CLASS","BaseMonomerRenderer","monomerSelectedElementId","monomerHoveredElementId","monomerSymbolElementId","_this$monomerSymbolEl","_this$monomerSymbolEl2","CoreEditor","provideEditorInstance","monomerSymbolElement","querySelector","monomerSize","getAttribute","isSnakeBondForAttachmentPoint","_this$monomer$attachm","scaledMonomerPosition","WHITE","colorsMap","Q","MonomerNaturalAnalogCode","getMonomerColor","theme","_theme$monomer$color$","regular","redrawAttachmentPoints","hoveredAttachmentPoint","attachmentPointsVisible","removeAttachmentPoints","drawAttachmentPoints","updateAttachmentPoints","redrawAttachmentPointsCoordinates","chosenAttachmentPointName","chosenFirstAttachmentPointForBond","chosenAttachmentPoint","allAngles","isSectorOccupied","appendFn","appendFnToUse","usedAttachmentPointsNamesList","newList","freeSectorsList","unrenderedAtPoints","unUsedAttachmentPointsNamesList","properAngleForFreeAttachmentPoint","customAngle","prepareAttachmentPointsParams","isPotentiallyUsed","attachmentPointParams","hoverAttachmentPoint","appendRootElement","appendLabel","_labelPositions$monom","_labelPositions$monom2","fontSize","textElement","textColor","monomerUniqueKey","MonomerType","textBBox","selectedTool","SelectRectangle","getScaledMonomerPosition","appendSelection","selectionCircle","_this$canvas","selectionBorder","removeSelection","_this$selectionCircle","_this$selectionBorder","appendEvents","setEnumeration","enumeration","appendEnumeration","enumerationElementPosition","enumerationElement","redrawEnumeration","setBeginning","beginning","appendChainBeginning","beginningElementPosition","beginningElement","reDrawChainBeginning","appendBody","raiseElement","_this$selectionCircle2","raise","_this$rootElement4","positionInAngstoms","monomerPositionInPixels","SupportedFormatProperties","mime","extensions","supportsCoords","formatProperties","molAuto","molV3000","rxnV3000","smiles","DaylightSmiles","smilesExt","ExtendedSmiles","smarts","DaylightSmarts","inChI","InChI","inChIAuxInfo","InChIAuxInfo","inChIKey","InChIKey","cml","CML","ket","cdxml","CDXML","cdx","CDX","binaryCdx","sdf","SDF","sdfV3000","fasta","FASTA","idt","IDT","helm","HELM","sequence","SEQUENCE","unknown","UNKNOWN","rdf","RDF","rdfV3000","imgFormatProperties","svg","extension","png","getPropertiesByImgFormat","format","getPropertiesByFormat","getFormatMimeTypeByFileName","fileName","fileExtension","SupportedFormat","KetFormatter","serializer","_ketSerializer","_getStructureFromStructAsync","serialize","getStructureFromStructAsync","_getStructureFromStringAsync","deserialize","getStructureFromStringAsync","_x4","parseMacromoleculeString","deserializeMicromolecules","_smiSerializer","_structService","_format","_options","SmilesFormatter","smiSerializer","structService","ketSerializer","stringifiedMolfile","stringifiedStruct","serverFormatter","ServerFormatter","isContainsCoordinates","convertResult","message","convert","output_format","getCallingMethod","method","layout","withCoords","trim","_this$getCallingMetho","parsedStruct","formatError","MolfileV2000Formatter","molSerializer","_molSerializer","FormatterFactory","separateOptions","reactionRelayout","badHeaderRecover","structServiceOptions","molfileParseOptions","queryPropertiesAreUsed","_this$separateOptions","_this$separateOptions2","molSerializerOptions","formatter","KetSerializer","MolSerializer","identifyStructFormat","isMacromolecules","sanitizedString","isRXN","isSDF","isV2000","isV3000","search","clearStr","isBase64String","cdxHeader","macromoleculesFilesInputFormats","seq","rna","dna","peptide","peptide3Letter","MONOMER_SYMBOLS_IDS","AminoAcid","CHEM","Sugar","variant","Phosphate","isMonomerSgroupWithAttachmentPoints","isMicromoleculeFragment","CHEM_SELECTED_ELEMENT_ID","CHEM_SYMBOL_ELEMENT_ID","ChemRenderer","_BaseMonomerRenderer","PEPTIDE_SELECTED_ELEMENT_ID","PEPTIDE_HOVERED_ELEMENT_ID","PEPTIDE_SYMBOL_ELEMENT_ID","PeptideRenderer","HydrogenBond","secondMonomer","setFirstMonomer","setSecondMonomer","getAttachmentPointByBond","_this$secondMonomer","getAnotherMonomer","HYDROGEN_BOND_ATTACHMENT_POINT","BaseMonomer","getAttachmentPointDict","potentialAttachmentPointsToBonds","getMonomerDefinitionAttachmentPoints","potentialSecondAttachmentPointForBond","chosenSecondAttachmentPointForBond","maxAttachmentPointNumber","getMaxAttachmentPointNumber","attachmentPointList","turnOnAttachmentPointsVisibility","turnOffAttachmentPointsVisibility","setChosenFirstAttachmentPoint","setChosenSecondAttachmentPoint","setPotentialSecondAttachmentPoint","setPotentialBond","potentialBond","getPotentialAttachmentPointByBond","pointNumber","isNaN","R1","R2","firstFreeAttachmentPoint","isAttachmentPointExistAndFree","forEachBond","callback","setBond","unsetBond","hasBonds","bondName","hasPotentialBonds","getPotentialBond","removeBond","removePotentialBonds","clearSelectedPoints","listOfAttachmentPoints","getBondByAttachmentPoint","getPotentialBondByAttachmentPoint","_BaseMonomer$getAttac","getAttachmentPointDictFromMonomerDefinition","attachmentPointDictionary","getAttachmentPointDictFromAtoms","moreThanTwo","monomerDefinitionAttachmentPoints","superatomAttachmentPoints","superatomAttachmentPoint","bondsToLeavingGroupAtom","leavingGroup","attachmentPointNumberToType","_struct$sgroups$filte","superatomWithoutLabel","attachmentPointNameToBond","leavingGroupAtomId","isMonomerTypeDifferentForChaining","monomerToChain","SubChainConstructor","sideConnections","isSideChainConnection","attachmentPointsList","attachmentPointTypeToNumber","side","attachmentPointIndex","calculatedAttachmentPointNumber","getLabelByTypeAction","calculatedLabel","BaseSubChain","nodes","ChemSubChain","_BaseSubChain","PhosphateSubChain","RnaSubChain","_BaseMonomer","getValidSourcePoint","getValidPoint","getValidTargetPoint","otherMonomer","potentialPointOnOther","isRnaBaseOrAmbiguousRnaBase","R3","r3PolymerBond","PolymerBond","RNABase","firstMonomerAttachmentPoint","secondMonomerAttachmentPoint","backBoneChainAttachmentPoints","isMonomerConnectedToR2RnaBase","getMonomerUniqueKey","MonomerName","Name","checkIsR2R1Connection","nextMonomer","r1PolymerBond","isR2R1ConnectionFromRnaBase","_polymerBond$secondMo","R1PolymerBond","R1ConnectedMonomer","r2PolymerBond","getSugarFromRnaBase","getNextMonomerInChain","_r2PolymerBond$getAno","getRnaBaseFromSugar","r3ConnectedMonomer","r1PolymerBondOfConnectedMonomer","r1ConnectedMonomer","r3PolymerBondOfConnectedMonomer","getPhosphateFromSugar","nextMonomerInChain","isMonomerBeginningOfChain","MonomerTypes","previousMonomer","isPreviousMonomerPartOfChain","AmbiguousMonomer","MONOMER_CLASS_TO_CONSTRUCTOR","monomerClass","previousConnectionNotR2","UnsplitNucleotide","isValidNucleotide","sugar","firstMonomerInCyclicChain","phosphate","nextMonomerAfterPhosphate","isValidNucleoside","isRnaBaseVariantMonomer","isAmbiguousMonomerLibraryItem","isAmbiguous","isPeptideOrAmbiguousPeptide","Peptide","PeptideSubChain","Chem","UnresolvedMonomer","RNA_DNA_NON_MODIFIED_PART","rnaDnaNaturalAnalogues","unknownNaturalAnalogues","peptideNaturalAnalogues","NO_NATURAL_ANALOGUE","PHOSPHATE_SELECTED_ELEMENT_ID","PHOSPHATE_SYMBOL_ELEMENT_ID","PhosphateRenderer","PHOSPHATE","SUGAR_SELECTED_ELEMENT_ID","SUGAR_SYMBOL_ELEMENT_ID","SugarRenderer","SUGAR_RNA","RNABASE_SELECTED_ELEMENT_ID","RNABASE_SYMBOL_ELEMENT_ID","RNABaseRenderer","UNRESOLVED_MONOMER_SELECTED_ELEMENT_ID","UNRESOLVED_MONOMER_HOVERED_ELEMENT_ID","UNRESOLVED_MONOMER_SYMBOL_ELEMENT_ID","UnresolvedMonomerRenderer","NUCLEOTIDE_SELECTED_ELEMENT_ID","NUCLEOTIDE_HOVERED_ELEMENT_ID","NUCLEOTIDE_SYMBOL_ELEMENT_ID","UnsplitNucleotideRenderer","Y_OFFSET_FROM_MIDDLE","html","DEFAULT_VARIANT_MONOMER_LABEL","variantMonomerItem","_variantMonomerItem$l","variantMonomerLabel","subtype","MIXTURE","monomers","getMonomerClass","monomerCaps","_secondMonomer","_firstMonomer","_monomerFactory","monomerFactory","_monomerFactory2","containDifferentMonomerTypes","_monomerFactory3","_monomerFactory4","MonomerClassToCompare","monomersAttachmentPoints","possibleAttachmentPoints","monomerAttachmentPoints","EmptySubChain","getEmptyMonomerItem","EmptyMonomer","PreviewAttachmentPoint","_AttachmentPoint","connected","usage","rectX","rectY","labelX","labelY","AmbiguousMonomerRenderer","monomerSymbolElementsIds","MonomerRenderer","monomerRenderer","CHAIN_BEGINNING","appendNumberOfMonomers","isMonomersAmountTenOrMore","numberOfMonomersElement","appendPreviewAttachmentPoint","_connectedAttachmentP","selectedAttachmentPoint","connectedAttachmentPoints","showExternal","AmbiguousMonomerSequenceNode","isModification","Chain","isCyclic","fillSubChains","createSubChainIfNeed","_this$lastNode","needCreateNewSubchain","lastNode","subChains","lastSubChain","MonomerSequenceNode","Nucleoside","fromSugar","Nucleotide","isNextMonomerNucleosideOrNucleotideOrPeptide","isNucleosideOrNucleotide","LinkerSequenceNode","addNode","_this$lastNode2","lastMonomerInNode","subChain","_this$lastSubChain","EmptySequenceNode","_this$firstSubChain","firstSubChain","firstNode","forEachNode","createChainWithEmptyNode","emptyChain","emptySequenceNode","emptySubChain","ChainsCollection","chains","chain","monomerToNode","rearrange","chain1","chain2","_chain2$firstNode","_chain2$firstNode2","_chain1$firstNode","_chain1$firstNode2","X_COORDINATE_REDUCTION_FACTOR","reorderedChains","sideConnection","anotherMonomer","anotherChain","_this$chains$","forEachCallback","nodeIndexOverall","chainIndex","subChainIndex","nodeIndex","fromMonomers","chainsCollection","filteredMonomers","_this$getFirstMonomer","getFirstMonomersInChains","_this$getFirstMonomer2","firstMonomersInRegularChains","firstMonomersInCycledChains","CYCLED","monomersList","firstMonomersInChains","getFirstMonomersInRegularChains","getFirstMonomersInCycledChains","isFirstMonomerWithR2R1connection","isRnaBaseConnectedToSugar","handledMonomers","cyclicChains","monomersInSameChain","firstMonomersOfCycledChainsSet","cyclicChain","getMonomerWithLowerCoordsFromMonomerList","monomerList","monomerListShallowCopy","monomer1","monomer2","monomerWithLowerCoords","CHAIN_START_ARROW_SYMBOL_ID","BaseSequenceItemRenderer","_BaseSequenceRenderer","firstNodeInChainPosition","monomerIndexInChain","isLastMonomerInChain","_isEditingSymbol","isEditingSymbol","SequenceRenderer","indexInRow","symbolsInRow","rowIndex","nthSeparationInRow","scaledMonomerPositionForSequence","isSequenceEditInRNABuilderMode","isSequenceEditModeTurnedOn","isSingleEmptyNode","appendBackgroundElement","backgroundElement","appendSpacerElement","spacerGroupElement","isSequenceEditInRnaBuilderModeTurnedOn","appendCounterElement","showCaret","_this$spacerElement","caretElement","spacerElement","removeCaret","_this$caretElement","redrawBackgroundElementColor","_this$backgroundEleme","appendChainStartArrow","drawGreyOverlay","isBeginningOfChain","symbolToDisplay","needDisplayCounter","counterElement","modified","drawModification","_this$rootElement5","_this$backgroundEleme2","_this$selectionRectan","_this$selectionRectan2","_this$selectionRectan3","_this$selectionRectan4","lower","_this$rootElement6","drawBackgroundElementHover","_this$backgroundEleme3","removeBackgroundElementHover","_this$backgroundEleme4","_this$spacerElement2","_this$backgroundEleme5","_this$backgroundEleme6","_this$backgroundEleme7","_this$backgroundEleme8","_this$backgroundEleme9","AmbiguousSequenceItemRenderer","_BaseSequenceItemRend","SequenceNodeRendererFactory","fromNode","firstMonomerInChainPosition","RendererClass","constructor","NucleotideSequenceItemRenderer","NucleosideSequenceItemRenderer","EmptySequenceItemRenderer","ChemSequenceItemRenderer","PhosphateSequenceItemRenderer","PeptideSequenceItemRenderer","UnresolvedMonomerSequenceItemRenderer","UnsplitNucleotideSequenceItemRenderer","PolymerBondSequenceRenderer","secondNode","_this$firstNode","_this$secondNode","_this$firstMonomer$re","_this$secondMonomer2","_this$secondMonomer3","firstMonomerY","firstMonomerX","secondMonomerY","secondMonomerX","scaledPosition","mainLineY","mainLineY1","mainLineY2","areMonomersOnSameRow","isHydrogenBond","_this$selectionElemen","selectionElement","_this$selectionElemen2","moveStart","moveEnd","getRnaPartLibraryItem","rnaBaseName","monomersLibrary","libraryItem","MONOMER_CONST","getPeptideLibraryItem","peptideName","getSugarBySequenceType","sequenceType","SUGAR_DNA","rnaBase","isNotLastNode","needValidation","isNucleotide","createOnCanvas","rnaBaseLibraryItem","sugarName","sequenceTypeEnterMode","sugarLibraryItem","addMonomer","createPolymerBond","BackBoneBondSequenceRenderer","PolymerBondAddOperation","addPolymerBondChangeModel","deletePolymerBondChangeModel","renderersManager","addPolymerBond","deletePolymerBond","PolymerBondDeleteOperation","finishPolymerBondCreationModelChange","PolymerBondMoveOperation","movePolymerBond","PolymerBondShowInfoOperation","showPolymerBondInformation","PolymerBondCancelCreationOperation","cancelPolymerBondCreation","PolymerBondFinishCreationOperation","deletePolymerBondCreationModelChange","finishPolymerBondCreation","SelectLayoutModeOperation","_onExecute","_onInvert","prevMode","onExecute","onInvert","ReconnectPolymerBondOperation","reconnectPolymerBondModelChange","revertReconnectPolymerBondModelChange","redrawDrawingEntity","KetcherProvider","setKetcherInstance","ketcherInstance","getKetcher","ketcherProvider","getStructure","structureFormat","formatterFactory","serverSettings","prepareStructToRender","_prepareStructToRender","parseStruct","factory","service","deleteAllEntitiesOnCanvas","deleteAllEntities","parseAndAddMacromoleculesOnCanvas","_x5","_parseAndAddMacromoleculesOnCanvas","ketStruct","deserialisedKet","_deserialisedKet$draw","deserializeToDrawingEntities","EditorHistory","MonomerAddOperation","addMonomerChangeModel","deleteMonomerChangeModel","deleteMonomer","MonomerMoveOperation","monomerMoveModelChange","invertMonomerMoveModelChange","moveMonomer","MonomerHoverOperation","needRedrawAttachmentPoints","hoverMonomer","AttachmentPointHoverOperation","MonomerDeleteOperation","MonomerItemModifyOperation","updateMonomerItem","revertMonomerItem","DrawingEntityHoverOperation","hoverDrawingEntity","DrawingEntitySelectOperation","selectDrawingEntity","DrawingEntityMoveOperation","moveDrawingEntityChangeModel","invertMoveDrawingEntityChangeModel","redoDrawingEntityChangeModel","wasInverted","moveDrawingEntity","DrawingEntityRedrawOperation","drawingEntityRedrawModelChange","invertDrawingEntityRedrawModelChange","RNA_MONOMER_DISTANCE","RnaPresetTool","preset","mousedown","_this$sugarPreviewRen","sugarPreviewRenderer","_this$editor$drawingE","addRnaPreset","sugarPosition","lastCursorPositionOfCanvas","phosphatePosition","phosphatePreviewRenderer","rnaBasePosition","rnaBasePreviewRenderer","mousemove","_this$sugarPreview","_this$rnaBasePreview","_this$phosphatePrevie","_this$rnaBasePreviewR","_this$phosphatePrevie2","_this$sugarPreviewRen2","sugarPreview","lastCursorPosition","MONOMER_PREVIEW_OFFSET_X","MONOMER_PREVIEW_OFFSET_Y","rnaBasePreview","RNA_BASE_PREVIEW_OFFSET_X","RNA_BASE_PREVIEW_OFFSET_Y","phosphatePreview","PHOSPHATE_PREVIEW_OFFSET_X","mouseLeaveClientArea","_this$sugarPreviewRen3","_this$phosphatePrevie3","_this$rnaBasePreviewR2","mouseover","_this$sugarPreviewRen4","MONOMER_PREVIEW_SCALE_FACTOR","_this$rnaBasePreviewR3","_this$phosphatePrevie4","_monomerFactory5","_monomerFactory6","hidePreview","_this$rnaBasePreviewR4","_this$phosphatePrevie5","_this$sugarPreviewRen5","isNucleoside","phosphateLibraryItem","_editor$drawingEntiti","Matrix","matrix","getRow","_this$matrix$x","forEachRightToLeft","_this$matrix$x2","forEachBottomToTop","_this$matrix$","Connection","connectedNode","isVertical","Cell","connections","CanvasMatrix","matrixConfig","initialMatrix","initialMatrixWidth","fillCells","fillConnectionsOffset","increaseOffset","connection","increaseValue","currentConnections","iterationMethod","cell","biggestOffsetInCell","biggestOffset","polymerBondConnections","polymerBondToConnections","polymerBondConnection","currentConnection","fillRightConnectionsOffset","handledConnections","rowNumber","columnNumber","rowsWithRnaBases","wereBasesInRow","_this3$matrixConfig$i","monomerToCell","initialMatrixRowLength","emptyCellsAmount","cellWithPotentialRnaBase","_this3$polymerBondToC5","_this3$polymerBondToC6","connectedCell","xDistance","yDistance","xDirection","yDirection","xDistanceAbsolute","yDistanceAbsolute","polymerBondToCells","nextCellX","nextCellY","_this3$polymerBondToC","_this3$polymerBondToC2","sign","nextCellToHandle","_this3$polymerBondToC3","_this3$polymerBondToC4","lastCellToHandle","RecalculateCanvasMatrixOperation","recalculateCanvasMatrixModelChange","invertRecalculateCanvasMatrixModelChange","rerenderSideConnectionPolymerBonds","atomIdInMicroMode","addBond","calculateConnections","connectionsAmount","MicromoleculesBond","calculateCharge","calculateRadicalAmount","calculateValence","elementGroupNumber","connectionAmount","radicalAmount","hydrogenAmount","secondAtom","moveToLinkedAtoms","firstAtomCenter","secondAtomCenter","AtomAddOperation","addAtomChangeModel","deleteAtomChangeModel","deleteAtom","AtomDeleteOperation","BondAddOperation","addBondChangeModel","deleteBondChangeModel","deleteBond","BondDeleteOperation","MonomerToAtomBondAddOperation","addMonomerToAtomBondChangeModel","deleteMonomerToAtomBondChangeModel","monomerToAtomBond","addMonomerToAtomBond","deleteMonomerToAtomBond","MonomerToAtomBondDeleteOperation","MACROMOLECULES_BOND_TYPES","payload","bondRenderer","firstSelectedAttachmentPoint","secondSelectedAttachmentPoint","isBondConnectionModalOpen","bondType","toolName","selectedRenderer","__data__","startAttachmentPoint","startBondAttachmentPoint","startPolymerBondCreation","hidePolymerBondInformation","markForRecalculateBegin","_this$bondRenderer","_this$bondRenderer2","_this$bondRenderer3","shouldCalculateBonds","shouldInvokeModal","intendToFinishBondCreation","intendToStartBondCreation","_this$bondRenderer4","_this$bondRenderer5","_this$bondRenderer6","intendToFinishAttachmenPointBondCreation","intendToStartAttachmenPointBondCreation","_event$toElement","_event$fromElement","_this$bondRenderer7","eventToElementData","toElement","eventFromElementData","fromElement","_this$bondRenderer8","cancelIntentionToFinishBondCreation","_this$bondRenderer9","attachmentPointRenderer","_this$bondRenderer10","_this$bondRenderer11","isFirstMonomerHovered","_this$bondRenderer12","mouseup","alreadyHasBond","showModal","finishBondCreation","hasFreeAttachmentPoint","_this$bondRenderer13","_this$bondRenderer14","_this$bondRenderer15","_this$bondRenderer16","_this$bondRenderer17","_this$bondRenderer18","atomRenderer","removeHoverForAllMonomers","checkForPotentialBonds","rnaMonomerClasses","firstMonomerIsRNA","RNAClass","secondMonomerIsRNA","hasPlentyAttachmentPoints","hasPlentyFreeAttachmentPoints","BothR1AttachmentPointUsed","BothR2AttachmentPointUsed","R1AndR2AttachmentPointUsed","VERTICAL_DISTANCE_FROM_MONOMER","DISTANCE_FROM_RIGHT","SNAKE_LAYOUT_CELL_WIDTH","MONOMER_START_X_POSITION","MONOMER_START_Y_POSITION","DrawingEntitiesManager","sugarMonomer","phosphateMonomer","rnaBaseMonomer","monomerIndex","monomerAddOperation","addAmbiguousMonomerChangeModel","attPointStart","attPointEnd","allEntities","polymerBonds","monomerToAtomBonds","deleteSelectedEntities","mergedCommand","deleteDrawingEntity","_monomer","createMonomer","Monomer","monomerItemNew","initialMonomer","addMonomerChangeModelCallback","needToDeleteConnectedEntities","unselectAllDrawingEntities","createDrawingEntitySelectionCommand","selectDrawingEntities","drawingEntities","selectionCommand","unselectDrawingEntity","addDrawingEntitiesToSelection","moveDrawingEntityModelChange","moveChemAtomsPoint","moveSelectedDrawingEntities","partOfMovementOffset","fullMovementOffset","createDrawingEntityMovingCommand","_drawingEntity$second","movingCommand","createDrawingEntityRedrawCommand","redrawCommand","needToDeleteConnectedBonds","modifyMonomerItem","previousSelectedEntities","isValueChanged","SequenceMode","checkBondSelectionForSequenceMode","_bond$secondMonomer","startPolymerBondCreationChangeModel","_polymerBond","_polymerBond$secondMo2","_polymerBond$secondMo3","_polymerBond$secondMo4","_polymerBond$secondMo5","firstAttachmentPoint","secondAttachmentPoint","_polymerBond$secondMo6","SnakeMode","recalculateCanvasMatrix","firstMonomerValidSourcePoint","secondMonomerValidTargetPoint","connectFirstMonomerOperation","connectSecondMonomerOperation","intendToSelectDrawingEntity","cancelIntentionToSelectDrawingEntity","monomersToAdd","monomerPosition","rearrangeChainModelChange","getNucleotideSize","nucleotide","_nucleotide$sugar$ren","_nucleotide$phosphate","_nucleotide$sugar$ren2","_nucleotide$rnaBase$r","reArrangeChain","lastPosition","canvasWidth","rearrangedMonomersSet","maxVerticalDistance","snakeLayoutMatrix","_snakeLayoutMatrix$ge","_snakeLayoutMatrix$ge2","heightMonomerWithBond","isNewRow","isMonomerInRnaChainRow","oldMonomerPosition","matrixX","matrixY","nextPositionAndVerticalDistance","getNextMonomerPositionForSnakeLayout","reArrangeRnaChain","_nucleotide$sugar$ren3","_nucleotide$sugar$ren4","_nucleotide$rnaBase$r2","_nucleotide$rnaBase$r3","_nucleotide$rnaBase","_nucleotide$rnaBase2","_snakeLayoutMatrix$ge3","_snakeLayoutMatrix$ge4","nucleotideSize","heightWithBond","oldSugarPosition","addRnaOperations","_nucleotide$phosphate2","_nucleotide$phosphate3","lastMonomerInNucleotide","baseMonomer","nextMonomerPositionAndVerticalDistance","nextPositionAndDistance","getNextPositionAndDistance","_chainsCollection","canvasMatrix","redrawBonds","previousSnakeLayoutMatrix","reArrangeChains","isSnakeMode","needRedrawBonds","_ref20","rearrangeResult","firstMonomerInNode","getFirstPosition","redrawBondsModelChange","isMonomerFitCanvas","isNucleosideAndPhosphateConnectedAsNucleotide","nucleoside","r2Bond","setMicromoleculesHiddenEntities","micromoleculesHiddenEntities","clearMicromoleculesHiddenEntities","targetDrawingEntitiesManager","monomerToNewMonomer","mergedDrawingEntities","viewModel","monomerAddCommand","addAmbiguousMonomer","addedMonomer","polymerBondCreateCommand","addedPolymerBond","atomAddCommand","addedAtom","newFirstAtom","newSecondAtom","bondAddCommand","addedBond","initialize","centerMacroStructure","structCenter","getMacroStructureCenter","_Vec2$add","_Vec2$add2","endY","originalCenterPointOfCanvas","xmin","ymin","xmax","ymax","applyMonomersSequenceLayout","clearCanvas","removeEmptyNodes","applyFlexLayoutMode","rerenderPolymerBonds","getAllSelectedEntitiesForEntities","newDrawingEntities","selectedDrawingEntities","getAllSelectedEntitiesForSingleEntity","needToSelectConnectedBonds","isPartOfRNA","_polymerBond$getAnoth","validateIfApplicableForFasta","monomerTypes","monomerType","_ref21","_polymerBond$secondMo7","_polymerBond$secondMo8","newFirstMonomerAttachmentPoint","newSecondMonomerAttachmentPoint","initialFirstMonomerAttachmentPoint","initialSecondMonomerAttachmentPoint","reconnectPolymerBond","ambiguousMonomerItem","atomAddOperation","_bond","bondAddOperation","_monomerToAtomBond","monomerAtomBond","monomerAddToAtomBondOperation","BaseMode","modeName","previousMode","DEFAULT_LAYOUT_MODE","changeMode","isUndo","ModeConstructor","modesMap","setMode","needRemoveSelection","_onKeyDown","Promise","resolve","checkIfTargetIsInput","_this$keyboardEventHa","keyboardEventHandlers","onKeyDown","onCopy","_entity$secondMonomer","_entity$secondMonomer2","serializedKet","_onPaste","isCanvasEmptyBeforePaste","_clipboardData","hasDrawingEntities","_pasteIsInProgress","pasteFromClipboard","zoomToStructuresIfNeeded","onPaste","_pasteFromClipboard","_callee3","pastedStr","inputFormat","isSequenceOrFasta","_callee3$","_context3","pasteKetFormatFragment","pasteWithIndigoConversion","scrollForView","isPasteAllowedByMode","isPasteAvailable","errorTitle","errorMessage","updateMonomersPosition","_drawingEntitiesManag","applyAdditionalPasteOperations","_pasteWithIndigoConversion","_callee4","indigo","stringError","_args4","_callee4$","_context4","outputFormat","unsupportedSymbolsError","newNodePosition","getNewNodePosition","_event$target","_event$target2","HTMLElement","nodeName","FlexMode","_BaseMode","TEXT_COLOR","HOVER_COLOR","BUTTON_OFFSET_FROM_CANVAS","BUTTON_Y_OFFSET_FROM_ROW","NewSequenceButton","indexOfRowBefore","_chain$lastNode","lastNodeRendererInChain","buttonElement","appendPlusIcon","_this$buttonElement","_this$buttonElement2","naturalAnalogues","uniq","Direction","_isEditMode","isEditMode","_isEditInRNABuilderMode","isEditInRNABuilderMode","_chainsCollection$fir","needScroll","needReArrangeChains","firstMonomerPosition","turnOnEditMode","sequenceItemRenderer","needToRemoveSelection","setCaretPositionNextToMonomer","turnOffEditMode","eventData","currentChainIndex","updatedSelection","labeledNucleoelement","sugarMonomerItem","baseMonomerItem","phosphateMonomerItem","sugarLabel","baseLabel","phosphateLabel","currentNode","getNodeByPointer","sugarR2","nextMonomerInSameChain","bondNodesThroughNewPhosphate","ReinitializeModeOperation","click","isClickedOnSequenceItem","unselectAllEntities","_event$target3","moveCaretForward","_event$target4","isClickedOnEmptyPlace","isEventOnSequenceItem","sequenceItemBoundingBox","rootBoundingClientRect","_SequenceRenderer$get","getRendererByMonomer","isRightSideOfSequenceItemClicked","setCaretPositionByMonomer","resetLastUserDefinedCaretPosition","selectionStarted","selectionStartCaretPosition","caretPosition","_event$target5","mousemoveCounter","setCaretPositionBySequenceItemRenderer","startCaretPosition","endCaretPosition","getMonomersByCaretPositionRange","moveCaretOperation","RestoreSequenceCaretPositionOperation","additionalPhosphate","tryToCreatePolymerBond","handlePeptideNodeAddition","enteredSymbol","newPeptideLibraryItem","peptideAddCommand","newPeptide","newPeptideNode","insertNewSequenceFragment","handleRnaDnaNodeAddition","addedNodeModelChanges","nodeToAdd","connectNodes","firstNodeToConnect","secondNodeToConnect","nextNodeInSameChain","_firstNodeToConnect$l","_secondNodeToConnect$","nodeR2Bond","nextNodeR1Bond","deleteBondToNextNodeInChain","finishNodesDeletion","previousCaretPosition","newCaretPosition","isConnectionPossible","areR1R2Free","showMergeWarningModal","handleNodesDeletion","selections","selectionRange","selectionStartNode","selectionEndNode","isPhosphateAdditionalyDeleted","nodeBeforeSelection","getPreviousNode","nodeAfterSelection","getNextNode","nodeInSameChainBeforeSelection","getPreviousNodeInSameChain","nodeInSameChainAfterSelection","getNextNodeInSameChain","getNewSequenceItemPosition","deleteNode","nodeToDelete","Left","previousNode","nodesToDelete","deleteSelectedDrawingEntities","Right","backspace","moveCaretUp","moveCaretDown","moveCaretBack","naturalAnalogue","setCaretPosition","deleteSelection","code","insertNewSequenceItem","arrowKey","shiftArrowSelectionInEditMode","deletionModelChanges","isR1Free","_entity$firstMonomerI","isR2Free","_entity$lastMonomerIn","firstEntity","lastEntity","currentEdittingNode","previousNodeInSameChain","lastNodeOfNewFragment","firstNodeOfNewFragment","isPasteInEnd","isPasteInStart","_currentSequence$last","currentSequence","currentChain","currentSequenceHasPhosphate","lastNonEmptyNode","nextCaretPosition","preserveSideChainConnections","sideConnectionsData","secondMonomerBondData","_secondMonomerBondDat","secondMonomerAttachmentPointName","firstMonomerAttachmentPointName","replaceSelectionWithMonomer","previousSelectionNode","nextNode","sideChainConnections","hasPreviousNodeInChain","hasNextNodeInChain","newMonomer","newMonomerSequenceNode","sideConnectionData","replaceSelectionsWithMonomer","previousReplacedNode","nodeSelection","checkIfNewMonomerCouldEstablishConnections","newMonomerAttachmentPoints","oldMonomerBonds","isBackBoneChainConnection","selectionsContainLinkerNode","selectionsCantPreserveConnectionsWithMonomer","presetHasNeededAttachmentPoints","sugarHasR1","phosphateHasR2","selectionsCantPreserveConnectionsWithPreset","checkNodeInsertionPossibility","newNode","currentNodeIsNotEmpty","missingAttachmentPoint","previousMonomerHasR2","newMonomerHasR1","rightSideInsertImpossible","nextMonomerHasR1","newMonomerHasR2","leftSideInsertImpossible","nodeCanBeInserted","insertMonomerFromLibrary","confirmationText","onConfirm","_this$checkNodeInsert","createRnaPresetNode","newPresetNode","replaceSelectionWithPreset","rnaPresetAddModelChanges","addRnaPresetFromNode","monomerForSideConnections","replaceSelectionsWithPreset","insertPresetFromLibrary","_this$checkNodeInsert2","chainsCollectionOrNode","nextNodeToConnect","previousNodeToConnect","needConnectWithPreviousNodeInChain","needConnectWithNextNodeInChain","previousFromCurrentEdittingMonomer","nodeBeforePreviousNode","getNextChainPosition","offsetFromPrevious","drawnEntitiesBoundingBox","getRenderedStructuresBbox","unselectEmptySequenceNodes","removeNewSequenceButtons","FlexModePolymerBondRenderer","startPositionInPixels","endPositionInPixels","previousStateOfIsMonomersOnSameHorizontalLine","appendBond","appendBondGraph","monomer1Y","monomer2Y","finished","moveGraphBondEnd","_this$hoverCircleArea","_this$selectionElemen3","hoverCircleAreaElement","moveGraphBondStart","_this$selectionElemen4","LineDirection","LINE_FROM_MONOMER_LENGTH","VERTICAL_LINE_LENGTH","RNA_CHAIN_VERTICAL_LINE_LENGTH","CORNER_LENGTH","DOUBLE_CORNER_LENGTH","BOND_END_LENGTH","CELL_HEIGHT","SMOOTH_CORNER_SIZE","SIDE_CONNECTION_BODY_ELEMENT_CLASS","SnakeModePolymerBondRenderer","calculateIsSnakeBond","cells","appendSideConnectionBond","isSnakeBond","appendSnakeBond","updateSnakeBondPath","drawPartOfSideConnection","isHorizontal","maxXOffset","maxYOffset","connectionYOffset","endOfPathPart","sideConnectionBondTurnPoint","_cell$monomer$rendere","pathPart","generateBend","_firstCell$node","firstCell","firstCellConnection","isVerticalConnection","isStraightVerticalConnection","isFirstMonomerOfBondInFirstCell","isTwoNeighborRowsConnection","dAttributeForPath","previousConnection","previousCell","horizontalPartIntersectionsOffset","areCellsOnSameRow","isSecondCellEmpty","maxHorizontalOffset","cellIndex","cellConnection","isLastCell","_xDirection","directionObject","getMonomerWidth","_this$polymerBond$fir","_this$polymerBond$fir2","getMonomerHeight","_this$polymerBond$fir3","_this$polymerBond$fir4","reCheckAttachmentPoint","isR1TheCurrentAttachmentPointOfFirstMonomer","isBondConnectedWithNucleotide","verticalLineLength","isSecondMonomerBottomRight","Horizontal","addLineFromLeftToBottom","Vertical","addLineFromTopToRight","isSecondMonomerTopRight","addLineFromLeftToTop","addLineFromBottomToRight","isSecondMonomerBottomLeft","addLineFromTopToLeft","addLineFromRightToBottom","isSecondMonomerTopLeft","addLineFromRightToTop","isSecondMonomerLeft","addRandomLine","lineDirection","isSideConnectionBondDrawn","moveSnakeBondEnd","moveSnakeBondStart","_this$selectionElemen5","_this$selectionElemen6","allSideConnectionBondsBodyElements","querySelectorAll","bondBodyElement","dx1","dy1","LayoutMode","polymerBondRendererMap","Flex","Snake","PolymerBondRendererFactory","createInstance","checkIfIsSnakeMode","createInstanceByMode","AtomRenderer","showHover","hideHover","appendSelectionContour","labelLength","_this$textElement","_ZoomTool$instance$ca","labelBbox","labelWidth","labelHeight","canvasBoundingClientRect","canvasX","HOVER_PADDING","HOVER_RECTANGLE_RADIUS","selectionContourElement","_this$hoverElement","_this$hoverElement2","atomHaldEdges","atomsToHalfEdges","firstHalfEdge","atomNeighborsHalfEdges","isAtomTerminal","isAtomInMiddleOfChain","_this$atom$calculateV","_this$atom$calculateV2","BOND_WIDTH","BondRenderer","getDoubleBondShiftForChain","secondHalfEdge","sinToLeftNeighborHalfEdge","sinToRightNeighborHalfEdge","getDoubleBondShiftForLoop","loop1HalfEdgesAmount","loop2HalfEdgesAmount","loop1DoubleBondsAmount","loop2DoubleBondsAmount","BENZENE_RING_BONDS_AMOUNT","getDoubleBondShift","loop1Id","loop2Id","halfEdges","doubleBondsAmount","shiftPositionIfAtomLabelVisible","halfEdge","_atom$renderer","_this$bond$firstAtom$","pathShape","_this$canvas2","bondsToHalfEdges","halfEdgeStart","halfEdgeEnd","linesOffset","bondStartPosition","bondEndPosition","firstLinePartShift","secondLinePartShift","firstLineStartPosition","leftNormal","firstLineEndPosition","secondLineStartPosition","secondLineEndPosition","cosToRightNeighborHalfEdge","cosToLeftNeighborHalfEdge","halfOfBondEndWidth","bondEndFirstPoint","bondEndSecondPoint","normalizedDirection","offsetBetweenLines","numberOfLines","MonomerToAtomBondRenderer","RenderersManager","markForReEnumeration","needRecalculateMonomersEnumeration","needRecalculateMonomersBeginning","_monomer$renderer2","_drawingEntity$baseRe","_drawingEntity$baseRe2","deleteAllDrawingEntities","polymerBondRenderer","_monomer$renderer3","_polymerBondRenderer$","_polymerBond$renderer2","_polymerBond$renderer3","_polymerBond$renderer4","_polymerBond$firstMon2","_polymerBond$firstMon3","_polymerBond$renderer5","_polymerBond$firstMon4","_polymerBond$firstMon5","recalculateEnumeration","recalculateBeginning","recalculatePeptideChainEnumeration","peptideRenderer","_currentEnumeration","currentEnumeration","stack","stackItem","isR2R1Connection","recalculateRnaChainEnumeration","rnaComponentRenderer","_rnaBaseMonomer$rende","_rnaBaseMonomer$rende2","recalculatePeptideEnumeration","firstMonomers","recalculateRnaEnumeration","recalculateMonomersEnumeration","_ChainsCollection$get","_ChainsCollection$get2","firstMonomersInCyclicChains","isOnlyPartOfRnaChain","nextMonomerAfterPhospate","recalculateMonomersBeginning","_rnaBaseMonomer$rende3","_polymerBond$firstMon6","_polymerBond$firstMon7","_polymerBond$firstMon8","_polymerBond$renderer6","_polymerBond$firstMon9","_polymerBond$firstMon10","_polymerBond$firstMon11","_secondMonomer$render","_secondMonomer$render2","_secondMonomer$render3","_monomer$renderer4","_monomer$renderer5","_monomer$renderer6","_bond$renderer","_bond$monomer$rendere","_bond$monomer$rendere2","_bond$renderer2","_monomer$renderer7","_needRemoveSelection","_isUndo","bottomRightMonomerPosition","isSequenceMode","_renderersManager","nextPosition","MonomerToAtomBondSequenceRenderer","monomerNode","_this$atom$renderer","_this$atom$renderer2","monomerY","monomerX","atomY","atomX","NUMBER_OF_SYMBOLS_IN_ROW","emptyChainIndex","showNodes","emptySequenceItemRenderers","emptySequenceItemRenderer","newSequenceButtons","newSequenceButton","chainBeforeEmptyChainIndex","_firstNode$monomer$re","newSequenceEmptyNode","currentChainStartPosition","currentMonomerIndexInChain","currentMonomerIndexOverall","isEditInRnaBuilderMode","_Chain$createChainWit","_node$monomers","curr","showNewSequenceButton","setCaretPositionByNode","lastChainStartPosition","lastChain","handledMonomersToAttachmentPoints","handledAttachmentPoints","connectedSugarToBase","anotherMonomerHandledAttachmentPoints","_chain$firstMonomer","_subChainNode$rendere","oldSubChainNode","_oldSubChainNode$rend","subChainNode","nodeToCompare","lastUserDefinedCaretPosition","finalArray","chainNodes","getNodeIndexInRowByGlobalIndex","restNodes","nodeIndexInRow","nodesGroupedByRows","idexRow","currentIndex","currentNodeIndexInRow","currentChainRow","symbolsBeforeCaretInCurrentRow","lastUserDefinedCursorPositionInRow","previousRowOfNodes","symbolsAfterCaretInCurrentRow","nextRowOfNodes","lastNodeIndex","sequencePointer","nodeToReturn","getLastNonEmptyNode","subChainBeforeLast","getLastNode","nodeOnNextPosition","nodeOnPreviousPosition","oldNewSequenceChainIndex","isNewSequenceChain","previousNodeChainIndex","getShiftArrowChanges","previousChain","previousChainLastEmptyNode","needTurnOffSelection","lastSelectionRangeIndex","_previousNode","isNucleosideConnectedAndSelectedWithPhosphate","hasR1Connection","_node$monomer$rendere","nodePosition","rendererToReturn","RNASequenceItemRenderer","_firstNodeInChainPosition","_monomerIndexInChain","_isLastMonomerInChain","_subChain","_this$node$rnaBase$mo","drawCommonModification","_RNASequenceItemRende","_node$phosphate","phosphateModificationCircleElement","nucleosideCircleElement","AMINO_ACID","MODDNA","SUGAR","BASE","ketMonomerClass","unresolved","MonomerClass","Action","addOp","mergeWith","sortedOperations","invertedOperation","fromAromaticTemplateOnBond","template","_events","simpleFusing","SELECTION_DISTANCE_COEFFICIENT","SELECTION_WITHIN_TEXT","findMaps","findClosestAtom","findClosestBond","findClosestEnhancedFlag","findClosestDataSGroupData","findClosestSGroup","findClosestRxnArrow","findClosestRxnPlus","findClosestFrag","findClosestRGroup","findClosestSimpleObject","findClosestText","cursorPosition","referencePoints","skip","closestAtom","maxMinDist","skipId","closestBond","closestBondCenter","minCDist","mid","cdist","inStripe","_minDist","inBox","xDist","rxnArrow","_sg$getContractedPosi","pg","findClosestItem","mp","other","findCloseMerge","srcId","atomGetAttr","atomGetDegree","atomGetSGroups","atomGetPos","findStereoAtoms","monomerAtoms","connectedBonds","connectedWithStereoBond","structSelection","formatSelection","atomForNewBond","_atomNeighbours$","neighbours","atomNeighbours","prevBondId","prevBond","prevBondType","neiPos","maxI","maxAngle","neiNeighbours","neiV","neiAngle","neiNei","neiNeiPos","vDiff","shallBe180DegToPrevBond","prevBondAngle","closest","getRelSGroupsBySelection","selectedAtoms","_sgid","isAttachmentBond","isBondStartsInSelectionAndEndsOutside","isBondEndsInSelectionAndStartsOutside","fromRGroupAttrs","fromRGroupFragment","rgidNew","fromUpdateIfThen","rgidOld","fromSeveralSgroupAddition","descriptors","fromSgroupAddition","fValue","localAttrs","fromSgroupAttrs","setExpandSGroup","fromAtomsAttrs","setExpandMonomerSGroup","bondsToOutside","attachmentAtomsFromOutside","sGroupBBox","sGroupWidth","sGroupHeight","visitedAtoms","visitedSGroups","atomsToMove","sGroupsToMove","prepareSubStructure","subStructureKey","atomSGroups","atomInSGroup","_sGroupsToMove$get","anotherSGroupId","anotherSGroup","previousArray","_atomsToMove$get","_restruct$molecule","neighborAtomId","_sGroupsToMove$get2","subStructBBox","subStructCenter","sGroupCenter","moveVector","finalMoveVector","expandSGroupWithMultipleAttachmentPoint","sGroupAttributeAction","fromSgroupDeletion","needPerform","sG","asteriskAction","plainCarbon","fromSgroupAction","newSg","sourceAtoms","fromBondAction","atomsFromBonds","getAtomsFromBonds","newSourceAtoms","fromGroupAction","fromMultiFragmentAction","fromAtomAction","fromQueryComponentSGroupAction","targetAtoms","allFragments","fragId","_restruct$atoms$get5","getAtomsBondIds","currSelection","bondid","removeAtomFromSgroupIfNeeded","removeSgroupIfNeeded","sgCounts","count","_restruct$sgroups$get","fromSgroupAttachmentPointAddition","fromSgroupAttachmentPointRemove","atomAttachmentPoints","fromBondAddition","beginAtomPos","endAtomPos","_struct$frags$get","mouseDownNothingAndUpNothing","beginAtomAttr","endAtomAttr","newFragmentId","newBeginAtomId","newEndAtomId","mouseDownNothingAndUpAtom","endAtomId","mergeSgroups","mouseDownAtomAndUpNothing","beginAtomId","startsOnAtom","endsOnAtom","_mouseDownNothingAndU","_mouseDownNothingAndU2","_mouseDownNothingAndU3","_mouseDownNothingAndU4","_mouseDownAtomAndUpNo","_mouseDownAtomAndUpNo2","addAttachmentPointToSuperatom","newBondId","fromBondStereoUpdate","mergedFragmentId","mergeFragmentsIfNeeded","fromBondsAttrs","reset","bids","fromBondsMerge","mergeMap","atomPairs","dstId","bondCI","dst","src","fromAtomMerge","fromBondFlipping","isInteger","withReverse","beginFrId","endFrId","fragmentStereoBonds","_struct$atoms$get3","_struct$atoms$get4","aId","_struct$atoms$get5","fromStereoAtomAttrs","plainBondTypes","bondChangingAction","itemID","bondProps","newItemId","removeAttachmentPointFromSuperatom","_sgroup$item5","_sgroup$item6","anotherSideAtomId","fromAtomAddition","_atomNeighbors$","atomNeighbors","fromAtomsFragmentAttr","newfrid","oldfrid","_dstAtomNeighbors$","_atomNeighbors$2","fragAction","mergeBondId","sgChanged","dstAtomNeighbors","frid2","fridAtoms","atomsToNewFrag","moveAtomsAction","srcAtoms","dstAtom","notExpandedContexts","atomsToSgroup","without","checkAtomValence","fromNewCanvas","fromDescriptorsAlign","fromChain","chainItems","fromItemsFuse","usedAtoms","connectedAtomIds","getAllConnectedAtomsIds","mergeMapOfItemsToSet","valenceCheck","getItemsToFuse","mergeItems","closestToMerge","findMerge","getHoverToFuse","hoverItems","atomToFunctionalGroup","Date","now","itemsSet","closestMap","bondsIds","initialAtoms","connectedAtoms","_bond$b","initialAtom","relevantConnectedComponent","fromMultipleMove","lists","shouldPerform","atomsToInvalidate","rxnPulse","sgData","fromStereoFlagUpdate","processAtom","usedIds","fromFragmentSplit","rgForRemove","fromRGroupAttachmentPointUpdate","fromRGroupAttachmentPointsDeletionByAtom","fromRGroupAttachmentPointAddition","attachmentPointsToDelete","fromRGroupAttachmentPointDeletion","_getNewAtomAttachment","getNewAtomAttachmentPoints","newAttachmentPoints","actionToUpdateAtomsAttrs","actionToDeletePoint","rgroupAttachmentPointToDelete","pointToDelete","currentAttachmentPoints","None","pointToDeleteType","fromOneAtomDeletion","fromFragmentDeletion","fromBondDeletion","skipAtoms","_restruct$bonds$get","_restruct$bonds$get2","beginAtomConnectedToBond","endAtomConnectedToBond","atomsToRemove","fromOneBondDeletion","rawSelection","frids","sgroupAtoms","actionRemoveBonds","removedRGroupAttachmentPoints","frid3","actionToDeleteRGroupAttachmentPoints","fromPaste","pstruct","xy0","getStructCenter","fridMap","pasteItems","tmpAtom","newsgid","sgAction","oper","clonedImage","clonedMultitailArrow","__frag","newRgId","isOnlyOneSGroup","onlyOneStructsSgroupId","fromImageCreation","halfSize","Image","fromImageDeletion","fromImageMove","fromImageResize","referencePositionInfo","positionWithOffset","fromMultitailArrowCreation","fromMultitailArrowDeletion","fromMultitailArrowMove","fromMultitailArrowTailAdd","fromMultitailArrowTailRemove","fromMultitailArrowHeadTailsResize","fromMultitailArrowHeadTailMove","fromArrowAddition","fromArrowResizing","fromArrowDeletion","fromPlusAddition","fromPlusDeletion","fromFlip","flipDirection","structToFlip","fromStructureFlip","fromRxnArrowFlip","fromRxnPlusFlip","fromTextFlip","rxnArrowIds","_rxnArrow$pos","oyAngle","rotateAngle","flipPointByCenter","rxnPlusIds","plusId","rxnPlus","textIds","textId","textMiddleLeft","textMiddleRight","textCenter","flipBonds","bondIds","pointToFlip","fromRotate","rotateDelta","did","flagId","fromSimpleObjectDeletion","fromSimpleObjectAddition","fromSimpleObjectResizing","benzeneMoleculeName","cyclopentadieneMoleculeName","benzeneDoubleBondIndexes","fromTemplateOnCanvas","_fromPaste","_fromPaste2","extraBondAction","additionalAtom","middleAtom","actionRes","fromTemplateOnAtom","extraBond","tmpl","isTmplSingleGroup","extraRes","angle0","fromTemplateOnBondAction","fromTemplateOnBond","getConnectingBond","isBenzeneTemplate","isCyclopentadieneTemplate","_Bond$getBondNeighbou","isOnlyTwoConnectingBonds","beginBond","endBond","tmplBond","tmplBegin","atomsMap","bondAtoms","_utils$mergeBondsPara","mergeA","fusingBondType","isFusingBenzeneBySpecialRules","tBond","tBondIndex","existId","previewBondId","newBondType","_Bond$getBondNeighbou2","commonBond","fromTextCreation","fromTextUpdating","fromTextDeletion","HighlightAdd","highlightId","Highlight","notifyChanged","HighlightDelete","highlightToRemove","HighlightUpdate","newData","oldData","_this$newData","highlightToUpdate","oldAtoms","oldBonds","oldRgroupAttachmentPoints","oldColor","updatedHighlight","_this$oldData","reAtoms","reBonds","reRgroupAttachmentPoints","rgroupAPid","fromHighlightCreate","fromHighlightClear","HISTORY_SIZE","historyPointer","megreWithLatestHistoryCommand","latestCommand","historyStack","_this$editor","_this$editor2","lastCommand","turnOffSelectionCommand","MonomerTool","monomerPreviewRenderer","_this$monomerPreview","_this$monomerPreviewR","monomerPreview","_this$monomerPreviewR2","variantMonomer","_this$monomerPreviewR3","EraserTool","selectedItemRenderer","createBrush","brushArea","brush","d3Brush","brushed","mo","setSelectedEntities","_this$brushArea","_this$brush","onStartBrush","onBrush","brushEvent","sourceEvent","handleResizeCanvas","extent","keyModifiers","canvasElement","canvasResizeObserver","isSequenceAnyEditMode","mousePositionAfterMove","mousePositionBeforeMove","ModKey","moveStarted","selectModelChanges","selectedEntitiesArr","_this$editor$drawingE2","currentSubChain","bondsInsideCurrentChain","_renderer$drawingEnti","_this$canvasResizeObs","disconnect","ClearTool","isCurrentModeSequence","HandTool","classList","dragBehavior","handleDragStart","handleDragging","handleDragEnd","isBaseTool","tool","toolsMap","vectorUtils","renderCache","previousOptions","MIN_ATTACHMENT_POINT_SIZE","attachmentPointRegExp","RenderStruct","prepareStruct","_newStruct$sgroups$ge","newStruct","convertAllSGroupAttachmentPointsToRGroupAttachmentPoints","removeSmallAttachmentPointLabelsInModal","labelInMonomerConnectionsModal","isSmall","wrapperElement","_options$cachePrefix","cachePrefix","_options$needCache","needCache","cacheKey","innerHTML","preparedStruct","structureSize","structureSizeInPixels","wrapperElementBoundingRect","isStructureLessThanWrapper","structureRectangleSize","svgSize","extendedOptions","isPolymerEditorTurnedOn","rnd","attachmentPointAtom","convertToRGroupAttachmentPointForDisplayPurpose","MacromoleculesConverter","convertMonomerToMonomerMicromolecule","addMonomerAtomToStruct","atomClone","convertAttachmentPointNameToNumber","findAttachmentPointAtom","monomerToAtomIdMap","attachmentPointAtomId","globalAttachmentAtomId","convertDrawingEntitiesToStruct","monomerToMonomerMicromolecule","atomIdsMap","monomerBonds","oldAtom","oldAtomId","_this$addMonomerAtomT","_monomer$monomerItem$2","_attachmentPoint$leav","bondClone","conversionErrorMessage","_monomerToAtomIdMap$g","_monomerToAtomIdMap$g2","_this$findAttachmentP","_this$findAttachmentP2","_monomerToAtomIdMap$g3","_this$findAttachmentP3","convertMonomerMicromoleculeToMonomer","sgroupToMonomer","monomerAdditionCommand","convertFragmentToChem","fragmentNumber","fragmentStruct","fragmentBbox","colorScheme","favorite","atomRglabel","getFragmentsGroupedBySgroup","groupedFragments","_fragment","isAlreadyGrouped","fragmentsGroup","fragmentSgroups","lastFragmentGroupIndex","atomFragmentId","findAtomByMicromoleculeAtomId","convertStructToDrawingEntities","fragmentIdToMonomer","fragmentIdToAtomIdMap","globalAtomIdToMonomerMap","atomIdMapObject","fromEntries","localAtomIdToGlobalAtomId","superatomAttachmentPointToBond","beginAtomSgroup","endAtomSgroup","isConnectionBetweenMonomerAndMolecule","moleculeAtomId","moleculeAtom","monomerSgroup","atomIdInMicromolecules","atomToConnect","beginAtomSgroupAttachmentPoints","endAtomSgroupAttachmentPoints","beginAtomAttachmentPointNumber","sgroupAttachmentPoint","beginAtomAttachmentPoint","endAtomAttachmentPointNumber","endAtomAttachmentPoint","HalfEdge","calculateDoubleBondsAmount","ViewModel","setHalfBondProperties","oppositeHalfEdge","setAtomsToHalfEdgesMap","atomHalfEdges","setBondsToHalfEdgesMap","initHalfEdge","firstHalfEdgeId","secondHalfEdgeId","initHalfEdges","setHalfEdgesAngle","nextHalfEdge","leftNeighborHalfEdge","rightNeighborHalfEdge","sortAtomsHalfEdges","halfEdge1","halfEdge2","halfEdgeIndex","halfEdgesInLoop","firstAtomId","secondAtomId","getAngleBetweenHalfEdges","nextNextHalfEdge","currentHalfEdge","halfEdgesInPotentialLoop","halfEdgesInSubLoop","clearState","isMouseMainButtonPressed","button","_type","Macromolecules","drawnStructuresWrapperElement","setMonomersLibrary","monomersDataRaw","_monomersLibraryParsedJson","subscribeEvents","domEventSetup","setupContextMenuEvents","setupKeyboardEvents","setupCopyPasteEvent","zoomTool","micromoleculesEditor","switchToMacromolecules","rerenderSequenceMode","monomersLibraryParsedJson","_monomersLibrary","convertMonomersLibrary","monomersLibraryJson","root","templates","templateRef","MONOMER_GROUP_TEMPLATE","handleHotKeyEvents","_keySettings$shortcut","keySettings","isInput","setupHotKeysEvents","keydownEventHandler","addEventListener","copyEventHandler","pasteEventHandler","hotKeyEventHandler","isClickOnCanvas","onSelectMonomer","onSelectRNAPreset","onSelectTool","onCreateBond","onCancelBondCreation","onSelectMode","eventName","useModeIfNeeded","useToolIfNeeded","onEditSequence","onTurnOnSequenceEditInRNABuilderMode","onTurnOffSequenceEditInRNABuilderMode","onChangeSequenceTypeEnterMode","isReconnection","_this$drawingEntities","PolymerBondTool","handleBondCreation","handleBondCreationCancellation","hasModeChanged","mergeWithLatestHistoryCommand","ToolConstructor","oldTool","unsubscribeEvents","handlers","removeEventListener","trackedDomEvents","toolEventHandler","DOMSubscription","subs","updateLastCursorPosition","isToolUsed","clientAreaBoundingBox","pageX","pageY","eventHandlerName","_editorTool$isSelecti","editorTool","conditions","isSelectionRunning","condition","_editorTool$eventHand","_this$mode","_this$mode$eventHandl","isHandToolSelected","switchToMicromolecules","_MacromoleculesConver","setMacromoleculeConvertionError","Micromolecules","_this$micromoleculesE","_MacromoleculesConver2","isCurrentModeWithAutozoom","_ketcher_isAutozoomDisabled","templateToMonomerProps","fullName","naturalAnalogShort","MonomerFullName","classHELM","idtAliases","monomerToDrawingEntity","getTemplateAttachmentPoints","seqId","seqid","createMonomersForVariantMonomer","variantMonomerTemplate","parsedFileContent","monomerTemplates","option","templateId","monomerTemplate","convertMonomerTemplateToStruct","MonomerConstructor","fillStructRgLabelsByMonomerTemplate","variantMonomerToDrawingEntity","polymerBondToDrawingEntity","superatomMonomerToUsedAttachmentPoint","_firstMonomer$monomer","_secondMonomer$monome","_superatomMonomerToUs3","_superatomMonomerToUs4","endpoint1","_superatomMonomerToUs","endpoint2","_superatomMonomerToUs2","validateMultitailArrows","json","validate","ajv","Ajv","compile","schema","imageToKet","imageNode","imageToStruct","multitailArrowToKet","multitailArrowToStruct","parseNode","currentStruct","fillStruct","serializeMicromolecules","moleculeId","validateMonomerNodeTemplate","validateConnectionTypeAndEndpoints","connectionType","parseAndValidateMacromolecules","fileContent","_parsedFileContent$ro","nodeDefinition","deserializeToStruct","deserializedContent","filterMacromoleculesContent","_parsedFileContent$ro2","fileContentForMicromolecules","MONOMER","AMBIGUOUS_MONOMER","convertMonomerTemplateToLibraryItem","monomerLibraryItem","_parsedFileContent$ro3","_this$parseAndValidat","hasValidationErrors","monomerIdsMap","deserializedMicromolecules","structToDrawingEntitiesConversionResult","_atomIdsMap","globalAtomId","localAtomId","bondAdditionCommand","getConnectionMonomerEndpoint","getConnectionMoleculeEndpoint","serializeMonomerTemplate","templateNameWithPrefix","mol0","serializeVariantMonomerTemplate","monomerTemplateId","serializeMacromolecules","monomerName","probability","String","serializedMacromolecules","micromoleculesStruct","_struct","removeLeavingGroupsFromConnectedAtoms","_this$serializeMacrom","serializedMicromoleculesStruct","library","MONOMER_TEMPLATE","AMBIGUOUS_MONOMER_TEMPLATE","variantMonomerLibraryItem","resultingStruct","_template$attachmentP","_template$attachmentP2","firstAtomInLeavingGroup","leavingGroupAtom","attachmentPointsToReplace","attachmentPointClone","attachmentPointToAdd","attachmentPointToDelete","paddedNum","precision","numStr","padStart","parseDecimalInt","partitionLine","withspace","partitionLineFixed","itemLength","fmtInfo","bondTypeMap","bondStereoMap","v30bondStereoMap","bondTopologyMap","countsLinePartition","atomLinePartition","bondLinePartition","atomListHeaderPartition","atomListHeaderLength","atomListHeaderItemLength","chargeMap","valenceMap","implicitHydrogenMap","v30atomPropMap","CHG","RAD","MASS","VAL","HCOUNT","INVRET","SUBST","UNSAT","RBCNT","rxnItemsPartition","FRAGMENT","REACTANT","PRODUCT","AGENT","rxnMerge","mols","nReactants","nProducts","nAgents","shouldReactionRelayout","bbReact","bbAgent","bbProd","molReact","molAgent","molProd","bondLengthData","bondLengthDataMol","avgBondLength","fragmentType","shiftMol","xorig","over","bb1","bb2","bbReactAll","bbProdAll","defaultArrowLength","defaultOffset","arrowEnd","rgMerge","scaffold","readKeyValuePairs","valueString","partition","readKeyMultiValuePairs","postLoadMul","atomReductionMap","m","raid","patomsMap","identityMap","bondsToRemove","beginIn","endIn","postLoadSru","postLoadSup","postLoadGen","_atomMap","postLoadDat","postLoadMon","postLoadMer","postLoadCop","postLoadCro","postLoadMod","postLoadGra","postLoadCom","postLoadMix","postLoadFor","postLoadAny","loadSGroup","postLoadMap","initSGroup","propData","kv","applySGroupProp","propName","numeric","core","applySGroupArrayProp","num","part","toIntArray","applyDataSGroupName","applyDataSGroupExpand","applyDataSGroupQuery","applyDataSGroupQueryOp","applyDataSGroupDesc","applyDataSGroupInfo","applyDataSGroupInfoLine","substr","applyDataSGroupData","finalize","trimRight","endsWith","applyDataSGroupDataLine","strArray","parseSGroupSAPLineV2000","ctabString","_utils$partitionLine","_utils$partitionLine2","sss","nn6","chunksNumberInLine","attachmentPointsStr","CHUNK_SIZE","stringForParse","CHUNK_PARTS_LENGTHS","_utils$partitionLine3","_utils$partitionLine4","iii","ooo","leaveAtomParsedId","parseAtomLine","atomLine","atomSplit","massDifference","parseBondLine","bondLine","bondSplit","parseAtomListLine","atomListLine","parsePropertyLines","ctabLines","charAt","propValue","propertyData","subLabels","arrs","arri","a2r","rglabels","a2rs","a2ri","hhh","parsePropertyLineAtomList","expandedSGroups","eg","_sGroup$parseSGroupSA","applyAtomProp","propId","propVal","parseCTabV2000","countsSplit","atomCount","bondCount","atomListCount","isAbs","isAnd","stextLinesCount","propertyLinesCount","atomLines","bondLines","atomListLines","atomLists","pair","psg","emptyGroups","parseRg2000","coreLines","fragmentLines","parseCTab","strId","parseRxn2000","lines","labelsListToIds","hdr","lst","parseAtomLineV3000","subsplit","spacebarsplit","atomListParams","matchNotListInfo","_matchNotListInfo","matchedSubstr","splitonce","ival","rgrsplit","attpnt","parseBondLineV3000","v3000parseCollection","v3000parseSGroup","stripV30","splitSGroupDef","parseBracedNumberList","ATOMS","PATOMS","BONDS","brkxyzStrs","BRKXYZ","brkxyz","MULT","LABEL","CONNECT","FIELDDISP","stripQuotes","FIELDDATA","FIELDNAME","QUERYTYPE","QUERYOP","ESTATE","parseCTabV3000","norgroups","vals","readRGroups3000","rfrags","rlsplit","rfrag","parseRxn3000","findCtabEnd","findRGroupEnd","molLinesReactants","molLinesProducts","molLinesAgents","rGroups","molLines","bracketEquality","firstSliceIndex","quoted","currentSymbol","closingBracketIndex","delim","braceBalance","loadRGroupFragments","parseMol","v2000","version","v3000","parseRxn","prepareForSaving","prepareSruForSaving","prepareSupForSaving","prepareDatForSaving","prepareGenForSaving","prepareQueryComponentForSaving","saveToMolfile","saveMulToMolfile","saveSruToMolfile","saveSupToMolfile","saveDatToMolfile","saveGenToMolfile","sgMap","bondMap","idstr","makeAtomBondLines","smtLine","bracketsToMolfile","sgroupName","sdtLine","padEnd","sddLine","nCharnCharsToDisplay","normalizeNewlines","charsPerLine","chars","prefix","rem","salLine","nlRe","END_V2000","Molfile","molfile","reaction","bondMapping","parseCTFile","molfileLines","prepareSGroups","skipErrors","preserveIndigoDesc","_this$molecule","toRemove","errorIgnore","getCTab","writeCTab2000","saveMolecule","skipSGroupErrors","all","saver","submol","writePaddedNumber","writeHeader","date","writeCR","writeWhiteSpace","write","getMonth","getDate","getFullYear","getHours","getMinutes","repeat","writePadded","writePaddedFloat","writeCTab2000Header","isAbsFlag","atomsProps","writeAtom","writeBond","writeAtomProps","chargeList","isotopeList","radicalList","rglabelList","rglogicList","aplabelList","rbcountList","unsaturatedList","substcountList","writeAtomPropList","sgmap","sgmapback","sgorder","sGroupIdInCTab","writeSGroupAttachmentPointLine","expandedGroups","expandedGroupsLine","atomLabel","_this$mapping$attachm","DefaultOptions","parseCTFileParams","e1","e2","ignoreErrors","noRgroups","CisTrans","neighborsFunc","getNeighbors","PARITY","CIS","TRANS","each","getParity","idx","parity","getSubstituents","substituents","sameside","beg","neiBeg","neiEnd","normBeg","normEnd","prodBeg","prodEnd","samesides","iBeg","iEnd","iNeiBeg","iNeiEnd","sortSubstituents","h0","h1","h2","h3","swap","isGeomStereoBond","bondIdx","label1","label2","neiBegin","excludeBonds","ct","i1","i2","tmp","Dfs","atom_data","nComponentsInReactants","vertices","VertexDesc","edges","EdgeDesc","v_seq","dfs_state","parent_vertex","parent_edge","branches","opening_cycles","closing_cycle","SeqElem","vIdx","parVertex","parEdge","walk","vStack","cid","parentVertex","seqElem","atomD","neiIdx","edgeIdx","edgeClosingCycle","eIdx","numBranches","numOpeningCycles","Stereocenters","buildFromBonds","alleneMask","neiList","nei1nei","nei2nei","stereocenter","buildOneCenter","allowed_stereocenters","n_double_bonds","implicit_degree","atomIdx","implicitDegree","pyramid","edgeIds","lastAtomDir","nDoubleBonds","nPureHydrogens","neiAtom","edge_idx","nei_idx","rank","as","main1","main2","side1","side2","mainDir","getBondStereo","xyz1","xyz2","xyzzy","stereo0","stereo1","stereo2","nUp","nDown","xyz","centerIdx","u","eps","sine1","cosine1","sine2","cosine2","v3","isPyramidMappingRigid","rigid","Smiles","writtenAtoms","writtenComponents","_Atom","lowercase","branch_cnt","paren_written","h_count","isBondInRing","inLoop","allowedLowercase","bondsInLoops","hbids","touchedCistransbonds","markCisTrans","componentsAll","seqEl","vPrevIdx","openingCycles","stereocenters","sc","implicitHIdx","pyramidMapping","counter","cycleNumbers","firstComponent","writeCycleNumber","calcBondDirection","comma","writeRadicals","needBrackets","hydro","cis_trans","dbonds","ctbond_beg","ctbond_end","saved","aromFailBeg","aromFailEnd","updateSideBonds","subst","sidebonds","n3","n4","vprev","ntouched","marked","SmiSerializer","_content","DelimeterRegex","SdfSerializer","chunk","propChunks","pc","valueArr","sdfItems","_center","getTopRightPosition","getBottomLeftPosition","_this$getCornerPositi","_this$getCornerPositi2","_this$bitmap$match","base64Data","_getNodeWithInvertedY","imageSrc","newLeaveAtomId","IndigoShowHydrogenLabelsMode","getLabelRenderModeForIndigo","renderModeMapping","HETERO","TERMINAL_HETERO","ALL","OFF","pollDeferred","process","complete","timeGap","startTimeGap","reject","iterate","then","parametrizeUrl","url","request","headers","responseHandler","requestUrl","response","fetch","Accept","credentials","ok","indigoCall","baseUrl","customHeaders","pickStandardServerOptions","RemoteStructService","apiPath","getInChIKey","getStandardServerOptions","_info","indigoVersion","imagoVersions","isAvailable","indigo_version","imago_versions","_CoreEditor$provideEd","monomerLibrary","expandedOptions","clean","aromatize","dearomatize","calculateCip","automap","check","calculate","recognize","parVersion","req","status","upload_id","metadata","mol_str","generateImageAsBase64","resp","toggleExplicitHydrogens","RemoteStructServiceProvider","currentApiPath","URLSearchParams","createStructService","defaultTypes","defaultCalcProps","convertStructToString","Indigo","input_format","types","backgroundColor","ModeTypes","BlobTypes","allowedApiSettings","_formatterFactory","_editor","_eventBus","Ketcher","_indigo","EventEmitter","apiSetting","clientSetting","setSettings","hasOwn","setOptions","getSmiles","isExtended","_getMolfile","molfileFormat","formatPassed","containsReaction","getMolfile","getIdt","_CoreEditor$provideEd2","_getRxn","rxnfile","_args2","getRxn","getKet","_CoreEditor$provideEd3","_CoreEditor$provideEd4","_CoreEditor$provideEd5","_CoreEditor$provideEd6","_CoreEditor$provideEd7","_CoreEditor$provideEd8","getFasta","_CoreEditor$provideEd9","getSequence","_CoreEditor$provideEd10","getSmarts","getCml","getSdf","getRdf","getCDXml","getCDX","getInchi","withAuxInfo","_getInChIKey","isQueryStructureSelected","structure","hasQueryAtoms","sGroupIds","isQueryComponentSGroup","hasQueryBonds","_setMolecule","_callee5","_CoreEditor$provideEd11","_callee5$","_context5","zoomAccordingContent","centerStruct","eventBus","_setHelm","_callee7","helmStr","_callee7$","_context7","_callee6","_callee6$","_context6","setHelm","_addFragment","_callee9","_CoreEditor$provideEd12","_callee9$","_context9","_callee8","_callee8$","_context8","structToAddFragment","addFragment","_layout","_callee11","_callee11$","_context11","_callee10","_callee10$","_context10","_calculate","_callee12","_callee12$","_context12","exportImage","blobPart","getSvgFromDrawnStructures","margin","saveAs","_generateImage","_callee13","base64","_args13","_callee13$","_context13","generateImage","_x6","reinitializeIndigo","sendCustomAction","DefaultStructServiceOptions","_structServiceProvider","KetcherBuilder","withStructServiceProvider","structServiceProvider","serviceOptions","mergedServiceOptions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBO,IAAMA,YAAY,GAAqB;AAC5CC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,CAAC,EAAE,SAAS;AACZC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,EAAE,EAAE,SAAS;AACbC,EAAAA,E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"}